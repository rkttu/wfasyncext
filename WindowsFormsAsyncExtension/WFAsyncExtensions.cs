using System;
using System.Threading.Tasks;

namespace System.Windows.Forms
{
    public static partial class WFAsyncExtensions
    {
        private static readonly Action<System.Windows.Forms.Control> resetBindings1Internal = (c) => c.ResetBindings();
        public static void ResetBindings(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetBindings1Internal, __control__);
            else
                resetBindings1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> resetBindings1Callback = ResetBindings;
        public static IAsyncResult BeginResetBindings1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return resetBindings1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetBindings1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResetBindings1(result);
        }
        public static void EndResetBindings1(IAsyncResult result)
        {
            resetBindings1Callback.EndInvoke(result);
        }
        public static Task ResetBindingsAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginResetBindings1,
                (Action<IAsyncResult>)EndResetBindings1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size, System.Drawing.Size> getPreferredSize1Internal = (c, proposedSize) => c.GetPreferredSize(proposedSize);
        public static System.Drawing.Size GetPreferredSize(this System.Windows.Forms.Control __control__, System.Drawing.Size proposedSize)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Size)__control__.Invoke(getPreferredSize1Internal, __control__, proposedSize);
            else
                return getPreferredSize1Internal.Invoke(__control__, proposedSize);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size, System.Drawing.Size> getPreferredSize1Callback = GetPreferredSize;
        public static IAsyncResult BeginGetPreferredSize1(this System.Windows.Forms.Control __control__, System.Drawing.Size proposedSize, AsyncCallback callback, object state)
        {
            return getPreferredSize1Callback.BeginInvoke(__control__, proposedSize, callback, state);
        }
        public static System.Drawing.Size EndGetPreferredSize1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndGetPreferredSize1(result);
        }
        public static System.Drawing.Size EndGetPreferredSize1(IAsyncResult result)
        {
            return getPreferredSize1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetPreferredSizeAsync(this System.Windows.Forms.Control __control__, System.Drawing.Size proposedSize)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Size>(
                (Func<System.Windows.Forms.Control, System.Drawing.Size, AsyncCallback, object, IAsyncResult>)BeginGetPreferredSize1,
                (Func<IAsyncResult, System.Drawing.Size>)EndGetPreferredSize1,
                __control__, proposedSize, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> bringToFront1Internal = (c) => c.BringToFront();
        public static void BringToFront(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(bringToFront1Internal, __control__);
            else
                bringToFront1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> bringToFront1Callback = BringToFront;
        public static IAsyncResult BeginBringToFront1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return bringToFront1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndBringToFront1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndBringToFront1(result);
        }
        public static void EndBringToFront1(IAsyncResult result)
        {
            bringToFront1Callback.EndInvoke(result);
        }
        public static Task BringToFrontAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginBringToFront1,
                (Action<IAsyncResult>)EndBringToFront1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control, System.Boolean> contains1Internal = (c, ctl) => c.Contains(ctl);
        public static System.Boolean Contains(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control ctl)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(contains1Internal, __control__, ctl);
            else
                return contains1Internal.Invoke(__control__, ctl);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control, System.Boolean> contains1Callback = Contains;
        public static IAsyncResult BeginContains1(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control ctl, AsyncCallback callback, object state)
        {
            return contains1Callback.BeginInvoke(__control__, ctl, callback, state);
        }
        public static System.Boolean EndContains1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndContains1(result);
        }
        public static System.Boolean EndContains1(IAsyncResult result)
        {
            return contains1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ContainsAsync(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control ctl)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginContains1,
                (Func<IAsyncResult, System.Boolean>)EndContains1,
                __control__, ctl, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Graphics> createGraphics1Internal = (c) => c.CreateGraphics();
        public static System.Drawing.Graphics CreateGraphics(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Graphics)__control__.Invoke(createGraphics1Internal, __control__);
            else
                return createGraphics1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Graphics> createGraphics1Callback = CreateGraphics;
        public static IAsyncResult BeginCreateGraphics1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return createGraphics1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Drawing.Graphics EndCreateGraphics1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndCreateGraphics1(result);
        }
        public static System.Drawing.Graphics EndCreateGraphics1(IAsyncResult result)
        {
            return createGraphics1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Graphics> CreateGraphicsAsync(this System.Windows.Forms.Control __control__)
        {
            return Task<System.Drawing.Graphics>.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginCreateGraphics1,
                (Func<IAsyncResult, System.Drawing.Graphics>)EndCreateGraphics1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> createControl1Internal = (c) => c.CreateControl();
        public static void CreateControl(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(createControl1Internal, __control__);
            else
                createControl1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> createControl1Callback = CreateControl;
        public static IAsyncResult BeginCreateControl1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return createControl1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndCreateControl1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndCreateControl1(result);
        }
        public static void EndCreateControl1(IAsyncResult result)
        {
            createControl1Callback.EndInvoke(result);
        }
        public static Task CreateControlAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginCreateControl1,
                (Action<IAsyncResult>)EndCreateControl1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Object, System.Windows.Forms.DragDropEffects, System.Windows.Forms.DragDropEffects> doDragDrop1Internal = (c, data, allowedEffects) => c.DoDragDrop(data, allowedEffects);
        public static System.Windows.Forms.DragDropEffects DoDragDrop(this System.Windows.Forms.Control __control__, System.Object data, System.Windows.Forms.DragDropEffects allowedEffects)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DragDropEffects)__control__.Invoke(doDragDrop1Internal, __control__, data, allowedEffects);
            else
                return doDragDrop1Internal.Invoke(__control__, data, allowedEffects);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Object, System.Windows.Forms.DragDropEffects, System.Windows.Forms.DragDropEffects> doDragDrop1Callback = DoDragDrop;
        public static IAsyncResult BeginDoDragDrop1(this System.Windows.Forms.Control __control__, System.Object data, System.Windows.Forms.DragDropEffects allowedEffects, AsyncCallback callback, object state)
        {
            return doDragDrop1Callback.BeginInvoke(__control__, data, allowedEffects, callback, state);
        }
        public static System.Windows.Forms.DragDropEffects EndDoDragDrop1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndDoDragDrop1(result);
        }
        public static System.Windows.Forms.DragDropEffects EndDoDragDrop1(IAsyncResult result)
        {
            return doDragDrop1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DragDropEffects> DoDragDropAsync(this System.Windows.Forms.Control __control__, System.Object data, System.Windows.Forms.DragDropEffects allowedEffects)
        {
            return Task<System.Windows.Forms.DragDropEffects>.Factory.FromAsync<System.Windows.Forms.Control, System.Object, System.Windows.Forms.DragDropEffects>(
                (Func<System.Windows.Forms.Control, System.Object, System.Windows.Forms.DragDropEffects, AsyncCallback, object, IAsyncResult>)BeginDoDragDrop1,
                (Func<IAsyncResult, System.Windows.Forms.DragDropEffects>)EndDoDragDrop1,
                __control__, data, allowedEffects, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Bitmap, System.Drawing.Rectangle> drawToBitmap1Internal = (c, bitmap, targetBounds) => c.DrawToBitmap(bitmap, targetBounds);
        public static void DrawToBitmap(this System.Windows.Forms.Control __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(drawToBitmap1Internal, __control__, bitmap, targetBounds);
            else
                drawToBitmap1Internal.Invoke(__control__, bitmap, targetBounds);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Bitmap, System.Drawing.Rectangle> drawToBitmap1Callback = DrawToBitmap;
        public static IAsyncResult BeginDrawToBitmap1(this System.Windows.Forms.Control __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds, AsyncCallback callback, object state)
        {
            return drawToBitmap1Callback.BeginInvoke(__control__, bitmap, targetBounds, callback, state);
        }
        public static void EndDrawToBitmap1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndDrawToBitmap1(result);
        }
        public static void EndDrawToBitmap1(IAsyncResult result)
        {
            drawToBitmap1Callback.EndInvoke(result);
        }
        public static Task DrawToBitmapAsync(this System.Windows.Forms.Control __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Bitmap, System.Drawing.Rectangle>(
                (Func<System.Windows.Forms.Control, System.Drawing.Bitmap, System.Drawing.Rectangle, AsyncCallback, object, IAsyncResult>)BeginDrawToBitmap1,
                (Action<IAsyncResult>)EndDrawToBitmap1,
                __control__, bitmap, targetBounds, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Form> findForm1Internal = (c) => c.FindForm();
        public static System.Windows.Forms.Form FindForm(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.Form)__control__.Invoke(findForm1Internal, __control__);
            else
                return findForm1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Form> findForm1Callback = FindForm;
        public static IAsyncResult BeginFindForm1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return findForm1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Windows.Forms.Form EndFindForm1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndFindForm1(result);
        }
        public static System.Windows.Forms.Form EndFindForm1(IAsyncResult result)
        {
            return findForm1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Form> FindFormAsync(this System.Windows.Forms.Control __control__)
        {
            return Task<System.Windows.Forms.Form>.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginFindForm1,
                (Func<IAsyncResult, System.Windows.Forms.Form>)EndFindForm1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> focus1Internal = (c) => c.Focus();
        public static System.Boolean Focus(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(focus1Internal, __control__);
            else
                return focus1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> focus1Callback = Focus;
        public static IAsyncResult BeginFocus1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return focus1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndFocus1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndFocus1(result);
        }
        public static System.Boolean EndFocus1(IAsyncResult result)
        {
            return focus1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> FocusAsync(this System.Windows.Forms.Control __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginFocus1,
                (Func<IAsyncResult, System.Boolean>)EndFocus1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point, System.Windows.Forms.GetChildAtPointSkip, System.Windows.Forms.Control> getChildAtPoint1Internal = (c, pt, skipValue) => c.GetChildAtPoint(pt, skipValue);
        public static System.Windows.Forms.Control GetChildAtPoint(this System.Windows.Forms.Control __control__, System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.Control)__control__.Invoke(getChildAtPoint1Internal, __control__, pt, skipValue);
            else
                return getChildAtPoint1Internal.Invoke(__control__, pt, skipValue);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point, System.Windows.Forms.GetChildAtPointSkip, System.Windows.Forms.Control> getChildAtPoint1Callback = GetChildAtPoint;
        public static IAsyncResult BeginGetChildAtPoint1(this System.Windows.Forms.Control __control__, System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue, AsyncCallback callback, object state)
        {
            return getChildAtPoint1Callback.BeginInvoke(__control__, pt, skipValue, callback, state);
        }
        public static System.Windows.Forms.Control EndGetChildAtPoint1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndGetChildAtPoint1(result);
        }
        public static System.Windows.Forms.Control EndGetChildAtPoint1(IAsyncResult result)
        {
            return getChildAtPoint1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetChildAtPointAsync(this System.Windows.Forms.Control __control__, System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Point, System.Windows.Forms.GetChildAtPointSkip>(
                (Func<System.Windows.Forms.Control, System.Drawing.Point, System.Windows.Forms.GetChildAtPointSkip, AsyncCallback, object, IAsyncResult>)BeginGetChildAtPoint1,
                (Func<IAsyncResult, System.Windows.Forms.Control>)EndGetChildAtPoint1,
                __control__, pt, skipValue, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point, System.Windows.Forms.Control> getChildAtPoint2Internal = (c, pt) => c.GetChildAtPoint(pt);
        public static System.Windows.Forms.Control GetChildAtPoint(this System.Windows.Forms.Control __control__, System.Drawing.Point pt)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.Control)__control__.Invoke(getChildAtPoint2Internal, __control__, pt);
            else
                return getChildAtPoint2Internal.Invoke(__control__, pt);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point, System.Windows.Forms.Control> getChildAtPoint2Callback = GetChildAtPoint;
        public static IAsyncResult BeginGetChildAtPoint2(this System.Windows.Forms.Control __control__, System.Drawing.Point pt, AsyncCallback callback, object state)
        {
            return getChildAtPoint2Callback.BeginInvoke(__control__, pt, callback, state);
        }
        public static System.Windows.Forms.Control EndGetChildAtPoint2(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndGetChildAtPoint2(result);
        }
        public static System.Windows.Forms.Control EndGetChildAtPoint2(IAsyncResult result)
        {
            return getChildAtPoint2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetChildAtPointAsync(this System.Windows.Forms.Control __control__, System.Drawing.Point pt)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Point>(
                (Func<System.Windows.Forms.Control, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginGetChildAtPoint2,
                (Func<IAsyncResult, System.Windows.Forms.Control>)EndGetChildAtPoint2,
                __control__, pt, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.IContainerControl> getContainerControl1Internal = (c) => c.GetContainerControl();
        public static System.Windows.Forms.IContainerControl GetContainerControl(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.IContainerControl)__control__.Invoke(getContainerControl1Internal, __control__);
            else
                return getContainerControl1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.IContainerControl> getContainerControl1Callback = GetContainerControl;
        public static IAsyncResult BeginGetContainerControl1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return getContainerControl1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Windows.Forms.IContainerControl EndGetContainerControl1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndGetContainerControl1(result);
        }
        public static System.Windows.Forms.IContainerControl EndGetContainerControl1(IAsyncResult result)
        {
            return getContainerControl1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.IContainerControl> GetContainerControlAsync(this System.Windows.Forms.Control __control__)
        {
            return Task<System.Windows.Forms.IContainerControl>.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginGetContainerControl1,
                (Func<IAsyncResult, System.Windows.Forms.IContainerControl>)EndGetContainerControl1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control, System.Boolean, System.Windows.Forms.Control> getNextControl1Internal = (c, ctl, forward) => c.GetNextControl(ctl, forward);
        public static System.Windows.Forms.Control GetNextControl(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control ctl, System.Boolean forward)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.Control)__control__.Invoke(getNextControl1Internal, __control__, ctl, forward);
            else
                return getNextControl1Internal.Invoke(__control__, ctl, forward);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control, System.Boolean, System.Windows.Forms.Control> getNextControl1Callback = GetNextControl;
        public static IAsyncResult BeginGetNextControl1(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control ctl, System.Boolean forward, AsyncCallback callback, object state)
        {
            return getNextControl1Callback.BeginInvoke(__control__, ctl, forward, callback, state);
        }
        public static System.Windows.Forms.Control EndGetNextControl1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndGetNextControl1(result);
        }
        public static System.Windows.Forms.Control EndGetNextControl1(IAsyncResult result)
        {
            return getNextControl1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetNextControlAsync(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control ctl, System.Boolean forward)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.Control, System.Boolean>(
                (Func<System.Windows.Forms.Control, System.Windows.Forms.Control, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginGetNextControl1,
                (Func<IAsyncResult, System.Windows.Forms.Control>)EndGetNextControl1,
                __control__, ctl, forward, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> hide1Internal = (c) => c.Hide();
        public static void Hide(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(hide1Internal, __control__);
            else
                hide1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> hide1Callback = Hide;
        public static IAsyncResult BeginHide1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return hide1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndHide1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndHide1(result);
        }
        public static void EndHide1(IAsyncResult result)
        {
            hide1Callback.EndInvoke(result);
        }
        public static Task HideAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginHide1,
                (Action<IAsyncResult>)EndHide1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Region> invalidate1Internal = (c, region) => c.Invalidate(region);
        public static void Invalidate(this System.Windows.Forms.Control __control__, System.Drawing.Region region)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidate1Internal, __control__, region);
            else
                invalidate1Internal.Invoke(__control__, region);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Region> invalidate1Callback = Invalidate;
        public static IAsyncResult BeginInvalidate1(this System.Windows.Forms.Control __control__, System.Drawing.Region region, AsyncCallback callback, object state)
        {
            return invalidate1Callback.BeginInvoke(__control__, region, callback, state);
        }
        public static void EndInvalidate1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndInvalidate1(result);
        }
        public static void EndInvalidate1(IAsyncResult result)
        {
            invalidate1Callback.EndInvoke(result);
        }
        public static Task InvalidateAsync(this System.Windows.Forms.Control __control__, System.Drawing.Region region)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Region>(
                (Func<System.Windows.Forms.Control, System.Drawing.Region, AsyncCallback, object, IAsyncResult>)BeginInvalidate1,
                (Action<IAsyncResult>)EndInvalidate1,
                __control__, region, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Region, System.Boolean> invalidate2Internal = (c, region, invalidateChildren) => c.Invalidate(region, invalidateChildren);
        public static void Invalidate(this System.Windows.Forms.Control __control__, System.Drawing.Region region, System.Boolean invalidateChildren)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidate2Internal, __control__, region, invalidateChildren);
            else
                invalidate2Internal.Invoke(__control__, region, invalidateChildren);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Region, System.Boolean> invalidate2Callback = Invalidate;
        public static IAsyncResult BeginInvalidate2(this System.Windows.Forms.Control __control__, System.Drawing.Region region, System.Boolean invalidateChildren, AsyncCallback callback, object state)
        {
            return invalidate2Callback.BeginInvoke(__control__, region, invalidateChildren, callback, state);
        }
        public static void EndInvalidate2(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndInvalidate2(result);
        }
        public static void EndInvalidate2(IAsyncResult result)
        {
            invalidate2Callback.EndInvoke(result);
        }
        public static Task InvalidateAsync(this System.Windows.Forms.Control __control__, System.Drawing.Region region, System.Boolean invalidateChildren)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Region, System.Boolean>(
                (Func<System.Windows.Forms.Control, System.Drawing.Region, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginInvalidate2,
                (Action<IAsyncResult>)EndInvalidate2,
                __control__, region, invalidateChildren, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> invalidate3Internal = (c) => c.Invalidate();
        public static void Invalidate(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidate3Internal, __control__);
            else
                invalidate3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> invalidate3Callback = Invalidate;
        public static IAsyncResult BeginInvalidate3(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return invalidate3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndInvalidate3(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndInvalidate3(result);
        }
        public static void EndInvalidate3(IAsyncResult result)
        {
            invalidate3Callback.EndInvoke(result);
        }
        public static Task InvalidateAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginInvalidate3,
                (Action<IAsyncResult>)EndInvalidate3,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> invalidate4Internal = (c, invalidateChildren) => c.Invalidate(invalidateChildren);
        public static void Invalidate(this System.Windows.Forms.Control __control__, System.Boolean invalidateChildren)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidate4Internal, __control__, invalidateChildren);
            else
                invalidate4Internal.Invoke(__control__, invalidateChildren);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> invalidate4Callback = Invalidate;
        public static IAsyncResult BeginInvalidate4(this System.Windows.Forms.Control __control__, System.Boolean invalidateChildren, AsyncCallback callback, object state)
        {
            return invalidate4Callback.BeginInvoke(__control__, invalidateChildren, callback, state);
        }
        public static void EndInvalidate4(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndInvalidate4(result);
        }
        public static void EndInvalidate4(IAsyncResult result)
        {
            invalidate4Callback.EndInvoke(result);
        }
        public static Task InvalidateAsync(this System.Windows.Forms.Control __control__, System.Boolean invalidateChildren)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                (Func<System.Windows.Forms.Control, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginInvalidate4,
                (Action<IAsyncResult>)EndInvalidate4,
                __control__, invalidateChildren, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Rectangle> invalidate5Internal = (c, rc) => c.Invalidate(rc);
        public static void Invalidate(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle rc)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidate5Internal, __control__, rc);
            else
                invalidate5Internal.Invoke(__control__, rc);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Rectangle> invalidate5Callback = Invalidate;
        public static IAsyncResult BeginInvalidate5(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle rc, AsyncCallback callback, object state)
        {
            return invalidate5Callback.BeginInvoke(__control__, rc, callback, state);
        }
        public static void EndInvalidate5(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndInvalidate5(result);
        }
        public static void EndInvalidate5(IAsyncResult result)
        {
            invalidate5Callback.EndInvoke(result);
        }
        public static Task InvalidateAsync(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle rc)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Rectangle>(
                (Func<System.Windows.Forms.Control, System.Drawing.Rectangle, AsyncCallback, object, IAsyncResult>)BeginInvalidate5,
                (Action<IAsyncResult>)EndInvalidate5,
                __control__, rc, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Rectangle, System.Boolean> invalidate6Internal = (c, rc, invalidateChildren) => c.Invalidate(rc, invalidateChildren);
        public static void Invalidate(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle rc, System.Boolean invalidateChildren)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidate6Internal, __control__, rc, invalidateChildren);
            else
                invalidate6Internal.Invoke(__control__, rc, invalidateChildren);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Rectangle, System.Boolean> invalidate6Callback = Invalidate;
        public static IAsyncResult BeginInvalidate6(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle rc, System.Boolean invalidateChildren, AsyncCallback callback, object state)
        {
            return invalidate6Callback.BeginInvoke(__control__, rc, invalidateChildren, callback, state);
        }
        public static void EndInvalidate6(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndInvalidate6(result);
        }
        public static void EndInvalidate6(IAsyncResult result)
        {
            invalidate6Callback.EndInvoke(result);
        }
        public static Task InvalidateAsync(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle rc, System.Boolean invalidateChildren)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Rectangle, System.Boolean>(
                (Func<System.Windows.Forms.Control, System.Drawing.Rectangle, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginInvalidate6,
                (Action<IAsyncResult>)EndInvalidate6,
                __control__, rc, invalidateChildren, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Delegate, System.Object> invoke1Internal = (c, method) => c.Invoke(method);
        public static System.Object Invoke(this System.Windows.Forms.Control __control__, System.Delegate method)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Object)__control__.Invoke(invoke1Internal, __control__, method);
            else
                return invoke1Internal.Invoke(__control__, method);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Delegate, System.Object> invoke1Callback = Invoke;
        public static IAsyncResult BeginInvoke1(this System.Windows.Forms.Control __control__, System.Delegate method, AsyncCallback callback, object state)
        {
            return invoke1Callback.BeginInvoke(__control__, method, callback, state);
        }
        public static System.Object EndInvoke1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndInvoke1(result);
        }
        public static System.Object EndInvoke1(IAsyncResult result)
        {
            return invoke1Callback.EndInvoke(result);
        }
        public static Task<System.Object> InvokeAsync(this System.Windows.Forms.Control __control__, System.Delegate method)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.Control, System.Delegate>(
                (Func<System.Windows.Forms.Control, System.Delegate, AsyncCallback, object, IAsyncResult>)BeginInvoke1,
                (Func<IAsyncResult, System.Object>)EndInvoke1,
                __control__, method, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Delegate, System.Object[], System.Object> invoke2Internal = (c, method, args) => c.Invoke(method, args);
        public static System.Object Invoke(this System.Windows.Forms.Control __control__, System.Delegate method, System.Object[] args)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Object)__control__.Invoke(invoke2Internal, __control__, method, args);
            else
                return invoke2Internal.Invoke(__control__, method, args);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Delegate, System.Object[], System.Object> invoke2Callback = Invoke;
        public static IAsyncResult BeginInvoke2(this System.Windows.Forms.Control __control__, System.Delegate method, System.Object[] args, AsyncCallback callback, object state)
        {
            return invoke2Callback.BeginInvoke(__control__, method, args, callback, state);
        }
        public static System.Object EndInvoke2(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndInvoke2(result);
        }
        public static System.Object EndInvoke2(IAsyncResult result)
        {
            return invoke2Callback.EndInvoke(result);
        }
        public static Task<System.Object> InvokeAsync(this System.Windows.Forms.Control __control__, System.Delegate method, System.Object[] args)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.Control, System.Delegate, System.Object[]>(
                (Func<System.Windows.Forms.Control, System.Delegate, System.Object[], AsyncCallback, object, IAsyncResult>)BeginInvoke2,
                (Func<IAsyncResult, System.Object>)EndInvoke2,
                __control__, method, args, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> performLayout1Internal = (c) => c.PerformLayout();
        public static void PerformLayout(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(performLayout1Internal, __control__);
            else
                performLayout1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> performLayout1Callback = PerformLayout;
        public static IAsyncResult BeginPerformLayout1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return performLayout1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndPerformLayout1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndPerformLayout1(result);
        }
        public static void EndPerformLayout1(IAsyncResult result)
        {
            performLayout1Callback.EndInvoke(result);
        }
        public static Task PerformLayoutAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginPerformLayout1,
                (Action<IAsyncResult>)EndPerformLayout1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Control, System.String> performLayout2Internal = (c, affectedControl, affectedProperty) => c.PerformLayout(affectedControl, affectedProperty);
        public static void PerformLayout(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control affectedControl, System.String affectedProperty)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(performLayout2Internal, __control__, affectedControl, affectedProperty);
            else
                performLayout2Internal.Invoke(__control__, affectedControl, affectedProperty);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Control, System.String> performLayout2Callback = PerformLayout;
        public static IAsyncResult BeginPerformLayout2(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control affectedControl, System.String affectedProperty, AsyncCallback callback, object state)
        {
            return performLayout2Callback.BeginInvoke(__control__, affectedControl, affectedProperty, callback, state);
        }
        public static void EndPerformLayout2(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndPerformLayout2(result);
        }
        public static void EndPerformLayout2(IAsyncResult result)
        {
            performLayout2Callback.EndInvoke(result);
        }
        public static Task PerformLayoutAsync(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control affectedControl, System.String affectedProperty)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.Control, System.String>(
                (Func<System.Windows.Forms.Control, System.Windows.Forms.Control, System.String, AsyncCallback, object, IAsyncResult>)BeginPerformLayout2,
                (Action<IAsyncResult>)EndPerformLayout2,
                __control__, affectedControl, affectedProperty, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point, System.Drawing.Point> pointToClient1Internal = (c, p) => c.PointToClient(p);
        public static System.Drawing.Point PointToClient(this System.Windows.Forms.Control __control__, System.Drawing.Point p)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Point)__control__.Invoke(pointToClient1Internal, __control__, p);
            else
                return pointToClient1Internal.Invoke(__control__, p);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point, System.Drawing.Point> pointToClient1Callback = PointToClient;
        public static IAsyncResult BeginPointToClient1(this System.Windows.Forms.Control __control__, System.Drawing.Point p, AsyncCallback callback, object state)
        {
            return pointToClient1Callback.BeginInvoke(__control__, p, callback, state);
        }
        public static System.Drawing.Point EndPointToClient1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndPointToClient1(result);
        }
        public static System.Drawing.Point EndPointToClient1(IAsyncResult result)
        {
            return pointToClient1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> PointToClientAsync(this System.Windows.Forms.Control __control__, System.Drawing.Point p)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Point>(
                (Func<System.Windows.Forms.Control, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginPointToClient1,
                (Func<IAsyncResult, System.Drawing.Point>)EndPointToClient1,
                __control__, p, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point, System.Drawing.Point> pointToScreen1Internal = (c, p) => c.PointToScreen(p);
        public static System.Drawing.Point PointToScreen(this System.Windows.Forms.Control __control__, System.Drawing.Point p)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Point)__control__.Invoke(pointToScreen1Internal, __control__, p);
            else
                return pointToScreen1Internal.Invoke(__control__, p);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point, System.Drawing.Point> pointToScreen1Callback = PointToScreen;
        public static IAsyncResult BeginPointToScreen1(this System.Windows.Forms.Control __control__, System.Drawing.Point p, AsyncCallback callback, object state)
        {
            return pointToScreen1Callback.BeginInvoke(__control__, p, callback, state);
        }
        public static System.Drawing.Point EndPointToScreen1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndPointToScreen1(result);
        }
        public static System.Drawing.Point EndPointToScreen1(IAsyncResult result)
        {
            return pointToScreen1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> PointToScreenAsync(this System.Windows.Forms.Control __control__, System.Drawing.Point p)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Point>(
                (Func<System.Windows.Forms.Control, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginPointToScreen1,
                (Func<IAsyncResult, System.Drawing.Point>)EndPointToScreen1,
                __control__, p, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> resetBackColor1Internal = (c) => c.ResetBackColor();
        public static void ResetBackColor(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetBackColor1Internal, __control__);
            else
                resetBackColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> resetBackColor1Callback = ResetBackColor;
        public static IAsyncResult BeginResetBackColor1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return resetBackColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetBackColor1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResetBackColor1(result);
        }
        public static void EndResetBackColor1(IAsyncResult result)
        {
            resetBackColor1Callback.EndInvoke(result);
        }
        public static Task ResetBackColorAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginResetBackColor1,
                (Action<IAsyncResult>)EndResetBackColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> resetCursor1Internal = (c) => c.ResetCursor();
        public static void ResetCursor(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetCursor1Internal, __control__);
            else
                resetCursor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> resetCursor1Callback = ResetCursor;
        public static IAsyncResult BeginResetCursor1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return resetCursor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetCursor1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResetCursor1(result);
        }
        public static void EndResetCursor1(IAsyncResult result)
        {
            resetCursor1Callback.EndInvoke(result);
        }
        public static Task ResetCursorAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginResetCursor1,
                (Action<IAsyncResult>)EndResetCursor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> resetFont1Internal = (c) => c.ResetFont();
        public static void ResetFont(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetFont1Internal, __control__);
            else
                resetFont1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> resetFont1Callback = ResetFont;
        public static IAsyncResult BeginResetFont1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return resetFont1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetFont1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResetFont1(result);
        }
        public static void EndResetFont1(IAsyncResult result)
        {
            resetFont1Callback.EndInvoke(result);
        }
        public static Task ResetFontAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginResetFont1,
                (Action<IAsyncResult>)EndResetFont1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> resetForeColor1Internal = (c) => c.ResetForeColor();
        public static void ResetForeColor(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetForeColor1Internal, __control__);
            else
                resetForeColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> resetForeColor1Callback = ResetForeColor;
        public static IAsyncResult BeginResetForeColor1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return resetForeColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetForeColor1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResetForeColor1(result);
        }
        public static void EndResetForeColor1(IAsyncResult result)
        {
            resetForeColor1Callback.EndInvoke(result);
        }
        public static Task ResetForeColorAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginResetForeColor1,
                (Action<IAsyncResult>)EndResetForeColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> resetRightToLeft1Internal = (c) => c.ResetRightToLeft();
        public static void ResetRightToLeft(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetRightToLeft1Internal, __control__);
            else
                resetRightToLeft1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> resetRightToLeft1Callback = ResetRightToLeft;
        public static IAsyncResult BeginResetRightToLeft1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return resetRightToLeft1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetRightToLeft1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResetRightToLeft1(result);
        }
        public static void EndResetRightToLeft1(IAsyncResult result)
        {
            resetRightToLeft1Callback.EndInvoke(result);
        }
        public static Task ResetRightToLeftAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginResetRightToLeft1,
                (Action<IAsyncResult>)EndResetRightToLeft1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle, System.Drawing.Rectangle> rectangleToClient1Internal = (c, r) => c.RectangleToClient(r);
        public static System.Drawing.Rectangle RectangleToClient(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle r)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(rectangleToClient1Internal, __control__, r);
            else
                return rectangleToClient1Internal.Invoke(__control__, r);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle, System.Drawing.Rectangle> rectangleToClient1Callback = RectangleToClient;
        public static IAsyncResult BeginRectangleToClient1(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle r, AsyncCallback callback, object state)
        {
            return rectangleToClient1Callback.BeginInvoke(__control__, r, callback, state);
        }
        public static System.Drawing.Rectangle EndRectangleToClient1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndRectangleToClient1(result);
        }
        public static System.Drawing.Rectangle EndRectangleToClient1(IAsyncResult result)
        {
            return rectangleToClient1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> RectangleToClientAsync(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle r)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Rectangle>(
                (Func<System.Windows.Forms.Control, System.Drawing.Rectangle, AsyncCallback, object, IAsyncResult>)BeginRectangleToClient1,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndRectangleToClient1,
                __control__, r, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle, System.Drawing.Rectangle> rectangleToScreen1Internal = (c, r) => c.RectangleToScreen(r);
        public static System.Drawing.Rectangle RectangleToScreen(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle r)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(rectangleToScreen1Internal, __control__, r);
            else
                return rectangleToScreen1Internal.Invoke(__control__, r);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle, System.Drawing.Rectangle> rectangleToScreen1Callback = RectangleToScreen;
        public static IAsyncResult BeginRectangleToScreen1(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle r, AsyncCallback callback, object state)
        {
            return rectangleToScreen1Callback.BeginInvoke(__control__, r, callback, state);
        }
        public static System.Drawing.Rectangle EndRectangleToScreen1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndRectangleToScreen1(result);
        }
        public static System.Drawing.Rectangle EndRectangleToScreen1(IAsyncResult result)
        {
            return rectangleToScreen1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> RectangleToScreenAsync(this System.Windows.Forms.Control __control__, System.Drawing.Rectangle r)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Rectangle>(
                (Func<System.Windows.Forms.Control, System.Drawing.Rectangle, AsyncCallback, object, IAsyncResult>)BeginRectangleToScreen1,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndRectangleToScreen1,
                __control__, r, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> refresh1Internal = (c) => c.Refresh();
        public static void Refresh(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(refresh1Internal, __control__);
            else
                refresh1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> refresh1Callback = Refresh;
        public static IAsyncResult BeginRefresh1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return refresh1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndRefresh1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndRefresh1(result);
        }
        public static void EndRefresh1(IAsyncResult result)
        {
            refresh1Callback.EndInvoke(result);
        }
        public static Task RefreshAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginRefresh1,
                (Action<IAsyncResult>)EndRefresh1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> resetText1Internal = (c) => c.ResetText();
        public static void ResetText(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetText1Internal, __control__);
            else
                resetText1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> resetText1Callback = ResetText;
        public static IAsyncResult BeginResetText1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return resetText1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetText1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResetText1(result);
        }
        public static void EndResetText1(IAsyncResult result)
        {
            resetText1Callback.EndInvoke(result);
        }
        public static Task ResetTextAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginResetText1,
                (Action<IAsyncResult>)EndResetText1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> resumeLayout1Internal = (c) => c.ResumeLayout();
        public static void ResumeLayout(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resumeLayout1Internal, __control__);
            else
                resumeLayout1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> resumeLayout1Callback = ResumeLayout;
        public static IAsyncResult BeginResumeLayout1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return resumeLayout1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResumeLayout1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResumeLayout1(result);
        }
        public static void EndResumeLayout1(IAsyncResult result)
        {
            resumeLayout1Callback.EndInvoke(result);
        }
        public static Task ResumeLayoutAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginResumeLayout1,
                (Action<IAsyncResult>)EndResumeLayout1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> resumeLayout2Internal = (c, performLayout) => c.ResumeLayout(performLayout);
        public static void ResumeLayout(this System.Windows.Forms.Control __control__, System.Boolean performLayout)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resumeLayout2Internal, __control__, performLayout);
            else
                resumeLayout2Internal.Invoke(__control__, performLayout);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> resumeLayout2Callback = ResumeLayout;
        public static IAsyncResult BeginResumeLayout2(this System.Windows.Forms.Control __control__, System.Boolean performLayout, AsyncCallback callback, object state)
        {
            return resumeLayout2Callback.BeginInvoke(__control__, performLayout, callback, state);
        }
        public static void EndResumeLayout2(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResumeLayout2(result);
        }
        public static void EndResumeLayout2(IAsyncResult result)
        {
            resumeLayout2Callback.EndInvoke(result);
        }
        public static Task ResumeLayoutAsync(this System.Windows.Forms.Control __control__, System.Boolean performLayout)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                (Func<System.Windows.Forms.Control, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginResumeLayout2,
                (Action<IAsyncResult>)EndResumeLayout2,
                __control__, performLayout, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.SizeF> scale1Internal = (c, factor) => c.Scale(factor);
        public static void Scale(this System.Windows.Forms.Control __control__, System.Drawing.SizeF factor)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(scale1Internal, __control__, factor);
            else
                scale1Internal.Invoke(__control__, factor);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.SizeF> scale1Callback = Scale;
        public static IAsyncResult BeginScale1(this System.Windows.Forms.Control __control__, System.Drawing.SizeF factor, AsyncCallback callback, object state)
        {
            return scale1Callback.BeginInvoke(__control__, factor, callback, state);
        }
        public static void EndScale1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndScale1(result);
        }
        public static void EndScale1(IAsyncResult result)
        {
            scale1Callback.EndInvoke(result);
        }
        public static Task ScaleAsync(this System.Windows.Forms.Control __control__, System.Drawing.SizeF factor)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.SizeF>(
                (Func<System.Windows.Forms.Control, System.Drawing.SizeF, AsyncCallback, object, IAsyncResult>)BeginScale1,
                (Action<IAsyncResult>)EndScale1,
                __control__, factor, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> select1Internal = (c) => c.Select();
        public static void Select(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(select1Internal, __control__);
            else
                select1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> select1Callback = Select;
        public static IAsyncResult BeginSelect1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return select1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndSelect1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndSelect1(result);
        }
        public static void EndSelect1(IAsyncResult result)
        {
            select1Callback.EndInvoke(result);
        }
        public static Task SelectAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginSelect1,
                (Action<IAsyncResult>)EndSelect1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean> selectNextControl1Internal = (c, ctl, forward, tabStopOnly, nested, wrap) => c.SelectNextControl(ctl, forward, tabStopOnly, nested, wrap);
        public static System.Boolean SelectNextControl(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control ctl, System.Boolean forward, System.Boolean tabStopOnly, System.Boolean nested, System.Boolean wrap)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(selectNextControl1Internal, __control__, ctl, forward, tabStopOnly, nested, wrap);
            else
                return selectNextControl1Internal.Invoke(__control__, ctl, forward, tabStopOnly, nested, wrap);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean> selectNextControl1Callback = SelectNextControl;
        public static IAsyncResult BeginSelectNextControl1(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control ctl, System.Boolean forward, System.Boolean tabStopOnly, System.Boolean nested, System.Boolean wrap, AsyncCallback callback, object state)
        {
            return selectNextControl1Callback.BeginInvoke(__control__, ctl, forward, tabStopOnly, nested, wrap, callback, state);
        }
        public static System.Boolean EndSelectNextControl1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            return EndSelectNextControl1(result);
        }
        public static System.Boolean EndSelectNextControl1(IAsyncResult result)
        {
            return selectNextControl1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> SelectNextControlAsync(this System.Windows.Forms.Control __control__, System.Windows.Forms.Control ctl, System.Boolean forward, System.Boolean tabStopOnly, System.Boolean nested, System.Boolean wrap)
        {
            return Task<System.Boolean>.Factory.FromAsync(
                BeginSelectNextControl1(__control__, ctl, forward, tabStopOnly, nested, wrap, null, null),
                (Func<IAsyncResult, System.Boolean>)EndSelectNextControl1);
        }

        private static readonly Action<System.Windows.Forms.Control> sendToBack1Internal = (c) => c.SendToBack();
        public static void SendToBack(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(sendToBack1Internal, __control__);
            else
                sendToBack1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> sendToBack1Callback = SendToBack;
        public static IAsyncResult BeginSendToBack1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return sendToBack1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndSendToBack1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndSendToBack1(result);
        }
        public static void EndSendToBack1(IAsyncResult result)
        {
            sendToBack1Callback.EndInvoke(result);
        }
        public static Task SendToBackAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginSendToBack1,
                (Action<IAsyncResult>)EndSendToBack1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Int32, System.Int32, System.Int32, System.Int32> setBounds1Internal = (c, x, y, width, height) => c.SetBounds(x, y, width, height);
        public static void SetBounds(this System.Windows.Forms.Control __control__, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setBounds1Internal, __control__, x, y, width, height);
            else
                setBounds1Internal.Invoke(__control__, x, y, width, height);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Int32, System.Int32, System.Int32, System.Int32> setBounds1Callback = SetBounds;
        public static IAsyncResult BeginSetBounds1(this System.Windows.Forms.Control __control__, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, AsyncCallback callback, object state)
        {
            return setBounds1Callback.BeginInvoke(__control__, x, y, width, height, callback, state);
        }
        public static void EndSetBounds1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndSetBounds1(result);
        }
        public static void EndSetBounds1(IAsyncResult result)
        {
            setBounds1Callback.EndInvoke(result);
        }
        public static Task SetBoundsAsync(this System.Windows.Forms.Control __control__, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)
        {
            return Task.Factory.FromAsync(
                BeginSetBounds1(__control__, x, y, width, height, null, null),
                (Action<IAsyncResult>)EndSetBounds1);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Int32, System.Int32, System.Int32, System.Int32, System.Windows.Forms.BoundsSpecified> setBounds2Internal = (c, x, y, width, height, specified) => c.SetBounds(x, y, width, height, specified);
        public static void SetBounds(this System.Windows.Forms.Control __control__, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, System.Windows.Forms.BoundsSpecified specified)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setBounds2Internal, __control__, x, y, width, height, specified);
            else
                setBounds2Internal.Invoke(__control__, x, y, width, height, specified);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Int32, System.Int32, System.Int32, System.Int32, System.Windows.Forms.BoundsSpecified> setBounds2Callback = SetBounds;
        public static IAsyncResult BeginSetBounds2(this System.Windows.Forms.Control __control__, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, System.Windows.Forms.BoundsSpecified specified, AsyncCallback callback, object state)
        {
            return setBounds2Callback.BeginInvoke(__control__, x, y, width, height, specified, callback, state);
        }
        public static void EndSetBounds2(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndSetBounds2(result);
        }
        public static void EndSetBounds2(IAsyncResult result)
        {
            setBounds2Callback.EndInvoke(result);
        }
        public static Task SetBoundsAsync(this System.Windows.Forms.Control __control__, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, System.Windows.Forms.BoundsSpecified specified)
        {
            return Task.Factory.FromAsync(
                BeginSetBounds2(__control__, x, y, width, height, specified, null, null),
                (Action<IAsyncResult>)EndSetBounds2);
        }

        private static readonly Action<System.Windows.Forms.Control> show1Internal = (c) => c.Show();
        public static void Show(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(show1Internal, __control__);
            else
                show1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> show1Callback = Show;
        public static IAsyncResult BeginShow1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return show1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShow1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndShow1(result);
        }
        public static void EndShow1(IAsyncResult result)
        {
            show1Callback.EndInvoke(result);
        }
        public static Task ShowAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginShow1,
                (Action<IAsyncResult>)EndShow1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> suspendLayout1Internal = (c) => c.SuspendLayout();
        public static void SuspendLayout(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(suspendLayout1Internal, __control__);
            else
                suspendLayout1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> suspendLayout1Callback = SuspendLayout;
        public static IAsyncResult BeginSuspendLayout1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return suspendLayout1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndSuspendLayout1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndSuspendLayout1(result);
        }
        public static void EndSuspendLayout1(IAsyncResult result)
        {
            suspendLayout1Callback.EndInvoke(result);
        }
        public static Task SuspendLayoutAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginSuspendLayout1,
                (Action<IAsyncResult>)EndSuspendLayout1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> update1Internal = (c) => c.Update();
        public static void Update(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(update1Internal, __control__);
            else
                update1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> update1Callback = Update;
        public static IAsyncResult BeginUpdate1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return update1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndUpdate1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndUpdate1(result);
        }
        public static void EndUpdate1(IAsyncResult result)
        {
            update1Callback.EndInvoke(result);
        }
        public static Task UpdateAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginUpdate1,
                (Action<IAsyncResult>)EndUpdate1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Control> resetImeMode1Internal = (c) => c.ResetImeMode();
        public static void ResetImeMode(this System.Windows.Forms.Control __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetImeMode1Internal, __control__);
            else
                resetImeMode1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Control> resetImeMode1Callback = ResetImeMode;
        public static IAsyncResult BeginResetImeMode1(this System.Windows.Forms.Control __control__, AsyncCallback callback, object state)
        {
            return resetImeMode1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetImeMode1(this System.Windows.Forms.Control __control__, IAsyncResult result)
        {
            EndResetImeMode1(result);
        }
        public static void EndResetImeMode1(IAsyncResult result)
        {
            resetImeMode1Callback.EndInvoke(result);
        }
        public static Task ResetImeModeAsync(this System.Windows.Forms.Control __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginResetImeMode1,
                (Action<IAsyncResult>)EndResetImeMode1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.AccessibleObject> getAccessibilityObjectInternal = (x) => x.AccessibilityObject;
        public static System.Windows.Forms.AccessibleObject GetAccessibilityObject(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AccessibleObject)target.Invoke(getAccessibilityObjectInternal, target);
            else
                return getAccessibilityObjectInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.AccessibleObject> getAccessibilityObjectCallback = GetAccessibilityObject;
        public static IAsyncResult BeginGetAccessibilityObject(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getAccessibilityObjectCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AccessibleObject EndGetAccessibilityObject(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetAccessibilityObject(result);
        }
        public static System.Windows.Forms.AccessibleObject EndGetAccessibilityObject(IAsyncResult result)
        {
            return getAccessibilityObjectCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AccessibleObject> GetAccessibilityObjectAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.AccessibleObject>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetAccessibilityObject,
                EndGetAccessibilityObject,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.String> getAccessibleDefaultActionDescriptionInternal = (x) => x.AccessibleDefaultActionDescription;
        public static System.String GetAccessibleDefaultActionDescription(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getAccessibleDefaultActionDescriptionInternal, target);
            else
                return getAccessibleDefaultActionDescriptionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.String> getAccessibleDefaultActionDescriptionCallback = GetAccessibleDefaultActionDescription;
        public static IAsyncResult BeginGetAccessibleDefaultActionDescription(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getAccessibleDefaultActionDescriptionCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetAccessibleDefaultActionDescription(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetAccessibleDefaultActionDescription(result);
        }
        public static System.String EndGetAccessibleDefaultActionDescription(IAsyncResult result)
        {
            return getAccessibleDefaultActionDescriptionCallback.EndInvoke(result);
        }
        public static Task<System.String> GetAccessibleDefaultActionDescriptionAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetAccessibleDefaultActionDescription,
                EndGetAccessibleDefaultActionDescription,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.String> setAccessibleDefaultActionDescriptionInternal = (x, v) => x.AccessibleDefaultActionDescription = v;
        public static void SetAccessibleDefaultActionDescription(this System.Windows.Forms.Control target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAccessibleDefaultActionDescriptionInternal, target, value);
            else
                setAccessibleDefaultActionDescriptionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.String> setAccessibleDefaultActionDescriptionCallback = SetAccessibleDefaultActionDescription;
        public static IAsyncResult BeginSetAccessibleDefaultActionDescription(this System.Windows.Forms.Control target, System.String value, AsyncCallback callback, object state)
        {
            return setAccessibleDefaultActionDescriptionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAccessibleDefaultActionDescription(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetAccessibleDefaultActionDescription(result);
        }
        public static void EndSetAccessibleDefaultActionDescription(IAsyncResult result)
        {
            setAccessibleDefaultActionDescriptionCallback.EndInvoke(result);
        }
        public static Task SetAccessibleDefaultActionDescriptionAsync(this System.Windows.Forms.Control target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.String>(
                BeginSetAccessibleDefaultActionDescription,
                EndSetAccessibleDefaultActionDescription,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.String> getAccessibleDescriptionInternal = (x) => x.AccessibleDescription;
        public static System.String GetAccessibleDescription(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getAccessibleDescriptionInternal, target);
            else
                return getAccessibleDescriptionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.String> getAccessibleDescriptionCallback = GetAccessibleDescription;
        public static IAsyncResult BeginGetAccessibleDescription(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getAccessibleDescriptionCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetAccessibleDescription(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetAccessibleDescription(result);
        }
        public static System.String EndGetAccessibleDescription(IAsyncResult result)
        {
            return getAccessibleDescriptionCallback.EndInvoke(result);
        }
        public static Task<System.String> GetAccessibleDescriptionAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetAccessibleDescription,
                EndGetAccessibleDescription,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.String> setAccessibleDescriptionInternal = (x, v) => x.AccessibleDescription = v;
        public static void SetAccessibleDescription(this System.Windows.Forms.Control target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAccessibleDescriptionInternal, target, value);
            else
                setAccessibleDescriptionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.String> setAccessibleDescriptionCallback = SetAccessibleDescription;
        public static IAsyncResult BeginSetAccessibleDescription(this System.Windows.Forms.Control target, System.String value, AsyncCallback callback, object state)
        {
            return setAccessibleDescriptionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAccessibleDescription(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetAccessibleDescription(result);
        }
        public static void EndSetAccessibleDescription(IAsyncResult result)
        {
            setAccessibleDescriptionCallback.EndInvoke(result);
        }
        public static Task SetAccessibleDescriptionAsync(this System.Windows.Forms.Control target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.String>(
                BeginSetAccessibleDescription,
                EndSetAccessibleDescription,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.String> getAccessibleNameInternal = (x) => x.AccessibleName;
        public static System.String GetAccessibleName(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getAccessibleNameInternal, target);
            else
                return getAccessibleNameInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.String> getAccessibleNameCallback = GetAccessibleName;
        public static IAsyncResult BeginGetAccessibleName(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getAccessibleNameCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetAccessibleName(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetAccessibleName(result);
        }
        public static System.String EndGetAccessibleName(IAsyncResult result)
        {
            return getAccessibleNameCallback.EndInvoke(result);
        }
        public static Task<System.String> GetAccessibleNameAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetAccessibleName,
                EndGetAccessibleName,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.String> setAccessibleNameInternal = (x, v) => x.AccessibleName = v;
        public static void SetAccessibleName(this System.Windows.Forms.Control target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAccessibleNameInternal, target, value);
            else
                setAccessibleNameInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.String> setAccessibleNameCallback = SetAccessibleName;
        public static IAsyncResult BeginSetAccessibleName(this System.Windows.Forms.Control target, System.String value, AsyncCallback callback, object state)
        {
            return setAccessibleNameCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAccessibleName(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetAccessibleName(result);
        }
        public static void EndSetAccessibleName(IAsyncResult result)
        {
            setAccessibleNameCallback.EndInvoke(result);
        }
        public static Task SetAccessibleNameAsync(this System.Windows.Forms.Control target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.String>(
                BeginSetAccessibleName,
                EndSetAccessibleName,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.AccessibleRole> getAccessibleRoleInternal = (x) => x.AccessibleRole;
        public static System.Windows.Forms.AccessibleRole GetAccessibleRole(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AccessibleRole)target.Invoke(getAccessibleRoleInternal, target);
            else
                return getAccessibleRoleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.AccessibleRole> getAccessibleRoleCallback = GetAccessibleRole;
        public static IAsyncResult BeginGetAccessibleRole(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getAccessibleRoleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AccessibleRole EndGetAccessibleRole(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetAccessibleRole(result);
        }
        public static System.Windows.Forms.AccessibleRole EndGetAccessibleRole(IAsyncResult result)
        {
            return getAccessibleRoleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AccessibleRole> GetAccessibleRoleAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.AccessibleRole>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetAccessibleRole,
                EndGetAccessibleRole,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.AccessibleRole> setAccessibleRoleInternal = (x, v) => x.AccessibleRole = v;
        public static void SetAccessibleRole(this System.Windows.Forms.Control target, System.Windows.Forms.AccessibleRole value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAccessibleRoleInternal, target, value);
            else
                setAccessibleRoleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.AccessibleRole> setAccessibleRoleCallback = SetAccessibleRole;
        public static IAsyncResult BeginSetAccessibleRole(this System.Windows.Forms.Control target, System.Windows.Forms.AccessibleRole value, AsyncCallback callback, object state)
        {
            return setAccessibleRoleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAccessibleRole(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetAccessibleRole(result);
        }
        public static void EndSetAccessibleRole(IAsyncResult result)
        {
            setAccessibleRoleCallback.EndInvoke(result);
        }
        public static Task SetAccessibleRoleAsync(this System.Windows.Forms.Control target, System.Windows.Forms.AccessibleRole value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.AccessibleRole>(
                BeginSetAccessibleRole,
                EndSetAccessibleRole,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getAllowDropInternal = (x) => x.AllowDrop;
        public static System.Boolean GetAllowDrop(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowDropInternal, target);
            else
                return getAllowDropInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getAllowDropCallback = GetAllowDrop;
        public static IAsyncResult BeginGetAllowDrop(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getAllowDropCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowDrop(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetAllowDrop(result);
        }
        public static System.Boolean EndGetAllowDrop(IAsyncResult result)
        {
            return getAllowDropCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowDropAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetAllowDrop,
                EndGetAllowDrop,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setAllowDropInternal = (x, v) => x.AllowDrop = v;
        public static void SetAllowDrop(this System.Windows.Forms.Control target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowDropInternal, target, value);
            else
                setAllowDropInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setAllowDropCallback = SetAllowDrop;
        public static IAsyncResult BeginSetAllowDrop(this System.Windows.Forms.Control target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowDropCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowDrop(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetAllowDrop(result);
        }
        public static void EndSetAllowDrop(IAsyncResult result)
        {
            setAllowDropCallback.EndInvoke(result);
        }
        public static Task SetAllowDropAsync(this System.Windows.Forms.Control target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                BeginSetAllowDrop,
                EndSetAllowDrop,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.AnchorStyles> getAnchorInternal = (x) => x.Anchor;
        public static System.Windows.Forms.AnchorStyles GetAnchor(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AnchorStyles)target.Invoke(getAnchorInternal, target);
            else
                return getAnchorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.AnchorStyles> getAnchorCallback = GetAnchor;
        public static IAsyncResult BeginGetAnchor(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getAnchorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AnchorStyles EndGetAnchor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetAnchor(result);
        }
        public static System.Windows.Forms.AnchorStyles EndGetAnchor(IAsyncResult result)
        {
            return getAnchorCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AnchorStyles> GetAnchorAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.AnchorStyles>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetAnchor,
                EndGetAnchor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.AnchorStyles> setAnchorInternal = (x, v) => x.Anchor = v;
        public static void SetAnchor(this System.Windows.Forms.Control target, System.Windows.Forms.AnchorStyles value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAnchorInternal, target, value);
            else
                setAnchorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.AnchorStyles> setAnchorCallback = SetAnchor;
        public static IAsyncResult BeginSetAnchor(this System.Windows.Forms.Control target, System.Windows.Forms.AnchorStyles value, AsyncCallback callback, object state)
        {
            return setAnchorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAnchor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetAnchor(result);
        }
        public static void EndSetAnchor(IAsyncResult result)
        {
            setAnchorCallback.EndInvoke(result);
        }
        public static Task SetAnchorAsync(this System.Windows.Forms.Control target, System.Windows.Forms.AnchorStyles value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.AnchorStyles>(
                BeginSetAnchor,
                EndSetAnchor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getAutoSizeInternal = (x) => x.AutoSize;
        public static System.Boolean GetAutoSize(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoSizeInternal, target);
            else
                return getAutoSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getAutoSizeCallback = GetAutoSize;
        public static IAsyncResult BeginGetAutoSize(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getAutoSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetAutoSize(result);
        }
        public static System.Boolean EndGetAutoSize(IAsyncResult result)
        {
            return getAutoSizeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoSizeAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetAutoSize,
                EndGetAutoSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setAutoSizeInternal = (x, v) => x.AutoSize = v;
        public static void SetAutoSize(this System.Windows.Forms.Control target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoSizeInternal, target, value);
            else
                setAutoSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setAutoSizeCallback = SetAutoSize;
        public static IAsyncResult BeginSetAutoSize(this System.Windows.Forms.Control target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetAutoSize(result);
        }
        public static void EndSetAutoSize(IAsyncResult result)
        {
            setAutoSizeCallback.EndInvoke(result);
        }
        public static Task SetAutoSizeAsync(this System.Windows.Forms.Control target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                BeginSetAutoSize,
                EndSetAutoSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point> getAutoScrollOffsetInternal = (x) => x.AutoScrollOffset;
        public static System.Drawing.Point GetAutoScrollOffset(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Point)target.Invoke(getAutoScrollOffsetInternal, target);
            else
                return getAutoScrollOffsetInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point> getAutoScrollOffsetCallback = GetAutoScrollOffset;
        public static IAsyncResult BeginGetAutoScrollOffset(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getAutoScrollOffsetCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Point EndGetAutoScrollOffset(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetAutoScrollOffset(result);
        }
        public static System.Drawing.Point EndGetAutoScrollOffset(IAsyncResult result)
        {
            return getAutoScrollOffsetCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> GetAutoScrollOffsetAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetAutoScrollOffset,
                EndGetAutoScrollOffset,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Point> setAutoScrollOffsetInternal = (x, v) => x.AutoScrollOffset = v;
        public static void SetAutoScrollOffset(this System.Windows.Forms.Control target, System.Drawing.Point value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoScrollOffsetInternal, target, value);
            else
                setAutoScrollOffsetInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Point> setAutoScrollOffsetCallback = SetAutoScrollOffset;
        public static IAsyncResult BeginSetAutoScrollOffset(this System.Windows.Forms.Control target, System.Drawing.Point value, AsyncCallback callback, object state)
        {
            return setAutoScrollOffsetCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoScrollOffset(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetAutoScrollOffset(result);
        }
        public static void EndSetAutoScrollOffset(IAsyncResult result)
        {
            setAutoScrollOffsetCallback.EndInvoke(result);
        }
        public static Task SetAutoScrollOffsetAsync(this System.Windows.Forms.Control target, System.Drawing.Point value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Point>(
                BeginSetAutoScrollOffset,
                EndSetAutoScrollOffset,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Layout.LayoutEngine> getLayoutEngineInternal = (x) => x.LayoutEngine;
        public static System.Windows.Forms.Layout.LayoutEngine GetLayoutEngine(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Layout.LayoutEngine)target.Invoke(getLayoutEngineInternal, target);
            else
                return getLayoutEngineInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Layout.LayoutEngine> getLayoutEngineCallback = GetLayoutEngine;
        public static IAsyncResult BeginGetLayoutEngine(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getLayoutEngineCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Layout.LayoutEngine EndGetLayoutEngine(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetLayoutEngine(result);
        }
        public static System.Windows.Forms.Layout.LayoutEngine EndGetLayoutEngine(IAsyncResult result)
        {
            return getLayoutEngineCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Layout.LayoutEngine> GetLayoutEngineAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.Layout.LayoutEngine>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetLayoutEngine,
                EndGetLayoutEngine,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Color> getBackColorInternal = (x) => x.BackColor;
        public static System.Drawing.Color GetBackColor(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getBackColorInternal, target);
            else
                return getBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Color> getBackColorCallback = GetBackColor;
        public static IAsyncResult BeginGetBackColor(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetBackColor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetBackColor(result);
        }
        public static System.Drawing.Color EndGetBackColor(IAsyncResult result)
        {
            return getBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetBackColorAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetBackColor,
                EndGetBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Color> setBackColorInternal = (x, v) => x.BackColor = v;
        public static void SetBackColor(this System.Windows.Forms.Control target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBackColorInternal, target, value);
            else
                setBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Color> setBackColorCallback = SetBackColor;
        public static IAsyncResult BeginSetBackColor(this System.Windows.Forms.Control target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBackColor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetBackColor(result);
        }
        public static void EndSetBackColor(IAsyncResult result)
        {
            setBackColorCallback.EndInvoke(result);
        }
        public static Task SetBackColorAsync(this System.Windows.Forms.Control target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Color>(
                BeginSetBackColor,
                EndSetBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Image> getBackgroundImageInternal = (x) => x.BackgroundImage;
        public static System.Drawing.Image GetBackgroundImage(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Image)target.Invoke(getBackgroundImageInternal, target);
            else
                return getBackgroundImageInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Image> getBackgroundImageCallback = GetBackgroundImage;
        public static IAsyncResult BeginGetBackgroundImage(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getBackgroundImageCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Image EndGetBackgroundImage(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetBackgroundImage(result);
        }
        public static System.Drawing.Image EndGetBackgroundImage(IAsyncResult result)
        {
            return getBackgroundImageCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Image> GetBackgroundImageAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Image>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetBackgroundImage,
                EndGetBackgroundImage,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Image> setBackgroundImageInternal = (x, v) => x.BackgroundImage = v;
        public static void SetBackgroundImage(this System.Windows.Forms.Control target, System.Drawing.Image value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBackgroundImageInternal, target, value);
            else
                setBackgroundImageInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Image> setBackgroundImageCallback = SetBackgroundImage;
        public static IAsyncResult BeginSetBackgroundImage(this System.Windows.Forms.Control target, System.Drawing.Image value, AsyncCallback callback, object state)
        {
            return setBackgroundImageCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBackgroundImage(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetBackgroundImage(result);
        }
        public static void EndSetBackgroundImage(IAsyncResult result)
        {
            setBackgroundImageCallback.EndInvoke(result);
        }
        public static Task SetBackgroundImageAsync(this System.Windows.Forms.Control target, System.Drawing.Image value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Image>(
                BeginSetBackgroundImage,
                EndSetBackgroundImage,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ImageLayout> getBackgroundImageLayoutInternal = (x) => x.BackgroundImageLayout;
        public static System.Windows.Forms.ImageLayout GetBackgroundImageLayout(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ImageLayout)target.Invoke(getBackgroundImageLayoutInternal, target);
            else
                return getBackgroundImageLayoutInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ImageLayout> getBackgroundImageLayoutCallback = GetBackgroundImageLayout;
        public static IAsyncResult BeginGetBackgroundImageLayout(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getBackgroundImageLayoutCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ImageLayout EndGetBackgroundImageLayout(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetBackgroundImageLayout(result);
        }
        public static System.Windows.Forms.ImageLayout EndGetBackgroundImageLayout(IAsyncResult result)
        {
            return getBackgroundImageLayoutCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ImageLayout> GetBackgroundImageLayoutAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.ImageLayout>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetBackgroundImageLayout,
                EndGetBackgroundImageLayout,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.ImageLayout> setBackgroundImageLayoutInternal = (x, v) => x.BackgroundImageLayout = v;
        public static void SetBackgroundImageLayout(this System.Windows.Forms.Control target, System.Windows.Forms.ImageLayout value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBackgroundImageLayoutInternal, target, value);
            else
                setBackgroundImageLayoutInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.ImageLayout> setBackgroundImageLayoutCallback = SetBackgroundImageLayout;
        public static IAsyncResult BeginSetBackgroundImageLayout(this System.Windows.Forms.Control target, System.Windows.Forms.ImageLayout value, AsyncCallback callback, object state)
        {
            return setBackgroundImageLayoutCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBackgroundImageLayout(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetBackgroundImageLayout(result);
        }
        public static void EndSetBackgroundImageLayout(IAsyncResult result)
        {
            setBackgroundImageLayoutCallback.EndInvoke(result);
        }
        public static Task SetBackgroundImageLayoutAsync(this System.Windows.Forms.Control target, System.Windows.Forms.ImageLayout value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.ImageLayout>(
                BeginSetBackgroundImageLayout,
                EndSetBackgroundImageLayout,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.BindingContext> getBindingContextInternal = (x) => x.BindingContext;
        public static System.Windows.Forms.BindingContext GetBindingContext(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.BindingContext)target.Invoke(getBindingContextInternal, target);
            else
                return getBindingContextInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.BindingContext> getBindingContextCallback = GetBindingContext;
        public static IAsyncResult BeginGetBindingContext(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getBindingContextCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.BindingContext EndGetBindingContext(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetBindingContext(result);
        }
        public static System.Windows.Forms.BindingContext EndGetBindingContext(IAsyncResult result)
        {
            return getBindingContextCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.BindingContext> GetBindingContextAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.BindingContext>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetBindingContext,
                EndGetBindingContext,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.BindingContext> setBindingContextInternal = (x, v) => x.BindingContext = v;
        public static void SetBindingContext(this System.Windows.Forms.Control target, System.Windows.Forms.BindingContext value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBindingContextInternal, target, value);
            else
                setBindingContextInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.BindingContext> setBindingContextCallback = SetBindingContext;
        public static IAsyncResult BeginSetBindingContext(this System.Windows.Forms.Control target, System.Windows.Forms.BindingContext value, AsyncCallback callback, object state)
        {
            return setBindingContextCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBindingContext(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetBindingContext(result);
        }
        public static void EndSetBindingContext(IAsyncResult result)
        {
            setBindingContextCallback.EndInvoke(result);
        }
        public static Task SetBindingContextAsync(this System.Windows.Forms.Control target, System.Windows.Forms.BindingContext value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.BindingContext>(
                BeginSetBindingContext,
                EndSetBindingContext,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Int32> getBottomInternal = (x) => x.Bottom;
        public static System.Int32 GetBottom(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getBottomInternal, target);
            else
                return getBottomInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Int32> getBottomCallback = GetBottom;
        public static IAsyncResult BeginGetBottom(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getBottomCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetBottom(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetBottom(result);
        }
        public static System.Int32 EndGetBottom(IAsyncResult result)
        {
            return getBottomCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetBottomAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetBottom,
                EndGetBottom,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle> getBoundsInternal = (x) => x.Bounds;
        public static System.Drawing.Rectangle GetBounds(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Rectangle)target.Invoke(getBoundsInternal, target);
            else
                return getBoundsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle> getBoundsCallback = GetBounds;
        public static IAsyncResult BeginGetBounds(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getBoundsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Rectangle EndGetBounds(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetBounds(result);
        }
        public static System.Drawing.Rectangle EndGetBounds(IAsyncResult result)
        {
            return getBoundsCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetBoundsAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetBounds,
                EndGetBounds,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Rectangle> setBoundsInternal = (x, v) => x.Bounds = v;
        public static void SetBounds(this System.Windows.Forms.Control target, System.Drawing.Rectangle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBoundsInternal, target, value);
            else
                setBoundsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Rectangle> setBoundsCallback = SetBounds;
        public static IAsyncResult BeginSetBounds(this System.Windows.Forms.Control target, System.Drawing.Rectangle value, AsyncCallback callback, object state)
        {
            return setBoundsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBounds(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetBounds(result);
        }
        public static void EndSetBounds(IAsyncResult result)
        {
            setBoundsCallback.EndInvoke(result);
        }
        public static Task SetBoundsAsync(this System.Windows.Forms.Control target, System.Drawing.Rectangle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Rectangle>(
                BeginSetBounds,
                EndSetBounds,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCanFocusInternal = (x) => x.CanFocus;
        public static System.Boolean GetCanFocus(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCanFocusInternal, target);
            else
                return getCanFocusInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCanFocusCallback = GetCanFocus;
        public static IAsyncResult BeginGetCanFocus(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getCanFocusCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCanFocus(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetCanFocus(result);
        }
        public static System.Boolean EndGetCanFocus(IAsyncResult result)
        {
            return getCanFocusCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCanFocusAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetCanFocus,
                EndGetCanFocus,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCanSelectInternal = (x) => x.CanSelect;
        public static System.Boolean GetCanSelect(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCanSelectInternal, target);
            else
                return getCanSelectInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCanSelectCallback = GetCanSelect;
        public static IAsyncResult BeginGetCanSelect(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getCanSelectCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCanSelect(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetCanSelect(result);
        }
        public static System.Boolean EndGetCanSelect(IAsyncResult result)
        {
            return getCanSelectCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCanSelectAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetCanSelect,
                EndGetCanSelect,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCaptureInternal = (x) => x.Capture;
        public static System.Boolean GetCapture(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCaptureInternal, target);
            else
                return getCaptureInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCaptureCallback = GetCapture;
        public static IAsyncResult BeginGetCapture(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getCaptureCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCapture(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetCapture(result);
        }
        public static System.Boolean EndGetCapture(IAsyncResult result)
        {
            return getCaptureCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCaptureAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetCapture,
                EndGetCapture,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setCaptureInternal = (x, v) => x.Capture = v;
        public static void SetCapture(this System.Windows.Forms.Control target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCaptureInternal, target, value);
            else
                setCaptureInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setCaptureCallback = SetCapture;
        public static IAsyncResult BeginSetCapture(this System.Windows.Forms.Control target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCaptureCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCapture(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetCapture(result);
        }
        public static void EndSetCapture(IAsyncResult result)
        {
            setCaptureCallback.EndInvoke(result);
        }
        public static Task SetCaptureAsync(this System.Windows.Forms.Control target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                BeginSetCapture,
                EndSetCapture,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCausesValidationInternal = (x) => x.CausesValidation;
        public static System.Boolean GetCausesValidation(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCausesValidationInternal, target);
            else
                return getCausesValidationInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCausesValidationCallback = GetCausesValidation;
        public static IAsyncResult BeginGetCausesValidation(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getCausesValidationCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCausesValidation(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetCausesValidation(result);
        }
        public static System.Boolean EndGetCausesValidation(IAsyncResult result)
        {
            return getCausesValidationCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCausesValidationAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetCausesValidation,
                EndGetCausesValidation,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setCausesValidationInternal = (x, v) => x.CausesValidation = v;
        public static void SetCausesValidation(this System.Windows.Forms.Control target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCausesValidationInternal, target, value);
            else
                setCausesValidationInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setCausesValidationCallback = SetCausesValidation;
        public static IAsyncResult BeginSetCausesValidation(this System.Windows.Forms.Control target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCausesValidationCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCausesValidation(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetCausesValidation(result);
        }
        public static void EndSetCausesValidation(IAsyncResult result)
        {
            setCausesValidationCallback.EndInvoke(result);
        }
        public static Task SetCausesValidationAsync(this System.Windows.Forms.Control target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                BeginSetCausesValidation,
                EndSetCausesValidation,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle> getClientRectangleInternal = (x) => x.ClientRectangle;
        public static System.Drawing.Rectangle GetClientRectangle(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Rectangle)target.Invoke(getClientRectangleInternal, target);
            else
                return getClientRectangleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle> getClientRectangleCallback = GetClientRectangle;
        public static IAsyncResult BeginGetClientRectangle(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getClientRectangleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Rectangle EndGetClientRectangle(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetClientRectangle(result);
        }
        public static System.Drawing.Rectangle EndGetClientRectangle(IAsyncResult result)
        {
            return getClientRectangleCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetClientRectangleAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetClientRectangle,
                EndGetClientRectangle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getClientSizeInternal = (x) => x.ClientSize;
        public static System.Drawing.Size GetClientSize(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getClientSizeInternal, target);
            else
                return getClientSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getClientSizeCallback = GetClientSize;
        public static IAsyncResult BeginGetClientSize(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getClientSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetClientSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetClientSize(result);
        }
        public static System.Drawing.Size EndGetClientSize(IAsyncResult result)
        {
            return getClientSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetClientSizeAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetClientSize,
                EndGetClientSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Size> setClientSizeInternal = (x, v) => x.ClientSize = v;
        public static void SetClientSize(this System.Windows.Forms.Control target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setClientSizeInternal, target, value);
            else
                setClientSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Size> setClientSizeCallback = SetClientSize;
        public static IAsyncResult BeginSetClientSize(this System.Windows.Forms.Control target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setClientSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetClientSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetClientSize(result);
        }
        public static void EndSetClientSize(IAsyncResult result)
        {
            setClientSizeCallback.EndInvoke(result);
        }
        public static Task SetClientSizeAsync(this System.Windows.Forms.Control target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Size>(
                BeginSetClientSize,
                EndSetClientSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.String> getCompanyNameInternal = (x) => x.CompanyName;
        public static System.String GetCompanyName(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getCompanyNameInternal, target);
            else
                return getCompanyNameInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.String> getCompanyNameCallback = GetCompanyName;
        public static IAsyncResult BeginGetCompanyName(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getCompanyNameCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetCompanyName(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetCompanyName(result);
        }
        public static System.String EndGetCompanyName(IAsyncResult result)
        {
            return getCompanyNameCallback.EndInvoke(result);
        }
        public static Task<System.String> GetCompanyNameAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetCompanyName,
                EndGetCompanyName,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getContainsFocusInternal = (x) => x.ContainsFocus;
        public static System.Boolean GetContainsFocus(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getContainsFocusInternal, target);
            else
                return getContainsFocusInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getContainsFocusCallback = GetContainsFocus;
        public static IAsyncResult BeginGetContainsFocus(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getContainsFocusCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetContainsFocus(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetContainsFocus(result);
        }
        public static System.Boolean EndGetContainsFocus(IAsyncResult result)
        {
            return getContainsFocusCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetContainsFocusAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetContainsFocus,
                EndGetContainsFocus,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ContextMenu> getContextMenuInternal = (x) => x.ContextMenu;
        public static System.Windows.Forms.ContextMenu GetContextMenu(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ContextMenu)target.Invoke(getContextMenuInternal, target);
            else
                return getContextMenuInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ContextMenu> getContextMenuCallback = GetContextMenu;
        public static IAsyncResult BeginGetContextMenu(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getContextMenuCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ContextMenu EndGetContextMenu(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetContextMenu(result);
        }
        public static System.Windows.Forms.ContextMenu EndGetContextMenu(IAsyncResult result)
        {
            return getContextMenuCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ContextMenu> GetContextMenuAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.ContextMenu>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetContextMenu,
                EndGetContextMenu,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.ContextMenu> setContextMenuInternal = (x, v) => x.ContextMenu = v;
        public static void SetContextMenu(this System.Windows.Forms.Control target, System.Windows.Forms.ContextMenu value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setContextMenuInternal, target, value);
            else
                setContextMenuInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.ContextMenu> setContextMenuCallback = SetContextMenu;
        public static IAsyncResult BeginSetContextMenu(this System.Windows.Forms.Control target, System.Windows.Forms.ContextMenu value, AsyncCallback callback, object state)
        {
            return setContextMenuCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetContextMenu(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetContextMenu(result);
        }
        public static void EndSetContextMenu(IAsyncResult result)
        {
            setContextMenuCallback.EndInvoke(result);
        }
        public static Task SetContextMenuAsync(this System.Windows.Forms.Control target, System.Windows.Forms.ContextMenu value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.ContextMenu>(
                BeginSetContextMenu,
                EndSetContextMenu,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ContextMenuStrip> getContextMenuStripInternal = (x) => x.ContextMenuStrip;
        public static System.Windows.Forms.ContextMenuStrip GetContextMenuStrip(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ContextMenuStrip)target.Invoke(getContextMenuStripInternal, target);
            else
                return getContextMenuStripInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ContextMenuStrip> getContextMenuStripCallback = GetContextMenuStrip;
        public static IAsyncResult BeginGetContextMenuStrip(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getContextMenuStripCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ContextMenuStrip EndGetContextMenuStrip(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetContextMenuStrip(result);
        }
        public static System.Windows.Forms.ContextMenuStrip EndGetContextMenuStrip(IAsyncResult result)
        {
            return getContextMenuStripCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ContextMenuStrip> GetContextMenuStripAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.ContextMenuStrip>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetContextMenuStrip,
                EndGetContextMenuStrip,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.ContextMenuStrip> setContextMenuStripInternal = (x, v) => x.ContextMenuStrip = v;
        public static void SetContextMenuStrip(this System.Windows.Forms.Control target, System.Windows.Forms.ContextMenuStrip value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setContextMenuStripInternal, target, value);
            else
                setContextMenuStripInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.ContextMenuStrip> setContextMenuStripCallback = SetContextMenuStrip;
        public static IAsyncResult BeginSetContextMenuStrip(this System.Windows.Forms.Control target, System.Windows.Forms.ContextMenuStrip value, AsyncCallback callback, object state)
        {
            return setContextMenuStripCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetContextMenuStrip(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetContextMenuStrip(result);
        }
        public static void EndSetContextMenuStrip(IAsyncResult result)
        {
            setContextMenuStripCallback.EndInvoke(result);
        }
        public static Task SetContextMenuStripAsync(this System.Windows.Forms.Control target, System.Windows.Forms.ContextMenuStrip value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.ContextMenuStrip>(
                BeginSetContextMenuStrip,
                EndSetContextMenuStrip,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control.ControlCollection> getControlsInternal = (x) => x.Controls;
        public static System.Windows.Forms.Control.ControlCollection GetControls(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Control.ControlCollection)target.Invoke(getControlsInternal, target);
            else
                return getControlsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control.ControlCollection> getControlsCallback = GetControls;
        public static IAsyncResult BeginGetControls(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getControlsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Control.ControlCollection EndGetControls(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetControls(result);
        }
        public static System.Windows.Forms.Control.ControlCollection EndGetControls(IAsyncResult result)
        {
            return getControlsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control.ControlCollection> GetControlsAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.Control.ControlCollection>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetControls,
                EndGetControls,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCreatedInternal = (x) => x.Created;
        public static System.Boolean GetCreated(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCreatedInternal, target);
            else
                return getCreatedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getCreatedCallback = GetCreated;
        public static IAsyncResult BeginGetCreated(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getCreatedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCreated(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetCreated(result);
        }
        public static System.Boolean EndGetCreated(IAsyncResult result)
        {
            return getCreatedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCreatedAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetCreated,
                EndGetCreated,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Cursor> getCursorInternal = (x) => x.Cursor;
        public static System.Windows.Forms.Cursor GetCursor(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Cursor)target.Invoke(getCursorInternal, target);
            else
                return getCursorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Cursor> getCursorCallback = GetCursor;
        public static IAsyncResult BeginGetCursor(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getCursorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Cursor EndGetCursor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetCursor(result);
        }
        public static System.Windows.Forms.Cursor EndGetCursor(IAsyncResult result)
        {
            return getCursorCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Cursor> GetCursorAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.Cursor>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetCursor,
                EndGetCursor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Cursor> setCursorInternal = (x, v) => x.Cursor = v;
        public static void SetCursor(this System.Windows.Forms.Control target, System.Windows.Forms.Cursor value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCursorInternal, target, value);
            else
                setCursorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Cursor> setCursorCallback = SetCursor;
        public static IAsyncResult BeginSetCursor(this System.Windows.Forms.Control target, System.Windows.Forms.Cursor value, AsyncCallback callback, object state)
        {
            return setCursorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCursor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetCursor(result);
        }
        public static void EndSetCursor(IAsyncResult result)
        {
            setCursorCallback.EndInvoke(result);
        }
        public static Task SetCursorAsync(this System.Windows.Forms.Control target, System.Windows.Forms.Cursor value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.Cursor>(
                BeginSetCursor,
                EndSetCursor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ControlBindingsCollection> getDataBindingsInternal = (x) => x.DataBindings;
        public static System.Windows.Forms.ControlBindingsCollection GetDataBindings(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ControlBindingsCollection)target.Invoke(getDataBindingsInternal, target);
            else
                return getDataBindingsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ControlBindingsCollection> getDataBindingsCallback = GetDataBindings;
        public static IAsyncResult BeginGetDataBindings(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getDataBindingsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ControlBindingsCollection EndGetDataBindings(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetDataBindings(result);
        }
        public static System.Windows.Forms.ControlBindingsCollection EndGetDataBindings(IAsyncResult result)
        {
            return getDataBindingsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ControlBindingsCollection> GetDataBindingsAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.ControlBindingsCollection>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetDataBindings,
                EndGetDataBindings,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle> getDisplayRectangleInternal = (x) => x.DisplayRectangle;
        public static System.Drawing.Rectangle GetDisplayRectangle(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Rectangle)target.Invoke(getDisplayRectangleInternal, target);
            else
                return getDisplayRectangleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Rectangle> getDisplayRectangleCallback = GetDisplayRectangle;
        public static IAsyncResult BeginGetDisplayRectangle(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getDisplayRectangleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Rectangle EndGetDisplayRectangle(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetDisplayRectangle(result);
        }
        public static System.Drawing.Rectangle EndGetDisplayRectangle(IAsyncResult result)
        {
            return getDisplayRectangleCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetDisplayRectangleAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetDisplayRectangle,
                EndGetDisplayRectangle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getIsDisposedInternal = (x) => x.IsDisposed;
        public static System.Boolean GetIsDisposed(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsDisposedInternal, target);
            else
                return getIsDisposedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getIsDisposedCallback = GetIsDisposed;
        public static IAsyncResult BeginGetIsDisposed(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getIsDisposedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsDisposed(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetIsDisposed(result);
        }
        public static System.Boolean EndGetIsDisposed(IAsyncResult result)
        {
            return getIsDisposedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsDisposedAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetIsDisposed,
                EndGetIsDisposed,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getDisposingInternal = (x) => x.Disposing;
        public static System.Boolean GetDisposing(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getDisposingInternal, target);
            else
                return getDisposingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getDisposingCallback = GetDisposing;
        public static IAsyncResult BeginGetDisposing(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getDisposingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetDisposing(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetDisposing(result);
        }
        public static System.Boolean EndGetDisposing(IAsyncResult result)
        {
            return getDisposingCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetDisposingAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetDisposing,
                EndGetDisposing,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.DockStyle> getDockInternal = (x) => x.Dock;
        public static System.Windows.Forms.DockStyle GetDock(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DockStyle)target.Invoke(getDockInternal, target);
            else
                return getDockInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.DockStyle> getDockCallback = GetDock;
        public static IAsyncResult BeginGetDock(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getDockCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DockStyle EndGetDock(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetDock(result);
        }
        public static System.Windows.Forms.DockStyle EndGetDock(IAsyncResult result)
        {
            return getDockCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DockStyle> GetDockAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.DockStyle>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetDock,
                EndGetDock,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.DockStyle> setDockInternal = (x, v) => x.Dock = v;
        public static void SetDock(this System.Windows.Forms.Control target, System.Windows.Forms.DockStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDockInternal, target, value);
            else
                setDockInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.DockStyle> setDockCallback = SetDock;
        public static IAsyncResult BeginSetDock(this System.Windows.Forms.Control target, System.Windows.Forms.DockStyle value, AsyncCallback callback, object state)
        {
            return setDockCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDock(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetDock(result);
        }
        public static void EndSetDock(IAsyncResult result)
        {
            setDockCallback.EndInvoke(result);
        }
        public static Task SetDockAsync(this System.Windows.Forms.Control target, System.Windows.Forms.DockStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.DockStyle>(
                BeginSetDock,
                EndSetDock,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getEnabledInternal = (x) => x.Enabled;
        public static System.Boolean GetEnabled(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getEnabledInternal, target);
            else
                return getEnabledInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getEnabledCallback = GetEnabled;
        public static IAsyncResult BeginGetEnabled(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getEnabledCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetEnabled(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetEnabled(result);
        }
        public static System.Boolean EndGetEnabled(IAsyncResult result)
        {
            return getEnabledCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetEnabledAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetEnabled,
                EndGetEnabled,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setEnabledInternal = (x, v) => x.Enabled = v;
        public static void SetEnabled(this System.Windows.Forms.Control target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setEnabledInternal, target, value);
            else
                setEnabledInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setEnabledCallback = SetEnabled;
        public static IAsyncResult BeginSetEnabled(this System.Windows.Forms.Control target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setEnabledCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetEnabled(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetEnabled(result);
        }
        public static void EndSetEnabled(IAsyncResult result)
        {
            setEnabledCallback.EndInvoke(result);
        }
        public static Task SetEnabledAsync(this System.Windows.Forms.Control target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                BeginSetEnabled,
                EndSetEnabled,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getFocusedInternal = (x) => x.Focused;
        public static System.Boolean GetFocused(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getFocusedInternal, target);
            else
                return getFocusedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getFocusedCallback = GetFocused;
        public static IAsyncResult BeginGetFocused(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getFocusedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetFocused(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetFocused(result);
        }
        public static System.Boolean EndGetFocused(IAsyncResult result)
        {
            return getFocusedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetFocusedAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetFocused,
                EndGetFocused,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Font> getFontInternal = (x) => x.Font;
        public static System.Drawing.Font GetFont(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Font)target.Invoke(getFontInternal, target);
            else
                return getFontInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Font> getFontCallback = GetFont;
        public static IAsyncResult BeginGetFont(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getFontCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Font EndGetFont(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetFont(result);
        }
        public static System.Drawing.Font EndGetFont(IAsyncResult result)
        {
            return getFontCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Font> GetFontAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Font>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetFont,
                EndGetFont,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Font> setFontInternal = (x, v) => x.Font = v;
        public static void SetFont(this System.Windows.Forms.Control target, System.Drawing.Font value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFontInternal, target, value);
            else
                setFontInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Font> setFontCallback = SetFont;
        public static IAsyncResult BeginSetFont(this System.Windows.Forms.Control target, System.Drawing.Font value, AsyncCallback callback, object state)
        {
            return setFontCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFont(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetFont(result);
        }
        public static void EndSetFont(IAsyncResult result)
        {
            setFontCallback.EndInvoke(result);
        }
        public static Task SetFontAsync(this System.Windows.Forms.Control target, System.Drawing.Font value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Font>(
                BeginSetFont,
                EndSetFont,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Color> getForeColorInternal = (x) => x.ForeColor;
        public static System.Drawing.Color GetForeColor(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getForeColorInternal, target);
            else
                return getForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Color> getForeColorCallback = GetForeColor;
        public static IAsyncResult BeginGetForeColor(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetForeColor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetForeColor(result);
        }
        public static System.Drawing.Color EndGetForeColor(IAsyncResult result)
        {
            return getForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetForeColorAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetForeColor,
                EndGetForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Color> setForeColorInternal = (x, v) => x.ForeColor = v;
        public static void SetForeColor(this System.Windows.Forms.Control target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setForeColorInternal, target, value);
            else
                setForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Color> setForeColorCallback = SetForeColor;
        public static IAsyncResult BeginSetForeColor(this System.Windows.Forms.Control target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetForeColor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetForeColor(result);
        }
        public static void EndSetForeColor(IAsyncResult result)
        {
            setForeColorCallback.EndInvoke(result);
        }
        public static Task SetForeColorAsync(this System.Windows.Forms.Control target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Color>(
                BeginSetForeColor,
                EndSetForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.IntPtr> getHandleInternal = (x) => x.Handle;
        public static System.IntPtr GetHandle(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.IntPtr)target.Invoke(getHandleInternal, target);
            else
                return getHandleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.IntPtr> getHandleCallback = GetHandle;
        public static IAsyncResult BeginGetHandle(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getHandleCallback.BeginInvoke(target, callback, state);
        }
        public static System.IntPtr EndGetHandle(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetHandle(result);
        }
        public static System.IntPtr EndGetHandle(IAsyncResult result)
        {
            return getHandleCallback.EndInvoke(result);
        }
        public static Task<System.IntPtr> GetHandleAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.IntPtr>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetHandle,
                EndGetHandle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getHasChildrenInternal = (x) => x.HasChildren;
        public static System.Boolean GetHasChildren(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHasChildrenInternal, target);
            else
                return getHasChildrenInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getHasChildrenCallback = GetHasChildren;
        public static IAsyncResult BeginGetHasChildren(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getHasChildrenCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHasChildren(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetHasChildren(result);
        }
        public static System.Boolean EndGetHasChildren(IAsyncResult result)
        {
            return getHasChildrenCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHasChildrenAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetHasChildren,
                EndGetHasChildren,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Int32> getHeightInternal = (x) => x.Height;
        public static System.Int32 GetHeight(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getHeightInternal, target);
            else
                return getHeightInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Int32> getHeightCallback = GetHeight;
        public static IAsyncResult BeginGetHeight(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getHeightCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetHeight(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetHeight(result);
        }
        public static System.Int32 EndGetHeight(IAsyncResult result)
        {
            return getHeightCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetHeightAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetHeight,
                EndGetHeight,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Int32> setHeightInternal = (x, v) => x.Height = v;
        public static void SetHeight(this System.Windows.Forms.Control target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHeightInternal, target, value);
            else
                setHeightInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Int32> setHeightCallback = SetHeight;
        public static IAsyncResult BeginSetHeight(this System.Windows.Forms.Control target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setHeightCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHeight(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetHeight(result);
        }
        public static void EndSetHeight(IAsyncResult result)
        {
            setHeightCallback.EndInvoke(result);
        }
        public static Task SetHeightAsync(this System.Windows.Forms.Control target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Int32>(
                BeginSetHeight,
                EndSetHeight,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getIsHandleCreatedInternal = (x) => x.IsHandleCreated;
        public static System.Boolean GetIsHandleCreated(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsHandleCreatedInternal, target);
            else
                return getIsHandleCreatedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getIsHandleCreatedCallback = GetIsHandleCreated;
        public static IAsyncResult BeginGetIsHandleCreated(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getIsHandleCreatedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsHandleCreated(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetIsHandleCreated(result);
        }
        public static System.Boolean EndGetIsHandleCreated(IAsyncResult result)
        {
            return getIsHandleCreatedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsHandleCreatedAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetIsHandleCreated,
                EndGetIsHandleCreated,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getInvokeRequiredInternal = (x) => x.InvokeRequired;
        public static System.Boolean GetInvokeRequired(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getInvokeRequiredInternal, target);
            else
                return getInvokeRequiredInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getInvokeRequiredCallback = GetInvokeRequired;
        public static IAsyncResult BeginGetInvokeRequired(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getInvokeRequiredCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetInvokeRequired(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetInvokeRequired(result);
        }
        public static System.Boolean EndGetInvokeRequired(IAsyncResult result)
        {
            return getInvokeRequiredCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetInvokeRequiredAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetInvokeRequired,
                EndGetInvokeRequired,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getIsAccessibleInternal = (x) => x.IsAccessible;
        public static System.Boolean GetIsAccessible(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsAccessibleInternal, target);
            else
                return getIsAccessibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getIsAccessibleCallback = GetIsAccessible;
        public static IAsyncResult BeginGetIsAccessible(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getIsAccessibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsAccessible(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetIsAccessible(result);
        }
        public static System.Boolean EndGetIsAccessible(IAsyncResult result)
        {
            return getIsAccessibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsAccessibleAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetIsAccessible,
                EndGetIsAccessible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setIsAccessibleInternal = (x, v) => x.IsAccessible = v;
        public static void SetIsAccessible(this System.Windows.Forms.Control target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setIsAccessibleInternal, target, value);
            else
                setIsAccessibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setIsAccessibleCallback = SetIsAccessible;
        public static IAsyncResult BeginSetIsAccessible(this System.Windows.Forms.Control target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setIsAccessibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetIsAccessible(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetIsAccessible(result);
        }
        public static void EndSetIsAccessible(IAsyncResult result)
        {
            setIsAccessibleCallback.EndInvoke(result);
        }
        public static Task SetIsAccessibleAsync(this System.Windows.Forms.Control target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                BeginSetIsAccessible,
                EndSetIsAccessible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getIsMirroredInternal = (x) => x.IsMirrored;
        public static System.Boolean GetIsMirrored(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsMirroredInternal, target);
            else
                return getIsMirroredInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getIsMirroredCallback = GetIsMirrored;
        public static IAsyncResult BeginGetIsMirrored(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getIsMirroredCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsMirrored(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetIsMirrored(result);
        }
        public static System.Boolean EndGetIsMirrored(IAsyncResult result)
        {
            return getIsMirroredCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsMirroredAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetIsMirrored,
                EndGetIsMirrored,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Int32> getLeftInternal = (x) => x.Left;
        public static System.Int32 GetLeft(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getLeftInternal, target);
            else
                return getLeftInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Int32> getLeftCallback = GetLeft;
        public static IAsyncResult BeginGetLeft(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getLeftCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetLeft(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetLeft(result);
        }
        public static System.Int32 EndGetLeft(IAsyncResult result)
        {
            return getLeftCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetLeftAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetLeft,
                EndGetLeft,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Int32> setLeftInternal = (x, v) => x.Left = v;
        public static void SetLeft(this System.Windows.Forms.Control target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLeftInternal, target, value);
            else
                setLeftInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Int32> setLeftCallback = SetLeft;
        public static IAsyncResult BeginSetLeft(this System.Windows.Forms.Control target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setLeftCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLeft(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetLeft(result);
        }
        public static void EndSetLeft(IAsyncResult result)
        {
            setLeftCallback.EndInvoke(result);
        }
        public static Task SetLeftAsync(this System.Windows.Forms.Control target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Int32>(
                BeginSetLeft,
                EndSetLeft,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point> getLocationInternal = (x) => x.Location;
        public static System.Drawing.Point GetLocation(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Point)target.Invoke(getLocationInternal, target);
            else
                return getLocationInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Point> getLocationCallback = GetLocation;
        public static IAsyncResult BeginGetLocation(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getLocationCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Point EndGetLocation(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetLocation(result);
        }
        public static System.Drawing.Point EndGetLocation(IAsyncResult result)
        {
            return getLocationCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> GetLocationAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetLocation,
                EndGetLocation,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Point> setLocationInternal = (x, v) => x.Location = v;
        public static void SetLocation(this System.Windows.Forms.Control target, System.Drawing.Point value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLocationInternal, target, value);
            else
                setLocationInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Point> setLocationCallback = SetLocation;
        public static IAsyncResult BeginSetLocation(this System.Windows.Forms.Control target, System.Drawing.Point value, AsyncCallback callback, object state)
        {
            return setLocationCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLocation(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetLocation(result);
        }
        public static void EndSetLocation(IAsyncResult result)
        {
            setLocationCallback.EndInvoke(result);
        }
        public static Task SetLocationAsync(this System.Windows.Forms.Control target, System.Drawing.Point value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Point>(
                BeginSetLocation,
                EndSetLocation,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Padding> getMarginInternal = (x) => x.Margin;
        public static System.Windows.Forms.Padding GetMargin(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Padding)target.Invoke(getMarginInternal, target);
            else
                return getMarginInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Padding> getMarginCallback = GetMargin;
        public static IAsyncResult BeginGetMargin(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getMarginCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Padding EndGetMargin(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetMargin(result);
        }
        public static System.Windows.Forms.Padding EndGetMargin(IAsyncResult result)
        {
            return getMarginCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Padding> GetMarginAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.Padding>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetMargin,
                EndGetMargin,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Padding> setMarginInternal = (x, v) => x.Margin = v;
        public static void SetMargin(this System.Windows.Forms.Control target, System.Windows.Forms.Padding value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMarginInternal, target, value);
            else
                setMarginInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Padding> setMarginCallback = SetMargin;
        public static IAsyncResult BeginSetMargin(this System.Windows.Forms.Control target, System.Windows.Forms.Padding value, AsyncCallback callback, object state)
        {
            return setMarginCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMargin(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetMargin(result);
        }
        public static void EndSetMargin(IAsyncResult result)
        {
            setMarginCallback.EndInvoke(result);
        }
        public static Task SetMarginAsync(this System.Windows.Forms.Control target, System.Windows.Forms.Padding value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.Padding>(
                BeginSetMargin,
                EndSetMargin,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getMaximumSizeInternal = (x) => x.MaximumSize;
        public static System.Drawing.Size GetMaximumSize(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getMaximumSizeInternal, target);
            else
                return getMaximumSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getMaximumSizeCallback = GetMaximumSize;
        public static IAsyncResult BeginGetMaximumSize(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getMaximumSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetMaximumSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetMaximumSize(result);
        }
        public static System.Drawing.Size EndGetMaximumSize(IAsyncResult result)
        {
            return getMaximumSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetMaximumSizeAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetMaximumSize,
                EndGetMaximumSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Size> setMaximumSizeInternal = (x, v) => x.MaximumSize = v;
        public static void SetMaximumSize(this System.Windows.Forms.Control target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMaximumSizeInternal, target, value);
            else
                setMaximumSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Size> setMaximumSizeCallback = SetMaximumSize;
        public static IAsyncResult BeginSetMaximumSize(this System.Windows.Forms.Control target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setMaximumSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMaximumSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetMaximumSize(result);
        }
        public static void EndSetMaximumSize(IAsyncResult result)
        {
            setMaximumSizeCallback.EndInvoke(result);
        }
        public static Task SetMaximumSizeAsync(this System.Windows.Forms.Control target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Size>(
                BeginSetMaximumSize,
                EndSetMaximumSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getMinimumSizeInternal = (x) => x.MinimumSize;
        public static System.Drawing.Size GetMinimumSize(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getMinimumSizeInternal, target);
            else
                return getMinimumSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getMinimumSizeCallback = GetMinimumSize;
        public static IAsyncResult BeginGetMinimumSize(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getMinimumSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetMinimumSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetMinimumSize(result);
        }
        public static System.Drawing.Size EndGetMinimumSize(IAsyncResult result)
        {
            return getMinimumSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetMinimumSizeAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetMinimumSize,
                EndGetMinimumSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Size> setMinimumSizeInternal = (x, v) => x.MinimumSize = v;
        public static void SetMinimumSize(this System.Windows.Forms.Control target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMinimumSizeInternal, target, value);
            else
                setMinimumSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Size> setMinimumSizeCallback = SetMinimumSize;
        public static IAsyncResult BeginSetMinimumSize(this System.Windows.Forms.Control target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setMinimumSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMinimumSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetMinimumSize(result);
        }
        public static void EndSetMinimumSize(IAsyncResult result)
        {
            setMinimumSizeCallback.EndInvoke(result);
        }
        public static Task SetMinimumSizeAsync(this System.Windows.Forms.Control target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Size>(
                BeginSetMinimumSize,
                EndSetMinimumSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.String> getNameInternal = (x) => x.Name;
        public static System.String GetName(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getNameInternal, target);
            else
                return getNameInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.String> getNameCallback = GetName;
        public static IAsyncResult BeginGetName(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getNameCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetName(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetName(result);
        }
        public static System.String EndGetName(IAsyncResult result)
        {
            return getNameCallback.EndInvoke(result);
        }
        public static Task<System.String> GetNameAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetName,
                EndGetName,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.String> setNameInternal = (x, v) => x.Name = v;
        public static void SetName(this System.Windows.Forms.Control target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setNameInternal, target, value);
            else
                setNameInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.String> setNameCallback = SetName;
        public static IAsyncResult BeginSetName(this System.Windows.Forms.Control target, System.String value, AsyncCallback callback, object state)
        {
            return setNameCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetName(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetName(result);
        }
        public static void EndSetName(IAsyncResult result)
        {
            setNameCallback.EndInvoke(result);
        }
        public static Task SetNameAsync(this System.Windows.Forms.Control target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.String>(
                BeginSetName,
                EndSetName,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control> getParentInternal = (x) => x.Parent;
        public static System.Windows.Forms.Control GetParent(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Control)target.Invoke(getParentInternal, target);
            else
                return getParentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control> getParentCallback = GetParent;
        public static IAsyncResult BeginGetParent(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getParentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Control EndGetParent(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetParent(result);
        }
        public static System.Windows.Forms.Control EndGetParent(IAsyncResult result)
        {
            return getParentCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetParentAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetParent,
                EndGetParent,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Control> setParentInternal = (x, v) => x.Parent = v;
        public static void SetParent(this System.Windows.Forms.Control target, System.Windows.Forms.Control value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setParentInternal, target, value);
            else
                setParentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Control> setParentCallback = SetParent;
        public static IAsyncResult BeginSetParent(this System.Windows.Forms.Control target, System.Windows.Forms.Control value, AsyncCallback callback, object state)
        {
            return setParentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetParent(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetParent(result);
        }
        public static void EndSetParent(IAsyncResult result)
        {
            setParentCallback.EndInvoke(result);
        }
        public static Task SetParentAsync(this System.Windows.Forms.Control target, System.Windows.Forms.Control value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.Control>(
                BeginSetParent,
                EndSetParent,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.String> getProductNameInternal = (x) => x.ProductName;
        public static System.String GetProductName(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getProductNameInternal, target);
            else
                return getProductNameInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.String> getProductNameCallback = GetProductName;
        public static IAsyncResult BeginGetProductName(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getProductNameCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetProductName(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetProductName(result);
        }
        public static System.String EndGetProductName(IAsyncResult result)
        {
            return getProductNameCallback.EndInvoke(result);
        }
        public static Task<System.String> GetProductNameAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetProductName,
                EndGetProductName,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.String> getProductVersionInternal = (x) => x.ProductVersion;
        public static System.String GetProductVersion(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getProductVersionInternal, target);
            else
                return getProductVersionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.String> getProductVersionCallback = GetProductVersion;
        public static IAsyncResult BeginGetProductVersion(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getProductVersionCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetProductVersion(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetProductVersion(result);
        }
        public static System.String EndGetProductVersion(IAsyncResult result)
        {
            return getProductVersionCallback.EndInvoke(result);
        }
        public static Task<System.String> GetProductVersionAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetProductVersion,
                EndGetProductVersion,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getRecreatingHandleInternal = (x) => x.RecreatingHandle;
        public static System.Boolean GetRecreatingHandle(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getRecreatingHandleInternal, target);
            else
                return getRecreatingHandleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getRecreatingHandleCallback = GetRecreatingHandle;
        public static IAsyncResult BeginGetRecreatingHandle(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getRecreatingHandleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetRecreatingHandle(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetRecreatingHandle(result);
        }
        public static System.Boolean EndGetRecreatingHandle(IAsyncResult result)
        {
            return getRecreatingHandleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetRecreatingHandleAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetRecreatingHandle,
                EndGetRecreatingHandle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Region> getRegionInternal = (x) => x.Region;
        public static System.Drawing.Region GetRegion(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Region)target.Invoke(getRegionInternal, target);
            else
                return getRegionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Region> getRegionCallback = GetRegion;
        public static IAsyncResult BeginGetRegion(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getRegionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Region EndGetRegion(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetRegion(result);
        }
        public static System.Drawing.Region EndGetRegion(IAsyncResult result)
        {
            return getRegionCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Region> GetRegionAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Region>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetRegion,
                EndGetRegion,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Region> setRegionInternal = (x, v) => x.Region = v;
        public static void SetRegion(this System.Windows.Forms.Control target, System.Drawing.Region value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRegionInternal, target, value);
            else
                setRegionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Region> setRegionCallback = SetRegion;
        public static IAsyncResult BeginSetRegion(this System.Windows.Forms.Control target, System.Drawing.Region value, AsyncCallback callback, object state)
        {
            return setRegionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRegion(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetRegion(result);
        }
        public static void EndSetRegion(IAsyncResult result)
        {
            setRegionCallback.EndInvoke(result);
        }
        public static Task SetRegionAsync(this System.Windows.Forms.Control target, System.Drawing.Region value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Region>(
                BeginSetRegion,
                EndSetRegion,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Int32> getRightInternal = (x) => x.Right;
        public static System.Int32 GetRight(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getRightInternal, target);
            else
                return getRightInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Int32> getRightCallback = GetRight;
        public static IAsyncResult BeginGetRight(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getRightCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetRight(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetRight(result);
        }
        public static System.Int32 EndGetRight(IAsyncResult result)
        {
            return getRightCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetRightAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetRight,
                EndGetRight,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.RightToLeft> getRightToLeftInternal = (x) => x.RightToLeft;
        public static System.Windows.Forms.RightToLeft GetRightToLeft(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.RightToLeft)target.Invoke(getRightToLeftInternal, target);
            else
                return getRightToLeftInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.RightToLeft> getRightToLeftCallback = GetRightToLeft;
        public static IAsyncResult BeginGetRightToLeft(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getRightToLeftCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.RightToLeft EndGetRightToLeft(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetRightToLeft(result);
        }
        public static System.Windows.Forms.RightToLeft EndGetRightToLeft(IAsyncResult result)
        {
            return getRightToLeftCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.RightToLeft> GetRightToLeftAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.RightToLeft>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetRightToLeft,
                EndGetRightToLeft,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.RightToLeft> setRightToLeftInternal = (x, v) => x.RightToLeft = v;
        public static void SetRightToLeft(this System.Windows.Forms.Control target, System.Windows.Forms.RightToLeft value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRightToLeftInternal, target, value);
            else
                setRightToLeftInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.RightToLeft> setRightToLeftCallback = SetRightToLeft;
        public static IAsyncResult BeginSetRightToLeft(this System.Windows.Forms.Control target, System.Windows.Forms.RightToLeft value, AsyncCallback callback, object state)
        {
            return setRightToLeftCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRightToLeft(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetRightToLeft(result);
        }
        public static void EndSetRightToLeft(IAsyncResult result)
        {
            setRightToLeftCallback.EndInvoke(result);
        }
        public static Task SetRightToLeftAsync(this System.Windows.Forms.Control target, System.Windows.Forms.RightToLeft value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.RightToLeft>(
                BeginSetRightToLeft,
                EndSetRightToLeft,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.ComponentModel.ISite> getSiteInternal = (x) => x.Site;
        public static System.ComponentModel.ISite GetSite(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.ComponentModel.ISite)target.Invoke(getSiteInternal, target);
            else
                return getSiteInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.ComponentModel.ISite> getSiteCallback = GetSite;
        public static IAsyncResult BeginGetSite(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getSiteCallback.BeginInvoke(target, callback, state);
        }
        public static System.ComponentModel.ISite EndGetSite(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetSite(result);
        }
        public static System.ComponentModel.ISite EndGetSite(IAsyncResult result)
        {
            return getSiteCallback.EndInvoke(result);
        }
        public static Task<System.ComponentModel.ISite> GetSiteAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.ComponentModel.ISite>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetSite,
                EndGetSite,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.ComponentModel.ISite> setSiteInternal = (x, v) => x.Site = v;
        public static void SetSite(this System.Windows.Forms.Control target, System.ComponentModel.ISite value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSiteInternal, target, value);
            else
                setSiteInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.ComponentModel.ISite> setSiteCallback = SetSite;
        public static IAsyncResult BeginSetSite(this System.Windows.Forms.Control target, System.ComponentModel.ISite value, AsyncCallback callback, object state)
        {
            return setSiteCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSite(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetSite(result);
        }
        public static void EndSetSite(IAsyncResult result)
        {
            setSiteCallback.EndInvoke(result);
        }
        public static Task SetSiteAsync(this System.Windows.Forms.Control target, System.ComponentModel.ISite value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.ComponentModel.ISite>(
                BeginSetSite,
                EndSetSite,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getSizeInternal = (x) => x.Size;
        public static System.Drawing.Size GetSize(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getSizeInternal, target);
            else
                return getSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getSizeCallback = GetSize;
        public static IAsyncResult BeginGetSize(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetSize(result);
        }
        public static System.Drawing.Size EndGetSize(IAsyncResult result)
        {
            return getSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetSizeAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetSize,
                EndGetSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Size> setSizeInternal = (x, v) => x.Size = v;
        public static void SetSize(this System.Windows.Forms.Control target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSizeInternal, target, value);
            else
                setSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Drawing.Size> setSizeCallback = SetSize;
        public static IAsyncResult BeginSetSize(this System.Windows.Forms.Control target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetSize(result);
        }
        public static void EndSetSize(IAsyncResult result)
        {
            setSizeCallback.EndInvoke(result);
        }
        public static Task SetSizeAsync(this System.Windows.Forms.Control target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Drawing.Size>(
                BeginSetSize,
                EndSetSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Int32> getTabIndexInternal = (x) => x.TabIndex;
        public static System.Int32 GetTabIndex(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getTabIndexInternal, target);
            else
                return getTabIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Int32> getTabIndexCallback = GetTabIndex;
        public static IAsyncResult BeginGetTabIndex(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getTabIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetTabIndex(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetTabIndex(result);
        }
        public static System.Int32 EndGetTabIndex(IAsyncResult result)
        {
            return getTabIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetTabIndexAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetTabIndex,
                EndGetTabIndex,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Int32> setTabIndexInternal = (x, v) => x.TabIndex = v;
        public static void SetTabIndex(this System.Windows.Forms.Control target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTabIndexInternal, target, value);
            else
                setTabIndexInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Int32> setTabIndexCallback = SetTabIndex;
        public static IAsyncResult BeginSetTabIndex(this System.Windows.Forms.Control target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setTabIndexCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTabIndex(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetTabIndex(result);
        }
        public static void EndSetTabIndex(IAsyncResult result)
        {
            setTabIndexCallback.EndInvoke(result);
        }
        public static Task SetTabIndexAsync(this System.Windows.Forms.Control target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Int32>(
                BeginSetTabIndex,
                EndSetTabIndex,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getTabStopInternal = (x) => x.TabStop;
        public static System.Boolean GetTabStop(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getTabStopInternal, target);
            else
                return getTabStopInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getTabStopCallback = GetTabStop;
        public static IAsyncResult BeginGetTabStop(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getTabStopCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetTabStop(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetTabStop(result);
        }
        public static System.Boolean EndGetTabStop(IAsyncResult result)
        {
            return getTabStopCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetTabStopAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetTabStop,
                EndGetTabStop,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setTabStopInternal = (x, v) => x.TabStop = v;
        public static void SetTabStop(this System.Windows.Forms.Control target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTabStopInternal, target, value);
            else
                setTabStopInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setTabStopCallback = SetTabStop;
        public static IAsyncResult BeginSetTabStop(this System.Windows.Forms.Control target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setTabStopCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTabStop(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetTabStop(result);
        }
        public static void EndSetTabStop(IAsyncResult result)
        {
            setTabStopCallback.EndInvoke(result);
        }
        public static Task SetTabStopAsync(this System.Windows.Forms.Control target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                BeginSetTabStop,
                EndSetTabStop,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Object> getTagInternal = (x) => x.Tag;
        public static System.Object GetTag(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Object)target.Invoke(getTagInternal, target);
            else
                return getTagInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Object> getTagCallback = GetTag;
        public static IAsyncResult BeginGetTag(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getTagCallback.BeginInvoke(target, callback, state);
        }
        public static System.Object EndGetTag(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetTag(result);
        }
        public static System.Object EndGetTag(IAsyncResult result)
        {
            return getTagCallback.EndInvoke(result);
        }
        public static Task<System.Object> GetTagAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetTag,
                EndGetTag,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Object> setTagInternal = (x, v) => x.Tag = v;
        public static void SetTag(this System.Windows.Forms.Control target, System.Object value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTagInternal, target, value);
            else
                setTagInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Object> setTagCallback = SetTag;
        public static IAsyncResult BeginSetTag(this System.Windows.Forms.Control target, System.Object value, AsyncCallback callback, object state)
        {
            return setTagCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTag(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetTag(result);
        }
        public static void EndSetTag(IAsyncResult result)
        {
            setTagCallback.EndInvoke(result);
        }
        public static Task SetTagAsync(this System.Windows.Forms.Control target, System.Object value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Object>(
                BeginSetTag,
                EndSetTag,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.String> getTextInternal = (x) => x.Text;
        public static System.String GetText(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getTextInternal, target);
            else
                return getTextInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.String> getTextCallback = GetText;
        public static IAsyncResult BeginGetText(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getTextCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetText(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetText(result);
        }
        public static System.String EndGetText(IAsyncResult result)
        {
            return getTextCallback.EndInvoke(result);
        }
        public static Task<System.String> GetTextAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetText,
                EndGetText,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.String> setTextInternal = (x, v) => x.Text = v;
        public static void SetText(this System.Windows.Forms.Control target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTextInternal, target, value);
            else
                setTextInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.String> setTextCallback = SetText;
        public static IAsyncResult BeginSetText(this System.Windows.Forms.Control target, System.String value, AsyncCallback callback, object state)
        {
            return setTextCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetText(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetText(result);
        }
        public static void EndSetText(IAsyncResult result)
        {
            setTextCallback.EndInvoke(result);
        }
        public static Task SetTextAsync(this System.Windows.Forms.Control target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.String>(
                BeginSetText,
                EndSetText,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Int32> getTopInternal = (x) => x.Top;
        public static System.Int32 GetTop(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getTopInternal, target);
            else
                return getTopInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Int32> getTopCallback = GetTop;
        public static IAsyncResult BeginGetTop(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getTopCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetTop(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetTop(result);
        }
        public static System.Int32 EndGetTop(IAsyncResult result)
        {
            return getTopCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetTopAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetTop,
                EndGetTop,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Int32> setTopInternal = (x, v) => x.Top = v;
        public static void SetTop(this System.Windows.Forms.Control target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTopInternal, target, value);
            else
                setTopInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Int32> setTopCallback = SetTop;
        public static IAsyncResult BeginSetTop(this System.Windows.Forms.Control target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setTopCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTop(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetTop(result);
        }
        public static void EndSetTop(IAsyncResult result)
        {
            setTopCallback.EndInvoke(result);
        }
        public static Task SetTopAsync(this System.Windows.Forms.Control target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Int32>(
                BeginSetTop,
                EndSetTop,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control> getTopLevelControlInternal = (x) => x.TopLevelControl;
        public static System.Windows.Forms.Control GetTopLevelControl(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Control)target.Invoke(getTopLevelControlInternal, target);
            else
                return getTopLevelControlInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Control> getTopLevelControlCallback = GetTopLevelControl;
        public static IAsyncResult BeginGetTopLevelControl(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getTopLevelControlCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Control EndGetTopLevelControl(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetTopLevelControl(result);
        }
        public static System.Windows.Forms.Control EndGetTopLevelControl(IAsyncResult result)
        {
            return getTopLevelControlCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetTopLevelControlAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetTopLevelControl,
                EndGetTopLevelControl,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getUseWaitCursorInternal = (x) => x.UseWaitCursor;
        public static System.Boolean GetUseWaitCursor(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getUseWaitCursorInternal, target);
            else
                return getUseWaitCursorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getUseWaitCursorCallback = GetUseWaitCursor;
        public static IAsyncResult BeginGetUseWaitCursor(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getUseWaitCursorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetUseWaitCursor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetUseWaitCursor(result);
        }
        public static System.Boolean EndGetUseWaitCursor(IAsyncResult result)
        {
            return getUseWaitCursorCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetUseWaitCursorAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetUseWaitCursor,
                EndGetUseWaitCursor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setUseWaitCursorInternal = (x, v) => x.UseWaitCursor = v;
        public static void SetUseWaitCursor(this System.Windows.Forms.Control target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUseWaitCursorInternal, target, value);
            else
                setUseWaitCursorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setUseWaitCursorCallback = SetUseWaitCursor;
        public static IAsyncResult BeginSetUseWaitCursor(this System.Windows.Forms.Control target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setUseWaitCursorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUseWaitCursor(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetUseWaitCursor(result);
        }
        public static void EndSetUseWaitCursor(IAsyncResult result)
        {
            setUseWaitCursorCallback.EndInvoke(result);
        }
        public static Task SetUseWaitCursorAsync(this System.Windows.Forms.Control target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                BeginSetUseWaitCursor,
                EndSetUseWaitCursor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getVisibleInternal = (x) => x.Visible;
        public static System.Boolean GetVisible(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getVisibleInternal, target);
            else
                return getVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Boolean> getVisibleCallback = GetVisible;
        public static IAsyncResult BeginGetVisible(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetVisible(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetVisible(result);
        }
        public static System.Boolean EndGetVisible(IAsyncResult result)
        {
            return getVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetVisibleAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetVisible,
                EndGetVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setVisibleInternal = (x, v) => x.Visible = v;
        public static void SetVisible(this System.Windows.Forms.Control target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setVisibleInternal, target, value);
            else
                setVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Boolean> setVisibleCallback = SetVisible;
        public static IAsyncResult BeginSetVisible(this System.Windows.Forms.Control target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetVisible(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetVisible(result);
        }
        public static void EndSetVisible(IAsyncResult result)
        {
            setVisibleCallback.EndInvoke(result);
        }
        public static Task SetVisibleAsync(this System.Windows.Forms.Control target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Boolean>(
                BeginSetVisible,
                EndSetVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Int32> getWidthInternal = (x) => x.Width;
        public static System.Int32 GetWidth(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getWidthInternal, target);
            else
                return getWidthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Int32> getWidthCallback = GetWidth;
        public static IAsyncResult BeginGetWidth(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getWidthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetWidth(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetWidth(result);
        }
        public static System.Int32 EndGetWidth(IAsyncResult result)
        {
            return getWidthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetWidthAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetWidth,
                EndGetWidth,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Int32> setWidthInternal = (x, v) => x.Width = v;
        public static void SetWidth(this System.Windows.Forms.Control target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setWidthInternal, target, value);
            else
                setWidthInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Int32> setWidthCallback = SetWidth;
        public static IAsyncResult BeginSetWidth(this System.Windows.Forms.Control target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setWidthCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetWidth(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetWidth(result);
        }
        public static void EndSetWidth(IAsyncResult result)
        {
            setWidthCallback.EndInvoke(result);
        }
        public static Task SetWidthAsync(this System.Windows.Forms.Control target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Int32>(
                BeginSetWidth,
                EndSetWidth,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.IWindowTarget> getWindowTargetInternal = (x) => x.WindowTarget;
        public static System.Windows.Forms.IWindowTarget GetWindowTarget(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.IWindowTarget)target.Invoke(getWindowTargetInternal, target);
            else
                return getWindowTargetInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.IWindowTarget> getWindowTargetCallback = GetWindowTarget;
        public static IAsyncResult BeginGetWindowTarget(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getWindowTargetCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.IWindowTarget EndGetWindowTarget(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetWindowTarget(result);
        }
        public static System.Windows.Forms.IWindowTarget EndGetWindowTarget(IAsyncResult result)
        {
            return getWindowTargetCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.IWindowTarget> GetWindowTargetAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.IWindowTarget>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetWindowTarget,
                EndGetWindowTarget,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.IWindowTarget> setWindowTargetInternal = (x, v) => x.WindowTarget = v;
        public static void SetWindowTarget(this System.Windows.Forms.Control target, System.Windows.Forms.IWindowTarget value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setWindowTargetInternal, target, value);
            else
                setWindowTargetInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.IWindowTarget> setWindowTargetCallback = SetWindowTarget;
        public static IAsyncResult BeginSetWindowTarget(this System.Windows.Forms.Control target, System.Windows.Forms.IWindowTarget value, AsyncCallback callback, object state)
        {
            return setWindowTargetCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetWindowTarget(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetWindowTarget(result);
        }
        public static void EndSetWindowTarget(IAsyncResult result)
        {
            setWindowTargetCallback.EndInvoke(result);
        }
        public static Task SetWindowTargetAsync(this System.Windows.Forms.Control target, System.Windows.Forms.IWindowTarget value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.IWindowTarget>(
                BeginSetWindowTarget,
                EndSetWindowTarget,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getPreferredSizeInternal = (x) => x.PreferredSize;
        public static System.Drawing.Size GetPreferredSize(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getPreferredSizeInternal, target);
            else
                return getPreferredSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Drawing.Size> getPreferredSizeCallback = GetPreferredSize;
        public static IAsyncResult BeginGetPreferredSize(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getPreferredSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetPreferredSize(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetPreferredSize(result);
        }
        public static System.Drawing.Size EndGetPreferredSize(IAsyncResult result)
        {
            return getPreferredSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetPreferredSizeAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetPreferredSize,
                EndGetPreferredSize,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Padding> getPaddingInternal = (x) => x.Padding;
        public static System.Windows.Forms.Padding GetPadding(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Padding)target.Invoke(getPaddingInternal, target);
            else
                return getPaddingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.Padding> getPaddingCallback = GetPadding;
        public static IAsyncResult BeginGetPadding(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getPaddingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Padding EndGetPadding(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetPadding(result);
        }
        public static System.Windows.Forms.Padding EndGetPadding(IAsyncResult result)
        {
            return getPaddingCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Padding> GetPaddingAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.Padding>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetPadding,
                EndGetPadding,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Padding> setPaddingInternal = (x, v) => x.Padding = v;
        public static void SetPadding(this System.Windows.Forms.Control target, System.Windows.Forms.Padding value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPaddingInternal, target, value);
            else
                setPaddingInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.Padding> setPaddingCallback = SetPadding;
        public static IAsyncResult BeginSetPadding(this System.Windows.Forms.Control target, System.Windows.Forms.Padding value, AsyncCallback callback, object state)
        {
            return setPaddingCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPadding(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetPadding(result);
        }
        public static void EndSetPadding(IAsyncResult result)
        {
            setPaddingCallback.EndInvoke(result);
        }
        public static Task SetPaddingAsync(this System.Windows.Forms.Control target, System.Windows.Forms.Padding value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.Padding>(
                BeginSetPadding,
                EndSetPadding,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ImeMode> getImeModeInternal = (x) => x.ImeMode;
        public static System.Windows.Forms.ImeMode GetImeMode(this System.Windows.Forms.Control target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ImeMode)target.Invoke(getImeModeInternal, target);
            else
                return getImeModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Control, System.Windows.Forms.ImeMode> getImeModeCallback = GetImeMode;
        public static IAsyncResult BeginGetImeMode(this System.Windows.Forms.Control target, AsyncCallback callback, object state)
        {
            return getImeModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ImeMode EndGetImeMode(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            return EndGetImeMode(result);
        }
        public static System.Windows.Forms.ImeMode EndGetImeMode(IAsyncResult result)
        {
            return getImeModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ImeMode> GetImeModeAsync(this System.Windows.Forms.Control target)
        {
            return Task<System.Windows.Forms.ImeMode>.Factory.FromAsync<System.Windows.Forms.Control>(
                BeginGetImeMode,
                EndGetImeMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.ImeMode> setImeModeInternal = (x, v) => x.ImeMode = v;
        public static void SetImeMode(this System.Windows.Forms.Control target, System.Windows.Forms.ImeMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setImeModeInternal, target, value);
            else
                setImeModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Control, System.Windows.Forms.ImeMode> setImeModeCallback = SetImeMode;
        public static IAsyncResult BeginSetImeMode(this System.Windows.Forms.Control target, System.Windows.Forms.ImeMode value, AsyncCallback callback, object state)
        {
            return setImeModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetImeMode(this System.Windows.Forms.Control target, IAsyncResult result)
        {
            EndSetImeMode(result);
        }
        public static void EndSetImeMode(IAsyncResult result)
        {
            setImeModeCallback.EndInvoke(result);
        }
        public static Task SetImeModeAsync(this System.Windows.Forms.Control target, System.Windows.Forms.ImeMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Control, System.Windows.Forms.ImeMode>(
                BeginSetImeMode,
                EndSetImeMode,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Windows.Forms.Control> scrollControlIntoView1Internal = (c, activeControl) => c.ScrollControlIntoView(activeControl);
        public static void ScrollControlIntoView(this System.Windows.Forms.ScrollableControl __control__, System.Windows.Forms.Control activeControl)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(scrollControlIntoView1Internal, __control__, activeControl);
            else
                scrollControlIntoView1Internal.Invoke(__control__, activeControl);
        }
        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Windows.Forms.Control> scrollControlIntoView1Callback = ScrollControlIntoView;
        public static IAsyncResult BeginScrollControlIntoView1(this System.Windows.Forms.ScrollableControl __control__, System.Windows.Forms.Control activeControl, AsyncCallback callback, object state)
        {
            return scrollControlIntoView1Callback.BeginInvoke(__control__, activeControl, callback, state);
        }
        public static void EndScrollControlIntoView1(this System.Windows.Forms.ScrollableControl __control__, IAsyncResult result)
        {
            EndScrollControlIntoView1(result);
        }
        public static void EndScrollControlIntoView1(IAsyncResult result)
        {
            scrollControlIntoView1Callback.EndInvoke(result);
        }
        public static Task ScrollControlIntoViewAsync(this System.Windows.Forms.ScrollableControl __control__, System.Windows.Forms.Control activeControl)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ScrollableControl, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.ScrollableControl, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginScrollControlIntoView1,
                (Action<IAsyncResult>)EndScrollControlIntoView1,
                __control__, activeControl, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Int32, System.Int32> setAutoScrollMargin1Internal = (c, x, y) => c.SetAutoScrollMargin(x, y);
        public static void SetAutoScrollMargin(this System.Windows.Forms.ScrollableControl __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setAutoScrollMargin1Internal, __control__, x, y);
            else
                setAutoScrollMargin1Internal.Invoke(__control__, x, y);
        }
        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Int32, System.Int32> setAutoScrollMargin1Callback = SetAutoScrollMargin;
        public static IAsyncResult BeginSetAutoScrollMargin1(this System.Windows.Forms.ScrollableControl __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return setAutoScrollMargin1Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static void EndSetAutoScrollMargin1(this System.Windows.Forms.ScrollableControl __control__, IAsyncResult result)
        {
            EndSetAutoScrollMargin1(result);
        }
        public static void EndSetAutoScrollMargin1(IAsyncResult result)
        {
            setAutoScrollMargin1Callback.EndInvoke(result);
        }
        public static Task SetAutoScrollMarginAsync(this System.Windows.Forms.ScrollableControl __control__, System.Int32 x, System.Int32 y)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ScrollableControl, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.ScrollableControl, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSetAutoScrollMargin1,
                (Action<IAsyncResult>)EndSetAutoScrollMargin1,
                __control__, x, y, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Boolean> getAutoScrollInternal = (x) => x.AutoScroll;
        public static System.Boolean GetAutoScroll(this System.Windows.Forms.ScrollableControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoScrollInternal, target);
            else
                return getAutoScrollInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Boolean> getAutoScrollCallback = GetAutoScroll;
        public static IAsyncResult BeginGetAutoScroll(this System.Windows.Forms.ScrollableControl target, AsyncCallback callback, object state)
        {
            return getAutoScrollCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoScroll(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            return EndGetAutoScroll(result);
        }
        public static System.Boolean EndGetAutoScroll(IAsyncResult result)
        {
            return getAutoScrollCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoScrollAsync(this System.Windows.Forms.ScrollableControl target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ScrollableControl>(
                BeginGetAutoScroll,
                EndGetAutoScroll,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Boolean> setAutoScrollInternal = (x, v) => x.AutoScroll = v;
        public static void SetAutoScroll(this System.Windows.Forms.ScrollableControl target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoScrollInternal, target, value);
            else
                setAutoScrollInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Boolean> setAutoScrollCallback = SetAutoScroll;
        public static IAsyncResult BeginSetAutoScroll(this System.Windows.Forms.ScrollableControl target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoScrollCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoScroll(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            EndSetAutoScroll(result);
        }
        public static void EndSetAutoScroll(IAsyncResult result)
        {
            setAutoScrollCallback.EndInvoke(result);
        }
        public static Task SetAutoScrollAsync(this System.Windows.Forms.ScrollableControl target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ScrollableControl, System.Boolean>(
                BeginSetAutoScroll,
                EndSetAutoScroll,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Drawing.Size> getAutoScrollMarginInternal = (x) => x.AutoScrollMargin;
        public static System.Drawing.Size GetAutoScrollMargin(this System.Windows.Forms.ScrollableControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getAutoScrollMarginInternal, target);
            else
                return getAutoScrollMarginInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Drawing.Size> getAutoScrollMarginCallback = GetAutoScrollMargin;
        public static IAsyncResult BeginGetAutoScrollMargin(this System.Windows.Forms.ScrollableControl target, AsyncCallback callback, object state)
        {
            return getAutoScrollMarginCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetAutoScrollMargin(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            return EndGetAutoScrollMargin(result);
        }
        public static System.Drawing.Size EndGetAutoScrollMargin(IAsyncResult result)
        {
            return getAutoScrollMarginCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetAutoScrollMarginAsync(this System.Windows.Forms.ScrollableControl target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.ScrollableControl>(
                BeginGetAutoScrollMargin,
                EndGetAutoScrollMargin,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Drawing.Size> setAutoScrollMarginInternal = (x, v) => x.AutoScrollMargin = v;
        public static void SetAutoScrollMargin(this System.Windows.Forms.ScrollableControl target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoScrollMarginInternal, target, value);
            else
                setAutoScrollMarginInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Drawing.Size> setAutoScrollMarginCallback = SetAutoScrollMargin;
        public static IAsyncResult BeginSetAutoScrollMargin(this System.Windows.Forms.ScrollableControl target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setAutoScrollMarginCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoScrollMargin(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            EndSetAutoScrollMargin(result);
        }
        public static void EndSetAutoScrollMargin(IAsyncResult result)
        {
            setAutoScrollMarginCallback.EndInvoke(result);
        }
        public static Task SetAutoScrollMarginAsync(this System.Windows.Forms.ScrollableControl target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ScrollableControl, System.Drawing.Size>(
                BeginSetAutoScrollMargin,
                EndSetAutoScrollMargin,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Drawing.Point> getAutoScrollPositionInternal = (x) => x.AutoScrollPosition;
        public static System.Drawing.Point GetAutoScrollPosition(this System.Windows.Forms.ScrollableControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Point)target.Invoke(getAutoScrollPositionInternal, target);
            else
                return getAutoScrollPositionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Drawing.Point> getAutoScrollPositionCallback = GetAutoScrollPosition;
        public static IAsyncResult BeginGetAutoScrollPosition(this System.Windows.Forms.ScrollableControl target, AsyncCallback callback, object state)
        {
            return getAutoScrollPositionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Point EndGetAutoScrollPosition(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            return EndGetAutoScrollPosition(result);
        }
        public static System.Drawing.Point EndGetAutoScrollPosition(IAsyncResult result)
        {
            return getAutoScrollPositionCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> GetAutoScrollPositionAsync(this System.Windows.Forms.ScrollableControl target)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.ScrollableControl>(
                BeginGetAutoScrollPosition,
                EndGetAutoScrollPosition,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Drawing.Point> setAutoScrollPositionInternal = (x, v) => x.AutoScrollPosition = v;
        public static void SetAutoScrollPosition(this System.Windows.Forms.ScrollableControl target, System.Drawing.Point value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoScrollPositionInternal, target, value);
            else
                setAutoScrollPositionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Drawing.Point> setAutoScrollPositionCallback = SetAutoScrollPosition;
        public static IAsyncResult BeginSetAutoScrollPosition(this System.Windows.Forms.ScrollableControl target, System.Drawing.Point value, AsyncCallback callback, object state)
        {
            return setAutoScrollPositionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoScrollPosition(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            EndSetAutoScrollPosition(result);
        }
        public static void EndSetAutoScrollPosition(IAsyncResult result)
        {
            setAutoScrollPositionCallback.EndInvoke(result);
        }
        public static Task SetAutoScrollPositionAsync(this System.Windows.Forms.ScrollableControl target, System.Drawing.Point value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ScrollableControl, System.Drawing.Point>(
                BeginSetAutoScrollPosition,
                EndSetAutoScrollPosition,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Drawing.Size> getAutoScrollMinSizeInternal = (x) => x.AutoScrollMinSize;
        public static System.Drawing.Size GetAutoScrollMinSize(this System.Windows.Forms.ScrollableControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getAutoScrollMinSizeInternal, target);
            else
                return getAutoScrollMinSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Drawing.Size> getAutoScrollMinSizeCallback = GetAutoScrollMinSize;
        public static IAsyncResult BeginGetAutoScrollMinSize(this System.Windows.Forms.ScrollableControl target, AsyncCallback callback, object state)
        {
            return getAutoScrollMinSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetAutoScrollMinSize(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            return EndGetAutoScrollMinSize(result);
        }
        public static System.Drawing.Size EndGetAutoScrollMinSize(IAsyncResult result)
        {
            return getAutoScrollMinSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetAutoScrollMinSizeAsync(this System.Windows.Forms.ScrollableControl target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.ScrollableControl>(
                BeginGetAutoScrollMinSize,
                EndGetAutoScrollMinSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Drawing.Size> setAutoScrollMinSizeInternal = (x, v) => x.AutoScrollMinSize = v;
        public static void SetAutoScrollMinSize(this System.Windows.Forms.ScrollableControl target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoScrollMinSizeInternal, target, value);
            else
                setAutoScrollMinSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ScrollableControl, System.Drawing.Size> setAutoScrollMinSizeCallback = SetAutoScrollMinSize;
        public static IAsyncResult BeginSetAutoScrollMinSize(this System.Windows.Forms.ScrollableControl target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setAutoScrollMinSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoScrollMinSize(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            EndSetAutoScrollMinSize(result);
        }
        public static void EndSetAutoScrollMinSize(IAsyncResult result)
        {
            setAutoScrollMinSizeCallback.EndInvoke(result);
        }
        public static Task SetAutoScrollMinSizeAsync(this System.Windows.Forms.ScrollableControl target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ScrollableControl, System.Drawing.Size>(
                BeginSetAutoScrollMinSize,
                EndSetAutoScrollMinSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Windows.Forms.HScrollProperties> getHorizontalScrollInternal = (x) => x.HorizontalScroll;
        public static System.Windows.Forms.HScrollProperties GetHorizontalScroll(this System.Windows.Forms.ScrollableControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.HScrollProperties)target.Invoke(getHorizontalScrollInternal, target);
            else
                return getHorizontalScrollInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Windows.Forms.HScrollProperties> getHorizontalScrollCallback = GetHorizontalScroll;
        public static IAsyncResult BeginGetHorizontalScroll(this System.Windows.Forms.ScrollableControl target, AsyncCallback callback, object state)
        {
            return getHorizontalScrollCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.HScrollProperties EndGetHorizontalScroll(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            return EndGetHorizontalScroll(result);
        }
        public static System.Windows.Forms.HScrollProperties EndGetHorizontalScroll(IAsyncResult result)
        {
            return getHorizontalScrollCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.HScrollProperties> GetHorizontalScrollAsync(this System.Windows.Forms.ScrollableControl target)
        {
            return Task<System.Windows.Forms.HScrollProperties>.Factory.FromAsync<System.Windows.Forms.ScrollableControl>(
                BeginGetHorizontalScroll,
                EndGetHorizontalScroll,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Windows.Forms.VScrollProperties> getVerticalScrollInternal = (x) => x.VerticalScroll;
        public static System.Windows.Forms.VScrollProperties GetVerticalScroll(this System.Windows.Forms.ScrollableControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.VScrollProperties)target.Invoke(getVerticalScrollInternal, target);
            else
                return getVerticalScrollInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Windows.Forms.VScrollProperties> getVerticalScrollCallback = GetVerticalScroll;
        public static IAsyncResult BeginGetVerticalScroll(this System.Windows.Forms.ScrollableControl target, AsyncCallback callback, object state)
        {
            return getVerticalScrollCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.VScrollProperties EndGetVerticalScroll(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            return EndGetVerticalScroll(result);
        }
        public static System.Windows.Forms.VScrollProperties EndGetVerticalScroll(IAsyncResult result)
        {
            return getVerticalScrollCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.VScrollProperties> GetVerticalScrollAsync(this System.Windows.Forms.ScrollableControl target)
        {
            return Task<System.Windows.Forms.VScrollProperties>.Factory.FromAsync<System.Windows.Forms.ScrollableControl>(
                BeginGetVerticalScroll,
                EndGetVerticalScroll,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Windows.Forms.ScrollableControl.DockPaddingEdges> getDockPaddingInternal = (x) => x.DockPadding;
        public static System.Windows.Forms.ScrollableControl.DockPaddingEdges GetDockPadding(this System.Windows.Forms.ScrollableControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ScrollableControl.DockPaddingEdges)target.Invoke(getDockPaddingInternal, target);
            else
                return getDockPaddingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ScrollableControl, System.Windows.Forms.ScrollableControl.DockPaddingEdges> getDockPaddingCallback = GetDockPadding;
        public static IAsyncResult BeginGetDockPadding(this System.Windows.Forms.ScrollableControl target, AsyncCallback callback, object state)
        {
            return getDockPaddingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ScrollableControl.DockPaddingEdges EndGetDockPadding(this System.Windows.Forms.ScrollableControl target, IAsyncResult result)
        {
            return EndGetDockPadding(result);
        }
        public static System.Windows.Forms.ScrollableControl.DockPaddingEdges EndGetDockPadding(IAsyncResult result)
        {
            return getDockPaddingCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ScrollableControl.DockPaddingEdges> GetDockPaddingAsync(this System.Windows.Forms.ScrollableControl target)
        {
            return Task<System.Windows.Forms.ScrollableControl.DockPaddingEdges>.Factory.FromAsync<System.Windows.Forms.ScrollableControl>(
                BeginGetDockPadding,
                EndGetDockPadding,
                target, null);
        }


        private static readonly Action<System.Windows.Forms.ContainerControl> performAutoScale1Internal = (c) => c.PerformAutoScale();
        public static void PerformAutoScale(this System.Windows.Forms.ContainerControl __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(performAutoScale1Internal, __control__);
            else
                performAutoScale1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ContainerControl> performAutoScale1Callback = PerformAutoScale;
        public static IAsyncResult BeginPerformAutoScale1(this System.Windows.Forms.ContainerControl __control__, AsyncCallback callback, object state)
        {
            return performAutoScale1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndPerformAutoScale1(this System.Windows.Forms.ContainerControl __control__, IAsyncResult result)
        {
            EndPerformAutoScale1(result);
        }
        public static void EndPerformAutoScale1(IAsyncResult result)
        {
            performAutoScale1Callback.EndInvoke(result);
        }
        public static Task PerformAutoScaleAsync(this System.Windows.Forms.ContainerControl __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ContainerControl>(
                (Func<System.Windows.Forms.ContainerControl, AsyncCallback, object, IAsyncResult>)BeginPerformAutoScale1,
                (Action<IAsyncResult>)EndPerformAutoScale1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ContainerControl, System.Boolean> validate1Internal = (c) => c.Validate();
        public static System.Boolean Validate(this System.Windows.Forms.ContainerControl __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(validate1Internal, __control__);
            else
                return validate1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Boolean> validate1Callback = Validate;
        public static IAsyncResult BeginValidate1(this System.Windows.Forms.ContainerControl __control__, AsyncCallback callback, object state)
        {
            return validate1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndValidate1(this System.Windows.Forms.ContainerControl __control__, IAsyncResult result)
        {
            return EndValidate1(result);
        }
        public static System.Boolean EndValidate1(IAsyncResult result)
        {
            return validate1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ValidateAsync(this System.Windows.Forms.ContainerControl __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ContainerControl>(
                (Func<System.Windows.Forms.ContainerControl, AsyncCallback, object, IAsyncResult>)BeginValidate1,
                (Func<IAsyncResult, System.Boolean>)EndValidate1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ContainerControl, System.Boolean, System.Boolean> validate2Internal = (c, checkAutoValidate) => c.Validate(checkAutoValidate);
        public static System.Boolean Validate(this System.Windows.Forms.ContainerControl __control__, System.Boolean checkAutoValidate)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(validate2Internal, __control__, checkAutoValidate);
            else
                return validate2Internal.Invoke(__control__, checkAutoValidate);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Boolean, System.Boolean> validate2Callback = Validate;
        public static IAsyncResult BeginValidate2(this System.Windows.Forms.ContainerControl __control__, System.Boolean checkAutoValidate, AsyncCallback callback, object state)
        {
            return validate2Callback.BeginInvoke(__control__, checkAutoValidate, callback, state);
        }
        public static System.Boolean EndValidate2(this System.Windows.Forms.ContainerControl __control__, IAsyncResult result)
        {
            return EndValidate2(result);
        }
        public static System.Boolean EndValidate2(IAsyncResult result)
        {
            return validate2Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ValidateAsync(this System.Windows.Forms.ContainerControl __control__, System.Boolean checkAutoValidate)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ContainerControl, System.Boolean>(
                (Func<System.Windows.Forms.ContainerControl, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginValidate2,
                (Func<IAsyncResult, System.Boolean>)EndValidate2,
                __control__, checkAutoValidate, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ContainerControl, System.Boolean> validateChildren1Internal = (c) => c.ValidateChildren();
        public static System.Boolean ValidateChildren(this System.Windows.Forms.ContainerControl __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(validateChildren1Internal, __control__);
            else
                return validateChildren1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Boolean> validateChildren1Callback = ValidateChildren;
        public static IAsyncResult BeginValidateChildren1(this System.Windows.Forms.ContainerControl __control__, AsyncCallback callback, object state)
        {
            return validateChildren1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndValidateChildren1(this System.Windows.Forms.ContainerControl __control__, IAsyncResult result)
        {
            return EndValidateChildren1(result);
        }
        public static System.Boolean EndValidateChildren1(IAsyncResult result)
        {
            return validateChildren1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ValidateChildrenAsync(this System.Windows.Forms.ContainerControl __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ContainerControl>(
                (Func<System.Windows.Forms.ContainerControl, AsyncCallback, object, IAsyncResult>)BeginValidateChildren1,
                (Func<IAsyncResult, System.Boolean>)EndValidateChildren1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.ValidationConstraints, System.Boolean> validateChildren2Internal = (c, validationConstraints) => c.ValidateChildren(validationConstraints);
        public static System.Boolean ValidateChildren(this System.Windows.Forms.ContainerControl __control__, System.Windows.Forms.ValidationConstraints validationConstraints)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(validateChildren2Internal, __control__, validationConstraints);
            else
                return validateChildren2Internal.Invoke(__control__, validationConstraints);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.ValidationConstraints, System.Boolean> validateChildren2Callback = ValidateChildren;
        public static IAsyncResult BeginValidateChildren2(this System.Windows.Forms.ContainerControl __control__, System.Windows.Forms.ValidationConstraints validationConstraints, AsyncCallback callback, object state)
        {
            return validateChildren2Callback.BeginInvoke(__control__, validationConstraints, callback, state);
        }
        public static System.Boolean EndValidateChildren2(this System.Windows.Forms.ContainerControl __control__, IAsyncResult result)
        {
            return EndValidateChildren2(result);
        }
        public static System.Boolean EndValidateChildren2(IAsyncResult result)
        {
            return validateChildren2Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ValidateChildrenAsync(this System.Windows.Forms.ContainerControl __control__, System.Windows.Forms.ValidationConstraints validationConstraints)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ContainerControl, System.Windows.Forms.ValidationConstraints>(
                (Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.ValidationConstraints, AsyncCallback, object, IAsyncResult>)BeginValidateChildren2,
                (Func<IAsyncResult, System.Boolean>)EndValidateChildren2,
                __control__, validationConstraints, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Drawing.SizeF> getAutoScaleDimensionsInternal = (x) => x.AutoScaleDimensions;
        public static System.Drawing.SizeF GetAutoScaleDimensions(this System.Windows.Forms.ContainerControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.SizeF)target.Invoke(getAutoScaleDimensionsInternal, target);
            else
                return getAutoScaleDimensionsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Drawing.SizeF> getAutoScaleDimensionsCallback = GetAutoScaleDimensions;
        public static IAsyncResult BeginGetAutoScaleDimensions(this System.Windows.Forms.ContainerControl target, AsyncCallback callback, object state)
        {
            return getAutoScaleDimensionsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.SizeF EndGetAutoScaleDimensions(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            return EndGetAutoScaleDimensions(result);
        }
        public static System.Drawing.SizeF EndGetAutoScaleDimensions(IAsyncResult result)
        {
            return getAutoScaleDimensionsCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.SizeF> GetAutoScaleDimensionsAsync(this System.Windows.Forms.ContainerControl target)
        {
            return Task<System.Drawing.SizeF>.Factory.FromAsync<System.Windows.Forms.ContainerControl>(
                BeginGetAutoScaleDimensions,
                EndGetAutoScaleDimensions,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ContainerControl, System.Drawing.SizeF> setAutoScaleDimensionsInternal = (x, v) => x.AutoScaleDimensions = v;
        public static void SetAutoScaleDimensions(this System.Windows.Forms.ContainerControl target, System.Drawing.SizeF value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoScaleDimensionsInternal, target, value);
            else
                setAutoScaleDimensionsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ContainerControl, System.Drawing.SizeF> setAutoScaleDimensionsCallback = SetAutoScaleDimensions;
        public static IAsyncResult BeginSetAutoScaleDimensions(this System.Windows.Forms.ContainerControl target, System.Drawing.SizeF value, AsyncCallback callback, object state)
        {
            return setAutoScaleDimensionsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoScaleDimensions(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            EndSetAutoScaleDimensions(result);
        }
        public static void EndSetAutoScaleDimensions(IAsyncResult result)
        {
            setAutoScaleDimensionsCallback.EndInvoke(result);
        }
        public static Task SetAutoScaleDimensionsAsync(this System.Windows.Forms.ContainerControl target, System.Drawing.SizeF value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ContainerControl, System.Drawing.SizeF>(
                BeginSetAutoScaleDimensions,
                EndSetAutoScaleDimensions,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoScaleMode> getAutoScaleModeInternal = (x) => x.AutoScaleMode;
        public static System.Windows.Forms.AutoScaleMode GetAutoScaleMode(this System.Windows.Forms.ContainerControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AutoScaleMode)target.Invoke(getAutoScaleModeInternal, target);
            else
                return getAutoScaleModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoScaleMode> getAutoScaleModeCallback = GetAutoScaleMode;
        public static IAsyncResult BeginGetAutoScaleMode(this System.Windows.Forms.ContainerControl target, AsyncCallback callback, object state)
        {
            return getAutoScaleModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AutoScaleMode EndGetAutoScaleMode(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            return EndGetAutoScaleMode(result);
        }
        public static System.Windows.Forms.AutoScaleMode EndGetAutoScaleMode(IAsyncResult result)
        {
            return getAutoScaleModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AutoScaleMode> GetAutoScaleModeAsync(this System.Windows.Forms.ContainerControl target)
        {
            return Task<System.Windows.Forms.AutoScaleMode>.Factory.FromAsync<System.Windows.Forms.ContainerControl>(
                BeginGetAutoScaleMode,
                EndGetAutoScaleMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoScaleMode> setAutoScaleModeInternal = (x, v) => x.AutoScaleMode = v;
        public static void SetAutoScaleMode(this System.Windows.Forms.ContainerControl target, System.Windows.Forms.AutoScaleMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoScaleModeInternal, target, value);
            else
                setAutoScaleModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoScaleMode> setAutoScaleModeCallback = SetAutoScaleMode;
        public static IAsyncResult BeginSetAutoScaleMode(this System.Windows.Forms.ContainerControl target, System.Windows.Forms.AutoScaleMode value, AsyncCallback callback, object state)
        {
            return setAutoScaleModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoScaleMode(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            EndSetAutoScaleMode(result);
        }
        public static void EndSetAutoScaleMode(IAsyncResult result)
        {
            setAutoScaleModeCallback.EndInvoke(result);
        }
        public static Task SetAutoScaleModeAsync(this System.Windows.Forms.ContainerControl target, System.Windows.Forms.AutoScaleMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoScaleMode>(
                BeginSetAutoScaleMode,
                EndSetAutoScaleMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoValidate> getAutoValidateInternal = (x) => x.AutoValidate;
        public static System.Windows.Forms.AutoValidate GetAutoValidate(this System.Windows.Forms.ContainerControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AutoValidate)target.Invoke(getAutoValidateInternal, target);
            else
                return getAutoValidateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoValidate> getAutoValidateCallback = GetAutoValidate;
        public static IAsyncResult BeginGetAutoValidate(this System.Windows.Forms.ContainerControl target, AsyncCallback callback, object state)
        {
            return getAutoValidateCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AutoValidate EndGetAutoValidate(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            return EndGetAutoValidate(result);
        }
        public static System.Windows.Forms.AutoValidate EndGetAutoValidate(IAsyncResult result)
        {
            return getAutoValidateCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AutoValidate> GetAutoValidateAsync(this System.Windows.Forms.ContainerControl target)
        {
            return Task<System.Windows.Forms.AutoValidate>.Factory.FromAsync<System.Windows.Forms.ContainerControl>(
                BeginGetAutoValidate,
                EndGetAutoValidate,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoValidate> setAutoValidateInternal = (x, v) => x.AutoValidate = v;
        public static void SetAutoValidate(this System.Windows.Forms.ContainerControl target, System.Windows.Forms.AutoValidate value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoValidateInternal, target, value);
            else
                setAutoValidateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoValidate> setAutoValidateCallback = SetAutoValidate;
        public static IAsyncResult BeginSetAutoValidate(this System.Windows.Forms.ContainerControl target, System.Windows.Forms.AutoValidate value, AsyncCallback callback, object state)
        {
            return setAutoValidateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoValidate(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            EndSetAutoValidate(result);
        }
        public static void EndSetAutoValidate(IAsyncResult result)
        {
            setAutoValidateCallback.EndInvoke(result);
        }
        public static Task SetAutoValidateAsync(this System.Windows.Forms.ContainerControl target, System.Windows.Forms.AutoValidate value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ContainerControl, System.Windows.Forms.AutoValidate>(
                BeginSetAutoValidate,
                EndSetAutoValidate,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.Control> getActiveControlInternal = (x) => x.ActiveControl;
        public static System.Windows.Forms.Control GetActiveControl(this System.Windows.Forms.ContainerControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Control)target.Invoke(getActiveControlInternal, target);
            else
                return getActiveControlInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.Control> getActiveControlCallback = GetActiveControl;
        public static IAsyncResult BeginGetActiveControl(this System.Windows.Forms.ContainerControl target, AsyncCallback callback, object state)
        {
            return getActiveControlCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Control EndGetActiveControl(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            return EndGetActiveControl(result);
        }
        public static System.Windows.Forms.Control EndGetActiveControl(IAsyncResult result)
        {
            return getActiveControlCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetActiveControlAsync(this System.Windows.Forms.ContainerControl target)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.ContainerControl>(
                BeginGetActiveControl,
                EndGetActiveControl,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ContainerControl, System.Windows.Forms.Control> setActiveControlInternal = (x, v) => x.ActiveControl = v;
        public static void SetActiveControl(this System.Windows.Forms.ContainerControl target, System.Windows.Forms.Control value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setActiveControlInternal, target, value);
            else
                setActiveControlInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ContainerControl, System.Windows.Forms.Control> setActiveControlCallback = SetActiveControl;
        public static IAsyncResult BeginSetActiveControl(this System.Windows.Forms.ContainerControl target, System.Windows.Forms.Control value, AsyncCallback callback, object state)
        {
            return setActiveControlCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetActiveControl(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            EndSetActiveControl(result);
        }
        public static void EndSetActiveControl(IAsyncResult result)
        {
            setActiveControlCallback.EndInvoke(result);
        }
        public static Task SetActiveControlAsync(this System.Windows.Forms.ContainerControl target, System.Windows.Forms.Control value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ContainerControl, System.Windows.Forms.Control>(
                BeginSetActiveControl,
                EndSetActiveControl,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ContainerControl, System.Drawing.SizeF> getCurrentAutoScaleDimensionsInternal = (x) => x.CurrentAutoScaleDimensions;
        public static System.Drawing.SizeF GetCurrentAutoScaleDimensions(this System.Windows.Forms.ContainerControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.SizeF)target.Invoke(getCurrentAutoScaleDimensionsInternal, target);
            else
                return getCurrentAutoScaleDimensionsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Drawing.SizeF> getCurrentAutoScaleDimensionsCallback = GetCurrentAutoScaleDimensions;
        public static IAsyncResult BeginGetCurrentAutoScaleDimensions(this System.Windows.Forms.ContainerControl target, AsyncCallback callback, object state)
        {
            return getCurrentAutoScaleDimensionsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.SizeF EndGetCurrentAutoScaleDimensions(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            return EndGetCurrentAutoScaleDimensions(result);
        }
        public static System.Drawing.SizeF EndGetCurrentAutoScaleDimensions(IAsyncResult result)
        {
            return getCurrentAutoScaleDimensionsCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.SizeF> GetCurrentAutoScaleDimensionsAsync(this System.Windows.Forms.ContainerControl target)
        {
            return Task<System.Drawing.SizeF>.Factory.FromAsync<System.Windows.Forms.ContainerControl>(
                BeginGetCurrentAutoScaleDimensions,
                EndGetCurrentAutoScaleDimensions,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.Form> getParentFormInternal = (x) => x.ParentForm;
        public static System.Windows.Forms.Form GetParentForm(this System.Windows.Forms.ContainerControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Form)target.Invoke(getParentFormInternal, target);
            else
                return getParentFormInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ContainerControl, System.Windows.Forms.Form> getParentFormCallback = GetParentForm;
        public static IAsyncResult BeginGetParentForm(this System.Windows.Forms.ContainerControl target, AsyncCallback callback, object state)
        {
            return getParentFormCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Form EndGetParentForm(this System.Windows.Forms.ContainerControl target, IAsyncResult result)
        {
            return EndGetParentForm(result);
        }
        public static System.Windows.Forms.Form EndGetParentForm(IAsyncResult result)
        {
            return getParentFormCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Form> GetParentFormAsync(this System.Windows.Forms.ContainerControl target)
        {
            return Task<System.Windows.Forms.Form>.Factory.FromAsync<System.Windows.Forms.ContainerControl>(
                BeginGetParentForm,
                EndGetParentForm,
                target, null);
        }


        private static readonly Action<System.Windows.Forms.UpDownBase> downButton1Internal = (c) => c.DownButton();
        public static void DownButton(this System.Windows.Forms.UpDownBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(downButton1Internal, __control__);
            else
                downButton1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.UpDownBase> downButton1Callback = DownButton;
        public static IAsyncResult BeginDownButton1(this System.Windows.Forms.UpDownBase __control__, AsyncCallback callback, object state)
        {
            return downButton1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndDownButton1(this System.Windows.Forms.UpDownBase __control__, IAsyncResult result)
        {
            EndDownButton1(result);
        }
        public static void EndDownButton1(IAsyncResult result)
        {
            downButton1Callback.EndInvoke(result);
        }
        public static Task DownButtonAsync(this System.Windows.Forms.UpDownBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.UpDownBase>(
                (Func<System.Windows.Forms.UpDownBase, AsyncCallback, object, IAsyncResult>)BeginDownButton1,
                (Action<IAsyncResult>)EndDownButton1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.UpDownBase, System.Int32, System.Int32> select2Internal = (c, start, length) => c.Select(start, length);
        public static void Select(this System.Windows.Forms.UpDownBase __control__, System.Int32 start, System.Int32 length)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(select2Internal, __control__, start, length);
            else
                select2Internal.Invoke(__control__, start, length);
        }
        private static readonly Action<System.Windows.Forms.UpDownBase, System.Int32, System.Int32> select2Callback = Select;
        public static IAsyncResult BeginSelect2(this System.Windows.Forms.UpDownBase __control__, System.Int32 start, System.Int32 length, AsyncCallback callback, object state)
        {
            return select2Callback.BeginInvoke(__control__, start, length, callback, state);
        }
        public static void EndSelect2(this System.Windows.Forms.UpDownBase __control__, IAsyncResult result)
        {
            EndSelect2(result);
        }
        public static void EndSelect2(IAsyncResult result)
        {
            select2Callback.EndInvoke(result);
        }
        public static Task SelectAsync(this System.Windows.Forms.UpDownBase __control__, System.Int32 start, System.Int32 length)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.UpDownBase, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.UpDownBase, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSelect2,
                (Action<IAsyncResult>)EndSelect2,
                __control__, start, length, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.UpDownBase> upButton1Internal = (c) => c.UpButton();
        public static void UpButton(this System.Windows.Forms.UpDownBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(upButton1Internal, __control__);
            else
                upButton1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.UpDownBase> upButton1Callback = UpButton;
        public static IAsyncResult BeginUpButton1(this System.Windows.Forms.UpDownBase __control__, AsyncCallback callback, object state)
        {
            return upButton1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndUpButton1(this System.Windows.Forms.UpDownBase __control__, IAsyncResult result)
        {
            EndUpButton1(result);
        }
        public static void EndUpButton1(IAsyncResult result)
        {
            upButton1Callback.EndInvoke(result);
        }
        public static Task UpButtonAsync(this System.Windows.Forms.UpDownBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.UpDownBase>(
                (Func<System.Windows.Forms.UpDownBase, AsyncCallback, object, IAsyncResult>)BeginUpButton1,
                (Action<IAsyncResult>)EndUpButton1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.UpDownBase, System.Windows.Forms.BorderStyle> getBorderStyleInternal = (x) => x.BorderStyle;
        public static System.Windows.Forms.BorderStyle GetBorderStyle(this System.Windows.Forms.UpDownBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.BorderStyle)target.Invoke(getBorderStyleInternal, target);
            else
                return getBorderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.UpDownBase, System.Windows.Forms.BorderStyle> getBorderStyleCallback = GetBorderStyle;
        public static IAsyncResult BeginGetBorderStyle(this System.Windows.Forms.UpDownBase target, AsyncCallback callback, object state)
        {
            return getBorderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.BorderStyle EndGetBorderStyle(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            return EndGetBorderStyle(result);
        }
        public static System.Windows.Forms.BorderStyle EndGetBorderStyle(IAsyncResult result)
        {
            return getBorderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.BorderStyle> GetBorderStyleAsync(this System.Windows.Forms.UpDownBase target)
        {
            return Task<System.Windows.Forms.BorderStyle>.Factory.FromAsync<System.Windows.Forms.UpDownBase>(
                BeginGetBorderStyle,
                EndGetBorderStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.UpDownBase, System.Windows.Forms.BorderStyle> setBorderStyleInternal = (x, v) => x.BorderStyle = v;
        public static void SetBorderStyle(this System.Windows.Forms.UpDownBase target, System.Windows.Forms.BorderStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBorderStyleInternal, target, value);
            else
                setBorderStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.UpDownBase, System.Windows.Forms.BorderStyle> setBorderStyleCallback = SetBorderStyle;
        public static IAsyncResult BeginSetBorderStyle(this System.Windows.Forms.UpDownBase target, System.Windows.Forms.BorderStyle value, AsyncCallback callback, object state)
        {
            return setBorderStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBorderStyle(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            EndSetBorderStyle(result);
        }
        public static void EndSetBorderStyle(IAsyncResult result)
        {
            setBorderStyleCallback.EndInvoke(result);
        }
        public static Task SetBorderStyleAsync(this System.Windows.Forms.UpDownBase target, System.Windows.Forms.BorderStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.UpDownBase, System.Windows.Forms.BorderStyle>(
                BeginSetBorderStyle,
                EndSetBorderStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.UpDownBase, System.Boolean> getInterceptArrowKeysInternal = (x) => x.InterceptArrowKeys;
        public static System.Boolean GetInterceptArrowKeys(this System.Windows.Forms.UpDownBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getInterceptArrowKeysInternal, target);
            else
                return getInterceptArrowKeysInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.UpDownBase, System.Boolean> getInterceptArrowKeysCallback = GetInterceptArrowKeys;
        public static IAsyncResult BeginGetInterceptArrowKeys(this System.Windows.Forms.UpDownBase target, AsyncCallback callback, object state)
        {
            return getInterceptArrowKeysCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetInterceptArrowKeys(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            return EndGetInterceptArrowKeys(result);
        }
        public static System.Boolean EndGetInterceptArrowKeys(IAsyncResult result)
        {
            return getInterceptArrowKeysCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetInterceptArrowKeysAsync(this System.Windows.Forms.UpDownBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.UpDownBase>(
                BeginGetInterceptArrowKeys,
                EndGetInterceptArrowKeys,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.UpDownBase, System.Boolean> setInterceptArrowKeysInternal = (x, v) => x.InterceptArrowKeys = v;
        public static void SetInterceptArrowKeys(this System.Windows.Forms.UpDownBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setInterceptArrowKeysInternal, target, value);
            else
                setInterceptArrowKeysInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.UpDownBase, System.Boolean> setInterceptArrowKeysCallback = SetInterceptArrowKeys;
        public static IAsyncResult BeginSetInterceptArrowKeys(this System.Windows.Forms.UpDownBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setInterceptArrowKeysCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetInterceptArrowKeys(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            EndSetInterceptArrowKeys(result);
        }
        public static void EndSetInterceptArrowKeys(IAsyncResult result)
        {
            setInterceptArrowKeysCallback.EndInvoke(result);
        }
        public static Task SetInterceptArrowKeysAsync(this System.Windows.Forms.UpDownBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.UpDownBase, System.Boolean>(
                BeginSetInterceptArrowKeys,
                EndSetInterceptArrowKeys,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.UpDownBase, System.Int32> getPreferredHeightInternal = (x) => x.PreferredHeight;
        public static System.Int32 GetPreferredHeight(this System.Windows.Forms.UpDownBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getPreferredHeightInternal, target);
            else
                return getPreferredHeightInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.UpDownBase, System.Int32> getPreferredHeightCallback = GetPreferredHeight;
        public static IAsyncResult BeginGetPreferredHeight(this System.Windows.Forms.UpDownBase target, AsyncCallback callback, object state)
        {
            return getPreferredHeightCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetPreferredHeight(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            return EndGetPreferredHeight(result);
        }
        public static System.Int32 EndGetPreferredHeight(IAsyncResult result)
        {
            return getPreferredHeightCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetPreferredHeightAsync(this System.Windows.Forms.UpDownBase target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.UpDownBase>(
                BeginGetPreferredHeight,
                EndGetPreferredHeight,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.UpDownBase, System.Boolean> getReadOnlyInternal = (x) => x.ReadOnly;
        public static System.Boolean GetReadOnly(this System.Windows.Forms.UpDownBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getReadOnlyInternal, target);
            else
                return getReadOnlyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.UpDownBase, System.Boolean> getReadOnlyCallback = GetReadOnly;
        public static IAsyncResult BeginGetReadOnly(this System.Windows.Forms.UpDownBase target, AsyncCallback callback, object state)
        {
            return getReadOnlyCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetReadOnly(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            return EndGetReadOnly(result);
        }
        public static System.Boolean EndGetReadOnly(IAsyncResult result)
        {
            return getReadOnlyCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetReadOnlyAsync(this System.Windows.Forms.UpDownBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.UpDownBase>(
                BeginGetReadOnly,
                EndGetReadOnly,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.UpDownBase, System.Boolean> setReadOnlyInternal = (x, v) => x.ReadOnly = v;
        public static void SetReadOnly(this System.Windows.Forms.UpDownBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setReadOnlyInternal, target, value);
            else
                setReadOnlyInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.UpDownBase, System.Boolean> setReadOnlyCallback = SetReadOnly;
        public static IAsyncResult BeginSetReadOnly(this System.Windows.Forms.UpDownBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setReadOnlyCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetReadOnly(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            EndSetReadOnly(result);
        }
        public static void EndSetReadOnly(IAsyncResult result)
        {
            setReadOnlyCallback.EndInvoke(result);
        }
        public static Task SetReadOnlyAsync(this System.Windows.Forms.UpDownBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.UpDownBase, System.Boolean>(
                BeginSetReadOnly,
                EndSetReadOnly,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.UpDownBase, System.Windows.Forms.HorizontalAlignment> getTextAlignInternal = (x) => x.TextAlign;
        public static System.Windows.Forms.HorizontalAlignment GetTextAlign(this System.Windows.Forms.UpDownBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.HorizontalAlignment)target.Invoke(getTextAlignInternal, target);
            else
                return getTextAlignInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.UpDownBase, System.Windows.Forms.HorizontalAlignment> getTextAlignCallback = GetTextAlign;
        public static IAsyncResult BeginGetTextAlign(this System.Windows.Forms.UpDownBase target, AsyncCallback callback, object state)
        {
            return getTextAlignCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.HorizontalAlignment EndGetTextAlign(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            return EndGetTextAlign(result);
        }
        public static System.Windows.Forms.HorizontalAlignment EndGetTextAlign(IAsyncResult result)
        {
            return getTextAlignCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.HorizontalAlignment> GetTextAlignAsync(this System.Windows.Forms.UpDownBase target)
        {
            return Task<System.Windows.Forms.HorizontalAlignment>.Factory.FromAsync<System.Windows.Forms.UpDownBase>(
                BeginGetTextAlign,
                EndGetTextAlign,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.UpDownBase, System.Windows.Forms.HorizontalAlignment> setTextAlignInternal = (x, v) => x.TextAlign = v;
        public static void SetTextAlign(this System.Windows.Forms.UpDownBase target, System.Windows.Forms.HorizontalAlignment value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTextAlignInternal, target, value);
            else
                setTextAlignInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.UpDownBase, System.Windows.Forms.HorizontalAlignment> setTextAlignCallback = SetTextAlign;
        public static IAsyncResult BeginSetTextAlign(this System.Windows.Forms.UpDownBase target, System.Windows.Forms.HorizontalAlignment value, AsyncCallback callback, object state)
        {
            return setTextAlignCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTextAlign(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            EndSetTextAlign(result);
        }
        public static void EndSetTextAlign(IAsyncResult result)
        {
            setTextAlignCallback.EndInvoke(result);
        }
        public static Task SetTextAlignAsync(this System.Windows.Forms.UpDownBase target, System.Windows.Forms.HorizontalAlignment value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.UpDownBase, System.Windows.Forms.HorizontalAlignment>(
                BeginSetTextAlign,
                EndSetTextAlign,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.UpDownBase, System.Windows.Forms.LeftRightAlignment> getUpDownAlignInternal = (x) => x.UpDownAlign;
        public static System.Windows.Forms.LeftRightAlignment GetUpDownAlign(this System.Windows.Forms.UpDownBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.LeftRightAlignment)target.Invoke(getUpDownAlignInternal, target);
            else
                return getUpDownAlignInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.UpDownBase, System.Windows.Forms.LeftRightAlignment> getUpDownAlignCallback = GetUpDownAlign;
        public static IAsyncResult BeginGetUpDownAlign(this System.Windows.Forms.UpDownBase target, AsyncCallback callback, object state)
        {
            return getUpDownAlignCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.LeftRightAlignment EndGetUpDownAlign(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            return EndGetUpDownAlign(result);
        }
        public static System.Windows.Forms.LeftRightAlignment EndGetUpDownAlign(IAsyncResult result)
        {
            return getUpDownAlignCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.LeftRightAlignment> GetUpDownAlignAsync(this System.Windows.Forms.UpDownBase target)
        {
            return Task<System.Windows.Forms.LeftRightAlignment>.Factory.FromAsync<System.Windows.Forms.UpDownBase>(
                BeginGetUpDownAlign,
                EndGetUpDownAlign,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.UpDownBase, System.Windows.Forms.LeftRightAlignment> setUpDownAlignInternal = (x, v) => x.UpDownAlign = v;
        public static void SetUpDownAlign(this System.Windows.Forms.UpDownBase target, System.Windows.Forms.LeftRightAlignment value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUpDownAlignInternal, target, value);
            else
                setUpDownAlignInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.UpDownBase, System.Windows.Forms.LeftRightAlignment> setUpDownAlignCallback = SetUpDownAlign;
        public static IAsyncResult BeginSetUpDownAlign(this System.Windows.Forms.UpDownBase target, System.Windows.Forms.LeftRightAlignment value, AsyncCallback callback, object state)
        {
            return setUpDownAlignCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUpDownAlign(this System.Windows.Forms.UpDownBase target, IAsyncResult result)
        {
            EndSetUpDownAlign(result);
        }
        public static void EndSetUpDownAlign(IAsyncResult result)
        {
            setUpDownAlignCallback.EndInvoke(result);
        }
        public static Task SetUpDownAlignAsync(this System.Windows.Forms.UpDownBase target, System.Windows.Forms.LeftRightAlignment value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.UpDownBase, System.Windows.Forms.LeftRightAlignment>(
                BeginSetUpDownAlign,
                EndSetUpDownAlign,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.DomainUpDown> downButton2Internal = (c) => c.DownButton();
        public static void DownButton(this System.Windows.Forms.DomainUpDown __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(downButton2Internal, __control__);
            else
                downButton2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DomainUpDown> downButton2Callback = DownButton;
        public static IAsyncResult BeginDownButton2(this System.Windows.Forms.DomainUpDown __control__, AsyncCallback callback, object state)
        {
            return downButton2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndDownButton2(this System.Windows.Forms.DomainUpDown __control__, IAsyncResult result)
        {
            EndDownButton2(result);
        }
        public static void EndDownButton2(IAsyncResult result)
        {
            downButton2Callback.EndInvoke(result);
        }
        public static Task DownButtonAsync(this System.Windows.Forms.DomainUpDown __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DomainUpDown>(
                (Func<System.Windows.Forms.DomainUpDown, AsyncCallback, object, IAsyncResult>)BeginDownButton2,
                (Action<IAsyncResult>)EndDownButton2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DomainUpDown> upButton2Internal = (c) => c.UpButton();
        public static void UpButton(this System.Windows.Forms.DomainUpDown __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(upButton2Internal, __control__);
            else
                upButton2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DomainUpDown> upButton2Callback = UpButton;
        public static IAsyncResult BeginUpButton2(this System.Windows.Forms.DomainUpDown __control__, AsyncCallback callback, object state)
        {
            return upButton2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndUpButton2(this System.Windows.Forms.DomainUpDown __control__, IAsyncResult result)
        {
            EndUpButton2(result);
        }
        public static void EndUpButton2(IAsyncResult result)
        {
            upButton2Callback.EndInvoke(result);
        }
        public static Task UpButtonAsync(this System.Windows.Forms.DomainUpDown __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DomainUpDown>(
                (Func<System.Windows.Forms.DomainUpDown, AsyncCallback, object, IAsyncResult>)BeginUpButton2,
                (Action<IAsyncResult>)EndUpButton2,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection> getItemsInternal = (x) => x.Items;
        public static System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection GetItems(this System.Windows.Forms.DomainUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection)target.Invoke(getItemsInternal, target);
            else
                return getItemsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection> getItemsCallback = GetItems;
        public static IAsyncResult BeginGetItems(this System.Windows.Forms.DomainUpDown target, AsyncCallback callback, object state)
        {
            return getItemsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection EndGetItems(this System.Windows.Forms.DomainUpDown target, IAsyncResult result)
        {
            return EndGetItems(result);
        }
        public static System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection EndGetItems(IAsyncResult result)
        {
            return getItemsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection> GetItemsAsync(this System.Windows.Forms.DomainUpDown target)
        {
            return Task<System.Windows.Forms.DomainUpDown.DomainUpDownItemCollection>.Factory.FromAsync<System.Windows.Forms.DomainUpDown>(
                BeginGetItems,
                EndGetItems,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Int32> getSelectedIndexInternal = (x) => x.SelectedIndex;
        public static System.Int32 GetSelectedIndex(this System.Windows.Forms.DomainUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSelectedIndexInternal, target);
            else
                return getSelectedIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Int32> getSelectedIndexCallback = GetSelectedIndex;
        public static IAsyncResult BeginGetSelectedIndex(this System.Windows.Forms.DomainUpDown target, AsyncCallback callback, object state)
        {
            return getSelectedIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSelectedIndex(this System.Windows.Forms.DomainUpDown target, IAsyncResult result)
        {
            return EndGetSelectedIndex(result);
        }
        public static System.Int32 EndGetSelectedIndex(IAsyncResult result)
        {
            return getSelectedIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSelectedIndexAsync(this System.Windows.Forms.DomainUpDown target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DomainUpDown>(
                BeginGetSelectedIndex,
                EndGetSelectedIndex,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DomainUpDown, System.Int32> setSelectedIndexInternal = (x, v) => x.SelectedIndex = v;
        public static void SetSelectedIndex(this System.Windows.Forms.DomainUpDown target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedIndexInternal, target, value);
            else
                setSelectedIndexInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DomainUpDown, System.Int32> setSelectedIndexCallback = SetSelectedIndex;
        public static IAsyncResult BeginSetSelectedIndex(this System.Windows.Forms.DomainUpDown target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSelectedIndexCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedIndex(this System.Windows.Forms.DomainUpDown target, IAsyncResult result)
        {
            EndSetSelectedIndex(result);
        }
        public static void EndSetSelectedIndex(IAsyncResult result)
        {
            setSelectedIndexCallback.EndInvoke(result);
        }
        public static Task SetSelectedIndexAsync(this System.Windows.Forms.DomainUpDown target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DomainUpDown, System.Int32>(
                BeginSetSelectedIndex,
                EndSetSelectedIndex,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Object> getSelectedItemInternal = (x) => x.SelectedItem;
        public static System.Object GetSelectedItem(this System.Windows.Forms.DomainUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Object)target.Invoke(getSelectedItemInternal, target);
            else
                return getSelectedItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Object> getSelectedItemCallback = GetSelectedItem;
        public static IAsyncResult BeginGetSelectedItem(this System.Windows.Forms.DomainUpDown target, AsyncCallback callback, object state)
        {
            return getSelectedItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Object EndGetSelectedItem(this System.Windows.Forms.DomainUpDown target, IAsyncResult result)
        {
            return EndGetSelectedItem(result);
        }
        public static System.Object EndGetSelectedItem(IAsyncResult result)
        {
            return getSelectedItemCallback.EndInvoke(result);
        }
        public static Task<System.Object> GetSelectedItemAsync(this System.Windows.Forms.DomainUpDown target)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.DomainUpDown>(
                BeginGetSelectedItem,
                EndGetSelectedItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DomainUpDown, System.Object> setSelectedItemInternal = (x, v) => x.SelectedItem = v;
        public static void SetSelectedItem(this System.Windows.Forms.DomainUpDown target, System.Object value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedItemInternal, target, value);
            else
                setSelectedItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DomainUpDown, System.Object> setSelectedItemCallback = SetSelectedItem;
        public static IAsyncResult BeginSetSelectedItem(this System.Windows.Forms.DomainUpDown target, System.Object value, AsyncCallback callback, object state)
        {
            return setSelectedItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedItem(this System.Windows.Forms.DomainUpDown target, IAsyncResult result)
        {
            EndSetSelectedItem(result);
        }
        public static void EndSetSelectedItem(IAsyncResult result)
        {
            setSelectedItemCallback.EndInvoke(result);
        }
        public static Task SetSelectedItemAsync(this System.Windows.Forms.DomainUpDown target, System.Object value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DomainUpDown, System.Object>(
                BeginSetSelectedItem,
                EndSetSelectedItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Boolean> getSortedInternal = (x) => x.Sorted;
        public static System.Boolean GetSorted(this System.Windows.Forms.DomainUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getSortedInternal, target);
            else
                return getSortedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Boolean> getSortedCallback = GetSorted;
        public static IAsyncResult BeginGetSorted(this System.Windows.Forms.DomainUpDown target, AsyncCallback callback, object state)
        {
            return getSortedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetSorted(this System.Windows.Forms.DomainUpDown target, IAsyncResult result)
        {
            return EndGetSorted(result);
        }
        public static System.Boolean EndGetSorted(IAsyncResult result)
        {
            return getSortedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetSortedAsync(this System.Windows.Forms.DomainUpDown target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DomainUpDown>(
                BeginGetSorted,
                EndGetSorted,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DomainUpDown, System.Boolean> setSortedInternal = (x, v) => x.Sorted = v;
        public static void SetSorted(this System.Windows.Forms.DomainUpDown target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSortedInternal, target, value);
            else
                setSortedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DomainUpDown, System.Boolean> setSortedCallback = SetSorted;
        public static IAsyncResult BeginSetSorted(this System.Windows.Forms.DomainUpDown target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setSortedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSorted(this System.Windows.Forms.DomainUpDown target, IAsyncResult result)
        {
            EndSetSorted(result);
        }
        public static void EndSetSorted(IAsyncResult result)
        {
            setSortedCallback.EndInvoke(result);
        }
        public static Task SetSortedAsync(this System.Windows.Forms.DomainUpDown target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DomainUpDown, System.Boolean>(
                BeginSetSorted,
                EndSetSorted,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Boolean> getWrapInternal = (x) => x.Wrap;
        public static System.Boolean GetWrap(this System.Windows.Forms.DomainUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getWrapInternal, target);
            else
                return getWrapInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DomainUpDown, System.Boolean> getWrapCallback = GetWrap;
        public static IAsyncResult BeginGetWrap(this System.Windows.Forms.DomainUpDown target, AsyncCallback callback, object state)
        {
            return getWrapCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetWrap(this System.Windows.Forms.DomainUpDown target, IAsyncResult result)
        {
            return EndGetWrap(result);
        }
        public static System.Boolean EndGetWrap(IAsyncResult result)
        {
            return getWrapCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetWrapAsync(this System.Windows.Forms.DomainUpDown target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DomainUpDown>(
                BeginGetWrap,
                EndGetWrap,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DomainUpDown, System.Boolean> setWrapInternal = (x, v) => x.Wrap = v;
        public static void SetWrap(this System.Windows.Forms.DomainUpDown target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setWrapInternal, target, value);
            else
                setWrapInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DomainUpDown, System.Boolean> setWrapCallback = SetWrap;
        public static IAsyncResult BeginSetWrap(this System.Windows.Forms.DomainUpDown target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setWrapCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetWrap(this System.Windows.Forms.DomainUpDown target, IAsyncResult result)
        {
            EndSetWrap(result);
        }
        public static void EndSetWrap(IAsyncResult result)
        {
            setWrapCallback.EndInvoke(result);
        }
        public static Task SetWrapAsync(this System.Windows.Forms.DomainUpDown target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DomainUpDown, System.Boolean>(
                BeginSetWrap,
                EndSetWrap,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.NumericUpDown> downButton3Internal = (c) => c.DownButton();
        public static void DownButton(this System.Windows.Forms.NumericUpDown __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(downButton3Internal, __control__);
            else
                downButton3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.NumericUpDown> downButton3Callback = DownButton;
        public static IAsyncResult BeginDownButton3(this System.Windows.Forms.NumericUpDown __control__, AsyncCallback callback, object state)
        {
            return downButton3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndDownButton3(this System.Windows.Forms.NumericUpDown __control__, IAsyncResult result)
        {
            EndDownButton3(result);
        }
        public static void EndDownButton3(IAsyncResult result)
        {
            downButton3Callback.EndInvoke(result);
        }
        public static Task DownButtonAsync(this System.Windows.Forms.NumericUpDown __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                (Func<System.Windows.Forms.NumericUpDown, AsyncCallback, object, IAsyncResult>)BeginDownButton3,
                (Action<IAsyncResult>)EndDownButton3,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.NumericUpDown> upButton3Internal = (c) => c.UpButton();
        public static void UpButton(this System.Windows.Forms.NumericUpDown __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(upButton3Internal, __control__);
            else
                upButton3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.NumericUpDown> upButton3Callback = UpButton;
        public static IAsyncResult BeginUpButton3(this System.Windows.Forms.NumericUpDown __control__, AsyncCallback callback, object state)
        {
            return upButton3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndUpButton3(this System.Windows.Forms.NumericUpDown __control__, IAsyncResult result)
        {
            EndUpButton3(result);
        }
        public static void EndUpButton3(IAsyncResult result)
        {
            upButton3Callback.EndInvoke(result);
        }
        public static Task UpButtonAsync(this System.Windows.Forms.NumericUpDown __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                (Func<System.Windows.Forms.NumericUpDown, AsyncCallback, object, IAsyncResult>)BeginUpButton3,
                (Action<IAsyncResult>)EndUpButton3,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Windows.Forms.NumericUpDownAccelerationCollection> getAccelerationsInternal = (x) => x.Accelerations;
        public static System.Windows.Forms.NumericUpDownAccelerationCollection GetAccelerations(this System.Windows.Forms.NumericUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.NumericUpDownAccelerationCollection)target.Invoke(getAccelerationsInternal, target);
            else
                return getAccelerationsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Windows.Forms.NumericUpDownAccelerationCollection> getAccelerationsCallback = GetAccelerations;
        public static IAsyncResult BeginGetAccelerations(this System.Windows.Forms.NumericUpDown target, AsyncCallback callback, object state)
        {
            return getAccelerationsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.NumericUpDownAccelerationCollection EndGetAccelerations(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            return EndGetAccelerations(result);
        }
        public static System.Windows.Forms.NumericUpDownAccelerationCollection EndGetAccelerations(IAsyncResult result)
        {
            return getAccelerationsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.NumericUpDownAccelerationCollection> GetAccelerationsAsync(this System.Windows.Forms.NumericUpDown target)
        {
            return Task<System.Windows.Forms.NumericUpDownAccelerationCollection>.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                BeginGetAccelerations,
                EndGetAccelerations,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Int32> getDecimalPlacesInternal = (x) => x.DecimalPlaces;
        public static System.Int32 GetDecimalPlaces(this System.Windows.Forms.NumericUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getDecimalPlacesInternal, target);
            else
                return getDecimalPlacesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Int32> getDecimalPlacesCallback = GetDecimalPlaces;
        public static IAsyncResult BeginGetDecimalPlaces(this System.Windows.Forms.NumericUpDown target, AsyncCallback callback, object state)
        {
            return getDecimalPlacesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetDecimalPlaces(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            return EndGetDecimalPlaces(result);
        }
        public static System.Int32 EndGetDecimalPlaces(IAsyncResult result)
        {
            return getDecimalPlacesCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetDecimalPlacesAsync(this System.Windows.Forms.NumericUpDown target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                BeginGetDecimalPlaces,
                EndGetDecimalPlaces,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Int32> setDecimalPlacesInternal = (x, v) => x.DecimalPlaces = v;
        public static void SetDecimalPlaces(this System.Windows.Forms.NumericUpDown target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDecimalPlacesInternal, target, value);
            else
                setDecimalPlacesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Int32> setDecimalPlacesCallback = SetDecimalPlaces;
        public static IAsyncResult BeginSetDecimalPlaces(this System.Windows.Forms.NumericUpDown target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setDecimalPlacesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDecimalPlaces(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            EndSetDecimalPlaces(result);
        }
        public static void EndSetDecimalPlaces(IAsyncResult result)
        {
            setDecimalPlacesCallback.EndInvoke(result);
        }
        public static Task SetDecimalPlacesAsync(this System.Windows.Forms.NumericUpDown target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.NumericUpDown, System.Int32>(
                BeginSetDecimalPlaces,
                EndSetDecimalPlaces,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Boolean> getHexadecimalInternal = (x) => x.Hexadecimal;
        public static System.Boolean GetHexadecimal(this System.Windows.Forms.NumericUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHexadecimalInternal, target);
            else
                return getHexadecimalInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Boolean> getHexadecimalCallback = GetHexadecimal;
        public static IAsyncResult BeginGetHexadecimal(this System.Windows.Forms.NumericUpDown target, AsyncCallback callback, object state)
        {
            return getHexadecimalCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHexadecimal(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            return EndGetHexadecimal(result);
        }
        public static System.Boolean EndGetHexadecimal(IAsyncResult result)
        {
            return getHexadecimalCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHexadecimalAsync(this System.Windows.Forms.NumericUpDown target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                BeginGetHexadecimal,
                EndGetHexadecimal,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Boolean> setHexadecimalInternal = (x, v) => x.Hexadecimal = v;
        public static void SetHexadecimal(this System.Windows.Forms.NumericUpDown target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHexadecimalInternal, target, value);
            else
                setHexadecimalInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Boolean> setHexadecimalCallback = SetHexadecimal;
        public static IAsyncResult BeginSetHexadecimal(this System.Windows.Forms.NumericUpDown target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setHexadecimalCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHexadecimal(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            EndSetHexadecimal(result);
        }
        public static void EndSetHexadecimal(IAsyncResult result)
        {
            setHexadecimalCallback.EndInvoke(result);
        }
        public static Task SetHexadecimalAsync(this System.Windows.Forms.NumericUpDown target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.NumericUpDown, System.Boolean>(
                BeginSetHexadecimal,
                EndSetHexadecimal,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Decimal> getIncrementInternal = (x) => x.Increment;
        public static System.Decimal GetIncrement(this System.Windows.Forms.NumericUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Decimal)target.Invoke(getIncrementInternal, target);
            else
                return getIncrementInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Decimal> getIncrementCallback = GetIncrement;
        public static IAsyncResult BeginGetIncrement(this System.Windows.Forms.NumericUpDown target, AsyncCallback callback, object state)
        {
            return getIncrementCallback.BeginInvoke(target, callback, state);
        }
        public static System.Decimal EndGetIncrement(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            return EndGetIncrement(result);
        }
        public static System.Decimal EndGetIncrement(IAsyncResult result)
        {
            return getIncrementCallback.EndInvoke(result);
        }
        public static Task<System.Decimal> GetIncrementAsync(this System.Windows.Forms.NumericUpDown target)
        {
            return Task<System.Decimal>.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                BeginGetIncrement,
                EndGetIncrement,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Decimal> setIncrementInternal = (x, v) => x.Increment = v;
        public static void SetIncrement(this System.Windows.Forms.NumericUpDown target, System.Decimal value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setIncrementInternal, target, value);
            else
                setIncrementInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Decimal> setIncrementCallback = SetIncrement;
        public static IAsyncResult BeginSetIncrement(this System.Windows.Forms.NumericUpDown target, System.Decimal value, AsyncCallback callback, object state)
        {
            return setIncrementCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetIncrement(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            EndSetIncrement(result);
        }
        public static void EndSetIncrement(IAsyncResult result)
        {
            setIncrementCallback.EndInvoke(result);
        }
        public static Task SetIncrementAsync(this System.Windows.Forms.NumericUpDown target, System.Decimal value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.NumericUpDown, System.Decimal>(
                BeginSetIncrement,
                EndSetIncrement,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Decimal> getMaximumInternal = (x) => x.Maximum;
        public static System.Decimal GetMaximum(this System.Windows.Forms.NumericUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Decimal)target.Invoke(getMaximumInternal, target);
            else
                return getMaximumInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Decimal> getMaximumCallback = GetMaximum;
        public static IAsyncResult BeginGetMaximum(this System.Windows.Forms.NumericUpDown target, AsyncCallback callback, object state)
        {
            return getMaximumCallback.BeginInvoke(target, callback, state);
        }
        public static System.Decimal EndGetMaximum(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            return EndGetMaximum(result);
        }
        public static System.Decimal EndGetMaximum(IAsyncResult result)
        {
            return getMaximumCallback.EndInvoke(result);
        }
        public static Task<System.Decimal> GetMaximumAsync(this System.Windows.Forms.NumericUpDown target)
        {
            return Task<System.Decimal>.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                BeginGetMaximum,
                EndGetMaximum,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Decimal> setMaximumInternal = (x, v) => x.Maximum = v;
        public static void SetMaximum(this System.Windows.Forms.NumericUpDown target, System.Decimal value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMaximumInternal, target, value);
            else
                setMaximumInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Decimal> setMaximumCallback = SetMaximum;
        public static IAsyncResult BeginSetMaximum(this System.Windows.Forms.NumericUpDown target, System.Decimal value, AsyncCallback callback, object state)
        {
            return setMaximumCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMaximum(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            EndSetMaximum(result);
        }
        public static void EndSetMaximum(IAsyncResult result)
        {
            setMaximumCallback.EndInvoke(result);
        }
        public static Task SetMaximumAsync(this System.Windows.Forms.NumericUpDown target, System.Decimal value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.NumericUpDown, System.Decimal>(
                BeginSetMaximum,
                EndSetMaximum,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Decimal> getMinimumInternal = (x) => x.Minimum;
        public static System.Decimal GetMinimum(this System.Windows.Forms.NumericUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Decimal)target.Invoke(getMinimumInternal, target);
            else
                return getMinimumInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Decimal> getMinimumCallback = GetMinimum;
        public static IAsyncResult BeginGetMinimum(this System.Windows.Forms.NumericUpDown target, AsyncCallback callback, object state)
        {
            return getMinimumCallback.BeginInvoke(target, callback, state);
        }
        public static System.Decimal EndGetMinimum(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            return EndGetMinimum(result);
        }
        public static System.Decimal EndGetMinimum(IAsyncResult result)
        {
            return getMinimumCallback.EndInvoke(result);
        }
        public static Task<System.Decimal> GetMinimumAsync(this System.Windows.Forms.NumericUpDown target)
        {
            return Task<System.Decimal>.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                BeginGetMinimum,
                EndGetMinimum,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Decimal> setMinimumInternal = (x, v) => x.Minimum = v;
        public static void SetMinimum(this System.Windows.Forms.NumericUpDown target, System.Decimal value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMinimumInternal, target, value);
            else
                setMinimumInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Decimal> setMinimumCallback = SetMinimum;
        public static IAsyncResult BeginSetMinimum(this System.Windows.Forms.NumericUpDown target, System.Decimal value, AsyncCallback callback, object state)
        {
            return setMinimumCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMinimum(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            EndSetMinimum(result);
        }
        public static void EndSetMinimum(IAsyncResult result)
        {
            setMinimumCallback.EndInvoke(result);
        }
        public static Task SetMinimumAsync(this System.Windows.Forms.NumericUpDown target, System.Decimal value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.NumericUpDown, System.Decimal>(
                BeginSetMinimum,
                EndSetMinimum,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Boolean> getThousandsSeparatorInternal = (x) => x.ThousandsSeparator;
        public static System.Boolean GetThousandsSeparator(this System.Windows.Forms.NumericUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getThousandsSeparatorInternal, target);
            else
                return getThousandsSeparatorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Boolean> getThousandsSeparatorCallback = GetThousandsSeparator;
        public static IAsyncResult BeginGetThousandsSeparator(this System.Windows.Forms.NumericUpDown target, AsyncCallback callback, object state)
        {
            return getThousandsSeparatorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetThousandsSeparator(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            return EndGetThousandsSeparator(result);
        }
        public static System.Boolean EndGetThousandsSeparator(IAsyncResult result)
        {
            return getThousandsSeparatorCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetThousandsSeparatorAsync(this System.Windows.Forms.NumericUpDown target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                BeginGetThousandsSeparator,
                EndGetThousandsSeparator,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Boolean> setThousandsSeparatorInternal = (x, v) => x.ThousandsSeparator = v;
        public static void SetThousandsSeparator(this System.Windows.Forms.NumericUpDown target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setThousandsSeparatorInternal, target, value);
            else
                setThousandsSeparatorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Boolean> setThousandsSeparatorCallback = SetThousandsSeparator;
        public static IAsyncResult BeginSetThousandsSeparator(this System.Windows.Forms.NumericUpDown target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setThousandsSeparatorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetThousandsSeparator(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            EndSetThousandsSeparator(result);
        }
        public static void EndSetThousandsSeparator(IAsyncResult result)
        {
            setThousandsSeparatorCallback.EndInvoke(result);
        }
        public static Task SetThousandsSeparatorAsync(this System.Windows.Forms.NumericUpDown target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.NumericUpDown, System.Boolean>(
                BeginSetThousandsSeparator,
                EndSetThousandsSeparator,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Decimal> getValueInternal = (x) => x.Value;
        public static System.Decimal GetValue(this System.Windows.Forms.NumericUpDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Decimal)target.Invoke(getValueInternal, target);
            else
                return getValueInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.NumericUpDown, System.Decimal> getValueCallback = GetValue;
        public static IAsyncResult BeginGetValue(this System.Windows.Forms.NumericUpDown target, AsyncCallback callback, object state)
        {
            return getValueCallback.BeginInvoke(target, callback, state);
        }
        public static System.Decimal EndGetValue(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            return EndGetValue(result);
        }
        public static System.Decimal EndGetValue(IAsyncResult result)
        {
            return getValueCallback.EndInvoke(result);
        }
        public static Task<System.Decimal> GetValueAsync(this System.Windows.Forms.NumericUpDown target)
        {
            return Task<System.Decimal>.Factory.FromAsync<System.Windows.Forms.NumericUpDown>(
                BeginGetValue,
                EndGetValue,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Decimal> setValueInternal = (x, v) => x.Value = v;
        public static void SetValue(this System.Windows.Forms.NumericUpDown target, System.Decimal value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setValueInternal, target, value);
            else
                setValueInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.NumericUpDown, System.Decimal> setValueCallback = SetValue;
        public static IAsyncResult BeginSetValue(this System.Windows.Forms.NumericUpDown target, System.Decimal value, AsyncCallback callback, object state)
        {
            return setValueCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetValue(this System.Windows.Forms.NumericUpDown target, IAsyncResult result)
        {
            EndSetValue(result);
        }
        public static void EndSetValue(IAsyncResult result)
        {
            setValueCallback.EndInvoke(result);
        }
        public static Task SetValueAsync(this System.Windows.Forms.NumericUpDown target, System.Decimal value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.NumericUpDown, System.Decimal>(
                BeginSetValue,
                EndSetValue,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.Form> activate1Internal = (c) => c.Activate();
        public static void Activate(this System.Windows.Forms.Form __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(activate1Internal, __control__);
            else
                activate1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Form> activate1Callback = Activate;
        public static IAsyncResult BeginActivate1(this System.Windows.Forms.Form __control__, AsyncCallback callback, object state)
        {
            return activate1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndActivate1(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            EndActivate1(result);
        }
        public static void EndActivate1(IAsyncResult result)
        {
            activate1Callback.EndInvoke(result);
        }
        public static Task ActivateAsync(this System.Windows.Forms.Form __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form>(
                (Func<System.Windows.Forms.Form, AsyncCallback, object, IAsyncResult>)BeginActivate1,
                (Action<IAsyncResult>)EndActivate1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.Form> addOwnedForm1Internal = (c, ownedForm) => c.AddOwnedForm(ownedForm);
        public static void AddOwnedForm(this System.Windows.Forms.Form __control__, System.Windows.Forms.Form ownedForm)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(addOwnedForm1Internal, __control__, ownedForm);
            else
                addOwnedForm1Internal.Invoke(__control__, ownedForm);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.Form> addOwnedForm1Callback = AddOwnedForm;
        public static IAsyncResult BeginAddOwnedForm1(this System.Windows.Forms.Form __control__, System.Windows.Forms.Form ownedForm, AsyncCallback callback, object state)
        {
            return addOwnedForm1Callback.BeginInvoke(__control__, ownedForm, callback, state);
        }
        public static void EndAddOwnedForm1(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            EndAddOwnedForm1(result);
        }
        public static void EndAddOwnedForm1(IAsyncResult result)
        {
            addOwnedForm1Callback.EndInvoke(result);
        }
        public static Task AddOwnedFormAsync(this System.Windows.Forms.Form __control__, System.Windows.Forms.Form ownedForm)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.Form>(
                (Func<System.Windows.Forms.Form, System.Windows.Forms.Form, AsyncCallback, object, IAsyncResult>)BeginAddOwnedForm1,
                (Action<IAsyncResult>)EndAddOwnedForm1,
                __control__, ownedForm, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Form> close1Internal = (c) => c.Close();
        public static void Close(this System.Windows.Forms.Form __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(close1Internal, __control__);
            else
                close1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Form> close1Callback = Close;
        public static IAsyncResult BeginClose1(this System.Windows.Forms.Form __control__, AsyncCallback callback, object state)
        {
            return close1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndClose1(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            EndClose1(result);
        }
        public static void EndClose1(IAsyncResult result)
        {
            close1Callback.EndInvoke(result);
        }
        public static Task CloseAsync(this System.Windows.Forms.Form __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form>(
                (Func<System.Windows.Forms.Form, AsyncCallback, object, IAsyncResult>)BeginClose1,
                (Action<IAsyncResult>)EndClose1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.MdiLayout> layoutMdi1Internal = (c, value) => c.LayoutMdi(value);
        public static void LayoutMdi(this System.Windows.Forms.Form __control__, System.Windows.Forms.MdiLayout value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(layoutMdi1Internal, __control__, value);
            else
                layoutMdi1Internal.Invoke(__control__, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.MdiLayout> layoutMdi1Callback = LayoutMdi;
        public static IAsyncResult BeginLayoutMdi1(this System.Windows.Forms.Form __control__, System.Windows.Forms.MdiLayout value, AsyncCallback callback, object state)
        {
            return layoutMdi1Callback.BeginInvoke(__control__, value, callback, state);
        }
        public static void EndLayoutMdi1(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            EndLayoutMdi1(result);
        }
        public static void EndLayoutMdi1(IAsyncResult result)
        {
            layoutMdi1Callback.EndInvoke(result);
        }
        public static Task LayoutMdiAsync(this System.Windows.Forms.Form __control__, System.Windows.Forms.MdiLayout value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.MdiLayout>(
                (Func<System.Windows.Forms.Form, System.Windows.Forms.MdiLayout, AsyncCallback, object, IAsyncResult>)BeginLayoutMdi1,
                (Action<IAsyncResult>)EndLayoutMdi1,
                __control__, value, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.Form> removeOwnedForm1Internal = (c, ownedForm) => c.RemoveOwnedForm(ownedForm);
        public static void RemoveOwnedForm(this System.Windows.Forms.Form __control__, System.Windows.Forms.Form ownedForm)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(removeOwnedForm1Internal, __control__, ownedForm);
            else
                removeOwnedForm1Internal.Invoke(__control__, ownedForm);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.Form> removeOwnedForm1Callback = RemoveOwnedForm;
        public static IAsyncResult BeginRemoveOwnedForm1(this System.Windows.Forms.Form __control__, System.Windows.Forms.Form ownedForm, AsyncCallback callback, object state)
        {
            return removeOwnedForm1Callback.BeginInvoke(__control__, ownedForm, callback, state);
        }
        public static void EndRemoveOwnedForm1(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            EndRemoveOwnedForm1(result);
        }
        public static void EndRemoveOwnedForm1(IAsyncResult result)
        {
            removeOwnedForm1Callback.EndInvoke(result);
        }
        public static Task RemoveOwnedFormAsync(this System.Windows.Forms.Form __control__, System.Windows.Forms.Form ownedForm)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.Form>(
                (Func<System.Windows.Forms.Form, System.Windows.Forms.Form, AsyncCallback, object, IAsyncResult>)BeginRemoveOwnedForm1,
                (Action<IAsyncResult>)EndRemoveOwnedForm1,
                __control__, ownedForm, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Int32, System.Int32, System.Int32, System.Int32> setDesktopBounds1Internal = (c, x, y, width, height) => c.SetDesktopBounds(x, y, width, height);
        public static void SetDesktopBounds(this System.Windows.Forms.Form __control__, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setDesktopBounds1Internal, __control__, x, y, width, height);
            else
                setDesktopBounds1Internal.Invoke(__control__, x, y, width, height);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Int32, System.Int32, System.Int32, System.Int32> setDesktopBounds1Callback = SetDesktopBounds;
        public static IAsyncResult BeginSetDesktopBounds1(this System.Windows.Forms.Form __control__, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height, AsyncCallback callback, object state)
        {
            return setDesktopBounds1Callback.BeginInvoke(__control__, x, y, width, height, callback, state);
        }
        public static void EndSetDesktopBounds1(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            EndSetDesktopBounds1(result);
        }
        public static void EndSetDesktopBounds1(IAsyncResult result)
        {
            setDesktopBounds1Callback.EndInvoke(result);
        }
        public static Task SetDesktopBoundsAsync(this System.Windows.Forms.Form __control__, System.Int32 x, System.Int32 y, System.Int32 width, System.Int32 height)
        {
            return Task.Factory.FromAsync(
                BeginSetDesktopBounds1(__control__, x, y, width, height, null, null),
                (Action<IAsyncResult>)EndSetDesktopBounds1);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Int32, System.Int32> setDesktopLocation1Internal = (c, x, y) => c.SetDesktopLocation(x, y);
        public static void SetDesktopLocation(this System.Windows.Forms.Form __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setDesktopLocation1Internal, __control__, x, y);
            else
                setDesktopLocation1Internal.Invoke(__control__, x, y);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Int32, System.Int32> setDesktopLocation1Callback = SetDesktopLocation;
        public static IAsyncResult BeginSetDesktopLocation1(this System.Windows.Forms.Form __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return setDesktopLocation1Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static void EndSetDesktopLocation1(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            EndSetDesktopLocation1(result);
        }
        public static void EndSetDesktopLocation1(IAsyncResult result)
        {
            setDesktopLocation1Callback.EndInvoke(result);
        }
        public static Task SetDesktopLocationAsync(this System.Windows.Forms.Form __control__, System.Int32 x, System.Int32 y)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.Form, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSetDesktopLocation1,
                (Action<IAsyncResult>)EndSetDesktopLocation1,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.IWin32Window> show2Internal = (c, owner) => c.Show(owner);
        public static void Show(this System.Windows.Forms.Form __control__, System.Windows.Forms.IWin32Window owner)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(show2Internal, __control__, owner);
            else
                show2Internal.Invoke(__control__, owner);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.IWin32Window> show2Callback = Show;
        public static IAsyncResult BeginShow2(this System.Windows.Forms.Form __control__, System.Windows.Forms.IWin32Window owner, AsyncCallback callback, object state)
        {
            return show2Callback.BeginInvoke(__control__, owner, callback, state);
        }
        public static void EndShow2(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            EndShow2(result);
        }
        public static void EndShow2(IAsyncResult result)
        {
            show2Callback.EndInvoke(result);
        }
        public static Task ShowAsync(this System.Windows.Forms.Form __control__, System.Windows.Forms.IWin32Window owner)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.IWin32Window>(
                (Func<System.Windows.Forms.Form, System.Windows.Forms.IWin32Window, AsyncCallback, object, IAsyncResult>)BeginShow2,
                (Action<IAsyncResult>)EndShow2,
                __control__, owner, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.DialogResult> showDialog1Internal = (c) => c.ShowDialog();
        public static System.Windows.Forms.DialogResult ShowDialog(this System.Windows.Forms.Form __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DialogResult)__control__.Invoke(showDialog1Internal, __control__);
            else
                return showDialog1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.DialogResult> showDialog1Callback = ShowDialog;
        public static IAsyncResult BeginShowDialog1(this System.Windows.Forms.Form __control__, AsyncCallback callback, object state)
        {
            return showDialog1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Windows.Forms.DialogResult EndShowDialog1(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            return EndShowDialog1(result);
        }
        public static System.Windows.Forms.DialogResult EndShowDialog1(IAsyncResult result)
        {
            return showDialog1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DialogResult> ShowDialogAsync(this System.Windows.Forms.Form __control__)
        {
            return Task<System.Windows.Forms.DialogResult>.Factory.FromAsync<System.Windows.Forms.Form>(
                (Func<System.Windows.Forms.Form, AsyncCallback, object, IAsyncResult>)BeginShowDialog1,
                (Func<IAsyncResult, System.Windows.Forms.DialogResult>)EndShowDialog1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.IWin32Window, System.Windows.Forms.DialogResult> showDialog2Internal = (c, owner) => c.ShowDialog(owner);
        public static System.Windows.Forms.DialogResult ShowDialog(this System.Windows.Forms.Form __control__, System.Windows.Forms.IWin32Window owner)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DialogResult)__control__.Invoke(showDialog2Internal, __control__, owner);
            else
                return showDialog2Internal.Invoke(__control__, owner);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.IWin32Window, System.Windows.Forms.DialogResult> showDialog2Callback = ShowDialog;
        public static IAsyncResult BeginShowDialog2(this System.Windows.Forms.Form __control__, System.Windows.Forms.IWin32Window owner, AsyncCallback callback, object state)
        {
            return showDialog2Callback.BeginInvoke(__control__, owner, callback, state);
        }
        public static System.Windows.Forms.DialogResult EndShowDialog2(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            return EndShowDialog2(result);
        }
        public static System.Windows.Forms.DialogResult EndShowDialog2(IAsyncResult result)
        {
            return showDialog2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DialogResult> ShowDialogAsync(this System.Windows.Forms.Form __control__, System.Windows.Forms.IWin32Window owner)
        {
            return Task<System.Windows.Forms.DialogResult>.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.IWin32Window>(
                (Func<System.Windows.Forms.Form, System.Windows.Forms.IWin32Window, AsyncCallback, object, IAsyncResult>)BeginShowDialog2,
                (Func<IAsyncResult, System.Windows.Forms.DialogResult>)EndShowDialog2,
                __control__, owner, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> validateChildren3Internal = (c) => c.ValidateChildren();
        public static System.Boolean ValidateChildren(this System.Windows.Forms.Form __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(validateChildren3Internal, __control__);
            else
                return validateChildren3Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> validateChildren3Callback = ValidateChildren;
        public static IAsyncResult BeginValidateChildren3(this System.Windows.Forms.Form __control__, AsyncCallback callback, object state)
        {
            return validateChildren3Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndValidateChildren3(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            return EndValidateChildren3(result);
        }
        public static System.Boolean EndValidateChildren3(IAsyncResult result)
        {
            return validateChildren3Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ValidateChildrenAsync(this System.Windows.Forms.Form __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                (Func<System.Windows.Forms.Form, AsyncCallback, object, IAsyncResult>)BeginValidateChildren3,
                (Func<IAsyncResult, System.Boolean>)EndValidateChildren3,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.ValidationConstraints, System.Boolean> validateChildren4Internal = (c, validationConstraints) => c.ValidateChildren(validationConstraints);
        public static System.Boolean ValidateChildren(this System.Windows.Forms.Form __control__, System.Windows.Forms.ValidationConstraints validationConstraints)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(validateChildren4Internal, __control__, validationConstraints);
            else
                return validateChildren4Internal.Invoke(__control__, validationConstraints);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.ValidationConstraints, System.Boolean> validateChildren4Callback = ValidateChildren;
        public static IAsyncResult BeginValidateChildren4(this System.Windows.Forms.Form __control__, System.Windows.Forms.ValidationConstraints validationConstraints, AsyncCallback callback, object state)
        {
            return validateChildren4Callback.BeginInvoke(__control__, validationConstraints, callback, state);
        }
        public static System.Boolean EndValidateChildren4(this System.Windows.Forms.Form __control__, IAsyncResult result)
        {
            return EndValidateChildren4(result);
        }
        public static System.Boolean EndValidateChildren4(IAsyncResult result)
        {
            return validateChildren4Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ValidateChildrenAsync(this System.Windows.Forms.Form __control__, System.Windows.Forms.ValidationConstraints validationConstraints)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.ValidationConstraints>(
                (Func<System.Windows.Forms.Form, System.Windows.Forms.ValidationConstraints, AsyncCallback, object, IAsyncResult>)BeginValidateChildren4,
                (Func<IAsyncResult, System.Boolean>)EndValidateChildren4,
                __control__, validationConstraints, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl> getAcceptButtonInternal = (x) => x.AcceptButton;
        public static System.Windows.Forms.IButtonControl GetAcceptButton(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.IButtonControl)target.Invoke(getAcceptButtonInternal, target);
            else
                return getAcceptButtonInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl> getAcceptButtonCallback = GetAcceptButton;
        public static IAsyncResult BeginGetAcceptButton(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getAcceptButtonCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.IButtonControl EndGetAcceptButton(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetAcceptButton(result);
        }
        public static System.Windows.Forms.IButtonControl EndGetAcceptButton(IAsyncResult result)
        {
            return getAcceptButtonCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.IButtonControl> GetAcceptButtonAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.IButtonControl>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetAcceptButton,
                EndGetAcceptButton,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl> setAcceptButtonInternal = (x, v) => x.AcceptButton = v;
        public static void SetAcceptButton(this System.Windows.Forms.Form target, System.Windows.Forms.IButtonControl value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAcceptButtonInternal, target, value);
            else
                setAcceptButtonInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl> setAcceptButtonCallback = SetAcceptButton;
        public static IAsyncResult BeginSetAcceptButton(this System.Windows.Forms.Form target, System.Windows.Forms.IButtonControl value, AsyncCallback callback, object state)
        {
            return setAcceptButtonCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAcceptButton(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetAcceptButton(result);
        }
        public static void EndSetAcceptButton(IAsyncResult result)
        {
            setAcceptButtonCallback.EndInvoke(result);
        }
        public static Task SetAcceptButtonAsync(this System.Windows.Forms.Form target, System.Windows.Forms.IButtonControl value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl>(
                BeginSetAcceptButton,
                EndSetAcceptButton,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form> getActiveMdiChildInternal = (x) => x.ActiveMdiChild;
        public static System.Windows.Forms.Form GetActiveMdiChild(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Form)target.Invoke(getActiveMdiChildInternal, target);
            else
                return getActiveMdiChildInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form> getActiveMdiChildCallback = GetActiveMdiChild;
        public static IAsyncResult BeginGetActiveMdiChild(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getActiveMdiChildCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Form EndGetActiveMdiChild(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetActiveMdiChild(result);
        }
        public static System.Windows.Forms.Form EndGetActiveMdiChild(IAsyncResult result)
        {
            return getActiveMdiChildCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Form> GetActiveMdiChildAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.Form>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetActiveMdiChild,
                EndGetActiveMdiChild,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getAllowTransparencyInternal = (x) => x.AllowTransparency;
        public static System.Boolean GetAllowTransparency(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowTransparencyInternal, target);
            else
                return getAllowTransparencyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getAllowTransparencyCallback = GetAllowTransparency;
        public static IAsyncResult BeginGetAllowTransparency(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getAllowTransparencyCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowTransparency(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetAllowTransparency(result);
        }
        public static System.Boolean EndGetAllowTransparency(IAsyncResult result)
        {
            return getAllowTransparencyCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowTransparencyAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetAllowTransparency,
                EndGetAllowTransparency,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setAllowTransparencyInternal = (x, v) => x.AllowTransparency = v;
        public static void SetAllowTransparency(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowTransparencyInternal, target, value);
            else
                setAllowTransparencyInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setAllowTransparencyCallback = SetAllowTransparency;
        public static IAsyncResult BeginSetAllowTransparency(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowTransparencyCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowTransparency(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetAllowTransparency(result);
        }
        public static void EndSetAllowTransparency(IAsyncResult result)
        {
            setAllowTransparencyCallback.EndInvoke(result);
        }
        public static Task SetAllowTransparencyAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetAllowTransparency,
                EndSetAllowTransparency,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Size> getAutoScaleBaseSizeInternal = (x) => x.AutoScaleBaseSize;
        public static System.Drawing.Size GetAutoScaleBaseSize(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getAutoScaleBaseSizeInternal, target);
            else
                return getAutoScaleBaseSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Size> getAutoScaleBaseSizeCallback = GetAutoScaleBaseSize;
        public static IAsyncResult BeginGetAutoScaleBaseSize(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getAutoScaleBaseSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetAutoScaleBaseSize(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetAutoScaleBaseSize(result);
        }
        public static System.Drawing.Size EndGetAutoScaleBaseSize(IAsyncResult result)
        {
            return getAutoScaleBaseSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetAutoScaleBaseSizeAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetAutoScaleBaseSize,
                EndGetAutoScaleBaseSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Size> setAutoScaleBaseSizeInternal = (x, v) => x.AutoScaleBaseSize = v;
        public static void SetAutoScaleBaseSize(this System.Windows.Forms.Form target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoScaleBaseSizeInternal, target, value);
            else
                setAutoScaleBaseSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Size> setAutoScaleBaseSizeCallback = SetAutoScaleBaseSize;
        public static IAsyncResult BeginSetAutoScaleBaseSize(this System.Windows.Forms.Form target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setAutoScaleBaseSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoScaleBaseSize(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetAutoScaleBaseSize(result);
        }
        public static void EndSetAutoScaleBaseSize(IAsyncResult result)
        {
            setAutoScaleBaseSizeCallback.EndInvoke(result);
        }
        public static Task SetAutoScaleBaseSizeAsync(this System.Windows.Forms.Form target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Drawing.Size>(
                BeginSetAutoScaleBaseSize,
                EndSetAutoScaleBaseSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.AutoSizeMode> getAutoSizeModeInternal = (x) => x.AutoSizeMode;
        public static System.Windows.Forms.AutoSizeMode GetAutoSizeMode(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AutoSizeMode)target.Invoke(getAutoSizeModeInternal, target);
            else
                return getAutoSizeModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.AutoSizeMode> getAutoSizeModeCallback = GetAutoSizeMode;
        public static IAsyncResult BeginGetAutoSizeMode(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getAutoSizeModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AutoSizeMode EndGetAutoSizeMode(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetAutoSizeMode(result);
        }
        public static System.Windows.Forms.AutoSizeMode EndGetAutoSizeMode(IAsyncResult result)
        {
            return getAutoSizeModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AutoSizeMode> GetAutoSizeModeAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.AutoSizeMode>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetAutoSizeMode,
                EndGetAutoSizeMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.AutoSizeMode> setAutoSizeModeInternal = (x, v) => x.AutoSizeMode = v;
        public static void SetAutoSizeMode(this System.Windows.Forms.Form target, System.Windows.Forms.AutoSizeMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoSizeModeInternal, target, value);
            else
                setAutoSizeModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.AutoSizeMode> setAutoSizeModeCallback = SetAutoSizeMode;
        public static IAsyncResult BeginSetAutoSizeMode(this System.Windows.Forms.Form target, System.Windows.Forms.AutoSizeMode value, AsyncCallback callback, object state)
        {
            return setAutoSizeModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoSizeMode(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetAutoSizeMode(result);
        }
        public static void EndSetAutoSizeMode(IAsyncResult result)
        {
            setAutoSizeModeCallback.EndInvoke(result);
        }
        public static Task SetAutoSizeModeAsync(this System.Windows.Forms.Form target, System.Windows.Forms.AutoSizeMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.AutoSizeMode>(
                BeginSetAutoSizeMode,
                EndSetAutoSizeMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.FormBorderStyle> getFormBorderStyleInternal = (x) => x.FormBorderStyle;
        public static System.Windows.Forms.FormBorderStyle GetFormBorderStyle(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.FormBorderStyle)target.Invoke(getFormBorderStyleInternal, target);
            else
                return getFormBorderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.FormBorderStyle> getFormBorderStyleCallback = GetFormBorderStyle;
        public static IAsyncResult BeginGetFormBorderStyle(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getFormBorderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.FormBorderStyle EndGetFormBorderStyle(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetFormBorderStyle(result);
        }
        public static System.Windows.Forms.FormBorderStyle EndGetFormBorderStyle(IAsyncResult result)
        {
            return getFormBorderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.FormBorderStyle> GetFormBorderStyleAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.FormBorderStyle>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetFormBorderStyle,
                EndGetFormBorderStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.FormBorderStyle> setFormBorderStyleInternal = (x, v) => x.FormBorderStyle = v;
        public static void SetFormBorderStyle(this System.Windows.Forms.Form target, System.Windows.Forms.FormBorderStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFormBorderStyleInternal, target, value);
            else
                setFormBorderStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.FormBorderStyle> setFormBorderStyleCallback = SetFormBorderStyle;
        public static IAsyncResult BeginSetFormBorderStyle(this System.Windows.Forms.Form target, System.Windows.Forms.FormBorderStyle value, AsyncCallback callback, object state)
        {
            return setFormBorderStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFormBorderStyle(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetFormBorderStyle(result);
        }
        public static void EndSetFormBorderStyle(IAsyncResult result)
        {
            setFormBorderStyleCallback.EndInvoke(result);
        }
        public static Task SetFormBorderStyleAsync(this System.Windows.Forms.Form target, System.Windows.Forms.FormBorderStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.FormBorderStyle>(
                BeginSetFormBorderStyle,
                EndSetFormBorderStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl> getCancelButtonInternal = (x) => x.CancelButton;
        public static System.Windows.Forms.IButtonControl GetCancelButton(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.IButtonControl)target.Invoke(getCancelButtonInternal, target);
            else
                return getCancelButtonInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl> getCancelButtonCallback = GetCancelButton;
        public static IAsyncResult BeginGetCancelButton(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getCancelButtonCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.IButtonControl EndGetCancelButton(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetCancelButton(result);
        }
        public static System.Windows.Forms.IButtonControl EndGetCancelButton(IAsyncResult result)
        {
            return getCancelButtonCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.IButtonControl> GetCancelButtonAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.IButtonControl>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetCancelButton,
                EndGetCancelButton,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl> setCancelButtonInternal = (x, v) => x.CancelButton = v;
        public static void SetCancelButton(this System.Windows.Forms.Form target, System.Windows.Forms.IButtonControl value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCancelButtonInternal, target, value);
            else
                setCancelButtonInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl> setCancelButtonCallback = SetCancelButton;
        public static IAsyncResult BeginSetCancelButton(this System.Windows.Forms.Form target, System.Windows.Forms.IButtonControl value, AsyncCallback callback, object state)
        {
            return setCancelButtonCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCancelButton(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetCancelButton(result);
        }
        public static void EndSetCancelButton(IAsyncResult result)
        {
            setCancelButtonCallback.EndInvoke(result);
        }
        public static Task SetCancelButtonAsync(this System.Windows.Forms.Form target, System.Windows.Forms.IButtonControl value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.IButtonControl>(
                BeginSetCancelButton,
                EndSetCancelButton,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getControlBoxInternal = (x) => x.ControlBox;
        public static System.Boolean GetControlBox(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getControlBoxInternal, target);
            else
                return getControlBoxInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getControlBoxCallback = GetControlBox;
        public static IAsyncResult BeginGetControlBox(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getControlBoxCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetControlBox(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetControlBox(result);
        }
        public static System.Boolean EndGetControlBox(IAsyncResult result)
        {
            return getControlBoxCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetControlBoxAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetControlBox,
                EndGetControlBox,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setControlBoxInternal = (x, v) => x.ControlBox = v;
        public static void SetControlBox(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setControlBoxInternal, target, value);
            else
                setControlBoxInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setControlBoxCallback = SetControlBox;
        public static IAsyncResult BeginSetControlBox(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setControlBoxCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetControlBox(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetControlBox(result);
        }
        public static void EndSetControlBox(IAsyncResult result)
        {
            setControlBoxCallback.EndInvoke(result);
        }
        public static Task SetControlBoxAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetControlBox,
                EndSetControlBox,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Rectangle> getDesktopBoundsInternal = (x) => x.DesktopBounds;
        public static System.Drawing.Rectangle GetDesktopBounds(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Rectangle)target.Invoke(getDesktopBoundsInternal, target);
            else
                return getDesktopBoundsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Rectangle> getDesktopBoundsCallback = GetDesktopBounds;
        public static IAsyncResult BeginGetDesktopBounds(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getDesktopBoundsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Rectangle EndGetDesktopBounds(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetDesktopBounds(result);
        }
        public static System.Drawing.Rectangle EndGetDesktopBounds(IAsyncResult result)
        {
            return getDesktopBoundsCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetDesktopBoundsAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetDesktopBounds,
                EndGetDesktopBounds,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Rectangle> setDesktopBoundsInternal = (x, v) => x.DesktopBounds = v;
        public static void SetDesktopBounds(this System.Windows.Forms.Form target, System.Drawing.Rectangle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDesktopBoundsInternal, target, value);
            else
                setDesktopBoundsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Rectangle> setDesktopBoundsCallback = SetDesktopBounds;
        public static IAsyncResult BeginSetDesktopBounds(this System.Windows.Forms.Form target, System.Drawing.Rectangle value, AsyncCallback callback, object state)
        {
            return setDesktopBoundsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDesktopBounds(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetDesktopBounds(result);
        }
        public static void EndSetDesktopBounds(IAsyncResult result)
        {
            setDesktopBoundsCallback.EndInvoke(result);
        }
        public static Task SetDesktopBoundsAsync(this System.Windows.Forms.Form target, System.Drawing.Rectangle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Drawing.Rectangle>(
                BeginSetDesktopBounds,
                EndSetDesktopBounds,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Point> getDesktopLocationInternal = (x) => x.DesktopLocation;
        public static System.Drawing.Point GetDesktopLocation(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Point)target.Invoke(getDesktopLocationInternal, target);
            else
                return getDesktopLocationInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Point> getDesktopLocationCallback = GetDesktopLocation;
        public static IAsyncResult BeginGetDesktopLocation(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getDesktopLocationCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Point EndGetDesktopLocation(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetDesktopLocation(result);
        }
        public static System.Drawing.Point EndGetDesktopLocation(IAsyncResult result)
        {
            return getDesktopLocationCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> GetDesktopLocationAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetDesktopLocation,
                EndGetDesktopLocation,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Point> setDesktopLocationInternal = (x, v) => x.DesktopLocation = v;
        public static void SetDesktopLocation(this System.Windows.Forms.Form target, System.Drawing.Point value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDesktopLocationInternal, target, value);
            else
                setDesktopLocationInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Point> setDesktopLocationCallback = SetDesktopLocation;
        public static IAsyncResult BeginSetDesktopLocation(this System.Windows.Forms.Form target, System.Drawing.Point value, AsyncCallback callback, object state)
        {
            return setDesktopLocationCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDesktopLocation(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetDesktopLocation(result);
        }
        public static void EndSetDesktopLocation(IAsyncResult result)
        {
            setDesktopLocationCallback.EndInvoke(result);
        }
        public static Task SetDesktopLocationAsync(this System.Windows.Forms.Form target, System.Drawing.Point value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Drawing.Point>(
                BeginSetDesktopLocation,
                EndSetDesktopLocation,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.DialogResult> getDialogResultInternal = (x) => x.DialogResult;
        public static System.Windows.Forms.DialogResult GetDialogResult(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DialogResult)target.Invoke(getDialogResultInternal, target);
            else
                return getDialogResultInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.DialogResult> getDialogResultCallback = GetDialogResult;
        public static IAsyncResult BeginGetDialogResult(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getDialogResultCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DialogResult EndGetDialogResult(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetDialogResult(result);
        }
        public static System.Windows.Forms.DialogResult EndGetDialogResult(IAsyncResult result)
        {
            return getDialogResultCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DialogResult> GetDialogResultAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.DialogResult>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetDialogResult,
                EndGetDialogResult,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.DialogResult> setDialogResultInternal = (x, v) => x.DialogResult = v;
        public static void SetDialogResult(this System.Windows.Forms.Form target, System.Windows.Forms.DialogResult value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDialogResultInternal, target, value);
            else
                setDialogResultInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.DialogResult> setDialogResultCallback = SetDialogResult;
        public static IAsyncResult BeginSetDialogResult(this System.Windows.Forms.Form target, System.Windows.Forms.DialogResult value, AsyncCallback callback, object state)
        {
            return setDialogResultCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDialogResult(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetDialogResult(result);
        }
        public static void EndSetDialogResult(IAsyncResult result)
        {
            setDialogResultCallback.EndInvoke(result);
        }
        public static Task SetDialogResultAsync(this System.Windows.Forms.Form target, System.Windows.Forms.DialogResult value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.DialogResult>(
                BeginSetDialogResult,
                EndSetDialogResult,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getHelpButtonInternal = (x) => x.HelpButton;
        public static System.Boolean GetHelpButton(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHelpButtonInternal, target);
            else
                return getHelpButtonInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getHelpButtonCallback = GetHelpButton;
        public static IAsyncResult BeginGetHelpButton(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getHelpButtonCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHelpButton(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetHelpButton(result);
        }
        public static System.Boolean EndGetHelpButton(IAsyncResult result)
        {
            return getHelpButtonCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHelpButtonAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetHelpButton,
                EndGetHelpButton,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setHelpButtonInternal = (x, v) => x.HelpButton = v;
        public static void SetHelpButton(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHelpButtonInternal, target, value);
            else
                setHelpButtonInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setHelpButtonCallback = SetHelpButton;
        public static IAsyncResult BeginSetHelpButton(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setHelpButtonCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHelpButton(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetHelpButton(result);
        }
        public static void EndSetHelpButton(IAsyncResult result)
        {
            setHelpButtonCallback.EndInvoke(result);
        }
        public static Task SetHelpButtonAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetHelpButton,
                EndSetHelpButton,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Icon> getIconInternal = (x) => x.Icon;
        public static System.Drawing.Icon GetIcon(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Icon)target.Invoke(getIconInternal, target);
            else
                return getIconInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Icon> getIconCallback = GetIcon;
        public static IAsyncResult BeginGetIcon(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getIconCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Icon EndGetIcon(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetIcon(result);
        }
        public static System.Drawing.Icon EndGetIcon(IAsyncResult result)
        {
            return getIconCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Icon> GetIconAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Drawing.Icon>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetIcon,
                EndGetIcon,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Icon> setIconInternal = (x, v) => x.Icon = v;
        public static void SetIcon(this System.Windows.Forms.Form target, System.Drawing.Icon value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setIconInternal, target, value);
            else
                setIconInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Icon> setIconCallback = SetIcon;
        public static IAsyncResult BeginSetIcon(this System.Windows.Forms.Form target, System.Drawing.Icon value, AsyncCallback callback, object state)
        {
            return setIconCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetIcon(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetIcon(result);
        }
        public static void EndSetIcon(IAsyncResult result)
        {
            setIconCallback.EndInvoke(result);
        }
        public static Task SetIconAsync(this System.Windows.Forms.Form target, System.Drawing.Icon value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Drawing.Icon>(
                BeginSetIcon,
                EndSetIcon,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getIsMdiChildInternal = (x) => x.IsMdiChild;
        public static System.Boolean GetIsMdiChild(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsMdiChildInternal, target);
            else
                return getIsMdiChildInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getIsMdiChildCallback = GetIsMdiChild;
        public static IAsyncResult BeginGetIsMdiChild(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getIsMdiChildCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsMdiChild(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetIsMdiChild(result);
        }
        public static System.Boolean EndGetIsMdiChild(IAsyncResult result)
        {
            return getIsMdiChildCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsMdiChildAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetIsMdiChild,
                EndGetIsMdiChild,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getIsMdiContainerInternal = (x) => x.IsMdiContainer;
        public static System.Boolean GetIsMdiContainer(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsMdiContainerInternal, target);
            else
                return getIsMdiContainerInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getIsMdiContainerCallback = GetIsMdiContainer;
        public static IAsyncResult BeginGetIsMdiContainer(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getIsMdiContainerCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsMdiContainer(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetIsMdiContainer(result);
        }
        public static System.Boolean EndGetIsMdiContainer(IAsyncResult result)
        {
            return getIsMdiContainerCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsMdiContainerAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetIsMdiContainer,
                EndGetIsMdiContainer,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setIsMdiContainerInternal = (x, v) => x.IsMdiContainer = v;
        public static void SetIsMdiContainer(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setIsMdiContainerInternal, target, value);
            else
                setIsMdiContainerInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setIsMdiContainerCallback = SetIsMdiContainer;
        public static IAsyncResult BeginSetIsMdiContainer(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setIsMdiContainerCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetIsMdiContainer(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetIsMdiContainer(result);
        }
        public static void EndSetIsMdiContainer(IAsyncResult result)
        {
            setIsMdiContainerCallback.EndInvoke(result);
        }
        public static Task SetIsMdiContainerAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetIsMdiContainer,
                EndSetIsMdiContainer,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getIsRestrictedWindowInternal = (x) => x.IsRestrictedWindow;
        public static System.Boolean GetIsRestrictedWindow(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsRestrictedWindowInternal, target);
            else
                return getIsRestrictedWindowInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getIsRestrictedWindowCallback = GetIsRestrictedWindow;
        public static IAsyncResult BeginGetIsRestrictedWindow(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getIsRestrictedWindowCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsRestrictedWindow(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetIsRestrictedWindow(result);
        }
        public static System.Boolean EndGetIsRestrictedWindow(IAsyncResult result)
        {
            return getIsRestrictedWindowCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsRestrictedWindowAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetIsRestrictedWindow,
                EndGetIsRestrictedWindow,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getKeyPreviewInternal = (x) => x.KeyPreview;
        public static System.Boolean GetKeyPreview(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getKeyPreviewInternal, target);
            else
                return getKeyPreviewInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getKeyPreviewCallback = GetKeyPreview;
        public static IAsyncResult BeginGetKeyPreview(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getKeyPreviewCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetKeyPreview(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetKeyPreview(result);
        }
        public static System.Boolean EndGetKeyPreview(IAsyncResult result)
        {
            return getKeyPreviewCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetKeyPreviewAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetKeyPreview,
                EndGetKeyPreview,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setKeyPreviewInternal = (x, v) => x.KeyPreview = v;
        public static void SetKeyPreview(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setKeyPreviewInternal, target, value);
            else
                setKeyPreviewInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setKeyPreviewCallback = SetKeyPreview;
        public static IAsyncResult BeginSetKeyPreview(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setKeyPreviewCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetKeyPreview(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetKeyPreview(result);
        }
        public static void EndSetKeyPreview(IAsyncResult result)
        {
            setKeyPreviewCallback.EndInvoke(result);
        }
        public static Task SetKeyPreviewAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetKeyPreview,
                EndSetKeyPreview,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.MenuStrip> getMainMenuStripInternal = (x) => x.MainMenuStrip;
        public static System.Windows.Forms.MenuStrip GetMainMenuStrip(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.MenuStrip)target.Invoke(getMainMenuStripInternal, target);
            else
                return getMainMenuStripInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.MenuStrip> getMainMenuStripCallback = GetMainMenuStrip;
        public static IAsyncResult BeginGetMainMenuStrip(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getMainMenuStripCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.MenuStrip EndGetMainMenuStrip(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetMainMenuStrip(result);
        }
        public static System.Windows.Forms.MenuStrip EndGetMainMenuStrip(IAsyncResult result)
        {
            return getMainMenuStripCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.MenuStrip> GetMainMenuStripAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.MenuStrip>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetMainMenuStrip,
                EndGetMainMenuStrip,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.MenuStrip> setMainMenuStripInternal = (x, v) => x.MainMenuStrip = v;
        public static void SetMainMenuStrip(this System.Windows.Forms.Form target, System.Windows.Forms.MenuStrip value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMainMenuStripInternal, target, value);
            else
                setMainMenuStripInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.MenuStrip> setMainMenuStripCallback = SetMainMenuStrip;
        public static IAsyncResult BeginSetMainMenuStrip(this System.Windows.Forms.Form target, System.Windows.Forms.MenuStrip value, AsyncCallback callback, object state)
        {
            return setMainMenuStripCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMainMenuStrip(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetMainMenuStrip(result);
        }
        public static void EndSetMainMenuStrip(IAsyncResult result)
        {
            setMainMenuStripCallback.EndInvoke(result);
        }
        public static Task SetMainMenuStripAsync(this System.Windows.Forms.Form target, System.Windows.Forms.MenuStrip value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.MenuStrip>(
                BeginSetMainMenuStrip,
                EndSetMainMenuStrip,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.MainMenu> getMenuInternal = (x) => x.Menu;
        public static System.Windows.Forms.MainMenu GetMenu(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.MainMenu)target.Invoke(getMenuInternal, target);
            else
                return getMenuInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.MainMenu> getMenuCallback = GetMenu;
        public static IAsyncResult BeginGetMenu(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getMenuCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.MainMenu EndGetMenu(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetMenu(result);
        }
        public static System.Windows.Forms.MainMenu EndGetMenu(IAsyncResult result)
        {
            return getMenuCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.MainMenu> GetMenuAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.MainMenu>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetMenu,
                EndGetMenu,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.MainMenu> setMenuInternal = (x, v) => x.Menu = v;
        public static void SetMenu(this System.Windows.Forms.Form target, System.Windows.Forms.MainMenu value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMenuInternal, target, value);
            else
                setMenuInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.MainMenu> setMenuCallback = SetMenu;
        public static IAsyncResult BeginSetMenu(this System.Windows.Forms.Form target, System.Windows.Forms.MainMenu value, AsyncCallback callback, object state)
        {
            return setMenuCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMenu(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetMenu(result);
        }
        public static void EndSetMenu(IAsyncResult result)
        {
            setMenuCallback.EndInvoke(result);
        }
        public static Task SetMenuAsync(this System.Windows.Forms.Form target, System.Windows.Forms.MainMenu value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.MainMenu>(
                BeginSetMenu,
                EndSetMenu,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getMaximizeBoxInternal = (x) => x.MaximizeBox;
        public static System.Boolean GetMaximizeBox(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getMaximizeBoxInternal, target);
            else
                return getMaximizeBoxInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getMaximizeBoxCallback = GetMaximizeBox;
        public static IAsyncResult BeginGetMaximizeBox(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getMaximizeBoxCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetMaximizeBox(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetMaximizeBox(result);
        }
        public static System.Boolean EndGetMaximizeBox(IAsyncResult result)
        {
            return getMaximizeBoxCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetMaximizeBoxAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetMaximizeBox,
                EndGetMaximizeBox,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setMaximizeBoxInternal = (x, v) => x.MaximizeBox = v;
        public static void SetMaximizeBox(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMaximizeBoxInternal, target, value);
            else
                setMaximizeBoxInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setMaximizeBoxCallback = SetMaximizeBox;
        public static IAsyncResult BeginSetMaximizeBox(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setMaximizeBoxCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMaximizeBox(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetMaximizeBox(result);
        }
        public static void EndSetMaximizeBox(IAsyncResult result)
        {
            setMaximizeBoxCallback.EndInvoke(result);
        }
        public static Task SetMaximizeBoxAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetMaximizeBox,
                EndSetMaximizeBox,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form[]> getMdiChildrenInternal = (x) => x.MdiChildren;
        public static System.Windows.Forms.Form[] GetMdiChildren(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Form[])target.Invoke(getMdiChildrenInternal, target);
            else
                return getMdiChildrenInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form[]> getMdiChildrenCallback = GetMdiChildren;
        public static IAsyncResult BeginGetMdiChildren(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getMdiChildrenCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Form[] EndGetMdiChildren(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetMdiChildren(result);
        }
        public static System.Windows.Forms.Form[] EndGetMdiChildren(IAsyncResult result)
        {
            return getMdiChildrenCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Form[]> GetMdiChildrenAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.Form[]>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetMdiChildren,
                EndGetMdiChildren,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form> getMdiParentInternal = (x) => x.MdiParent;
        public static System.Windows.Forms.Form GetMdiParent(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Form)target.Invoke(getMdiParentInternal, target);
            else
                return getMdiParentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form> getMdiParentCallback = GetMdiParent;
        public static IAsyncResult BeginGetMdiParent(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getMdiParentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Form EndGetMdiParent(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetMdiParent(result);
        }
        public static System.Windows.Forms.Form EndGetMdiParent(IAsyncResult result)
        {
            return getMdiParentCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Form> GetMdiParentAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.Form>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetMdiParent,
                EndGetMdiParent,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.Form> setMdiParentInternal = (x, v) => x.MdiParent = v;
        public static void SetMdiParent(this System.Windows.Forms.Form target, System.Windows.Forms.Form value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMdiParentInternal, target, value);
            else
                setMdiParentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.Form> setMdiParentCallback = SetMdiParent;
        public static IAsyncResult BeginSetMdiParent(this System.Windows.Forms.Form target, System.Windows.Forms.Form value, AsyncCallback callback, object state)
        {
            return setMdiParentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMdiParent(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetMdiParent(result);
        }
        public static void EndSetMdiParent(IAsyncResult result)
        {
            setMdiParentCallback.EndInvoke(result);
        }
        public static Task SetMdiParentAsync(this System.Windows.Forms.Form target, System.Windows.Forms.Form value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.Form>(
                BeginSetMdiParent,
                EndSetMdiParent,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.MainMenu> getMergedMenuInternal = (x) => x.MergedMenu;
        public static System.Windows.Forms.MainMenu GetMergedMenu(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.MainMenu)target.Invoke(getMergedMenuInternal, target);
            else
                return getMergedMenuInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.MainMenu> getMergedMenuCallback = GetMergedMenu;
        public static IAsyncResult BeginGetMergedMenu(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getMergedMenuCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.MainMenu EndGetMergedMenu(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetMergedMenu(result);
        }
        public static System.Windows.Forms.MainMenu EndGetMergedMenu(IAsyncResult result)
        {
            return getMergedMenuCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.MainMenu> GetMergedMenuAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.MainMenu>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetMergedMenu,
                EndGetMergedMenu,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getMinimizeBoxInternal = (x) => x.MinimizeBox;
        public static System.Boolean GetMinimizeBox(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getMinimizeBoxInternal, target);
            else
                return getMinimizeBoxInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getMinimizeBoxCallback = GetMinimizeBox;
        public static IAsyncResult BeginGetMinimizeBox(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getMinimizeBoxCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetMinimizeBox(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetMinimizeBox(result);
        }
        public static System.Boolean EndGetMinimizeBox(IAsyncResult result)
        {
            return getMinimizeBoxCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetMinimizeBoxAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetMinimizeBox,
                EndGetMinimizeBox,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setMinimizeBoxInternal = (x, v) => x.MinimizeBox = v;
        public static void SetMinimizeBox(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMinimizeBoxInternal, target, value);
            else
                setMinimizeBoxInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setMinimizeBoxCallback = SetMinimizeBox;
        public static IAsyncResult BeginSetMinimizeBox(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setMinimizeBoxCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMinimizeBox(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetMinimizeBox(result);
        }
        public static void EndSetMinimizeBox(IAsyncResult result)
        {
            setMinimizeBoxCallback.EndInvoke(result);
        }
        public static Task SetMinimizeBoxAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetMinimizeBox,
                EndSetMinimizeBox,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getModalInternal = (x) => x.Modal;
        public static System.Boolean GetModal(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getModalInternal, target);
            else
                return getModalInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getModalCallback = GetModal;
        public static IAsyncResult BeginGetModal(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getModalCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetModal(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetModal(result);
        }
        public static System.Boolean EndGetModal(IAsyncResult result)
        {
            return getModalCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetModalAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetModal,
                EndGetModal,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Double> getOpacityInternal = (x) => x.Opacity;
        public static System.Double GetOpacity(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Double)target.Invoke(getOpacityInternal, target);
            else
                return getOpacityInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Double> getOpacityCallback = GetOpacity;
        public static IAsyncResult BeginGetOpacity(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getOpacityCallback.BeginInvoke(target, callback, state);
        }
        public static System.Double EndGetOpacity(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetOpacity(result);
        }
        public static System.Double EndGetOpacity(IAsyncResult result)
        {
            return getOpacityCallback.EndInvoke(result);
        }
        public static Task<System.Double> GetOpacityAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Double>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetOpacity,
                EndGetOpacity,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Double> setOpacityInternal = (x, v) => x.Opacity = v;
        public static void SetOpacity(this System.Windows.Forms.Form target, System.Double value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setOpacityInternal, target, value);
            else
                setOpacityInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Double> setOpacityCallback = SetOpacity;
        public static IAsyncResult BeginSetOpacity(this System.Windows.Forms.Form target, System.Double value, AsyncCallback callback, object state)
        {
            return setOpacityCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetOpacity(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetOpacity(result);
        }
        public static void EndSetOpacity(IAsyncResult result)
        {
            setOpacityCallback.EndInvoke(result);
        }
        public static Task SetOpacityAsync(this System.Windows.Forms.Form target, System.Double value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Double>(
                BeginSetOpacity,
                EndSetOpacity,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form[]> getOwnedFormsInternal = (x) => x.OwnedForms;
        public static System.Windows.Forms.Form[] GetOwnedForms(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Form[])target.Invoke(getOwnedFormsInternal, target);
            else
                return getOwnedFormsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form[]> getOwnedFormsCallback = GetOwnedForms;
        public static IAsyncResult BeginGetOwnedForms(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getOwnedFormsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Form[] EndGetOwnedForms(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetOwnedForms(result);
        }
        public static System.Windows.Forms.Form[] EndGetOwnedForms(IAsyncResult result)
        {
            return getOwnedFormsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Form[]> GetOwnedFormsAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.Form[]>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetOwnedForms,
                EndGetOwnedForms,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form> getOwnerInternal = (x) => x.Owner;
        public static System.Windows.Forms.Form GetOwner(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Form)target.Invoke(getOwnerInternal, target);
            else
                return getOwnerInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.Form> getOwnerCallback = GetOwner;
        public static IAsyncResult BeginGetOwner(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getOwnerCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Form EndGetOwner(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetOwner(result);
        }
        public static System.Windows.Forms.Form EndGetOwner(IAsyncResult result)
        {
            return getOwnerCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Form> GetOwnerAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.Form>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetOwner,
                EndGetOwner,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.Form> setOwnerInternal = (x, v) => x.Owner = v;
        public static void SetOwner(this System.Windows.Forms.Form target, System.Windows.Forms.Form value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setOwnerInternal, target, value);
            else
                setOwnerInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.Form> setOwnerCallback = SetOwner;
        public static IAsyncResult BeginSetOwner(this System.Windows.Forms.Form target, System.Windows.Forms.Form value, AsyncCallback callback, object state)
        {
            return setOwnerCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetOwner(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetOwner(result);
        }
        public static void EndSetOwner(IAsyncResult result)
        {
            setOwnerCallback.EndInvoke(result);
        }
        public static Task SetOwnerAsync(this System.Windows.Forms.Form target, System.Windows.Forms.Form value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.Form>(
                BeginSetOwner,
                EndSetOwner,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Rectangle> getRestoreBoundsInternal = (x) => x.RestoreBounds;
        public static System.Drawing.Rectangle GetRestoreBounds(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Rectangle)target.Invoke(getRestoreBoundsInternal, target);
            else
                return getRestoreBoundsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Rectangle> getRestoreBoundsCallback = GetRestoreBounds;
        public static IAsyncResult BeginGetRestoreBounds(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getRestoreBoundsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Rectangle EndGetRestoreBounds(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetRestoreBounds(result);
        }
        public static System.Drawing.Rectangle EndGetRestoreBounds(IAsyncResult result)
        {
            return getRestoreBoundsCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetRestoreBoundsAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetRestoreBounds,
                EndGetRestoreBounds,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getRightToLeftLayoutInternal = (x) => x.RightToLeftLayout;
        public static System.Boolean GetRightToLeftLayout(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getRightToLeftLayoutInternal, target);
            else
                return getRightToLeftLayoutInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getRightToLeftLayoutCallback = GetRightToLeftLayout;
        public static IAsyncResult BeginGetRightToLeftLayout(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getRightToLeftLayoutCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetRightToLeftLayout(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetRightToLeftLayout(result);
        }
        public static System.Boolean EndGetRightToLeftLayout(IAsyncResult result)
        {
            return getRightToLeftLayoutCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetRightToLeftLayoutAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetRightToLeftLayout,
                EndGetRightToLeftLayout,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setRightToLeftLayoutInternal = (x, v) => x.RightToLeftLayout = v;
        public static void SetRightToLeftLayout(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRightToLeftLayoutInternal, target, value);
            else
                setRightToLeftLayoutInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setRightToLeftLayoutCallback = SetRightToLeftLayout;
        public static IAsyncResult BeginSetRightToLeftLayout(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setRightToLeftLayoutCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRightToLeftLayout(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetRightToLeftLayout(result);
        }
        public static void EndSetRightToLeftLayout(IAsyncResult result)
        {
            setRightToLeftLayoutCallback.EndInvoke(result);
        }
        public static Task SetRightToLeftLayoutAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetRightToLeftLayout,
                EndSetRightToLeftLayout,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getShowInTaskbarInternal = (x) => x.ShowInTaskbar;
        public static System.Boolean GetShowInTaskbar(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowInTaskbarInternal, target);
            else
                return getShowInTaskbarInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getShowInTaskbarCallback = GetShowInTaskbar;
        public static IAsyncResult BeginGetShowInTaskbar(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getShowInTaskbarCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowInTaskbar(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetShowInTaskbar(result);
        }
        public static System.Boolean EndGetShowInTaskbar(IAsyncResult result)
        {
            return getShowInTaskbarCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowInTaskbarAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetShowInTaskbar,
                EndGetShowInTaskbar,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setShowInTaskbarInternal = (x, v) => x.ShowInTaskbar = v;
        public static void SetShowInTaskbar(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowInTaskbarInternal, target, value);
            else
                setShowInTaskbarInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setShowInTaskbarCallback = SetShowInTaskbar;
        public static IAsyncResult BeginSetShowInTaskbar(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowInTaskbarCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowInTaskbar(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetShowInTaskbar(result);
        }
        public static void EndSetShowInTaskbar(IAsyncResult result)
        {
            setShowInTaskbarCallback.EndInvoke(result);
        }
        public static Task SetShowInTaskbarAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetShowInTaskbar,
                EndSetShowInTaskbar,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getShowIconInternal = (x) => x.ShowIcon;
        public static System.Boolean GetShowIcon(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowIconInternal, target);
            else
                return getShowIconInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getShowIconCallback = GetShowIcon;
        public static IAsyncResult BeginGetShowIcon(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getShowIconCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowIcon(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetShowIcon(result);
        }
        public static System.Boolean EndGetShowIcon(IAsyncResult result)
        {
            return getShowIconCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowIconAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetShowIcon,
                EndGetShowIcon,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setShowIconInternal = (x, v) => x.ShowIcon = v;
        public static void SetShowIcon(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowIconInternal, target, value);
            else
                setShowIconInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setShowIconCallback = SetShowIcon;
        public static IAsyncResult BeginSetShowIcon(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowIconCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowIcon(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetShowIcon(result);
        }
        public static void EndSetShowIcon(IAsyncResult result)
        {
            setShowIconCallback.EndInvoke(result);
        }
        public static Task SetShowIconAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetShowIcon,
                EndSetShowIcon,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.SizeGripStyle> getSizeGripStyleInternal = (x) => x.SizeGripStyle;
        public static System.Windows.Forms.SizeGripStyle GetSizeGripStyle(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.SizeGripStyle)target.Invoke(getSizeGripStyleInternal, target);
            else
                return getSizeGripStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.SizeGripStyle> getSizeGripStyleCallback = GetSizeGripStyle;
        public static IAsyncResult BeginGetSizeGripStyle(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getSizeGripStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.SizeGripStyle EndGetSizeGripStyle(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetSizeGripStyle(result);
        }
        public static System.Windows.Forms.SizeGripStyle EndGetSizeGripStyle(IAsyncResult result)
        {
            return getSizeGripStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.SizeGripStyle> GetSizeGripStyleAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.SizeGripStyle>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetSizeGripStyle,
                EndGetSizeGripStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.SizeGripStyle> setSizeGripStyleInternal = (x, v) => x.SizeGripStyle = v;
        public static void SetSizeGripStyle(this System.Windows.Forms.Form target, System.Windows.Forms.SizeGripStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSizeGripStyleInternal, target, value);
            else
                setSizeGripStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.SizeGripStyle> setSizeGripStyleCallback = SetSizeGripStyle;
        public static IAsyncResult BeginSetSizeGripStyle(this System.Windows.Forms.Form target, System.Windows.Forms.SizeGripStyle value, AsyncCallback callback, object state)
        {
            return setSizeGripStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSizeGripStyle(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetSizeGripStyle(result);
        }
        public static void EndSetSizeGripStyle(IAsyncResult result)
        {
            setSizeGripStyleCallback.EndInvoke(result);
        }
        public static Task SetSizeGripStyleAsync(this System.Windows.Forms.Form target, System.Windows.Forms.SizeGripStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.SizeGripStyle>(
                BeginSetSizeGripStyle,
                EndSetSizeGripStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.FormStartPosition> getStartPositionInternal = (x) => x.StartPosition;
        public static System.Windows.Forms.FormStartPosition GetStartPosition(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.FormStartPosition)target.Invoke(getStartPositionInternal, target);
            else
                return getStartPositionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.FormStartPosition> getStartPositionCallback = GetStartPosition;
        public static IAsyncResult BeginGetStartPosition(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getStartPositionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.FormStartPosition EndGetStartPosition(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetStartPosition(result);
        }
        public static System.Windows.Forms.FormStartPosition EndGetStartPosition(IAsyncResult result)
        {
            return getStartPositionCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.FormStartPosition> GetStartPositionAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.FormStartPosition>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetStartPosition,
                EndGetStartPosition,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.FormStartPosition> setStartPositionInternal = (x, v) => x.StartPosition = v;
        public static void SetStartPosition(this System.Windows.Forms.Form target, System.Windows.Forms.FormStartPosition value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setStartPositionInternal, target, value);
            else
                setStartPositionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.FormStartPosition> setStartPositionCallback = SetStartPosition;
        public static IAsyncResult BeginSetStartPosition(this System.Windows.Forms.Form target, System.Windows.Forms.FormStartPosition value, AsyncCallback callback, object state)
        {
            return setStartPositionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetStartPosition(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetStartPosition(result);
        }
        public static void EndSetStartPosition(IAsyncResult result)
        {
            setStartPositionCallback.EndInvoke(result);
        }
        public static Task SetStartPositionAsync(this System.Windows.Forms.Form target, System.Windows.Forms.FormStartPosition value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.FormStartPosition>(
                BeginSetStartPosition,
                EndSetStartPosition,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getTopLevelInternal = (x) => x.TopLevel;
        public static System.Boolean GetTopLevel(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getTopLevelInternal, target);
            else
                return getTopLevelInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getTopLevelCallback = GetTopLevel;
        public static IAsyncResult BeginGetTopLevel(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getTopLevelCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetTopLevel(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetTopLevel(result);
        }
        public static System.Boolean EndGetTopLevel(IAsyncResult result)
        {
            return getTopLevelCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetTopLevelAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetTopLevel,
                EndGetTopLevel,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setTopLevelInternal = (x, v) => x.TopLevel = v;
        public static void SetTopLevel(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTopLevelInternal, target, value);
            else
                setTopLevelInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setTopLevelCallback = SetTopLevel;
        public static IAsyncResult BeginSetTopLevel(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setTopLevelCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTopLevel(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetTopLevel(result);
        }
        public static void EndSetTopLevel(IAsyncResult result)
        {
            setTopLevelCallback.EndInvoke(result);
        }
        public static Task SetTopLevelAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetTopLevel,
                EndSetTopLevel,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getTopMostInternal = (x) => x.TopMost;
        public static System.Boolean GetTopMost(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getTopMostInternal, target);
            else
                return getTopMostInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Boolean> getTopMostCallback = GetTopMost;
        public static IAsyncResult BeginGetTopMost(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getTopMostCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetTopMost(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetTopMost(result);
        }
        public static System.Boolean EndGetTopMost(IAsyncResult result)
        {
            return getTopMostCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetTopMostAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetTopMost,
                EndGetTopMost,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setTopMostInternal = (x, v) => x.TopMost = v;
        public static void SetTopMost(this System.Windows.Forms.Form target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTopMostInternal, target, value);
            else
                setTopMostInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Boolean> setTopMostCallback = SetTopMost;
        public static IAsyncResult BeginSetTopMost(this System.Windows.Forms.Form target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setTopMostCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTopMost(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetTopMost(result);
        }
        public static void EndSetTopMost(IAsyncResult result)
        {
            setTopMostCallback.EndInvoke(result);
        }
        public static Task SetTopMostAsync(this System.Windows.Forms.Form target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Boolean>(
                BeginSetTopMost,
                EndSetTopMost,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Color> getTransparencyKeyInternal = (x) => x.TransparencyKey;
        public static System.Drawing.Color GetTransparencyKey(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getTransparencyKeyInternal, target);
            else
                return getTransparencyKeyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Drawing.Color> getTransparencyKeyCallback = GetTransparencyKey;
        public static IAsyncResult BeginGetTransparencyKey(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getTransparencyKeyCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetTransparencyKey(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetTransparencyKey(result);
        }
        public static System.Drawing.Color EndGetTransparencyKey(IAsyncResult result)
        {
            return getTransparencyKeyCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetTransparencyKeyAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetTransparencyKey,
                EndGetTransparencyKey,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Color> setTransparencyKeyInternal = (x, v) => x.TransparencyKey = v;
        public static void SetTransparencyKey(this System.Windows.Forms.Form target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTransparencyKeyInternal, target, value);
            else
                setTransparencyKeyInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Drawing.Color> setTransparencyKeyCallback = SetTransparencyKey;
        public static IAsyncResult BeginSetTransparencyKey(this System.Windows.Forms.Form target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setTransparencyKeyCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTransparencyKey(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetTransparencyKey(result);
        }
        public static void EndSetTransparencyKey(IAsyncResult result)
        {
            setTransparencyKeyCallback.EndInvoke(result);
        }
        public static Task SetTransparencyKeyAsync(this System.Windows.Forms.Form target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Drawing.Color>(
                BeginSetTransparencyKey,
                EndSetTransparencyKey,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.FormWindowState> getWindowStateInternal = (x) => x.WindowState;
        public static System.Windows.Forms.FormWindowState GetWindowState(this System.Windows.Forms.Form target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.FormWindowState)target.Invoke(getWindowStateInternal, target);
            else
                return getWindowStateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Form, System.Windows.Forms.FormWindowState> getWindowStateCallback = GetWindowState;
        public static IAsyncResult BeginGetWindowState(this System.Windows.Forms.Form target, AsyncCallback callback, object state)
        {
            return getWindowStateCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.FormWindowState EndGetWindowState(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            return EndGetWindowState(result);
        }
        public static System.Windows.Forms.FormWindowState EndGetWindowState(IAsyncResult result)
        {
            return getWindowStateCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.FormWindowState> GetWindowStateAsync(this System.Windows.Forms.Form target)
        {
            return Task<System.Windows.Forms.FormWindowState>.Factory.FromAsync<System.Windows.Forms.Form>(
                BeginGetWindowState,
                EndGetWindowState,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.FormWindowState> setWindowStateInternal = (x, v) => x.WindowState = v;
        public static void SetWindowState(this System.Windows.Forms.Form target, System.Windows.Forms.FormWindowState value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setWindowStateInternal, target, value);
            else
                setWindowStateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Form, System.Windows.Forms.FormWindowState> setWindowStateCallback = SetWindowState;
        public static IAsyncResult BeginSetWindowState(this System.Windows.Forms.Form target, System.Windows.Forms.FormWindowState value, AsyncCallback callback, object state)
        {
            return setWindowStateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetWindowState(this System.Windows.Forms.Form target, IAsyncResult result)
        {
            EndSetWindowState(result);
        }
        public static void EndSetWindowState(IAsyncResult result)
        {
            setWindowStateCallback.EndInvoke(result);
        }
        public static Task SetWindowStateAsync(this System.Windows.Forms.Form target, System.Windows.Forms.FormWindowState value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Form, System.Windows.Forms.FormWindowState>(
                BeginSetWindowState,
                EndSetWindowState,
                target, value, null);
        }


        private static readonly Func<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.DialogResult> showForm1Internal = (c) => c.ShowForm();
        public static System.Windows.Forms.DialogResult ShowForm(this System.Windows.Forms.Design.ComponentEditorForm __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DialogResult)__control__.Invoke(showForm1Internal, __control__);
            else
                return showForm1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.DialogResult> showForm1Callback = ShowForm;
        public static IAsyncResult BeginShowForm1(this System.Windows.Forms.Design.ComponentEditorForm __control__, AsyncCallback callback, object state)
        {
            return showForm1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Windows.Forms.DialogResult EndShowForm1(this System.Windows.Forms.Design.ComponentEditorForm __control__, IAsyncResult result)
        {
            return EndShowForm1(result);
        }
        public static System.Windows.Forms.DialogResult EndShowForm1(IAsyncResult result)
        {
            return showForm1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DialogResult> ShowFormAsync(this System.Windows.Forms.Design.ComponentEditorForm __control__)
        {
            return Task<System.Windows.Forms.DialogResult>.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorForm>(
                (Func<System.Windows.Forms.Design.ComponentEditorForm, AsyncCallback, object, IAsyncResult>)BeginShowForm1,
                (Func<IAsyncResult, System.Windows.Forms.DialogResult>)EndShowForm1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Design.ComponentEditorForm, System.Int32, System.Windows.Forms.DialogResult> showForm2Internal = (c, page) => c.ShowForm(page);
        public static System.Windows.Forms.DialogResult ShowForm(this System.Windows.Forms.Design.ComponentEditorForm __control__, System.Int32 page)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DialogResult)__control__.Invoke(showForm2Internal, __control__, page);
            else
                return showForm2Internal.Invoke(__control__, page);
        }
        private static readonly Func<System.Windows.Forms.Design.ComponentEditorForm, System.Int32, System.Windows.Forms.DialogResult> showForm2Callback = ShowForm;
        public static IAsyncResult BeginShowForm2(this System.Windows.Forms.Design.ComponentEditorForm __control__, System.Int32 page, AsyncCallback callback, object state)
        {
            return showForm2Callback.BeginInvoke(__control__, page, callback, state);
        }
        public static System.Windows.Forms.DialogResult EndShowForm2(this System.Windows.Forms.Design.ComponentEditorForm __control__, IAsyncResult result)
        {
            return EndShowForm2(result);
        }
        public static System.Windows.Forms.DialogResult EndShowForm2(IAsyncResult result)
        {
            return showForm2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DialogResult> ShowFormAsync(this System.Windows.Forms.Design.ComponentEditorForm __control__, System.Int32 page)
        {
            return Task<System.Windows.Forms.DialogResult>.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorForm, System.Int32>(
                (Func<System.Windows.Forms.Design.ComponentEditorForm, System.Int32, AsyncCallback, object, IAsyncResult>)BeginShowForm2,
                (Func<IAsyncResult, System.Windows.Forms.DialogResult>)EndShowForm2,
                __control__, page, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.IWin32Window, System.Windows.Forms.DialogResult> showForm3Internal = (c, owner) => c.ShowForm(owner);
        public static System.Windows.Forms.DialogResult ShowForm(this System.Windows.Forms.Design.ComponentEditorForm __control__, System.Windows.Forms.IWin32Window owner)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DialogResult)__control__.Invoke(showForm3Internal, __control__, owner);
            else
                return showForm3Internal.Invoke(__control__, owner);
        }
        private static readonly Func<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.IWin32Window, System.Windows.Forms.DialogResult> showForm3Callback = ShowForm;
        public static IAsyncResult BeginShowForm3(this System.Windows.Forms.Design.ComponentEditorForm __control__, System.Windows.Forms.IWin32Window owner, AsyncCallback callback, object state)
        {
            return showForm3Callback.BeginInvoke(__control__, owner, callback, state);
        }
        public static System.Windows.Forms.DialogResult EndShowForm3(this System.Windows.Forms.Design.ComponentEditorForm __control__, IAsyncResult result)
        {
            return EndShowForm3(result);
        }
        public static System.Windows.Forms.DialogResult EndShowForm3(IAsyncResult result)
        {
            return showForm3Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DialogResult> ShowFormAsync(this System.Windows.Forms.Design.ComponentEditorForm __control__, System.Windows.Forms.IWin32Window owner)
        {
            return Task<System.Windows.Forms.DialogResult>.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.IWin32Window>(
                (Func<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.IWin32Window, AsyncCallback, object, IAsyncResult>)BeginShowForm3,
                (Func<IAsyncResult, System.Windows.Forms.DialogResult>)EndShowForm3,
                __control__, owner, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.IWin32Window, System.Int32, System.Windows.Forms.DialogResult> showForm4Internal = (c, owner, page) => c.ShowForm(owner, page);
        public static System.Windows.Forms.DialogResult ShowForm(this System.Windows.Forms.Design.ComponentEditorForm __control__, System.Windows.Forms.IWin32Window owner, System.Int32 page)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DialogResult)__control__.Invoke(showForm4Internal, __control__, owner, page);
            else
                return showForm4Internal.Invoke(__control__, owner, page);
        }
        private static readonly Func<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.IWin32Window, System.Int32, System.Windows.Forms.DialogResult> showForm4Callback = ShowForm;
        public static IAsyncResult BeginShowForm4(this System.Windows.Forms.Design.ComponentEditorForm __control__, System.Windows.Forms.IWin32Window owner, System.Int32 page, AsyncCallback callback, object state)
        {
            return showForm4Callback.BeginInvoke(__control__, owner, page, callback, state);
        }
        public static System.Windows.Forms.DialogResult EndShowForm4(this System.Windows.Forms.Design.ComponentEditorForm __control__, IAsyncResult result)
        {
            return EndShowForm4(result);
        }
        public static System.Windows.Forms.DialogResult EndShowForm4(IAsyncResult result)
        {
            return showForm4Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DialogResult> ShowFormAsync(this System.Windows.Forms.Design.ComponentEditorForm __control__, System.Windows.Forms.IWin32Window owner, System.Int32 page)
        {
            return Task<System.Windows.Forms.DialogResult>.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.IWin32Window, System.Int32>(
                (Func<System.Windows.Forms.Design.ComponentEditorForm, System.Windows.Forms.IWin32Window, System.Int32, AsyncCallback, object, IAsyncResult>)BeginShowForm4,
                (Func<IAsyncResult, System.Windows.Forms.DialogResult>)EndShowForm4,
                __control__, owner, page, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.PrintPreviewDialog, System.Boolean> getAutoScaleInternal = (x) => x.AutoScale;
        public static System.Boolean GetAutoScale(this System.Windows.Forms.PrintPreviewDialog target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoScaleInternal, target);
            else
                return getAutoScaleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PrintPreviewDialog, System.Boolean> getAutoScaleCallback = GetAutoScale;
        public static IAsyncResult BeginGetAutoScale(this System.Windows.Forms.PrintPreviewDialog target, AsyncCallback callback, object state)
        {
            return getAutoScaleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoScale(this System.Windows.Forms.PrintPreviewDialog target, IAsyncResult result)
        {
            return EndGetAutoScale(result);
        }
        public static System.Boolean EndGetAutoScale(IAsyncResult result)
        {
            return getAutoScaleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoScaleAsync(this System.Windows.Forms.PrintPreviewDialog target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PrintPreviewDialog>(
                BeginGetAutoScale,
                EndGetAutoScale,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PrintPreviewDialog, System.Boolean> setAutoScaleInternal = (x, v) => x.AutoScale = v;
        public static void SetAutoScale(this System.Windows.Forms.PrintPreviewDialog target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoScaleInternal, target, value);
            else
                setAutoScaleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PrintPreviewDialog, System.Boolean> setAutoScaleCallback = SetAutoScale;
        public static IAsyncResult BeginSetAutoScale(this System.Windows.Forms.PrintPreviewDialog target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoScaleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoScale(this System.Windows.Forms.PrintPreviewDialog target, IAsyncResult result)
        {
            EndSetAutoScale(result);
        }
        public static void EndSetAutoScale(IAsyncResult result)
        {
            setAutoScaleCallback.EndInvoke(result);
        }
        public static Task SetAutoScaleAsync(this System.Windows.Forms.PrintPreviewDialog target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PrintPreviewDialog, System.Boolean>(
                BeginSetAutoScale,
                EndSetAutoScale,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PrintPreviewDialog, System.Boolean> getUseAntiAliasInternal = (x) => x.UseAntiAlias;
        public static System.Boolean GetUseAntiAlias(this System.Windows.Forms.PrintPreviewDialog target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getUseAntiAliasInternal, target);
            else
                return getUseAntiAliasInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PrintPreviewDialog, System.Boolean> getUseAntiAliasCallback = GetUseAntiAlias;
        public static IAsyncResult BeginGetUseAntiAlias(this System.Windows.Forms.PrintPreviewDialog target, AsyncCallback callback, object state)
        {
            return getUseAntiAliasCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetUseAntiAlias(this System.Windows.Forms.PrintPreviewDialog target, IAsyncResult result)
        {
            return EndGetUseAntiAlias(result);
        }
        public static System.Boolean EndGetUseAntiAlias(IAsyncResult result)
        {
            return getUseAntiAliasCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetUseAntiAliasAsync(this System.Windows.Forms.PrintPreviewDialog target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PrintPreviewDialog>(
                BeginGetUseAntiAlias,
                EndGetUseAntiAlias,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PrintPreviewDialog, System.Boolean> setUseAntiAliasInternal = (x, v) => x.UseAntiAlias = v;
        public static void SetUseAntiAlias(this System.Windows.Forms.PrintPreviewDialog target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUseAntiAliasInternal, target, value);
            else
                setUseAntiAliasInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PrintPreviewDialog, System.Boolean> setUseAntiAliasCallback = SetUseAntiAlias;
        public static IAsyncResult BeginSetUseAntiAlias(this System.Windows.Forms.PrintPreviewDialog target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setUseAntiAliasCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUseAntiAlias(this System.Windows.Forms.PrintPreviewDialog target, IAsyncResult result)
        {
            EndSetUseAntiAlias(result);
        }
        public static void EndSetUseAntiAlias(IAsyncResult result)
        {
            setUseAntiAliasCallback.EndInvoke(result);
        }
        public static Task SetUseAntiAliasAsync(this System.Windows.Forms.PrintPreviewDialog target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PrintPreviewDialog, System.Boolean>(
                BeginSetUseAntiAlias,
                EndSetUseAntiAlias,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PrintPreviewDialog, System.Drawing.Printing.PrintDocument> getDocumentInternal = (x) => x.Document;
        public static System.Drawing.Printing.PrintDocument GetDocument(this System.Windows.Forms.PrintPreviewDialog target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Printing.PrintDocument)target.Invoke(getDocumentInternal, target);
            else
                return getDocumentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PrintPreviewDialog, System.Drawing.Printing.PrintDocument> getDocumentCallback = GetDocument;
        public static IAsyncResult BeginGetDocument(this System.Windows.Forms.PrintPreviewDialog target, AsyncCallback callback, object state)
        {
            return getDocumentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Printing.PrintDocument EndGetDocument(this System.Windows.Forms.PrintPreviewDialog target, IAsyncResult result)
        {
            return EndGetDocument(result);
        }
        public static System.Drawing.Printing.PrintDocument EndGetDocument(IAsyncResult result)
        {
            return getDocumentCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Printing.PrintDocument> GetDocumentAsync(this System.Windows.Forms.PrintPreviewDialog target)
        {
            return Task<System.Drawing.Printing.PrintDocument>.Factory.FromAsync<System.Windows.Forms.PrintPreviewDialog>(
                BeginGetDocument,
                EndGetDocument,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PrintPreviewDialog, System.Drawing.Printing.PrintDocument> setDocumentInternal = (x, v) => x.Document = v;
        public static void SetDocument(this System.Windows.Forms.PrintPreviewDialog target, System.Drawing.Printing.PrintDocument value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDocumentInternal, target, value);
            else
                setDocumentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PrintPreviewDialog, System.Drawing.Printing.PrintDocument> setDocumentCallback = SetDocument;
        public static IAsyncResult BeginSetDocument(this System.Windows.Forms.PrintPreviewDialog target, System.Drawing.Printing.PrintDocument value, AsyncCallback callback, object state)
        {
            return setDocumentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDocument(this System.Windows.Forms.PrintPreviewDialog target, IAsyncResult result)
        {
            EndSetDocument(result);
        }
        public static void EndSetDocument(IAsyncResult result)
        {
            setDocumentCallback.EndInvoke(result);
        }
        public static Task SetDocumentAsync(this System.Windows.Forms.PrintPreviewDialog target, System.Drawing.Printing.PrintDocument value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PrintPreviewDialog, System.Drawing.Printing.PrintDocument>(
                BeginSetDocument,
                EndSetDocument,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PrintPreviewDialog, System.Windows.Forms.PrintPreviewControl> getPrintPreviewControlInternal = (x) => x.PrintPreviewControl;
        public static System.Windows.Forms.PrintPreviewControl GetPrintPreviewControl(this System.Windows.Forms.PrintPreviewDialog target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.PrintPreviewControl)target.Invoke(getPrintPreviewControlInternal, target);
            else
                return getPrintPreviewControlInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PrintPreviewDialog, System.Windows.Forms.PrintPreviewControl> getPrintPreviewControlCallback = GetPrintPreviewControl;
        public static IAsyncResult BeginGetPrintPreviewControl(this System.Windows.Forms.PrintPreviewDialog target, AsyncCallback callback, object state)
        {
            return getPrintPreviewControlCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.PrintPreviewControl EndGetPrintPreviewControl(this System.Windows.Forms.PrintPreviewDialog target, IAsyncResult result)
        {
            return EndGetPrintPreviewControl(result);
        }
        public static System.Windows.Forms.PrintPreviewControl EndGetPrintPreviewControl(IAsyncResult result)
        {
            return getPrintPreviewControlCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.PrintPreviewControl> GetPrintPreviewControlAsync(this System.Windows.Forms.PrintPreviewDialog target)
        {
            return Task<System.Windows.Forms.PrintPreviewControl>.Factory.FromAsync<System.Windows.Forms.PrintPreviewDialog>(
                BeginGetPrintPreviewControl,
                EndGetPrintPreviewControl,
                target, null);
        }


        private static readonly Action<System.Windows.Forms.PropertyGrid> collapseAllGridItems1Internal = (c) => c.CollapseAllGridItems();
        public static void CollapseAllGridItems(this System.Windows.Forms.PropertyGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(collapseAllGridItems1Internal, __control__);
            else
                collapseAllGridItems1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid> collapseAllGridItems1Callback = CollapseAllGridItems;
        public static IAsyncResult BeginCollapseAllGridItems1(this System.Windows.Forms.PropertyGrid __control__, AsyncCallback callback, object state)
        {
            return collapseAllGridItems1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndCollapseAllGridItems1(this System.Windows.Forms.PropertyGrid __control__, IAsyncResult result)
        {
            EndCollapseAllGridItems1(result);
        }
        public static void EndCollapseAllGridItems1(IAsyncResult result)
        {
            collapseAllGridItems1Callback.EndInvoke(result);
        }
        public static Task CollapseAllGridItemsAsync(this System.Windows.Forms.PropertyGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                (Func<System.Windows.Forms.PropertyGrid, AsyncCallback, object, IAsyncResult>)BeginCollapseAllGridItems1,
                (Action<IAsyncResult>)EndCollapseAllGridItems1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid> expandAllGridItems1Internal = (c) => c.ExpandAllGridItems();
        public static void ExpandAllGridItems(this System.Windows.Forms.PropertyGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(expandAllGridItems1Internal, __control__);
            else
                expandAllGridItems1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid> expandAllGridItems1Callback = ExpandAllGridItems;
        public static IAsyncResult BeginExpandAllGridItems1(this System.Windows.Forms.PropertyGrid __control__, AsyncCallback callback, object state)
        {
            return expandAllGridItems1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndExpandAllGridItems1(this System.Windows.Forms.PropertyGrid __control__, IAsyncResult result)
        {
            EndExpandAllGridItems1(result);
        }
        public static void EndExpandAllGridItems1(IAsyncResult result)
        {
            expandAllGridItems1Callback.EndInvoke(result);
        }
        public static Task ExpandAllGridItemsAsync(this System.Windows.Forms.PropertyGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                (Func<System.Windows.Forms.PropertyGrid, AsyncCallback, object, IAsyncResult>)BeginExpandAllGridItems1,
                (Action<IAsyncResult>)EndExpandAllGridItems1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid> refresh2Internal = (c) => c.Refresh();
        public static void Refresh(this System.Windows.Forms.PropertyGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(refresh2Internal, __control__);
            else
                refresh2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid> refresh2Callback = Refresh;
        public static IAsyncResult BeginRefresh2(this System.Windows.Forms.PropertyGrid __control__, AsyncCallback callback, object state)
        {
            return refresh2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndRefresh2(this System.Windows.Forms.PropertyGrid __control__, IAsyncResult result)
        {
            EndRefresh2(result);
        }
        public static void EndRefresh2(IAsyncResult result)
        {
            refresh2Callback.EndInvoke(result);
        }
        public static Task RefreshAsync(this System.Windows.Forms.PropertyGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                (Func<System.Windows.Forms.PropertyGrid, AsyncCallback, object, IAsyncResult>)BeginRefresh2,
                (Action<IAsyncResult>)EndRefresh2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.ComponentModel.PropertyTabScope> refreshTabs1Internal = (c, tabScope) => c.RefreshTabs(tabScope);
        public static void RefreshTabs(this System.Windows.Forms.PropertyGrid __control__, System.ComponentModel.PropertyTabScope tabScope)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(refreshTabs1Internal, __control__, tabScope);
            else
                refreshTabs1Internal.Invoke(__control__, tabScope);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.ComponentModel.PropertyTabScope> refreshTabs1Callback = RefreshTabs;
        public static IAsyncResult BeginRefreshTabs1(this System.Windows.Forms.PropertyGrid __control__, System.ComponentModel.PropertyTabScope tabScope, AsyncCallback callback, object state)
        {
            return refreshTabs1Callback.BeginInvoke(__control__, tabScope, callback, state);
        }
        public static void EndRefreshTabs1(this System.Windows.Forms.PropertyGrid __control__, IAsyncResult result)
        {
            EndRefreshTabs1(result);
        }
        public static void EndRefreshTabs1(IAsyncResult result)
        {
            refreshTabs1Callback.EndInvoke(result);
        }
        public static Task RefreshTabsAsync(this System.Windows.Forms.PropertyGrid __control__, System.ComponentModel.PropertyTabScope tabScope)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.ComponentModel.PropertyTabScope>(
                (Func<System.Windows.Forms.PropertyGrid, System.ComponentModel.PropertyTabScope, AsyncCallback, object, IAsyncResult>)BeginRefreshTabs1,
                (Action<IAsyncResult>)EndRefreshTabs1,
                __control__, tabScope, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid> resetSelectedProperty1Internal = (c) => c.ResetSelectedProperty();
        public static void ResetSelectedProperty(this System.Windows.Forms.PropertyGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetSelectedProperty1Internal, __control__);
            else
                resetSelectedProperty1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid> resetSelectedProperty1Callback = ResetSelectedProperty;
        public static IAsyncResult BeginResetSelectedProperty1(this System.Windows.Forms.PropertyGrid __control__, AsyncCallback callback, object state)
        {
            return resetSelectedProperty1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetSelectedProperty1(this System.Windows.Forms.PropertyGrid __control__, IAsyncResult result)
        {
            EndResetSelectedProperty1(result);
        }
        public static void EndResetSelectedProperty1(IAsyncResult result)
        {
            resetSelectedProperty1Callback.EndInvoke(result);
        }
        public static Task ResetSelectedPropertyAsync(this System.Windows.Forms.PropertyGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                (Func<System.Windows.Forms.PropertyGrid, AsyncCallback, object, IAsyncResult>)BeginResetSelectedProperty1,
                (Action<IAsyncResult>)EndResetSelectedProperty1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.ComponentModel.AttributeCollection> getBrowsableAttributesInternal = (x) => x.BrowsableAttributes;
        public static System.ComponentModel.AttributeCollection GetBrowsableAttributes(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.ComponentModel.AttributeCollection)target.Invoke(getBrowsableAttributesInternal, target);
            else
                return getBrowsableAttributesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.ComponentModel.AttributeCollection> getBrowsableAttributesCallback = GetBrowsableAttributes;
        public static IAsyncResult BeginGetBrowsableAttributes(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getBrowsableAttributesCallback.BeginInvoke(target, callback, state);
        }
        public static System.ComponentModel.AttributeCollection EndGetBrowsableAttributes(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetBrowsableAttributes(result);
        }
        public static System.ComponentModel.AttributeCollection EndGetBrowsableAttributes(IAsyncResult result)
        {
            return getBrowsableAttributesCallback.EndInvoke(result);
        }
        public static Task<System.ComponentModel.AttributeCollection> GetBrowsableAttributesAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.ComponentModel.AttributeCollection>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetBrowsableAttributes,
                EndGetBrowsableAttributes,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.ComponentModel.AttributeCollection> setBrowsableAttributesInternal = (x, v) => x.BrowsableAttributes = v;
        public static void SetBrowsableAttributes(this System.Windows.Forms.PropertyGrid target, System.ComponentModel.AttributeCollection value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBrowsableAttributesInternal, target, value);
            else
                setBrowsableAttributesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.ComponentModel.AttributeCollection> setBrowsableAttributesCallback = SetBrowsableAttributes;
        public static IAsyncResult BeginSetBrowsableAttributes(this System.Windows.Forms.PropertyGrid target, System.ComponentModel.AttributeCollection value, AsyncCallback callback, object state)
        {
            return setBrowsableAttributesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBrowsableAttributes(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetBrowsableAttributes(result);
        }
        public static void EndSetBrowsableAttributes(IAsyncResult result)
        {
            setBrowsableAttributesCallback.EndInvoke(result);
        }
        public static Task SetBrowsableAttributesAsync(this System.Windows.Forms.PropertyGrid target, System.ComponentModel.AttributeCollection value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.ComponentModel.AttributeCollection>(
                BeginSetBrowsableAttributes,
                EndSetBrowsableAttributes,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getCanShowCommandsInternal = (x) => x.CanShowCommands;
        public static System.Boolean GetCanShowCommands(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCanShowCommandsInternal, target);
            else
                return getCanShowCommandsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getCanShowCommandsCallback = GetCanShowCommands;
        public static IAsyncResult BeginGetCanShowCommands(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCanShowCommandsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCanShowCommands(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCanShowCommands(result);
        }
        public static System.Boolean EndGetCanShowCommands(IAsyncResult result)
        {
            return getCanShowCommandsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCanShowCommandsAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCanShowCommands,
                EndGetCanShowCommands,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCategoryForeColorInternal = (x) => x.CategoryForeColor;
        public static System.Drawing.Color GetCategoryForeColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCategoryForeColorInternal, target);
            else
                return getCategoryForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCategoryForeColorCallback = GetCategoryForeColor;
        public static IAsyncResult BeginGetCategoryForeColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCategoryForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCategoryForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCategoryForeColor(result);
        }
        public static System.Drawing.Color EndGetCategoryForeColor(IAsyncResult result)
        {
            return getCategoryForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCategoryForeColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCategoryForeColor,
                EndGetCategoryForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCategoryForeColorInternal = (x, v) => x.CategoryForeColor = v;
        public static void SetCategoryForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCategoryForeColorInternal, target, value);
            else
                setCategoryForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCategoryForeColorCallback = SetCategoryForeColor;
        public static IAsyncResult BeginSetCategoryForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCategoryForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCategoryForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCategoryForeColor(result);
        }
        public static void EndSetCategoryForeColor(IAsyncResult result)
        {
            setCategoryForeColorCallback.EndInvoke(result);
        }
        public static Task SetCategoryForeColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetCategoryForeColor,
                EndSetCategoryForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsBackColorInternal = (x) => x.CommandsBackColor;
        public static System.Drawing.Color GetCommandsBackColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCommandsBackColorInternal, target);
            else
                return getCommandsBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsBackColorCallback = GetCommandsBackColor;
        public static IAsyncResult BeginGetCommandsBackColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCommandsBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCommandsBackColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCommandsBackColor(result);
        }
        public static System.Drawing.Color EndGetCommandsBackColor(IAsyncResult result)
        {
            return getCommandsBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCommandsBackColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCommandsBackColor,
                EndGetCommandsBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsBackColorInternal = (x, v) => x.CommandsBackColor = v;
        public static void SetCommandsBackColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCommandsBackColorInternal, target, value);
            else
                setCommandsBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsBackColorCallback = SetCommandsBackColor;
        public static IAsyncResult BeginSetCommandsBackColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCommandsBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCommandsBackColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCommandsBackColor(result);
        }
        public static void EndSetCommandsBackColor(IAsyncResult result)
        {
            setCommandsBackColorCallback.EndInvoke(result);
        }
        public static Task SetCommandsBackColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetCommandsBackColor,
                EndSetCommandsBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsForeColorInternal = (x) => x.CommandsForeColor;
        public static System.Drawing.Color GetCommandsForeColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCommandsForeColorInternal, target);
            else
                return getCommandsForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsForeColorCallback = GetCommandsForeColor;
        public static IAsyncResult BeginGetCommandsForeColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCommandsForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCommandsForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCommandsForeColor(result);
        }
        public static System.Drawing.Color EndGetCommandsForeColor(IAsyncResult result)
        {
            return getCommandsForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCommandsForeColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCommandsForeColor,
                EndGetCommandsForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsForeColorInternal = (x, v) => x.CommandsForeColor = v;
        public static void SetCommandsForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCommandsForeColorInternal, target, value);
            else
                setCommandsForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsForeColorCallback = SetCommandsForeColor;
        public static IAsyncResult BeginSetCommandsForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCommandsForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCommandsForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCommandsForeColor(result);
        }
        public static void EndSetCommandsForeColor(IAsyncResult result)
        {
            setCommandsForeColorCallback.EndInvoke(result);
        }
        public static Task SetCommandsForeColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetCommandsForeColor,
                EndSetCommandsForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsLinkColorInternal = (x) => x.CommandsLinkColor;
        public static System.Drawing.Color GetCommandsLinkColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCommandsLinkColorInternal, target);
            else
                return getCommandsLinkColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsLinkColorCallback = GetCommandsLinkColor;
        public static IAsyncResult BeginGetCommandsLinkColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCommandsLinkColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCommandsLinkColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCommandsLinkColor(result);
        }
        public static System.Drawing.Color EndGetCommandsLinkColor(IAsyncResult result)
        {
            return getCommandsLinkColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCommandsLinkColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCommandsLinkColor,
                EndGetCommandsLinkColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsLinkColorInternal = (x, v) => x.CommandsLinkColor = v;
        public static void SetCommandsLinkColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCommandsLinkColorInternal, target, value);
            else
                setCommandsLinkColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsLinkColorCallback = SetCommandsLinkColor;
        public static IAsyncResult BeginSetCommandsLinkColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCommandsLinkColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCommandsLinkColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCommandsLinkColor(result);
        }
        public static void EndSetCommandsLinkColor(IAsyncResult result)
        {
            setCommandsLinkColorCallback.EndInvoke(result);
        }
        public static Task SetCommandsLinkColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetCommandsLinkColor,
                EndSetCommandsLinkColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsActiveLinkColorInternal = (x) => x.CommandsActiveLinkColor;
        public static System.Drawing.Color GetCommandsActiveLinkColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCommandsActiveLinkColorInternal, target);
            else
                return getCommandsActiveLinkColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsActiveLinkColorCallback = GetCommandsActiveLinkColor;
        public static IAsyncResult BeginGetCommandsActiveLinkColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCommandsActiveLinkColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCommandsActiveLinkColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCommandsActiveLinkColor(result);
        }
        public static System.Drawing.Color EndGetCommandsActiveLinkColor(IAsyncResult result)
        {
            return getCommandsActiveLinkColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCommandsActiveLinkColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCommandsActiveLinkColor,
                EndGetCommandsActiveLinkColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsActiveLinkColorInternal = (x, v) => x.CommandsActiveLinkColor = v;
        public static void SetCommandsActiveLinkColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCommandsActiveLinkColorInternal, target, value);
            else
                setCommandsActiveLinkColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsActiveLinkColorCallback = SetCommandsActiveLinkColor;
        public static IAsyncResult BeginSetCommandsActiveLinkColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCommandsActiveLinkColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCommandsActiveLinkColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCommandsActiveLinkColor(result);
        }
        public static void EndSetCommandsActiveLinkColor(IAsyncResult result)
        {
            setCommandsActiveLinkColorCallback.EndInvoke(result);
        }
        public static Task SetCommandsActiveLinkColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetCommandsActiveLinkColor,
                EndSetCommandsActiveLinkColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsDisabledLinkColorInternal = (x) => x.CommandsDisabledLinkColor;
        public static System.Drawing.Color GetCommandsDisabledLinkColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCommandsDisabledLinkColorInternal, target);
            else
                return getCommandsDisabledLinkColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsDisabledLinkColorCallback = GetCommandsDisabledLinkColor;
        public static IAsyncResult BeginGetCommandsDisabledLinkColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCommandsDisabledLinkColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCommandsDisabledLinkColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCommandsDisabledLinkColor(result);
        }
        public static System.Drawing.Color EndGetCommandsDisabledLinkColor(IAsyncResult result)
        {
            return getCommandsDisabledLinkColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCommandsDisabledLinkColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCommandsDisabledLinkColor,
                EndGetCommandsDisabledLinkColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsDisabledLinkColorInternal = (x, v) => x.CommandsDisabledLinkColor = v;
        public static void SetCommandsDisabledLinkColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCommandsDisabledLinkColorInternal, target, value);
            else
                setCommandsDisabledLinkColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsDisabledLinkColorCallback = SetCommandsDisabledLinkColor;
        public static IAsyncResult BeginSetCommandsDisabledLinkColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCommandsDisabledLinkColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCommandsDisabledLinkColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCommandsDisabledLinkColor(result);
        }
        public static void EndSetCommandsDisabledLinkColor(IAsyncResult result)
        {
            setCommandsDisabledLinkColorCallback.EndInvoke(result);
        }
        public static Task SetCommandsDisabledLinkColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetCommandsDisabledLinkColor,
                EndSetCommandsDisabledLinkColor,
                target, value, null);
        }

#if NET45
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsBorderColorInternal = (x) => x.CommandsBorderColor;
        public static System.Drawing.Color GetCommandsBorderColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCommandsBorderColorInternal, target);
            else
                return getCommandsBorderColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCommandsBorderColorCallback = GetCommandsBorderColor;
        public static IAsyncResult BeginGetCommandsBorderColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCommandsBorderColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCommandsBorderColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCommandsBorderColor(result);
        }
        public static System.Drawing.Color EndGetCommandsBorderColor(IAsyncResult result)
        {
            return getCommandsBorderColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCommandsBorderColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCommandsBorderColor,
                EndGetCommandsBorderColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsBorderColorInternal = (x, v) => x.CommandsBorderColor = v;
        public static void SetCommandsBorderColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCommandsBorderColorInternal, target, value);
            else
                setCommandsBorderColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCommandsBorderColorCallback = SetCommandsBorderColor;
        public static IAsyncResult BeginSetCommandsBorderColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCommandsBorderColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCommandsBorderColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCommandsBorderColor(result);
        }
        public static void EndSetCommandsBorderColor(IAsyncResult result)
        {
            setCommandsBorderColorCallback.EndInvoke(result);
        }
        public static Task SetCommandsBorderColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetCommandsBorderColor,
                EndSetCommandsBorderColor,
                target, value, null);
        }
#endif // NET45

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getCommandsVisibleInternal = (x) => x.CommandsVisible;
        public static System.Boolean GetCommandsVisible(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCommandsVisibleInternal, target);
            else
                return getCommandsVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getCommandsVisibleCallback = GetCommandsVisible;
        public static IAsyncResult BeginGetCommandsVisible(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCommandsVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCommandsVisible(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCommandsVisible(result);
        }
        public static System.Boolean EndGetCommandsVisible(IAsyncResult result)
        {
            return getCommandsVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCommandsVisibleAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCommandsVisible,
                EndGetCommandsVisible,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getCommandsVisibleIfAvailableInternal = (x) => x.CommandsVisibleIfAvailable;
        public static System.Boolean GetCommandsVisibleIfAvailable(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCommandsVisibleIfAvailableInternal, target);
            else
                return getCommandsVisibleIfAvailableInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getCommandsVisibleIfAvailableCallback = GetCommandsVisibleIfAvailable;
        public static IAsyncResult BeginGetCommandsVisibleIfAvailable(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCommandsVisibleIfAvailableCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCommandsVisibleIfAvailable(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCommandsVisibleIfAvailable(result);
        }
        public static System.Boolean EndGetCommandsVisibleIfAvailable(IAsyncResult result)
        {
            return getCommandsVisibleIfAvailableCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCommandsVisibleIfAvailableAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCommandsVisibleIfAvailable,
                EndGetCommandsVisibleIfAvailable,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setCommandsVisibleIfAvailableInternal = (x, v) => x.CommandsVisibleIfAvailable = v;
        public static void SetCommandsVisibleIfAvailable(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCommandsVisibleIfAvailableInternal, target, value);
            else
                setCommandsVisibleIfAvailableInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setCommandsVisibleIfAvailableCallback = SetCommandsVisibleIfAvailable;
        public static IAsyncResult BeginSetCommandsVisibleIfAvailable(this System.Windows.Forms.PropertyGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCommandsVisibleIfAvailableCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCommandsVisibleIfAvailable(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCommandsVisibleIfAvailable(result);
        }
        public static void EndSetCommandsVisibleIfAvailable(IAsyncResult result)
        {
            setCommandsVisibleIfAvailableCallback.EndInvoke(result);
        }
        public static Task SetCommandsVisibleIfAvailableAsync(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Boolean>(
                BeginSetCommandsVisibleIfAvailable,
                EndSetCommandsVisibleIfAvailable,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Point> getContextMenuDefaultLocationInternal = (x) => x.ContextMenuDefaultLocation;
        public static System.Drawing.Point GetContextMenuDefaultLocation(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Point)target.Invoke(getContextMenuDefaultLocationInternal, target);
            else
                return getContextMenuDefaultLocationInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Point> getContextMenuDefaultLocationCallback = GetContextMenuDefaultLocation;
        public static IAsyncResult BeginGetContextMenuDefaultLocation(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getContextMenuDefaultLocationCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Point EndGetContextMenuDefaultLocation(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetContextMenuDefaultLocation(result);
        }
        public static System.Drawing.Point EndGetContextMenuDefaultLocation(IAsyncResult result)
        {
            return getContextMenuDefaultLocationCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> GetContextMenuDefaultLocationAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetContextMenuDefaultLocation,
                EndGetContextMenuDefaultLocation,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getHelpBackColorInternal = (x) => x.HelpBackColor;
        public static System.Drawing.Color GetHelpBackColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getHelpBackColorInternal, target);
            else
                return getHelpBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getHelpBackColorCallback = GetHelpBackColor;
        public static IAsyncResult BeginGetHelpBackColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getHelpBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetHelpBackColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetHelpBackColor(result);
        }
        public static System.Drawing.Color EndGetHelpBackColor(IAsyncResult result)
        {
            return getHelpBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetHelpBackColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetHelpBackColor,
                EndGetHelpBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setHelpBackColorInternal = (x, v) => x.HelpBackColor = v;
        public static void SetHelpBackColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHelpBackColorInternal, target, value);
            else
                setHelpBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setHelpBackColorCallback = SetHelpBackColor;
        public static IAsyncResult BeginSetHelpBackColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setHelpBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHelpBackColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetHelpBackColor(result);
        }
        public static void EndSetHelpBackColor(IAsyncResult result)
        {
            setHelpBackColorCallback.EndInvoke(result);
        }
        public static Task SetHelpBackColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetHelpBackColor,
                EndSetHelpBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getHelpForeColorInternal = (x) => x.HelpForeColor;
        public static System.Drawing.Color GetHelpForeColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getHelpForeColorInternal, target);
            else
                return getHelpForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getHelpForeColorCallback = GetHelpForeColor;
        public static IAsyncResult BeginGetHelpForeColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getHelpForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetHelpForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetHelpForeColor(result);
        }
        public static System.Drawing.Color EndGetHelpForeColor(IAsyncResult result)
        {
            return getHelpForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetHelpForeColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetHelpForeColor,
                EndGetHelpForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setHelpForeColorInternal = (x, v) => x.HelpForeColor = v;
        public static void SetHelpForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHelpForeColorInternal, target, value);
            else
                setHelpForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setHelpForeColorCallback = SetHelpForeColor;
        public static IAsyncResult BeginSetHelpForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setHelpForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHelpForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetHelpForeColor(result);
        }
        public static void EndSetHelpForeColor(IAsyncResult result)
        {
            setHelpForeColorCallback.EndInvoke(result);
        }
        public static Task SetHelpForeColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetHelpForeColor,
                EndSetHelpForeColor,
                target, value, null);
        }

#if NET45
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getHelpBorderColorInternal = (x) => x.HelpBorderColor;
        public static System.Drawing.Color GetHelpBorderColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getHelpBorderColorInternal, target);
            else
                return getHelpBorderColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getHelpBorderColorCallback = GetHelpBorderColor;
        public static IAsyncResult BeginGetHelpBorderColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getHelpBorderColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetHelpBorderColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetHelpBorderColor(result);
        }
        public static System.Drawing.Color EndGetHelpBorderColor(IAsyncResult result)
        {
            return getHelpBorderColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetHelpBorderColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetHelpBorderColor,
                EndGetHelpBorderColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setHelpBorderColorInternal = (x, v) => x.HelpBorderColor = v;
        public static void SetHelpBorderColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHelpBorderColorInternal, target, value);
            else
                setHelpBorderColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setHelpBorderColorCallback = SetHelpBorderColor;
        public static IAsyncResult BeginSetHelpBorderColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setHelpBorderColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHelpBorderColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetHelpBorderColor(result);
        }
        public static void EndSetHelpBorderColor(IAsyncResult result)
        {
            setHelpBorderColorCallback.EndInvoke(result);
        }
        public static Task SetHelpBorderColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetHelpBorderColor,
                EndSetHelpBorderColor,
                target, value, null);
        }
#endif // NET45

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getHelpVisibleInternal = (x) => x.HelpVisible;
        public static System.Boolean GetHelpVisible(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHelpVisibleInternal, target);
            else
                return getHelpVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getHelpVisibleCallback = GetHelpVisible;
        public static IAsyncResult BeginGetHelpVisible(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getHelpVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHelpVisible(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetHelpVisible(result);
        }
        public static System.Boolean EndGetHelpVisible(IAsyncResult result)
        {
            return getHelpVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHelpVisibleAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetHelpVisible,
                EndGetHelpVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setHelpVisibleInternal = (x, v) => x.HelpVisible = v;
        public static void SetHelpVisible(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHelpVisibleInternal, target, value);
            else
                setHelpVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setHelpVisibleCallback = SetHelpVisible;
        public static IAsyncResult BeginSetHelpVisible(this System.Windows.Forms.PropertyGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setHelpVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHelpVisible(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetHelpVisible(result);
        }
        public static void EndSetHelpVisible(IAsyncResult result)
        {
            setHelpVisibleCallback.EndInvoke(result);
        }
        public static Task SetHelpVisibleAsync(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Boolean>(
                BeginSetHelpVisible,
                EndSetHelpVisible,
                target, value, null);
        }

#if NET45
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getSelectedItemWithFocusBackColorInternal = (x) => x.SelectedItemWithFocusBackColor;
        public static System.Drawing.Color GetSelectedItemWithFocusBackColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getSelectedItemWithFocusBackColorInternal, target);
            else
                return getSelectedItemWithFocusBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getSelectedItemWithFocusBackColorCallback = GetSelectedItemWithFocusBackColor;
        public static IAsyncResult BeginGetSelectedItemWithFocusBackColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getSelectedItemWithFocusBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetSelectedItemWithFocusBackColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetSelectedItemWithFocusBackColor(result);
        }
        public static System.Drawing.Color EndGetSelectedItemWithFocusBackColor(IAsyncResult result)
        {
            return getSelectedItemWithFocusBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetSelectedItemWithFocusBackColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetSelectedItemWithFocusBackColor,
                EndGetSelectedItemWithFocusBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setSelectedItemWithFocusBackColorInternal = (x, v) => x.SelectedItemWithFocusBackColor = v;
        public static void SetSelectedItemWithFocusBackColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedItemWithFocusBackColorInternal, target, value);
            else
                setSelectedItemWithFocusBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setSelectedItemWithFocusBackColorCallback = SetSelectedItemWithFocusBackColor;
        public static IAsyncResult BeginSetSelectedItemWithFocusBackColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setSelectedItemWithFocusBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedItemWithFocusBackColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetSelectedItemWithFocusBackColor(result);
        }
        public static void EndSetSelectedItemWithFocusBackColor(IAsyncResult result)
        {
            setSelectedItemWithFocusBackColorCallback.EndInvoke(result);
        }
        public static Task SetSelectedItemWithFocusBackColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetSelectedItemWithFocusBackColor,
                EndSetSelectedItemWithFocusBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getSelectedItemWithFocusForeColorInternal = (x) => x.SelectedItemWithFocusForeColor;
        public static System.Drawing.Color GetSelectedItemWithFocusForeColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getSelectedItemWithFocusForeColorInternal, target);
            else
                return getSelectedItemWithFocusForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getSelectedItemWithFocusForeColorCallback = GetSelectedItemWithFocusForeColor;
        public static IAsyncResult BeginGetSelectedItemWithFocusForeColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getSelectedItemWithFocusForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetSelectedItemWithFocusForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetSelectedItemWithFocusForeColor(result);
        }
        public static System.Drawing.Color EndGetSelectedItemWithFocusForeColor(IAsyncResult result)
        {
            return getSelectedItemWithFocusForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetSelectedItemWithFocusForeColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetSelectedItemWithFocusForeColor,
                EndGetSelectedItemWithFocusForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setSelectedItemWithFocusForeColorInternal = (x, v) => x.SelectedItemWithFocusForeColor = v;
        public static void SetSelectedItemWithFocusForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedItemWithFocusForeColorInternal, target, value);
            else
                setSelectedItemWithFocusForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setSelectedItemWithFocusForeColorCallback = SetSelectedItemWithFocusForeColor;
        public static IAsyncResult BeginSetSelectedItemWithFocusForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setSelectedItemWithFocusForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedItemWithFocusForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetSelectedItemWithFocusForeColor(result);
        }
        public static void EndSetSelectedItemWithFocusForeColor(IAsyncResult result)
        {
            setSelectedItemWithFocusForeColorCallback.EndInvoke(result);
        }
        public static Task SetSelectedItemWithFocusForeColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetSelectedItemWithFocusForeColor,
                EndSetSelectedItemWithFocusForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getDisabledItemForeColorInternal = (x) => x.DisabledItemForeColor;
        public static System.Drawing.Color GetDisabledItemForeColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getDisabledItemForeColorInternal, target);
            else
                return getDisabledItemForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getDisabledItemForeColorCallback = GetDisabledItemForeColor;
        public static IAsyncResult BeginGetDisabledItemForeColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getDisabledItemForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetDisabledItemForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetDisabledItemForeColor(result);
        }
        public static System.Drawing.Color EndGetDisabledItemForeColor(IAsyncResult result)
        {
            return getDisabledItemForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetDisabledItemForeColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetDisabledItemForeColor,
                EndGetDisabledItemForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setDisabledItemForeColorInternal = (x, v) => x.DisabledItemForeColor = v;
        public static void SetDisabledItemForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDisabledItemForeColorInternal, target, value);
            else
                setDisabledItemForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setDisabledItemForeColorCallback = SetDisabledItemForeColor;
        public static IAsyncResult BeginSetDisabledItemForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setDisabledItemForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDisabledItemForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetDisabledItemForeColor(result);
        }
        public static void EndSetDisabledItemForeColor(IAsyncResult result)
        {
            setDisabledItemForeColorCallback.EndInvoke(result);
        }
        public static Task SetDisabledItemForeColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetDisabledItemForeColor,
                EndSetDisabledItemForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCategorySplitterColorInternal = (x) => x.CategorySplitterColor;
        public static System.Drawing.Color GetCategorySplitterColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCategorySplitterColorInternal, target);
            else
                return getCategorySplitterColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getCategorySplitterColorCallback = GetCategorySplitterColor;
        public static IAsyncResult BeginGetCategorySplitterColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCategorySplitterColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCategorySplitterColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCategorySplitterColor(result);
        }
        public static System.Drawing.Color EndGetCategorySplitterColor(IAsyncResult result)
        {
            return getCategorySplitterColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCategorySplitterColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCategorySplitterColor,
                EndGetCategorySplitterColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCategorySplitterColorInternal = (x, v) => x.CategorySplitterColor = v;
        public static void SetCategorySplitterColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCategorySplitterColorInternal, target, value);
            else
                setCategorySplitterColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setCategorySplitterColorCallback = SetCategorySplitterColor;
        public static IAsyncResult BeginSetCategorySplitterColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCategorySplitterColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCategorySplitterColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCategorySplitterColor(result);
        }
        public static void EndSetCategorySplitterColor(IAsyncResult result)
        {
            setCategorySplitterColorCallback.EndInvoke(result);
        }
        public static Task SetCategorySplitterColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetCategorySplitterColor,
                EndSetCategorySplitterColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getCanShowVisualStyleGlyphsInternal = (x) => x.CanShowVisualStyleGlyphs;
        public static System.Boolean GetCanShowVisualStyleGlyphs(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCanShowVisualStyleGlyphsInternal, target);
            else
                return getCanShowVisualStyleGlyphsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getCanShowVisualStyleGlyphsCallback = GetCanShowVisualStyleGlyphs;
        public static IAsyncResult BeginGetCanShowVisualStyleGlyphs(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getCanShowVisualStyleGlyphsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCanShowVisualStyleGlyphs(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetCanShowVisualStyleGlyphs(result);
        }
        public static System.Boolean EndGetCanShowVisualStyleGlyphs(IAsyncResult result)
        {
            return getCanShowVisualStyleGlyphsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCanShowVisualStyleGlyphsAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetCanShowVisualStyleGlyphs,
                EndGetCanShowVisualStyleGlyphs,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setCanShowVisualStyleGlyphsInternal = (x, v) => x.CanShowVisualStyleGlyphs = v;
        public static void SetCanShowVisualStyleGlyphs(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCanShowVisualStyleGlyphsInternal, target, value);
            else
                setCanShowVisualStyleGlyphsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setCanShowVisualStyleGlyphsCallback = SetCanShowVisualStyleGlyphs;
        public static IAsyncResult BeginSetCanShowVisualStyleGlyphs(this System.Windows.Forms.PropertyGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCanShowVisualStyleGlyphsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCanShowVisualStyleGlyphs(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetCanShowVisualStyleGlyphs(result);
        }
        public static void EndSetCanShowVisualStyleGlyphs(IAsyncResult result)
        {
            setCanShowVisualStyleGlyphsCallback.EndInvoke(result);
        }
        public static Task SetCanShowVisualStyleGlyphsAsync(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Boolean>(
                BeginSetCanShowVisualStyleGlyphs,
                EndSetCanShowVisualStyleGlyphs,
                target, value, null);
        }
#endif // NET45

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getLineColorInternal = (x) => x.LineColor;
        public static System.Drawing.Color GetLineColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getLineColorInternal, target);
            else
                return getLineColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getLineColorCallback = GetLineColor;
        public static IAsyncResult BeginGetLineColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getLineColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetLineColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetLineColor(result);
        }
        public static System.Drawing.Color EndGetLineColor(IAsyncResult result)
        {
            return getLineColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetLineColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetLineColor,
                EndGetLineColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setLineColorInternal = (x, v) => x.LineColor = v;
        public static void SetLineColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLineColorInternal, target, value);
            else
                setLineColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setLineColorCallback = SetLineColor;
        public static IAsyncResult BeginSetLineColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setLineColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLineColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetLineColor(result);
        }
        public static void EndSetLineColor(IAsyncResult result)
        {
            setLineColorCallback.EndInvoke(result);
        }
        public static Task SetLineColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetLineColor,
                EndSetLineColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Windows.Forms.PropertySort> getPropertySortInternal = (x) => x.PropertySort;
        public static System.Windows.Forms.PropertySort GetPropertySort(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.PropertySort)target.Invoke(getPropertySortInternal, target);
            else
                return getPropertySortInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Windows.Forms.PropertySort> getPropertySortCallback = GetPropertySort;
        public static IAsyncResult BeginGetPropertySort(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getPropertySortCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.PropertySort EndGetPropertySort(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetPropertySort(result);
        }
        public static System.Windows.Forms.PropertySort EndGetPropertySort(IAsyncResult result)
        {
            return getPropertySortCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.PropertySort> GetPropertySortAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Windows.Forms.PropertySort>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetPropertySort,
                EndGetPropertySort,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Windows.Forms.PropertySort> setPropertySortInternal = (x, v) => x.PropertySort = v;
        public static void SetPropertySort(this System.Windows.Forms.PropertyGrid target, System.Windows.Forms.PropertySort value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPropertySortInternal, target, value);
            else
                setPropertySortInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Windows.Forms.PropertySort> setPropertySortCallback = SetPropertySort;
        public static IAsyncResult BeginSetPropertySort(this System.Windows.Forms.PropertyGrid target, System.Windows.Forms.PropertySort value, AsyncCallback callback, object state)
        {
            return setPropertySortCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPropertySort(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetPropertySort(result);
        }
        public static void EndSetPropertySort(IAsyncResult result)
        {
            setPropertySortCallback.EndInvoke(result);
        }
        public static Task SetPropertySortAsync(this System.Windows.Forms.PropertyGrid target, System.Windows.Forms.PropertySort value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Windows.Forms.PropertySort>(
                BeginSetPropertySort,
                EndSetPropertySort,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Windows.Forms.PropertyGrid.PropertyTabCollection> getPropertyTabsInternal = (x) => x.PropertyTabs;
        public static System.Windows.Forms.PropertyGrid.PropertyTabCollection GetPropertyTabs(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.PropertyGrid.PropertyTabCollection)target.Invoke(getPropertyTabsInternal, target);
            else
                return getPropertyTabsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Windows.Forms.PropertyGrid.PropertyTabCollection> getPropertyTabsCallback = GetPropertyTabs;
        public static IAsyncResult BeginGetPropertyTabs(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getPropertyTabsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.PropertyGrid.PropertyTabCollection EndGetPropertyTabs(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetPropertyTabs(result);
        }
        public static System.Windows.Forms.PropertyGrid.PropertyTabCollection EndGetPropertyTabs(IAsyncResult result)
        {
            return getPropertyTabsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.PropertyGrid.PropertyTabCollection> GetPropertyTabsAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Windows.Forms.PropertyGrid.PropertyTabCollection>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetPropertyTabs,
                EndGetPropertyTabs,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Object> getSelectedObjectInternal = (x) => x.SelectedObject;
        public static System.Object GetSelectedObject(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Object)target.Invoke(getSelectedObjectInternal, target);
            else
                return getSelectedObjectInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Object> getSelectedObjectCallback = GetSelectedObject;
        public static IAsyncResult BeginGetSelectedObject(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getSelectedObjectCallback.BeginInvoke(target, callback, state);
        }
        public static System.Object EndGetSelectedObject(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetSelectedObject(result);
        }
        public static System.Object EndGetSelectedObject(IAsyncResult result)
        {
            return getSelectedObjectCallback.EndInvoke(result);
        }
        public static Task<System.Object> GetSelectedObjectAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetSelectedObject,
                EndGetSelectedObject,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Object> setSelectedObjectInternal = (x, v) => x.SelectedObject = v;
        public static void SetSelectedObject(this System.Windows.Forms.PropertyGrid target, System.Object value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedObjectInternal, target, value);
            else
                setSelectedObjectInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Object> setSelectedObjectCallback = SetSelectedObject;
        public static IAsyncResult BeginSetSelectedObject(this System.Windows.Forms.PropertyGrid target, System.Object value, AsyncCallback callback, object state)
        {
            return setSelectedObjectCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedObject(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetSelectedObject(result);
        }
        public static void EndSetSelectedObject(IAsyncResult result)
        {
            setSelectedObjectCallback.EndInvoke(result);
        }
        public static Task SetSelectedObjectAsync(this System.Windows.Forms.PropertyGrid target, System.Object value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Object>(
                BeginSetSelectedObject,
                EndSetSelectedObject,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Object[]> getSelectedObjectsInternal = (x) => x.SelectedObjects;
        public static System.Object[] GetSelectedObjects(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Object[])target.Invoke(getSelectedObjectsInternal, target);
            else
                return getSelectedObjectsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Object[]> getSelectedObjectsCallback = GetSelectedObjects;
        public static IAsyncResult BeginGetSelectedObjects(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getSelectedObjectsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Object[] EndGetSelectedObjects(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetSelectedObjects(result);
        }
        public static System.Object[] EndGetSelectedObjects(IAsyncResult result)
        {
            return getSelectedObjectsCallback.EndInvoke(result);
        }
        public static Task<System.Object[]> GetSelectedObjectsAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Object[]>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetSelectedObjects,
                EndGetSelectedObjects,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Object[]> setSelectedObjectsInternal = (x, v) => x.SelectedObjects = v;
        public static void SetSelectedObjects(this System.Windows.Forms.PropertyGrid target, System.Object[] value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedObjectsInternal, target, value);
            else
                setSelectedObjectsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Object[]> setSelectedObjectsCallback = SetSelectedObjects;
        public static IAsyncResult BeginSetSelectedObjects(this System.Windows.Forms.PropertyGrid target, System.Object[] value, AsyncCallback callback, object state)
        {
            return setSelectedObjectsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedObjects(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetSelectedObjects(result);
        }
        public static void EndSetSelectedObjects(IAsyncResult result)
        {
            setSelectedObjectsCallback.EndInvoke(result);
        }
        public static Task SetSelectedObjectsAsync(this System.Windows.Forms.PropertyGrid target, System.Object[] value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Object[]>(
                BeginSetSelectedObjects,
                EndSetSelectedObjects,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Windows.Forms.Design.PropertyTab> getSelectedTabInternal = (x) => x.SelectedTab;
        public static System.Windows.Forms.Design.PropertyTab GetSelectedTab(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Design.PropertyTab)target.Invoke(getSelectedTabInternal, target);
            else
                return getSelectedTabInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Windows.Forms.Design.PropertyTab> getSelectedTabCallback = GetSelectedTab;
        public static IAsyncResult BeginGetSelectedTab(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getSelectedTabCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Design.PropertyTab EndGetSelectedTab(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetSelectedTab(result);
        }
        public static System.Windows.Forms.Design.PropertyTab EndGetSelectedTab(IAsyncResult result)
        {
            return getSelectedTabCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Design.PropertyTab> GetSelectedTabAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Windows.Forms.Design.PropertyTab>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetSelectedTab,
                EndGetSelectedTab,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Windows.Forms.GridItem> getSelectedGridItemInternal = (x) => x.SelectedGridItem;
        public static System.Windows.Forms.GridItem GetSelectedGridItem(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.GridItem)target.Invoke(getSelectedGridItemInternal, target);
            else
                return getSelectedGridItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Windows.Forms.GridItem> getSelectedGridItemCallback = GetSelectedGridItem;
        public static IAsyncResult BeginGetSelectedGridItem(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getSelectedGridItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.GridItem EndGetSelectedGridItem(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetSelectedGridItem(result);
        }
        public static System.Windows.Forms.GridItem EndGetSelectedGridItem(IAsyncResult result)
        {
            return getSelectedGridItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.GridItem> GetSelectedGridItemAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Windows.Forms.GridItem>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetSelectedGridItem,
                EndGetSelectedGridItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Windows.Forms.GridItem> setSelectedGridItemInternal = (x, v) => x.SelectedGridItem = v;
        public static void SetSelectedGridItem(this System.Windows.Forms.PropertyGrid target, System.Windows.Forms.GridItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedGridItemInternal, target, value);
            else
                setSelectedGridItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Windows.Forms.GridItem> setSelectedGridItemCallback = SetSelectedGridItem;
        public static IAsyncResult BeginSetSelectedGridItem(this System.Windows.Forms.PropertyGrid target, System.Windows.Forms.GridItem value, AsyncCallback callback, object state)
        {
            return setSelectedGridItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedGridItem(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetSelectedGridItem(result);
        }
        public static void EndSetSelectedGridItem(IAsyncResult result)
        {
            setSelectedGridItemCallback.EndInvoke(result);
        }
        public static Task SetSelectedGridItemAsync(this System.Windows.Forms.PropertyGrid target, System.Windows.Forms.GridItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Windows.Forms.GridItem>(
                BeginSetSelectedGridItem,
                EndSetSelectedGridItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getLargeButtonsInternal = (x) => x.LargeButtons;
        public static System.Boolean GetLargeButtons(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getLargeButtonsInternal, target);
            else
                return getLargeButtonsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getLargeButtonsCallback = GetLargeButtons;
        public static IAsyncResult BeginGetLargeButtons(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getLargeButtonsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetLargeButtons(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetLargeButtons(result);
        }
        public static System.Boolean EndGetLargeButtons(IAsyncResult result)
        {
            return getLargeButtonsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetLargeButtonsAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetLargeButtons,
                EndGetLargeButtons,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setLargeButtonsInternal = (x, v) => x.LargeButtons = v;
        public static void SetLargeButtons(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLargeButtonsInternal, target, value);
            else
                setLargeButtonsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setLargeButtonsCallback = SetLargeButtons;
        public static IAsyncResult BeginSetLargeButtons(this System.Windows.Forms.PropertyGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setLargeButtonsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLargeButtons(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetLargeButtons(result);
        }
        public static void EndSetLargeButtons(IAsyncResult result)
        {
            setLargeButtonsCallback.EndInvoke(result);
        }
        public static Task SetLargeButtonsAsync(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Boolean>(
                BeginSetLargeButtons,
                EndSetLargeButtons,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getToolbarVisibleInternal = (x) => x.ToolbarVisible;
        public static System.Boolean GetToolbarVisible(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getToolbarVisibleInternal, target);
            else
                return getToolbarVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getToolbarVisibleCallback = GetToolbarVisible;
        public static IAsyncResult BeginGetToolbarVisible(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getToolbarVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetToolbarVisible(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetToolbarVisible(result);
        }
        public static System.Boolean EndGetToolbarVisible(IAsyncResult result)
        {
            return getToolbarVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetToolbarVisibleAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetToolbarVisible,
                EndGetToolbarVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setToolbarVisibleInternal = (x, v) => x.ToolbarVisible = v;
        public static void SetToolbarVisible(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setToolbarVisibleInternal, target, value);
            else
                setToolbarVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setToolbarVisibleCallback = SetToolbarVisible;
        public static IAsyncResult BeginSetToolbarVisible(this System.Windows.Forms.PropertyGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setToolbarVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetToolbarVisible(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetToolbarVisible(result);
        }
        public static void EndSetToolbarVisible(IAsyncResult result)
        {
            setToolbarVisibleCallback.EndInvoke(result);
        }
        public static Task SetToolbarVisibleAsync(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Boolean>(
                BeginSetToolbarVisible,
                EndSetToolbarVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getViewBackColorInternal = (x) => x.ViewBackColor;
        public static System.Drawing.Color GetViewBackColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getViewBackColorInternal, target);
            else
                return getViewBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getViewBackColorCallback = GetViewBackColor;
        public static IAsyncResult BeginGetViewBackColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getViewBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetViewBackColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetViewBackColor(result);
        }
        public static System.Drawing.Color EndGetViewBackColor(IAsyncResult result)
        {
            return getViewBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetViewBackColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetViewBackColor,
                EndGetViewBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setViewBackColorInternal = (x, v) => x.ViewBackColor = v;
        public static void SetViewBackColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setViewBackColorInternal, target, value);
            else
                setViewBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setViewBackColorCallback = SetViewBackColor;
        public static IAsyncResult BeginSetViewBackColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setViewBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetViewBackColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetViewBackColor(result);
        }
        public static void EndSetViewBackColor(IAsyncResult result)
        {
            setViewBackColorCallback.EndInvoke(result);
        }
        public static Task SetViewBackColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetViewBackColor,
                EndSetViewBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getViewForeColorInternal = (x) => x.ViewForeColor;
        public static System.Drawing.Color GetViewForeColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getViewForeColorInternal, target);
            else
                return getViewForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getViewForeColorCallback = GetViewForeColor;
        public static IAsyncResult BeginGetViewForeColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getViewForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetViewForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetViewForeColor(result);
        }
        public static System.Drawing.Color EndGetViewForeColor(IAsyncResult result)
        {
            return getViewForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetViewForeColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetViewForeColor,
                EndGetViewForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setViewForeColorInternal = (x, v) => x.ViewForeColor = v;
        public static void SetViewForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setViewForeColorInternal, target, value);
            else
                setViewForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setViewForeColorCallback = SetViewForeColor;
        public static IAsyncResult BeginSetViewForeColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setViewForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetViewForeColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetViewForeColor(result);
        }
        public static void EndSetViewForeColor(IAsyncResult result)
        {
            setViewForeColorCallback.EndInvoke(result);
        }
        public static Task SetViewForeColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetViewForeColor,
                EndSetViewForeColor,
                target, value, null);
        }

#if NET45
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getViewBorderColorInternal = (x) => x.ViewBorderColor;
        public static System.Drawing.Color GetViewBorderColor(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getViewBorderColorInternal, target);
            else
                return getViewBorderColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Drawing.Color> getViewBorderColorCallback = GetViewBorderColor;
        public static IAsyncResult BeginGetViewBorderColor(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getViewBorderColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetViewBorderColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetViewBorderColor(result);
        }
        public static System.Drawing.Color EndGetViewBorderColor(IAsyncResult result)
        {
            return getViewBorderColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetViewBorderColorAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetViewBorderColor,
                EndGetViewBorderColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setViewBorderColorInternal = (x, v) => x.ViewBorderColor = v;
        public static void SetViewBorderColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setViewBorderColorInternal, target, value);
            else
                setViewBorderColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Drawing.Color> setViewBorderColorCallback = SetViewBorderColor;
        public static IAsyncResult BeginSetViewBorderColor(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setViewBorderColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetViewBorderColor(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetViewBorderColor(result);
        }
        public static void EndSetViewBorderColor(IAsyncResult result)
        {
            setViewBorderColorCallback.EndInvoke(result);
        }
        public static Task SetViewBorderColorAsync(this System.Windows.Forms.PropertyGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Drawing.Color>(
                BeginSetViewBorderColor,
                EndSetViewBorderColor,
                target, value, null);
        }
#endif // NET45

        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getUseCompatibleTextRenderingInternal = (x) => x.UseCompatibleTextRendering;
        public static System.Boolean GetUseCompatibleTextRendering(this System.Windows.Forms.PropertyGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getUseCompatibleTextRenderingInternal, target);
            else
                return getUseCompatibleTextRenderingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PropertyGrid, System.Boolean> getUseCompatibleTextRenderingCallback = GetUseCompatibleTextRendering;
        public static IAsyncResult BeginGetUseCompatibleTextRendering(this System.Windows.Forms.PropertyGrid target, AsyncCallback callback, object state)
        {
            return getUseCompatibleTextRenderingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetUseCompatibleTextRendering(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            return EndGetUseCompatibleTextRendering(result);
        }
        public static System.Boolean EndGetUseCompatibleTextRendering(IAsyncResult result)
        {
            return getUseCompatibleTextRenderingCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetUseCompatibleTextRenderingAsync(this System.Windows.Forms.PropertyGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PropertyGrid>(
                BeginGetUseCompatibleTextRendering,
                EndGetUseCompatibleTextRendering,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setUseCompatibleTextRenderingInternal = (x, v) => x.UseCompatibleTextRendering = v;
        public static void SetUseCompatibleTextRendering(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUseCompatibleTextRenderingInternal, target, value);
            else
                setUseCompatibleTextRenderingInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PropertyGrid, System.Boolean> setUseCompatibleTextRenderingCallback = SetUseCompatibleTextRendering;
        public static IAsyncResult BeginSetUseCompatibleTextRendering(this System.Windows.Forms.PropertyGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setUseCompatibleTextRenderingCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUseCompatibleTextRendering(this System.Windows.Forms.PropertyGrid target, IAsyncResult result)
        {
            EndSetUseCompatibleTextRendering(result);
        }
        public static void EndSetUseCompatibleTextRendering(IAsyncResult result)
        {
            setUseCompatibleTextRenderingCallback.EndInvoke(result);
        }
        public static Task SetUseCompatibleTextRenderingAsync(this System.Windows.Forms.PropertyGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PropertyGrid, System.Boolean>(
                BeginSetUseCompatibleTextRendering,
                EndSetUseCompatibleTextRendering,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterCancelEventArgs> onSplitterMoving1Internal = (c, e) => c.OnSplitterMoving(e);
        public static void OnSplitterMoving(this System.Windows.Forms.SplitContainer __control__, System.Windows.Forms.SplitterCancelEventArgs e)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(onSplitterMoving1Internal, __control__, e);
            else
                onSplitterMoving1Internal.Invoke(__control__, e);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterCancelEventArgs> onSplitterMoving1Callback = OnSplitterMoving;
        public static IAsyncResult BeginOnSplitterMoving1(this System.Windows.Forms.SplitContainer __control__, System.Windows.Forms.SplitterCancelEventArgs e, AsyncCallback callback, object state)
        {
            return onSplitterMoving1Callback.BeginInvoke(__control__, e, callback, state);
        }
        public static void EndOnSplitterMoving1(this System.Windows.Forms.SplitContainer __control__, IAsyncResult result)
        {
            EndOnSplitterMoving1(result);
        }
        public static void EndOnSplitterMoving1(IAsyncResult result)
        {
            onSplitterMoving1Callback.EndInvoke(result);
        }
        public static Task OnSplitterMovingAsync(this System.Windows.Forms.SplitContainer __control__, System.Windows.Forms.SplitterCancelEventArgs e)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterCancelEventArgs>(
                (Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterCancelEventArgs, AsyncCallback, object, IAsyncResult>)BeginOnSplitterMoving1,
                (Action<IAsyncResult>)EndOnSplitterMoving1,
                __control__, e, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterEventArgs> onSplitterMoved1Internal = (c, e) => c.OnSplitterMoved(e);
        public static void OnSplitterMoved(this System.Windows.Forms.SplitContainer __control__, System.Windows.Forms.SplitterEventArgs e)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(onSplitterMoved1Internal, __control__, e);
            else
                onSplitterMoved1Internal.Invoke(__control__, e);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterEventArgs> onSplitterMoved1Callback = OnSplitterMoved;
        public static IAsyncResult BeginOnSplitterMoved1(this System.Windows.Forms.SplitContainer __control__, System.Windows.Forms.SplitterEventArgs e, AsyncCallback callback, object state)
        {
            return onSplitterMoved1Callback.BeginInvoke(__control__, e, callback, state);
        }
        public static void EndOnSplitterMoved1(this System.Windows.Forms.SplitContainer __control__, IAsyncResult result)
        {
            EndOnSplitterMoved1(result);
        }
        public static void EndOnSplitterMoved1(IAsyncResult result)
        {
            onSplitterMoved1Callback.EndInvoke(result);
        }
        public static Task OnSplitterMovedAsync(this System.Windows.Forms.SplitContainer __control__, System.Windows.Forms.SplitterEventArgs e)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterEventArgs>(
                (Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterEventArgs, AsyncCallback, object, IAsyncResult>)BeginOnSplitterMoved1,
                (Action<IAsyncResult>)EndOnSplitterMoved1,
                __control__, e, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.FixedPanel> getFixedPanelInternal = (x) => x.FixedPanel;
        public static System.Windows.Forms.FixedPanel GetFixedPanel(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.FixedPanel)target.Invoke(getFixedPanelInternal, target);
            else
                return getFixedPanelInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.FixedPanel> getFixedPanelCallback = GetFixedPanel;
        public static IAsyncResult BeginGetFixedPanel(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getFixedPanelCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.FixedPanel EndGetFixedPanel(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetFixedPanel(result);
        }
        public static System.Windows.Forms.FixedPanel EndGetFixedPanel(IAsyncResult result)
        {
            return getFixedPanelCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.FixedPanel> GetFixedPanelAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Windows.Forms.FixedPanel>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetFixedPanel,
                EndGetFixedPanel,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Windows.Forms.FixedPanel> setFixedPanelInternal = (x, v) => x.FixedPanel = v;
        public static void SetFixedPanel(this System.Windows.Forms.SplitContainer target, System.Windows.Forms.FixedPanel value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFixedPanelInternal, target, value);
            else
                setFixedPanelInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Windows.Forms.FixedPanel> setFixedPanelCallback = SetFixedPanel;
        public static IAsyncResult BeginSetFixedPanel(this System.Windows.Forms.SplitContainer target, System.Windows.Forms.FixedPanel value, AsyncCallback callback, object state)
        {
            return setFixedPanelCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFixedPanel(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetFixedPanel(result);
        }
        public static void EndSetFixedPanel(IAsyncResult result)
        {
            setFixedPanelCallback.EndInvoke(result);
        }
        public static Task SetFixedPanelAsync(this System.Windows.Forms.SplitContainer target, System.Windows.Forms.FixedPanel value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Windows.Forms.FixedPanel>(
                BeginSetFixedPanel,
                EndSetFixedPanel,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Boolean> getIsSplitterFixedInternal = (x) => x.IsSplitterFixed;
        public static System.Boolean GetIsSplitterFixed(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsSplitterFixedInternal, target);
            else
                return getIsSplitterFixedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Boolean> getIsSplitterFixedCallback = GetIsSplitterFixed;
        public static IAsyncResult BeginGetIsSplitterFixed(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getIsSplitterFixedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsSplitterFixed(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetIsSplitterFixed(result);
        }
        public static System.Boolean EndGetIsSplitterFixed(IAsyncResult result)
        {
            return getIsSplitterFixedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsSplitterFixedAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetIsSplitterFixed,
                EndGetIsSplitterFixed,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Boolean> setIsSplitterFixedInternal = (x, v) => x.IsSplitterFixed = v;
        public static void SetIsSplitterFixed(this System.Windows.Forms.SplitContainer target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setIsSplitterFixedInternal, target, value);
            else
                setIsSplitterFixedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Boolean> setIsSplitterFixedCallback = SetIsSplitterFixed;
        public static IAsyncResult BeginSetIsSplitterFixed(this System.Windows.Forms.SplitContainer target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setIsSplitterFixedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetIsSplitterFixed(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetIsSplitterFixed(result);
        }
        public static void EndSetIsSplitterFixed(IAsyncResult result)
        {
            setIsSplitterFixedCallback.EndInvoke(result);
        }
        public static Task SetIsSplitterFixedAsync(this System.Windows.Forms.SplitContainer target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Boolean>(
                BeginSetIsSplitterFixed,
                EndSetIsSplitterFixed,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.Orientation> getOrientationInternal = (x) => x.Orientation;
        public static System.Windows.Forms.Orientation GetOrientation(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Orientation)target.Invoke(getOrientationInternal, target);
            else
                return getOrientationInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.Orientation> getOrientationCallback = GetOrientation;
        public static IAsyncResult BeginGetOrientation(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getOrientationCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Orientation EndGetOrientation(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetOrientation(result);
        }
        public static System.Windows.Forms.Orientation EndGetOrientation(IAsyncResult result)
        {
            return getOrientationCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Orientation> GetOrientationAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Windows.Forms.Orientation>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetOrientation,
                EndGetOrientation,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Windows.Forms.Orientation> setOrientationInternal = (x, v) => x.Orientation = v;
        public static void SetOrientation(this System.Windows.Forms.SplitContainer target, System.Windows.Forms.Orientation value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setOrientationInternal, target, value);
            else
                setOrientationInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Windows.Forms.Orientation> setOrientationCallback = SetOrientation;
        public static IAsyncResult BeginSetOrientation(this System.Windows.Forms.SplitContainer target, System.Windows.Forms.Orientation value, AsyncCallback callback, object state)
        {
            return setOrientationCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetOrientation(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetOrientation(result);
        }
        public static void EndSetOrientation(IAsyncResult result)
        {
            setOrientationCallback.EndInvoke(result);
        }
        public static Task SetOrientationAsync(this System.Windows.Forms.SplitContainer target, System.Windows.Forms.Orientation value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Windows.Forms.Orientation>(
                BeginSetOrientation,
                EndSetOrientation,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterPanel> getPanel1Internal = (x) => x.Panel1;
        public static System.Windows.Forms.SplitterPanel GetPanel1(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.SplitterPanel)target.Invoke(getPanel1Internal, target);
            else
                return getPanel1Internal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterPanel> getPanel1Callback = GetPanel1;
        public static IAsyncResult BeginGetPanel1(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getPanel1Callback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.SplitterPanel EndGetPanel1(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetPanel1(result);
        }
        public static System.Windows.Forms.SplitterPanel EndGetPanel1(IAsyncResult result)
        {
            return getPanel1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.SplitterPanel> GetPanel1Async(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Windows.Forms.SplitterPanel>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetPanel1,
                EndGetPanel1,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Boolean> getPanel1CollapsedInternal = (x) => x.Panel1Collapsed;
        public static System.Boolean GetPanel1Collapsed(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getPanel1CollapsedInternal, target);
            else
                return getPanel1CollapsedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Boolean> getPanel1CollapsedCallback = GetPanel1Collapsed;
        public static IAsyncResult BeginGetPanel1Collapsed(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getPanel1CollapsedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetPanel1Collapsed(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetPanel1Collapsed(result);
        }
        public static System.Boolean EndGetPanel1Collapsed(IAsyncResult result)
        {
            return getPanel1CollapsedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetPanel1CollapsedAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetPanel1Collapsed,
                EndGetPanel1Collapsed,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Boolean> setPanel1CollapsedInternal = (x, v) => x.Panel1Collapsed = v;
        public static void SetPanel1Collapsed(this System.Windows.Forms.SplitContainer target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPanel1CollapsedInternal, target, value);
            else
                setPanel1CollapsedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Boolean> setPanel1CollapsedCallback = SetPanel1Collapsed;
        public static IAsyncResult BeginSetPanel1Collapsed(this System.Windows.Forms.SplitContainer target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setPanel1CollapsedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPanel1Collapsed(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetPanel1Collapsed(result);
        }
        public static void EndSetPanel1Collapsed(IAsyncResult result)
        {
            setPanel1CollapsedCallback.EndInvoke(result);
        }
        public static Task SetPanel1CollapsedAsync(this System.Windows.Forms.SplitContainer target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Boolean>(
                BeginSetPanel1Collapsed,
                EndSetPanel1Collapsed,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Boolean> getPanel2CollapsedInternal = (x) => x.Panel2Collapsed;
        public static System.Boolean GetPanel2Collapsed(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getPanel2CollapsedInternal, target);
            else
                return getPanel2CollapsedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Boolean> getPanel2CollapsedCallback = GetPanel2Collapsed;
        public static IAsyncResult BeginGetPanel2Collapsed(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getPanel2CollapsedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetPanel2Collapsed(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetPanel2Collapsed(result);
        }
        public static System.Boolean EndGetPanel2Collapsed(IAsyncResult result)
        {
            return getPanel2CollapsedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetPanel2CollapsedAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetPanel2Collapsed,
                EndGetPanel2Collapsed,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Boolean> setPanel2CollapsedInternal = (x, v) => x.Panel2Collapsed = v;
        public static void SetPanel2Collapsed(this System.Windows.Forms.SplitContainer target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPanel2CollapsedInternal, target, value);
            else
                setPanel2CollapsedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Boolean> setPanel2CollapsedCallback = SetPanel2Collapsed;
        public static IAsyncResult BeginSetPanel2Collapsed(this System.Windows.Forms.SplitContainer target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setPanel2CollapsedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPanel2Collapsed(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetPanel2Collapsed(result);
        }
        public static void EndSetPanel2Collapsed(IAsyncResult result)
        {
            setPanel2CollapsedCallback.EndInvoke(result);
        }
        public static Task SetPanel2CollapsedAsync(this System.Windows.Forms.SplitContainer target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Boolean>(
                BeginSetPanel2Collapsed,
                EndSetPanel2Collapsed,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getPanel1MinSizeInternal = (x) => x.Panel1MinSize;
        public static System.Int32 GetPanel1MinSize(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getPanel1MinSizeInternal, target);
            else
                return getPanel1MinSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getPanel1MinSizeCallback = GetPanel1MinSize;
        public static IAsyncResult BeginGetPanel1MinSize(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getPanel1MinSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetPanel1MinSize(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetPanel1MinSize(result);
        }
        public static System.Int32 EndGetPanel1MinSize(IAsyncResult result)
        {
            return getPanel1MinSizeCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetPanel1MinSizeAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetPanel1MinSize,
                EndGetPanel1MinSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setPanel1MinSizeInternal = (x, v) => x.Panel1MinSize = v;
        public static void SetPanel1MinSize(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPanel1MinSizeInternal, target, value);
            else
                setPanel1MinSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setPanel1MinSizeCallback = SetPanel1MinSize;
        public static IAsyncResult BeginSetPanel1MinSize(this System.Windows.Forms.SplitContainer target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setPanel1MinSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPanel1MinSize(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetPanel1MinSize(result);
        }
        public static void EndSetPanel1MinSize(IAsyncResult result)
        {
            setPanel1MinSizeCallback.EndInvoke(result);
        }
        public static Task SetPanel1MinSizeAsync(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Int32>(
                BeginSetPanel1MinSize,
                EndSetPanel1MinSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterPanel> getPanel2Internal = (x) => x.Panel2;
        public static System.Windows.Forms.SplitterPanel GetPanel2(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.SplitterPanel)target.Invoke(getPanel2Internal, target);
            else
                return getPanel2Internal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Windows.Forms.SplitterPanel> getPanel2Callback = GetPanel2;
        public static IAsyncResult BeginGetPanel2(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getPanel2Callback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.SplitterPanel EndGetPanel2(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetPanel2(result);
        }
        public static System.Windows.Forms.SplitterPanel EndGetPanel2(IAsyncResult result)
        {
            return getPanel2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.SplitterPanel> GetPanel2Async(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Windows.Forms.SplitterPanel>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetPanel2,
                EndGetPanel2,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getPanel2MinSizeInternal = (x) => x.Panel2MinSize;
        public static System.Int32 GetPanel2MinSize(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getPanel2MinSizeInternal, target);
            else
                return getPanel2MinSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getPanel2MinSizeCallback = GetPanel2MinSize;
        public static IAsyncResult BeginGetPanel2MinSize(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getPanel2MinSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetPanel2MinSize(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetPanel2MinSize(result);
        }
        public static System.Int32 EndGetPanel2MinSize(IAsyncResult result)
        {
            return getPanel2MinSizeCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetPanel2MinSizeAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetPanel2MinSize,
                EndGetPanel2MinSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setPanel2MinSizeInternal = (x, v) => x.Panel2MinSize = v;
        public static void SetPanel2MinSize(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPanel2MinSizeInternal, target, value);
            else
                setPanel2MinSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setPanel2MinSizeCallback = SetPanel2MinSize;
        public static IAsyncResult BeginSetPanel2MinSize(this System.Windows.Forms.SplitContainer target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setPanel2MinSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPanel2MinSize(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetPanel2MinSize(result);
        }
        public static void EndSetPanel2MinSize(IAsyncResult result)
        {
            setPanel2MinSizeCallback.EndInvoke(result);
        }
        public static Task SetPanel2MinSizeAsync(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Int32>(
                BeginSetPanel2MinSize,
                EndSetPanel2MinSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getSplitterDistanceInternal = (x) => x.SplitterDistance;
        public static System.Int32 GetSplitterDistance(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSplitterDistanceInternal, target);
            else
                return getSplitterDistanceInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getSplitterDistanceCallback = GetSplitterDistance;
        public static IAsyncResult BeginGetSplitterDistance(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getSplitterDistanceCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSplitterDistance(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetSplitterDistance(result);
        }
        public static System.Int32 EndGetSplitterDistance(IAsyncResult result)
        {
            return getSplitterDistanceCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSplitterDistanceAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetSplitterDistance,
                EndGetSplitterDistance,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setSplitterDistanceInternal = (x, v) => x.SplitterDistance = v;
        public static void SetSplitterDistance(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSplitterDistanceInternal, target, value);
            else
                setSplitterDistanceInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setSplitterDistanceCallback = SetSplitterDistance;
        public static IAsyncResult BeginSetSplitterDistance(this System.Windows.Forms.SplitContainer target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSplitterDistanceCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSplitterDistance(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetSplitterDistance(result);
        }
        public static void EndSetSplitterDistance(IAsyncResult result)
        {
            setSplitterDistanceCallback.EndInvoke(result);
        }
        public static Task SetSplitterDistanceAsync(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Int32>(
                BeginSetSplitterDistance,
                EndSetSplitterDistance,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getSplitterIncrementInternal = (x) => x.SplitterIncrement;
        public static System.Int32 GetSplitterIncrement(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSplitterIncrementInternal, target);
            else
                return getSplitterIncrementInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getSplitterIncrementCallback = GetSplitterIncrement;
        public static IAsyncResult BeginGetSplitterIncrement(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getSplitterIncrementCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSplitterIncrement(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetSplitterIncrement(result);
        }
        public static System.Int32 EndGetSplitterIncrement(IAsyncResult result)
        {
            return getSplitterIncrementCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSplitterIncrementAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetSplitterIncrement,
                EndGetSplitterIncrement,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setSplitterIncrementInternal = (x, v) => x.SplitterIncrement = v;
        public static void SetSplitterIncrement(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSplitterIncrementInternal, target, value);
            else
                setSplitterIncrementInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setSplitterIncrementCallback = SetSplitterIncrement;
        public static IAsyncResult BeginSetSplitterIncrement(this System.Windows.Forms.SplitContainer target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSplitterIncrementCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSplitterIncrement(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetSplitterIncrement(result);
        }
        public static void EndSetSplitterIncrement(IAsyncResult result)
        {
            setSplitterIncrementCallback.EndInvoke(result);
        }
        public static Task SetSplitterIncrementAsync(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Int32>(
                BeginSetSplitterIncrement,
                EndSetSplitterIncrement,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Drawing.Rectangle> getSplitterRectangleInternal = (x) => x.SplitterRectangle;
        public static System.Drawing.Rectangle GetSplitterRectangle(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Rectangle)target.Invoke(getSplitterRectangleInternal, target);
            else
                return getSplitterRectangleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Drawing.Rectangle> getSplitterRectangleCallback = GetSplitterRectangle;
        public static IAsyncResult BeginGetSplitterRectangle(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getSplitterRectangleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Rectangle EndGetSplitterRectangle(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetSplitterRectangle(result);
        }
        public static System.Drawing.Rectangle EndGetSplitterRectangle(IAsyncResult result)
        {
            return getSplitterRectangleCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetSplitterRectangleAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetSplitterRectangle,
                EndGetSplitterRectangle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getSplitterWidthInternal = (x) => x.SplitterWidth;
        public static System.Int32 GetSplitterWidth(this System.Windows.Forms.SplitContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSplitterWidthInternal, target);
            else
                return getSplitterWidthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.SplitContainer, System.Int32> getSplitterWidthCallback = GetSplitterWidth;
        public static IAsyncResult BeginGetSplitterWidth(this System.Windows.Forms.SplitContainer target, AsyncCallback callback, object state)
        {
            return getSplitterWidthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSplitterWidth(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            return EndGetSplitterWidth(result);
        }
        public static System.Int32 EndGetSplitterWidth(IAsyncResult result)
        {
            return getSplitterWidthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSplitterWidthAsync(this System.Windows.Forms.SplitContainer target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.SplitContainer>(
                BeginGetSplitterWidth,
                EndGetSplitterWidth,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setSplitterWidthInternal = (x, v) => x.SplitterWidth = v;
        public static void SetSplitterWidth(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSplitterWidthInternal, target, value);
            else
                setSplitterWidthInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.SplitContainer, System.Int32> setSplitterWidthCallback = SetSplitterWidth;
        public static IAsyncResult BeginSetSplitterWidth(this System.Windows.Forms.SplitContainer target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSplitterWidthCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSplitterWidth(this System.Windows.Forms.SplitContainer target, IAsyncResult result)
        {
            EndSetSplitterWidth(result);
        }
        public static void EndSetSplitterWidth(IAsyncResult result)
        {
            setSplitterWidthCallback.EndInvoke(result);
        }
        public static Task SetSplitterWidthAsync(this System.Windows.Forms.SplitContainer target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.SplitContainer, System.Int32>(
                BeginSetSplitterWidth,
                EndSetSplitterWidth,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripPanel> getBottomToolStripPanelInternal = (x) => x.BottomToolStripPanel;
        public static System.Windows.Forms.ToolStripPanel GetBottomToolStripPanel(this System.Windows.Forms.ToolStripContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripPanel)target.Invoke(getBottomToolStripPanelInternal, target);
            else
                return getBottomToolStripPanelInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripPanel> getBottomToolStripPanelCallback = GetBottomToolStripPanel;
        public static IAsyncResult BeginGetBottomToolStripPanel(this System.Windows.Forms.ToolStripContainer target, AsyncCallback callback, object state)
        {
            return getBottomToolStripPanelCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripPanel EndGetBottomToolStripPanel(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            return EndGetBottomToolStripPanel(result);
        }
        public static System.Windows.Forms.ToolStripPanel EndGetBottomToolStripPanel(IAsyncResult result)
        {
            return getBottomToolStripPanelCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripPanel> GetBottomToolStripPanelAsync(this System.Windows.Forms.ToolStripContainer target)
        {
            return Task<System.Windows.Forms.ToolStripPanel>.Factory.FromAsync<System.Windows.Forms.ToolStripContainer>(
                BeginGetBottomToolStripPanel,
                EndGetBottomToolStripPanel,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Boolean> getBottomToolStripPanelVisibleInternal = (x) => x.BottomToolStripPanelVisible;
        public static System.Boolean GetBottomToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getBottomToolStripPanelVisibleInternal, target);
            else
                return getBottomToolStripPanelVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Boolean> getBottomToolStripPanelVisibleCallback = GetBottomToolStripPanelVisible;
        public static IAsyncResult BeginGetBottomToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, AsyncCallback callback, object state)
        {
            return getBottomToolStripPanelVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetBottomToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            return EndGetBottomToolStripPanelVisible(result);
        }
        public static System.Boolean EndGetBottomToolStripPanelVisible(IAsyncResult result)
        {
            return getBottomToolStripPanelVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetBottomToolStripPanelVisibleAsync(this System.Windows.Forms.ToolStripContainer target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripContainer>(
                BeginGetBottomToolStripPanelVisible,
                EndGetBottomToolStripPanelVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripContainer, System.Boolean> setBottomToolStripPanelVisibleInternal = (x, v) => x.BottomToolStripPanelVisible = v;
        public static void SetBottomToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBottomToolStripPanelVisibleInternal, target, value);
            else
                setBottomToolStripPanelVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripContainer, System.Boolean> setBottomToolStripPanelVisibleCallback = SetBottomToolStripPanelVisible;
        public static IAsyncResult BeginSetBottomToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setBottomToolStripPanelVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBottomToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            EndSetBottomToolStripPanelVisible(result);
        }
        public static void EndSetBottomToolStripPanelVisible(IAsyncResult result)
        {
            setBottomToolStripPanelVisibleCallback.EndInvoke(result);
        }
        public static Task SetBottomToolStripPanelVisibleAsync(this System.Windows.Forms.ToolStripContainer target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripContainer, System.Boolean>(
                BeginSetBottomToolStripPanelVisible,
                EndSetBottomToolStripPanelVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripContentPanel> getContentPanelInternal = (x) => x.ContentPanel;
        public static System.Windows.Forms.ToolStripContentPanel GetContentPanel(this System.Windows.Forms.ToolStripContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripContentPanel)target.Invoke(getContentPanelInternal, target);
            else
                return getContentPanelInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripContentPanel> getContentPanelCallback = GetContentPanel;
        public static IAsyncResult BeginGetContentPanel(this System.Windows.Forms.ToolStripContainer target, AsyncCallback callback, object state)
        {
            return getContentPanelCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripContentPanel EndGetContentPanel(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            return EndGetContentPanel(result);
        }
        public static System.Windows.Forms.ToolStripContentPanel EndGetContentPanel(IAsyncResult result)
        {
            return getContentPanelCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripContentPanel> GetContentPanelAsync(this System.Windows.Forms.ToolStripContainer target)
        {
            return Task<System.Windows.Forms.ToolStripContentPanel>.Factory.FromAsync<System.Windows.Forms.ToolStripContainer>(
                BeginGetContentPanel,
                EndGetContentPanel,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripPanel> getLeftToolStripPanelInternal = (x) => x.LeftToolStripPanel;
        public static System.Windows.Forms.ToolStripPanel GetLeftToolStripPanel(this System.Windows.Forms.ToolStripContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripPanel)target.Invoke(getLeftToolStripPanelInternal, target);
            else
                return getLeftToolStripPanelInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripPanel> getLeftToolStripPanelCallback = GetLeftToolStripPanel;
        public static IAsyncResult BeginGetLeftToolStripPanel(this System.Windows.Forms.ToolStripContainer target, AsyncCallback callback, object state)
        {
            return getLeftToolStripPanelCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripPanel EndGetLeftToolStripPanel(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            return EndGetLeftToolStripPanel(result);
        }
        public static System.Windows.Forms.ToolStripPanel EndGetLeftToolStripPanel(IAsyncResult result)
        {
            return getLeftToolStripPanelCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripPanel> GetLeftToolStripPanelAsync(this System.Windows.Forms.ToolStripContainer target)
        {
            return Task<System.Windows.Forms.ToolStripPanel>.Factory.FromAsync<System.Windows.Forms.ToolStripContainer>(
                BeginGetLeftToolStripPanel,
                EndGetLeftToolStripPanel,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Boolean> getLeftToolStripPanelVisibleInternal = (x) => x.LeftToolStripPanelVisible;
        public static System.Boolean GetLeftToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getLeftToolStripPanelVisibleInternal, target);
            else
                return getLeftToolStripPanelVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Boolean> getLeftToolStripPanelVisibleCallback = GetLeftToolStripPanelVisible;
        public static IAsyncResult BeginGetLeftToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, AsyncCallback callback, object state)
        {
            return getLeftToolStripPanelVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetLeftToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            return EndGetLeftToolStripPanelVisible(result);
        }
        public static System.Boolean EndGetLeftToolStripPanelVisible(IAsyncResult result)
        {
            return getLeftToolStripPanelVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetLeftToolStripPanelVisibleAsync(this System.Windows.Forms.ToolStripContainer target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripContainer>(
                BeginGetLeftToolStripPanelVisible,
                EndGetLeftToolStripPanelVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripContainer, System.Boolean> setLeftToolStripPanelVisibleInternal = (x, v) => x.LeftToolStripPanelVisible = v;
        public static void SetLeftToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLeftToolStripPanelVisibleInternal, target, value);
            else
                setLeftToolStripPanelVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripContainer, System.Boolean> setLeftToolStripPanelVisibleCallback = SetLeftToolStripPanelVisible;
        public static IAsyncResult BeginSetLeftToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setLeftToolStripPanelVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLeftToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            EndSetLeftToolStripPanelVisible(result);
        }
        public static void EndSetLeftToolStripPanelVisible(IAsyncResult result)
        {
            setLeftToolStripPanelVisibleCallback.EndInvoke(result);
        }
        public static Task SetLeftToolStripPanelVisibleAsync(this System.Windows.Forms.ToolStripContainer target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripContainer, System.Boolean>(
                BeginSetLeftToolStripPanelVisible,
                EndSetLeftToolStripPanelVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripPanel> getRightToolStripPanelInternal = (x) => x.RightToolStripPanel;
        public static System.Windows.Forms.ToolStripPanel GetRightToolStripPanel(this System.Windows.Forms.ToolStripContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripPanel)target.Invoke(getRightToolStripPanelInternal, target);
            else
                return getRightToolStripPanelInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripPanel> getRightToolStripPanelCallback = GetRightToolStripPanel;
        public static IAsyncResult BeginGetRightToolStripPanel(this System.Windows.Forms.ToolStripContainer target, AsyncCallback callback, object state)
        {
            return getRightToolStripPanelCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripPanel EndGetRightToolStripPanel(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            return EndGetRightToolStripPanel(result);
        }
        public static System.Windows.Forms.ToolStripPanel EndGetRightToolStripPanel(IAsyncResult result)
        {
            return getRightToolStripPanelCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripPanel> GetRightToolStripPanelAsync(this System.Windows.Forms.ToolStripContainer target)
        {
            return Task<System.Windows.Forms.ToolStripPanel>.Factory.FromAsync<System.Windows.Forms.ToolStripContainer>(
                BeginGetRightToolStripPanel,
                EndGetRightToolStripPanel,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Boolean> getRightToolStripPanelVisibleInternal = (x) => x.RightToolStripPanelVisible;
        public static System.Boolean GetRightToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getRightToolStripPanelVisibleInternal, target);
            else
                return getRightToolStripPanelVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Boolean> getRightToolStripPanelVisibleCallback = GetRightToolStripPanelVisible;
        public static IAsyncResult BeginGetRightToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, AsyncCallback callback, object state)
        {
            return getRightToolStripPanelVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetRightToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            return EndGetRightToolStripPanelVisible(result);
        }
        public static System.Boolean EndGetRightToolStripPanelVisible(IAsyncResult result)
        {
            return getRightToolStripPanelVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetRightToolStripPanelVisibleAsync(this System.Windows.Forms.ToolStripContainer target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripContainer>(
                BeginGetRightToolStripPanelVisible,
                EndGetRightToolStripPanelVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripContainer, System.Boolean> setRightToolStripPanelVisibleInternal = (x, v) => x.RightToolStripPanelVisible = v;
        public static void SetRightToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRightToolStripPanelVisibleInternal, target, value);
            else
                setRightToolStripPanelVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripContainer, System.Boolean> setRightToolStripPanelVisibleCallback = SetRightToolStripPanelVisible;
        public static IAsyncResult BeginSetRightToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setRightToolStripPanelVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRightToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            EndSetRightToolStripPanelVisible(result);
        }
        public static void EndSetRightToolStripPanelVisible(IAsyncResult result)
        {
            setRightToolStripPanelVisibleCallback.EndInvoke(result);
        }
        public static Task SetRightToolStripPanelVisibleAsync(this System.Windows.Forms.ToolStripContainer target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripContainer, System.Boolean>(
                BeginSetRightToolStripPanelVisible,
                EndSetRightToolStripPanelVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripPanel> getTopToolStripPanelInternal = (x) => x.TopToolStripPanel;
        public static System.Windows.Forms.ToolStripPanel GetTopToolStripPanel(this System.Windows.Forms.ToolStripContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripPanel)target.Invoke(getTopToolStripPanelInternal, target);
            else
                return getTopToolStripPanelInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Windows.Forms.ToolStripPanel> getTopToolStripPanelCallback = GetTopToolStripPanel;
        public static IAsyncResult BeginGetTopToolStripPanel(this System.Windows.Forms.ToolStripContainer target, AsyncCallback callback, object state)
        {
            return getTopToolStripPanelCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripPanel EndGetTopToolStripPanel(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            return EndGetTopToolStripPanel(result);
        }
        public static System.Windows.Forms.ToolStripPanel EndGetTopToolStripPanel(IAsyncResult result)
        {
            return getTopToolStripPanelCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripPanel> GetTopToolStripPanelAsync(this System.Windows.Forms.ToolStripContainer target)
        {
            return Task<System.Windows.Forms.ToolStripPanel>.Factory.FromAsync<System.Windows.Forms.ToolStripContainer>(
                BeginGetTopToolStripPanel,
                EndGetTopToolStripPanel,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Boolean> getTopToolStripPanelVisibleInternal = (x) => x.TopToolStripPanelVisible;
        public static System.Boolean GetTopToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getTopToolStripPanelVisibleInternal, target);
            else
                return getTopToolStripPanelVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripContainer, System.Boolean> getTopToolStripPanelVisibleCallback = GetTopToolStripPanelVisible;
        public static IAsyncResult BeginGetTopToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, AsyncCallback callback, object state)
        {
            return getTopToolStripPanelVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetTopToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            return EndGetTopToolStripPanelVisible(result);
        }
        public static System.Boolean EndGetTopToolStripPanelVisible(IAsyncResult result)
        {
            return getTopToolStripPanelVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetTopToolStripPanelVisibleAsync(this System.Windows.Forms.ToolStripContainer target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripContainer>(
                BeginGetTopToolStripPanelVisible,
                EndGetTopToolStripPanelVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripContainer, System.Boolean> setTopToolStripPanelVisibleInternal = (x, v) => x.TopToolStripPanelVisible = v;
        public static void SetTopToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTopToolStripPanelVisibleInternal, target, value);
            else
                setTopToolStripPanelVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripContainer, System.Boolean> setTopToolStripPanelVisibleCallback = SetTopToolStripPanelVisible;
        public static IAsyncResult BeginSetTopToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setTopToolStripPanelVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTopToolStripPanelVisible(this System.Windows.Forms.ToolStripContainer target, IAsyncResult result)
        {
            EndSetTopToolStripPanelVisible(result);
        }
        public static void EndSetTopToolStripPanelVisible(IAsyncResult result)
        {
            setTopToolStripPanelVisibleCallback.EndInvoke(result);
        }
        public static Task SetTopToolStripPanelVisibleAsync(this System.Windows.Forms.ToolStripContainer target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripContainer, System.Boolean>(
                BeginSetTopToolStripPanelVisible,
                EndSetTopToolStripPanelVisible,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Drawing.Point> join1Internal = (c, toolStripToDrag, location) => c.Join(toolStripToDrag, location);
        public static void Join(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, System.Drawing.Point location)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(join1Internal, __control__, toolStripToDrag, location);
            else
                join1Internal.Invoke(__control__, toolStripToDrag, location);
        }
        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Drawing.Point> join1Callback = Join;
        public static IAsyncResult BeginJoin1(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, System.Drawing.Point location, AsyncCallback callback, object state)
        {
            return join1Callback.BeginInvoke(__control__, toolStripToDrag, location, callback, state);
        }
        public static void EndJoin1(this System.Windows.Forms.ToolStripPanel __control__, IAsyncResult result)
        {
            EndJoin1(result);
        }
        public static void EndJoin1(IAsyncResult result)
        {
            join1Callback.EndInvoke(result);
        }
        public static Task JoinAsync(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, System.Drawing.Point location)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Drawing.Point>(
                (Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginJoin1,
                (Action<IAsyncResult>)EndJoin1,
                __control__, toolStripToDrag, location, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip> join2Internal = (c, toolStripToDrag) => c.Join(toolStripToDrag);
        public static void Join(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(join2Internal, __control__, toolStripToDrag);
            else
                join2Internal.Invoke(__control__, toolStripToDrag);
        }
        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip> join2Callback = Join;
        public static IAsyncResult BeginJoin2(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, AsyncCallback callback, object state)
        {
            return join2Callback.BeginInvoke(__control__, toolStripToDrag, callback, state);
        }
        public static void EndJoin2(this System.Windows.Forms.ToolStripPanel __control__, IAsyncResult result)
        {
            EndJoin2(result);
        }
        public static void EndJoin2(IAsyncResult result)
        {
            join2Callback.EndInvoke(result);
        }
        public static Task JoinAsync(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip>(
                (Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, AsyncCallback, object, IAsyncResult>)BeginJoin2,
                (Action<IAsyncResult>)EndJoin2,
                __control__, toolStripToDrag, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Int32> join3Internal = (c, toolStripToDrag, row) => c.Join(toolStripToDrag, row);
        public static void Join(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, System.Int32 row)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(join3Internal, __control__, toolStripToDrag, row);
            else
                join3Internal.Invoke(__control__, toolStripToDrag, row);
        }
        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Int32> join3Callback = Join;
        public static IAsyncResult BeginJoin3(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, System.Int32 row, AsyncCallback callback, object state)
        {
            return join3Callback.BeginInvoke(__control__, toolStripToDrag, row, callback, state);
        }
        public static void EndJoin3(this System.Windows.Forms.ToolStripPanel __control__, IAsyncResult result)
        {
            EndJoin3(result);
        }
        public static void EndJoin3(IAsyncResult result)
        {
            join3Callback.EndInvoke(result);
        }
        public static Task JoinAsync(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, System.Int32 row)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Int32>(
                (Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Int32, AsyncCallback, object, IAsyncResult>)BeginJoin3,
                (Action<IAsyncResult>)EndJoin3,
                __control__, toolStripToDrag, row, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Int32, System.Int32> join4Internal = (c, toolStripToDrag, x, y) => c.Join(toolStripToDrag, x, y);
        public static void Join(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(join4Internal, __control__, toolStripToDrag, x, y);
            else
                join4Internal.Invoke(__control__, toolStripToDrag, x, y);
        }
        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStrip, System.Int32, System.Int32> join4Callback = Join;
        public static IAsyncResult BeginJoin4(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return join4Callback.BeginInvoke(__control__, toolStripToDrag, x, y, callback, state);
        }
        public static void EndJoin4(this System.Windows.Forms.ToolStripPanel __control__, IAsyncResult result)
        {
            EndJoin4(result);
        }
        public static void EndJoin4(IAsyncResult result)
        {
            join4Callback.EndInvoke(result);
        }
        public static Task JoinAsync(this System.Windows.Forms.ToolStripPanel __control__, System.Windows.Forms.ToolStrip toolStripToDrag, System.Int32 x, System.Int32 y)
        {
            return Task.Factory.FromAsync(
                BeginJoin4(__control__, toolStripToDrag, x, y, null, null),
                (Action<IAsyncResult>)EndJoin4);
        }

        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Drawing.Point, System.Windows.Forms.ToolStripPanelRow> pointToRow1Internal = (c, clientLocation) => c.PointToRow(clientLocation);
        public static System.Windows.Forms.ToolStripPanelRow PointToRow(this System.Windows.Forms.ToolStripPanel __control__, System.Drawing.Point clientLocation)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ToolStripPanelRow)__control__.Invoke(pointToRow1Internal, __control__, clientLocation);
            else
                return pointToRow1Internal.Invoke(__control__, clientLocation);
        }
        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Drawing.Point, System.Windows.Forms.ToolStripPanelRow> pointToRow1Callback = PointToRow;
        public static IAsyncResult BeginPointToRow1(this System.Windows.Forms.ToolStripPanel __control__, System.Drawing.Point clientLocation, AsyncCallback callback, object state)
        {
            return pointToRow1Callback.BeginInvoke(__control__, clientLocation, callback, state);
        }
        public static System.Windows.Forms.ToolStripPanelRow EndPointToRow1(this System.Windows.Forms.ToolStripPanel __control__, IAsyncResult result)
        {
            return EndPointToRow1(result);
        }
        public static System.Windows.Forms.ToolStripPanelRow EndPointToRow1(IAsyncResult result)
        {
            return pointToRow1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripPanelRow> PointToRowAsync(this System.Windows.Forms.ToolStripPanel __control__, System.Drawing.Point clientLocation)
        {
            return Task<System.Windows.Forms.ToolStripPanelRow>.Factory.FromAsync<System.Windows.Forms.ToolStripPanel, System.Drawing.Point>(
                (Func<System.Windows.Forms.ToolStripPanel, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginPointToRow1,
                (Func<IAsyncResult, System.Windows.Forms.ToolStripPanelRow>)EndPointToRow1,
                __control__, clientLocation, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.Padding> getRowMarginInternal = (x) => x.RowMargin;
        public static System.Windows.Forms.Padding GetRowMargin(this System.Windows.Forms.ToolStripPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Padding)target.Invoke(getRowMarginInternal, target);
            else
                return getRowMarginInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.Padding> getRowMarginCallback = GetRowMargin;
        public static IAsyncResult BeginGetRowMargin(this System.Windows.Forms.ToolStripPanel target, AsyncCallback callback, object state)
        {
            return getRowMarginCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Padding EndGetRowMargin(this System.Windows.Forms.ToolStripPanel target, IAsyncResult result)
        {
            return EndGetRowMargin(result);
        }
        public static System.Windows.Forms.Padding EndGetRowMargin(IAsyncResult result)
        {
            return getRowMarginCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Padding> GetRowMarginAsync(this System.Windows.Forms.ToolStripPanel target)
        {
            return Task<System.Windows.Forms.Padding>.Factory.FromAsync<System.Windows.Forms.ToolStripPanel>(
                BeginGetRowMargin,
                EndGetRowMargin,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.Padding> setRowMarginInternal = (x, v) => x.RowMargin = v;
        public static void SetRowMargin(this System.Windows.Forms.ToolStripPanel target, System.Windows.Forms.Padding value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowMarginInternal, target, value);
            else
                setRowMarginInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.Padding> setRowMarginCallback = SetRowMargin;
        public static IAsyncResult BeginSetRowMargin(this System.Windows.Forms.ToolStripPanel target, System.Windows.Forms.Padding value, AsyncCallback callback, object state)
        {
            return setRowMarginCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowMargin(this System.Windows.Forms.ToolStripPanel target, IAsyncResult result)
        {
            EndSetRowMargin(result);
        }
        public static void EndSetRowMargin(IAsyncResult result)
        {
            setRowMarginCallback.EndInvoke(result);
        }
        public static Task SetRowMarginAsync(this System.Windows.Forms.ToolStripPanel target, System.Windows.Forms.Padding value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.Padding>(
                BeginSetRowMargin,
                EndSetRowMargin,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Boolean> getLockedInternal = (x) => x.Locked;
        public static System.Boolean GetLocked(this System.Windows.Forms.ToolStripPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getLockedInternal, target);
            else
                return getLockedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Boolean> getLockedCallback = GetLocked;
        public static IAsyncResult BeginGetLocked(this System.Windows.Forms.ToolStripPanel target, AsyncCallback callback, object state)
        {
            return getLockedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetLocked(this System.Windows.Forms.ToolStripPanel target, IAsyncResult result)
        {
            return EndGetLocked(result);
        }
        public static System.Boolean EndGetLocked(IAsyncResult result)
        {
            return getLockedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetLockedAsync(this System.Windows.Forms.ToolStripPanel target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripPanel>(
                BeginGetLocked,
                EndGetLocked,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Boolean> setLockedInternal = (x, v) => x.Locked = v;
        public static void SetLocked(this System.Windows.Forms.ToolStripPanel target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLockedInternal, target, value);
            else
                setLockedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Boolean> setLockedCallback = SetLocked;
        public static IAsyncResult BeginSetLocked(this System.Windows.Forms.ToolStripPanel target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setLockedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLocked(this System.Windows.Forms.ToolStripPanel target, IAsyncResult result)
        {
            EndSetLocked(result);
        }
        public static void EndSetLocked(IAsyncResult result)
        {
            setLockedCallback.EndInvoke(result);
        }
        public static Task SetLockedAsync(this System.Windows.Forms.ToolStripPanel target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripPanel, System.Boolean>(
                BeginSetLocked,
                EndSetLocked,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderer> getRendererInternal = (x) => x.Renderer;
        public static System.Windows.Forms.ToolStripRenderer GetRenderer(this System.Windows.Forms.ToolStripPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripRenderer)target.Invoke(getRendererInternal, target);
            else
                return getRendererInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderer> getRendererCallback = GetRenderer;
        public static IAsyncResult BeginGetRenderer(this System.Windows.Forms.ToolStripPanel target, AsyncCallback callback, object state)
        {
            return getRendererCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripRenderer EndGetRenderer(this System.Windows.Forms.ToolStripPanel target, IAsyncResult result)
        {
            return EndGetRenderer(result);
        }
        public static System.Windows.Forms.ToolStripRenderer EndGetRenderer(IAsyncResult result)
        {
            return getRendererCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripRenderer> GetRendererAsync(this System.Windows.Forms.ToolStripPanel target)
        {
            return Task<System.Windows.Forms.ToolStripRenderer>.Factory.FromAsync<System.Windows.Forms.ToolStripPanel>(
                BeginGetRenderer,
                EndGetRenderer,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderer> setRendererInternal = (x, v) => x.Renderer = v;
        public static void SetRenderer(this System.Windows.Forms.ToolStripPanel target, System.Windows.Forms.ToolStripRenderer value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRendererInternal, target, value);
            else
                setRendererInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderer> setRendererCallback = SetRenderer;
        public static IAsyncResult BeginSetRenderer(this System.Windows.Forms.ToolStripPanel target, System.Windows.Forms.ToolStripRenderer value, AsyncCallback callback, object state)
        {
            return setRendererCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRenderer(this System.Windows.Forms.ToolStripPanel target, IAsyncResult result)
        {
            EndSetRenderer(result);
        }
        public static void EndSetRenderer(IAsyncResult result)
        {
            setRendererCallback.EndInvoke(result);
        }
        public static Task SetRendererAsync(this System.Windows.Forms.ToolStripPanel target, System.Windows.Forms.ToolStripRenderer value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderer>(
                BeginSetRenderer,
                EndSetRenderer,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderMode> getRenderModeInternal = (x) => x.RenderMode;
        public static System.Windows.Forms.ToolStripRenderMode GetRenderMode(this System.Windows.Forms.ToolStripPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripRenderMode)target.Invoke(getRenderModeInternal, target);
            else
                return getRenderModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderMode> getRenderModeCallback = GetRenderMode;
        public static IAsyncResult BeginGetRenderMode(this System.Windows.Forms.ToolStripPanel target, AsyncCallback callback, object state)
        {
            return getRenderModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripRenderMode EndGetRenderMode(this System.Windows.Forms.ToolStripPanel target, IAsyncResult result)
        {
            return EndGetRenderMode(result);
        }
        public static System.Windows.Forms.ToolStripRenderMode EndGetRenderMode(IAsyncResult result)
        {
            return getRenderModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripRenderMode> GetRenderModeAsync(this System.Windows.Forms.ToolStripPanel target)
        {
            return Task<System.Windows.Forms.ToolStripRenderMode>.Factory.FromAsync<System.Windows.Forms.ToolStripPanel>(
                BeginGetRenderMode,
                EndGetRenderMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderMode> setRenderModeInternal = (x, v) => x.RenderMode = v;
        public static void SetRenderMode(this System.Windows.Forms.ToolStripPanel target, System.Windows.Forms.ToolStripRenderMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRenderModeInternal, target, value);
            else
                setRenderModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderMode> setRenderModeCallback = SetRenderMode;
        public static IAsyncResult BeginSetRenderMode(this System.Windows.Forms.ToolStripPanel target, System.Windows.Forms.ToolStripRenderMode value, AsyncCallback callback, object state)
        {
            return setRenderModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRenderMode(this System.Windows.Forms.ToolStripPanel target, IAsyncResult result)
        {
            EndSetRenderMode(result);
        }
        public static void EndSetRenderMode(IAsyncResult result)
        {
            setRenderModeCallback.EndInvoke(result);
        }
        public static Task SetRenderModeAsync(this System.Windows.Forms.ToolStripPanel target, System.Windows.Forms.ToolStripRenderMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripRenderMode>(
                BeginSetRenderMode,
                EndSetRenderMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripPanelRow[]> getRowsInternal = (x) => x.Rows;
        public static System.Windows.Forms.ToolStripPanelRow[] GetRows(this System.Windows.Forms.ToolStripPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripPanelRow[])target.Invoke(getRowsInternal, target);
            else
                return getRowsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripPanel, System.Windows.Forms.ToolStripPanelRow[]> getRowsCallback = GetRows;
        public static IAsyncResult BeginGetRows(this System.Windows.Forms.ToolStripPanel target, AsyncCallback callback, object state)
        {
            return getRowsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripPanelRow[] EndGetRows(this System.Windows.Forms.ToolStripPanel target, IAsyncResult result)
        {
            return EndGetRows(result);
        }
        public static System.Windows.Forms.ToolStripPanelRow[] EndGetRows(IAsyncResult result)
        {
            return getRowsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripPanelRow[]> GetRowsAsync(this System.Windows.Forms.ToolStripPanel target)
        {
            return Task<System.Windows.Forms.ToolStripPanelRow[]>.Factory.FromAsync<System.Windows.Forms.ToolStripPanel>(
                BeginGetRows,
                EndGetRows,
                target, null);
        }


        private static readonly Func<System.Windows.Forms.UserControl, System.Boolean> validateChildren5Internal = (c) => c.ValidateChildren();
        public static System.Boolean ValidateChildren(this System.Windows.Forms.UserControl __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(validateChildren5Internal, __control__);
            else
                return validateChildren5Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.UserControl, System.Boolean> validateChildren5Callback = ValidateChildren;
        public static IAsyncResult BeginValidateChildren5(this System.Windows.Forms.UserControl __control__, AsyncCallback callback, object state)
        {
            return validateChildren5Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndValidateChildren5(this System.Windows.Forms.UserControl __control__, IAsyncResult result)
        {
            return EndValidateChildren5(result);
        }
        public static System.Boolean EndValidateChildren5(IAsyncResult result)
        {
            return validateChildren5Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ValidateChildrenAsync(this System.Windows.Forms.UserControl __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.UserControl>(
                (Func<System.Windows.Forms.UserControl, AsyncCallback, object, IAsyncResult>)BeginValidateChildren5,
                (Func<IAsyncResult, System.Boolean>)EndValidateChildren5,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.UserControl, System.Windows.Forms.ValidationConstraints, System.Boolean> validateChildren6Internal = (c, validationConstraints) => c.ValidateChildren(validationConstraints);
        public static System.Boolean ValidateChildren(this System.Windows.Forms.UserControl __control__, System.Windows.Forms.ValidationConstraints validationConstraints)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(validateChildren6Internal, __control__, validationConstraints);
            else
                return validateChildren6Internal.Invoke(__control__, validationConstraints);
        }
        private static readonly Func<System.Windows.Forms.UserControl, System.Windows.Forms.ValidationConstraints, System.Boolean> validateChildren6Callback = ValidateChildren;
        public static IAsyncResult BeginValidateChildren6(this System.Windows.Forms.UserControl __control__, System.Windows.Forms.ValidationConstraints validationConstraints, AsyncCallback callback, object state)
        {
            return validateChildren6Callback.BeginInvoke(__control__, validationConstraints, callback, state);
        }
        public static System.Boolean EndValidateChildren6(this System.Windows.Forms.UserControl __control__, IAsyncResult result)
        {
            return EndValidateChildren6(result);
        }
        public static System.Boolean EndValidateChildren6(IAsyncResult result)
        {
            return validateChildren6Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ValidateChildrenAsync(this System.Windows.Forms.UserControl __control__, System.Windows.Forms.ValidationConstraints validationConstraints)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.UserControl, System.Windows.Forms.ValidationConstraints>(
                (Func<System.Windows.Forms.UserControl, System.Windows.Forms.ValidationConstraints, AsyncCallback, object, IAsyncResult>)BeginValidateChildren6,
                (Func<IAsyncResult, System.Boolean>)EndValidateChildren6,
                __control__, validationConstraints, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripItem, System.Windows.Forms.ArrowDirection, System.Windows.Forms.ToolStripItem> getNextItem1Internal = (c, start, direction) => c.GetNextItem(start, direction);
        public static System.Windows.Forms.ToolStripItem GetNextItem(this System.Windows.Forms.ToolStrip __control__, System.Windows.Forms.ToolStripItem start, System.Windows.Forms.ArrowDirection direction)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)__control__.Invoke(getNextItem1Internal, __control__, start, direction);
            else
                return getNextItem1Internal.Invoke(__control__, start, direction);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripItem, System.Windows.Forms.ArrowDirection, System.Windows.Forms.ToolStripItem> getNextItem1Callback = GetNextItem;
        public static IAsyncResult BeginGetNextItem1(this System.Windows.Forms.ToolStrip __control__, System.Windows.Forms.ToolStripItem start, System.Windows.Forms.ArrowDirection direction, AsyncCallback callback, object state)
        {
            return getNextItem1Callback.BeginInvoke(__control__, start, direction, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetNextItem1(this System.Windows.Forms.ToolStrip __control__, IAsyncResult result)
        {
            return EndGetNextItem1(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetNextItem1(IAsyncResult result)
        {
            return getNextItem1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetNextItemAsync(this System.Windows.Forms.ToolStrip __control__, System.Windows.Forms.ToolStripItem start, System.Windows.Forms.ArrowDirection direction)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripItem, System.Windows.Forms.ArrowDirection>(
                (Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripItem, System.Windows.Forms.ArrowDirection, AsyncCallback, object, IAsyncResult>)BeginGetNextItem1,
                (Func<IAsyncResult, System.Windows.Forms.ToolStripItem>)EndGetNextItem1,
                __control__, start, direction, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Point, System.Windows.Forms.Control> getChildAtPoint3Internal = (c, point) => c.GetChildAtPoint(point);
        public static System.Windows.Forms.Control GetChildAtPoint(this System.Windows.Forms.ToolStrip __control__, System.Drawing.Point point)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.Control)__control__.Invoke(getChildAtPoint3Internal, __control__, point);
            else
                return getChildAtPoint3Internal.Invoke(__control__, point);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Point, System.Windows.Forms.Control> getChildAtPoint3Callback = GetChildAtPoint;
        public static IAsyncResult BeginGetChildAtPoint3(this System.Windows.Forms.ToolStrip __control__, System.Drawing.Point point, AsyncCallback callback, object state)
        {
            return getChildAtPoint3Callback.BeginInvoke(__control__, point, callback, state);
        }
        public static System.Windows.Forms.Control EndGetChildAtPoint3(this System.Windows.Forms.ToolStrip __control__, IAsyncResult result)
        {
            return EndGetChildAtPoint3(result);
        }
        public static System.Windows.Forms.Control EndGetChildAtPoint3(IAsyncResult result)
        {
            return getChildAtPoint3Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetChildAtPointAsync(this System.Windows.Forms.ToolStrip __control__, System.Drawing.Point point)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Drawing.Point>(
                (Func<System.Windows.Forms.ToolStrip, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginGetChildAtPoint3,
                (Func<IAsyncResult, System.Windows.Forms.Control>)EndGetChildAtPoint3,
                __control__, point, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Point, System.Windows.Forms.GetChildAtPointSkip, System.Windows.Forms.Control> getChildAtPoint4Internal = (c, pt, skipValue) => c.GetChildAtPoint(pt, skipValue);
        public static System.Windows.Forms.Control GetChildAtPoint(this System.Windows.Forms.ToolStrip __control__, System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.Control)__control__.Invoke(getChildAtPoint4Internal, __control__, pt, skipValue);
            else
                return getChildAtPoint4Internal.Invoke(__control__, pt, skipValue);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Point, System.Windows.Forms.GetChildAtPointSkip, System.Windows.Forms.Control> getChildAtPoint4Callback = GetChildAtPoint;
        public static IAsyncResult BeginGetChildAtPoint4(this System.Windows.Forms.ToolStrip __control__, System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue, AsyncCallback callback, object state)
        {
            return getChildAtPoint4Callback.BeginInvoke(__control__, pt, skipValue, callback, state);
        }
        public static System.Windows.Forms.Control EndGetChildAtPoint4(this System.Windows.Forms.ToolStrip __control__, IAsyncResult result)
        {
            return EndGetChildAtPoint4(result);
        }
        public static System.Windows.Forms.Control EndGetChildAtPoint4(IAsyncResult result)
        {
            return getChildAtPoint4Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetChildAtPointAsync(this System.Windows.Forms.ToolStrip __control__, System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Drawing.Point, System.Windows.Forms.GetChildAtPointSkip>(
                (Func<System.Windows.Forms.ToolStrip, System.Drawing.Point, System.Windows.Forms.GetChildAtPointSkip, AsyncCallback, object, IAsyncResult>)BeginGetChildAtPoint4,
                (Func<IAsyncResult, System.Windows.Forms.Control>)EndGetChildAtPoint4,
                __control__, pt, skipValue, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Int32, System.Int32, System.Windows.Forms.ToolStripItem> getItemAt1Internal = (c, x, y) => c.GetItemAt(x, y);
        public static System.Windows.Forms.ToolStripItem GetItemAt(this System.Windows.Forms.ToolStrip __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)__control__.Invoke(getItemAt1Internal, __control__, x, y);
            else
                return getItemAt1Internal.Invoke(__control__, x, y);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Int32, System.Int32, System.Windows.Forms.ToolStripItem> getItemAt1Callback = GetItemAt;
        public static IAsyncResult BeginGetItemAt1(this System.Windows.Forms.ToolStrip __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return getItemAt1Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetItemAt1(this System.Windows.Forms.ToolStrip __control__, IAsyncResult result)
        {
            return EndGetItemAt1(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetItemAt1(IAsyncResult result)
        {
            return getItemAt1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetItemAtAsync(this System.Windows.Forms.ToolStrip __control__, System.Int32 x, System.Int32 y)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.ToolStrip, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetItemAt1,
                (Func<IAsyncResult, System.Windows.Forms.ToolStripItem>)EndGetItemAt1,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Point, System.Windows.Forms.ToolStripItem> getItemAt2Internal = (c, point) => c.GetItemAt(point);
        public static System.Windows.Forms.ToolStripItem GetItemAt(this System.Windows.Forms.ToolStrip __control__, System.Drawing.Point point)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)__control__.Invoke(getItemAt2Internal, __control__, point);
            else
                return getItemAt2Internal.Invoke(__control__, point);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Point, System.Windows.Forms.ToolStripItem> getItemAt2Callback = GetItemAt;
        public static IAsyncResult BeginGetItemAt2(this System.Windows.Forms.ToolStrip __control__, System.Drawing.Point point, AsyncCallback callback, object state)
        {
            return getItemAt2Callback.BeginInvoke(__control__, point, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetItemAt2(this System.Windows.Forms.ToolStrip __control__, IAsyncResult result)
        {
            return EndGetItemAt2(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetItemAt2(IAsyncResult result)
        {
            return getItemAt2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetItemAtAsync(this System.Windows.Forms.ToolStrip __control__, System.Drawing.Point point)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Drawing.Point>(
                (Func<System.Windows.Forms.ToolStrip, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginGetItemAt2,
                (Func<IAsyncResult, System.Windows.Forms.ToolStripItem>)EndGetItemAt2,
                __control__, point, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip> resetMinimumSize1Internal = (c) => c.ResetMinimumSize();
        public static void ResetMinimumSize(this System.Windows.Forms.ToolStrip __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetMinimumSize1Internal, __control__);
            else
                resetMinimumSize1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip> resetMinimumSize1Callback = ResetMinimumSize;
        public static IAsyncResult BeginResetMinimumSize1(this System.Windows.Forms.ToolStrip __control__, AsyncCallback callback, object state)
        {
            return resetMinimumSize1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetMinimumSize1(this System.Windows.Forms.ToolStrip __control__, IAsyncResult result)
        {
            EndResetMinimumSize1(result);
        }
        public static void EndResetMinimumSize1(IAsyncResult result)
        {
            resetMinimumSize1Callback.EndInvoke(result);
        }
        public static Task ResetMinimumSizeAsync(this System.Windows.Forms.ToolStrip __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                (Func<System.Windows.Forms.ToolStrip, AsyncCallback, object, IAsyncResult>)BeginResetMinimumSize1,
                (Action<IAsyncResult>)EndResetMinimumSize1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Int32, System.Int32> setAutoScrollMargin2Internal = (c, x, y) => c.SetAutoScrollMargin(x, y);
        public static void SetAutoScrollMargin(this System.Windows.Forms.ToolStrip __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setAutoScrollMargin2Internal, __control__, x, y);
            else
                setAutoScrollMargin2Internal.Invoke(__control__, x, y);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Int32, System.Int32> setAutoScrollMargin2Callback = SetAutoScrollMargin;
        public static IAsyncResult BeginSetAutoScrollMargin2(this System.Windows.Forms.ToolStrip __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return setAutoScrollMargin2Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static void EndSetAutoScrollMargin2(this System.Windows.Forms.ToolStrip __control__, IAsyncResult result)
        {
            EndSetAutoScrollMargin2(result);
        }
        public static void EndSetAutoScrollMargin2(IAsyncResult result)
        {
            setAutoScrollMargin2Callback.EndInvoke(result);
        }
        public static Task SetAutoScrollMarginAsync(this System.Windows.Forms.ToolStrip __control__, System.Int32 x, System.Int32 y)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.ToolStrip, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSetAutoScrollMargin2,
                (Action<IAsyncResult>)EndSetAutoScrollMargin2,
                __control__, x, y, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getAllowItemReorderInternal = (x) => x.AllowItemReorder;
        public static System.Boolean GetAllowItemReorder(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowItemReorderInternal, target);
            else
                return getAllowItemReorderInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getAllowItemReorderCallback = GetAllowItemReorder;
        public static IAsyncResult BeginGetAllowItemReorder(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getAllowItemReorderCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowItemReorder(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetAllowItemReorder(result);
        }
        public static System.Boolean EndGetAllowItemReorder(IAsyncResult result)
        {
            return getAllowItemReorderCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowItemReorderAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetAllowItemReorder,
                EndGetAllowItemReorder,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setAllowItemReorderInternal = (x, v) => x.AllowItemReorder = v;
        public static void SetAllowItemReorder(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowItemReorderInternal, target, value);
            else
                setAllowItemReorderInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setAllowItemReorderCallback = SetAllowItemReorder;
        public static IAsyncResult BeginSetAllowItemReorder(this System.Windows.Forms.ToolStrip target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowItemReorderCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowItemReorder(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetAllowItemReorder(result);
        }
        public static void EndSetAllowItemReorder(IAsyncResult result)
        {
            setAllowItemReorderCallback.EndInvoke(result);
        }
        public static Task SetAllowItemReorderAsync(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Boolean>(
                BeginSetAllowItemReorder,
                EndSetAllowItemReorder,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getAllowMergeInternal = (x) => x.AllowMerge;
        public static System.Boolean GetAllowMerge(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowMergeInternal, target);
            else
                return getAllowMergeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getAllowMergeCallback = GetAllowMerge;
        public static IAsyncResult BeginGetAllowMerge(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getAllowMergeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowMerge(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetAllowMerge(result);
        }
        public static System.Boolean EndGetAllowMerge(IAsyncResult result)
        {
            return getAllowMergeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowMergeAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetAllowMerge,
                EndGetAllowMerge,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setAllowMergeInternal = (x, v) => x.AllowMerge = v;
        public static void SetAllowMerge(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowMergeInternal, target, value);
            else
                setAllowMergeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setAllowMergeCallback = SetAllowMerge;
        public static IAsyncResult BeginSetAllowMerge(this System.Windows.Forms.ToolStrip target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowMergeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowMerge(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetAllowMerge(result);
        }
        public static void EndSetAllowMerge(IAsyncResult result)
        {
            setAllowMergeCallback.EndInvoke(result);
        }
        public static Task SetAllowMergeAsync(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Boolean>(
                BeginSetAllowMerge,
                EndSetAllowMerge,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getCanOverflowInternal = (x) => x.CanOverflow;
        public static System.Boolean GetCanOverflow(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCanOverflowInternal, target);
            else
                return getCanOverflowInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getCanOverflowCallback = GetCanOverflow;
        public static IAsyncResult BeginGetCanOverflow(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getCanOverflowCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCanOverflow(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetCanOverflow(result);
        }
        public static System.Boolean EndGetCanOverflow(IAsyncResult result)
        {
            return getCanOverflowCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCanOverflowAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetCanOverflow,
                EndGetCanOverflow,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setCanOverflowInternal = (x, v) => x.CanOverflow = v;
        public static void SetCanOverflow(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCanOverflowInternal, target, value);
            else
                setCanOverflowInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setCanOverflowCallback = SetCanOverflow;
        public static IAsyncResult BeginSetCanOverflow(this System.Windows.Forms.ToolStrip target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCanOverflowCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCanOverflow(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetCanOverflow(result);
        }
        public static void EndSetCanOverflow(IAsyncResult result)
        {
            setCanOverflowCallback.EndInvoke(result);
        }
        public static Task SetCanOverflowAsync(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Boolean>(
                BeginSetCanOverflow,
                EndSetCanOverflow,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripDropDownDirection> getDefaultDropDownDirectionInternal = (x) => x.DefaultDropDownDirection;
        public static System.Windows.Forms.ToolStripDropDownDirection GetDefaultDropDownDirection(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripDropDownDirection)target.Invoke(getDefaultDropDownDirectionInternal, target);
            else
                return getDefaultDropDownDirectionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripDropDownDirection> getDefaultDropDownDirectionCallback = GetDefaultDropDownDirection;
        public static IAsyncResult BeginGetDefaultDropDownDirection(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getDefaultDropDownDirectionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripDropDownDirection EndGetDefaultDropDownDirection(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetDefaultDropDownDirection(result);
        }
        public static System.Windows.Forms.ToolStripDropDownDirection EndGetDefaultDropDownDirection(IAsyncResult result)
        {
            return getDefaultDropDownDirectionCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripDropDownDirection> GetDefaultDropDownDirectionAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Windows.Forms.ToolStripDropDownDirection>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetDefaultDropDownDirection,
                EndGetDefaultDropDownDirection,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripDropDownDirection> setDefaultDropDownDirectionInternal = (x, v) => x.DefaultDropDownDirection = v;
        public static void SetDefaultDropDownDirection(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripDropDownDirection value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDefaultDropDownDirectionInternal, target, value);
            else
                setDefaultDropDownDirectionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripDropDownDirection> setDefaultDropDownDirectionCallback = SetDefaultDropDownDirection;
        public static IAsyncResult BeginSetDefaultDropDownDirection(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripDropDownDirection value, AsyncCallback callback, object state)
        {
            return setDefaultDropDownDirectionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDefaultDropDownDirection(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetDefaultDropDownDirection(result);
        }
        public static void EndSetDefaultDropDownDirection(IAsyncResult result)
        {
            setDefaultDropDownDirectionCallback.EndInvoke(result);
        }
        public static Task SetDefaultDropDownDirectionAsync(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripDropDownDirection value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripDropDownDirection>(
                BeginSetDefaultDropDownDirection,
                EndSetDefaultDropDownDirection,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripGripStyle> getGripStyleInternal = (x) => x.GripStyle;
        public static System.Windows.Forms.ToolStripGripStyle GetGripStyle(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripGripStyle)target.Invoke(getGripStyleInternal, target);
            else
                return getGripStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripGripStyle> getGripStyleCallback = GetGripStyle;
        public static IAsyncResult BeginGetGripStyle(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getGripStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripGripStyle EndGetGripStyle(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetGripStyle(result);
        }
        public static System.Windows.Forms.ToolStripGripStyle EndGetGripStyle(IAsyncResult result)
        {
            return getGripStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripGripStyle> GetGripStyleAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Windows.Forms.ToolStripGripStyle>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetGripStyle,
                EndGetGripStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripGripStyle> setGripStyleInternal = (x, v) => x.GripStyle = v;
        public static void SetGripStyle(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripGripStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setGripStyleInternal, target, value);
            else
                setGripStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripGripStyle> setGripStyleCallback = SetGripStyle;
        public static IAsyncResult BeginSetGripStyle(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripGripStyle value, AsyncCallback callback, object state)
        {
            return setGripStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetGripStyle(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetGripStyle(result);
        }
        public static void EndSetGripStyle(IAsyncResult result)
        {
            setGripStyleCallback.EndInvoke(result);
        }
        public static Task SetGripStyleAsync(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripGripStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripGripStyle>(
                BeginSetGripStyle,
                EndSetGripStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripGripDisplayStyle> getGripDisplayStyleInternal = (x) => x.GripDisplayStyle;
        public static System.Windows.Forms.ToolStripGripDisplayStyle GetGripDisplayStyle(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripGripDisplayStyle)target.Invoke(getGripDisplayStyleInternal, target);
            else
                return getGripDisplayStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripGripDisplayStyle> getGripDisplayStyleCallback = GetGripDisplayStyle;
        public static IAsyncResult BeginGetGripDisplayStyle(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getGripDisplayStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripGripDisplayStyle EndGetGripDisplayStyle(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetGripDisplayStyle(result);
        }
        public static System.Windows.Forms.ToolStripGripDisplayStyle EndGetGripDisplayStyle(IAsyncResult result)
        {
            return getGripDisplayStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripGripDisplayStyle> GetGripDisplayStyleAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Windows.Forms.ToolStripGripDisplayStyle>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetGripDisplayStyle,
                EndGetGripDisplayStyle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.Padding> getGripMarginInternal = (x) => x.GripMargin;
        public static System.Windows.Forms.Padding GetGripMargin(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Padding)target.Invoke(getGripMarginInternal, target);
            else
                return getGripMarginInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.Padding> getGripMarginCallback = GetGripMargin;
        public static IAsyncResult BeginGetGripMargin(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getGripMarginCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Padding EndGetGripMargin(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetGripMargin(result);
        }
        public static System.Windows.Forms.Padding EndGetGripMargin(IAsyncResult result)
        {
            return getGripMarginCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Padding> GetGripMarginAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Windows.Forms.Padding>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetGripMargin,
                EndGetGripMargin,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.Padding> setGripMarginInternal = (x, v) => x.GripMargin = v;
        public static void SetGripMargin(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.Padding value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setGripMarginInternal, target, value);
            else
                setGripMarginInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.Padding> setGripMarginCallback = SetGripMargin;
        public static IAsyncResult BeginSetGripMargin(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.Padding value, AsyncCallback callback, object state)
        {
            return setGripMarginCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetGripMargin(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetGripMargin(result);
        }
        public static void EndSetGripMargin(IAsyncResult result)
        {
            setGripMarginCallback.EndInvoke(result);
        }
        public static Task SetGripMarginAsync(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.Padding value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Windows.Forms.Padding>(
                BeginSetGripMargin,
                EndSetGripMargin,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Rectangle> getGripRectangleInternal = (x) => x.GripRectangle;
        public static System.Drawing.Rectangle GetGripRectangle(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Rectangle)target.Invoke(getGripRectangleInternal, target);
            else
                return getGripRectangleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Rectangle> getGripRectangleCallback = GetGripRectangle;
        public static IAsyncResult BeginGetGripRectangle(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getGripRectangleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Rectangle EndGetGripRectangle(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetGripRectangle(result);
        }
        public static System.Drawing.Rectangle EndGetGripRectangle(IAsyncResult result)
        {
            return getGripRectangleCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetGripRectangleAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetGripRectangle,
                EndGetGripRectangle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Size> getImageScalingSizeInternal = (x) => x.ImageScalingSize;
        public static System.Drawing.Size GetImageScalingSize(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getImageScalingSizeInternal, target);
            else
                return getImageScalingSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Drawing.Size> getImageScalingSizeCallback = GetImageScalingSize;
        public static IAsyncResult BeginGetImageScalingSize(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getImageScalingSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetImageScalingSize(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetImageScalingSize(result);
        }
        public static System.Drawing.Size EndGetImageScalingSize(IAsyncResult result)
        {
            return getImageScalingSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetImageScalingSizeAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetImageScalingSize,
                EndGetImageScalingSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Drawing.Size> setImageScalingSizeInternal = (x, v) => x.ImageScalingSize = v;
        public static void SetImageScalingSize(this System.Windows.Forms.ToolStrip target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setImageScalingSizeInternal, target, value);
            else
                setImageScalingSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Drawing.Size> setImageScalingSizeCallback = SetImageScalingSize;
        public static IAsyncResult BeginSetImageScalingSize(this System.Windows.Forms.ToolStrip target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setImageScalingSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetImageScalingSize(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetImageScalingSize(result);
        }
        public static void EndSetImageScalingSize(IAsyncResult result)
        {
            setImageScalingSizeCallback.EndInvoke(result);
        }
        public static Task SetImageScalingSizeAsync(this System.Windows.Forms.ToolStrip target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Drawing.Size>(
                BeginSetImageScalingSize,
                EndSetImageScalingSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ImageList> getImageListInternal = (x) => x.ImageList;
        public static System.Windows.Forms.ImageList GetImageList(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ImageList)target.Invoke(getImageListInternal, target);
            else
                return getImageListInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ImageList> getImageListCallback = GetImageList;
        public static IAsyncResult BeginGetImageList(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getImageListCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ImageList EndGetImageList(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetImageList(result);
        }
        public static System.Windows.Forms.ImageList EndGetImageList(IAsyncResult result)
        {
            return getImageListCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ImageList> GetImageListAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Windows.Forms.ImageList>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetImageList,
                EndGetImageList,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ImageList> setImageListInternal = (x, v) => x.ImageList = v;
        public static void SetImageList(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ImageList value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setImageListInternal, target, value);
            else
                setImageListInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ImageList> setImageListCallback = SetImageList;
        public static IAsyncResult BeginSetImageList(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ImageList value, AsyncCallback callback, object state)
        {
            return setImageListCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetImageList(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetImageList(result);
        }
        public static void EndSetImageList(IAsyncResult result)
        {
            setImageListCallback.EndInvoke(result);
        }
        public static Task SetImageListAsync(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ImageList value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Windows.Forms.ImageList>(
                BeginSetImageList,
                EndSetImageList,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getIsCurrentlyDraggingInternal = (x) => x.IsCurrentlyDragging;
        public static System.Boolean GetIsCurrentlyDragging(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsCurrentlyDraggingInternal, target);
            else
                return getIsCurrentlyDraggingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getIsCurrentlyDraggingCallback = GetIsCurrentlyDragging;
        public static IAsyncResult BeginGetIsCurrentlyDragging(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getIsCurrentlyDraggingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsCurrentlyDragging(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetIsCurrentlyDragging(result);
        }
        public static System.Boolean EndGetIsCurrentlyDragging(IAsyncResult result)
        {
            return getIsCurrentlyDraggingCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsCurrentlyDraggingAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetIsCurrentlyDragging,
                EndGetIsCurrentlyDragging,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getIsDropDownInternal = (x) => x.IsDropDown;
        public static System.Boolean GetIsDropDown(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsDropDownInternal, target);
            else
                return getIsDropDownInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getIsDropDownCallback = GetIsDropDown;
        public static IAsyncResult BeginGetIsDropDown(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getIsDropDownCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsDropDown(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetIsDropDown(result);
        }
        public static System.Boolean EndGetIsDropDown(IAsyncResult result)
        {
            return getIsDropDownCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsDropDownAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetIsDropDown,
                EndGetIsDropDown,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.LayoutSettings> getLayoutSettingsInternal = (x) => x.LayoutSettings;
        public static System.Windows.Forms.LayoutSettings GetLayoutSettings(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.LayoutSettings)target.Invoke(getLayoutSettingsInternal, target);
            else
                return getLayoutSettingsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.LayoutSettings> getLayoutSettingsCallback = GetLayoutSettings;
        public static IAsyncResult BeginGetLayoutSettings(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getLayoutSettingsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.LayoutSettings EndGetLayoutSettings(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetLayoutSettings(result);
        }
        public static System.Windows.Forms.LayoutSettings EndGetLayoutSettings(IAsyncResult result)
        {
            return getLayoutSettingsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.LayoutSettings> GetLayoutSettingsAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Windows.Forms.LayoutSettings>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetLayoutSettings,
                EndGetLayoutSettings,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.LayoutSettings> setLayoutSettingsInternal = (x, v) => x.LayoutSettings = v;
        public static void SetLayoutSettings(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.LayoutSettings value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLayoutSettingsInternal, target, value);
            else
                setLayoutSettingsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.LayoutSettings> setLayoutSettingsCallback = SetLayoutSettings;
        public static IAsyncResult BeginSetLayoutSettings(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.LayoutSettings value, AsyncCallback callback, object state)
        {
            return setLayoutSettingsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLayoutSettings(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetLayoutSettings(result);
        }
        public static void EndSetLayoutSettings(IAsyncResult result)
        {
            setLayoutSettingsCallback.EndInvoke(result);
        }
        public static Task SetLayoutSettingsAsync(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.LayoutSettings value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Windows.Forms.LayoutSettings>(
                BeginSetLayoutSettings,
                EndSetLayoutSettings,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripLayoutStyle> getLayoutStyleInternal = (x) => x.LayoutStyle;
        public static System.Windows.Forms.ToolStripLayoutStyle GetLayoutStyle(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripLayoutStyle)target.Invoke(getLayoutStyleInternal, target);
            else
                return getLayoutStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripLayoutStyle> getLayoutStyleCallback = GetLayoutStyle;
        public static IAsyncResult BeginGetLayoutStyle(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getLayoutStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripLayoutStyle EndGetLayoutStyle(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetLayoutStyle(result);
        }
        public static System.Windows.Forms.ToolStripLayoutStyle EndGetLayoutStyle(IAsyncResult result)
        {
            return getLayoutStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripLayoutStyle> GetLayoutStyleAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Windows.Forms.ToolStripLayoutStyle>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetLayoutStyle,
                EndGetLayoutStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripLayoutStyle> setLayoutStyleInternal = (x, v) => x.LayoutStyle = v;
        public static void SetLayoutStyle(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripLayoutStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLayoutStyleInternal, target, value);
            else
                setLayoutStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripLayoutStyle> setLayoutStyleCallback = SetLayoutStyle;
        public static IAsyncResult BeginSetLayoutStyle(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripLayoutStyle value, AsyncCallback callback, object state)
        {
            return setLayoutStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLayoutStyle(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetLayoutStyle(result);
        }
        public static void EndSetLayoutStyle(IAsyncResult result)
        {
            setLayoutStyleCallback.EndInvoke(result);
        }
        public static Task SetLayoutStyleAsync(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripLayoutStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripLayoutStyle>(
                BeginSetLayoutStyle,
                EndSetLayoutStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripOverflowButton> getOverflowButtonInternal = (x) => x.OverflowButton;
        public static System.Windows.Forms.ToolStripOverflowButton GetOverflowButton(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripOverflowButton)target.Invoke(getOverflowButtonInternal, target);
            else
                return getOverflowButtonInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripOverflowButton> getOverflowButtonCallback = GetOverflowButton;
        public static IAsyncResult BeginGetOverflowButton(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getOverflowButtonCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripOverflowButton EndGetOverflowButton(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetOverflowButton(result);
        }
        public static System.Windows.Forms.ToolStripOverflowButton EndGetOverflowButton(IAsyncResult result)
        {
            return getOverflowButtonCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripOverflowButton> GetOverflowButtonAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Windows.Forms.ToolStripOverflowButton>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetOverflowButton,
                EndGetOverflowButton,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getStretchInternal = (x) => x.Stretch;
        public static System.Boolean GetStretch(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getStretchInternal, target);
            else
                return getStretchInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getStretchCallback = GetStretch;
        public static IAsyncResult BeginGetStretch(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getStretchCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetStretch(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetStretch(result);
        }
        public static System.Boolean EndGetStretch(IAsyncResult result)
        {
            return getStretchCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetStretchAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetStretch,
                EndGetStretch,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setStretchInternal = (x, v) => x.Stretch = v;
        public static void SetStretch(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setStretchInternal, target, value);
            else
                setStretchInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setStretchCallback = SetStretch;
        public static IAsyncResult BeginSetStretch(this System.Windows.Forms.ToolStrip target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setStretchCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetStretch(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetStretch(result);
        }
        public static void EndSetStretch(IAsyncResult result)
        {
            setStretchCallback.EndInvoke(result);
        }
        public static Task SetStretchAsync(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Boolean>(
                BeginSetStretch,
                EndSetStretch,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getShowItemToolTipsInternal = (x) => x.ShowItemToolTips;
        public static System.Boolean GetShowItemToolTips(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowItemToolTipsInternal, target);
            else
                return getShowItemToolTipsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Boolean> getShowItemToolTipsCallback = GetShowItemToolTips;
        public static IAsyncResult BeginGetShowItemToolTips(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getShowItemToolTipsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowItemToolTips(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetShowItemToolTips(result);
        }
        public static System.Boolean EndGetShowItemToolTips(IAsyncResult result)
        {
            return getShowItemToolTipsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowItemToolTipsAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetShowItemToolTips,
                EndGetShowItemToolTips,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setShowItemToolTipsInternal = (x, v) => x.ShowItemToolTips = v;
        public static void SetShowItemToolTips(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowItemToolTipsInternal, target, value);
            else
                setShowItemToolTipsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Boolean> setShowItemToolTipsCallback = SetShowItemToolTips;
        public static IAsyncResult BeginSetShowItemToolTips(this System.Windows.Forms.ToolStrip target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowItemToolTipsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowItemToolTips(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetShowItemToolTips(result);
        }
        public static void EndSetShowItemToolTips(IAsyncResult result)
        {
            setShowItemToolTipsCallback.EndInvoke(result);
        }
        public static Task SetShowItemToolTipsAsync(this System.Windows.Forms.ToolStrip target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Boolean>(
                BeginSetShowItemToolTips,
                EndSetShowItemToolTips,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripTextDirection> getTextDirectionInternal = (x) => x.TextDirection;
        public static System.Windows.Forms.ToolStripTextDirection GetTextDirection(this System.Windows.Forms.ToolStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripTextDirection)target.Invoke(getTextDirectionInternal, target);
            else
                return getTextDirectionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripTextDirection> getTextDirectionCallback = GetTextDirection;
        public static IAsyncResult BeginGetTextDirection(this System.Windows.Forms.ToolStrip target, AsyncCallback callback, object state)
        {
            return getTextDirectionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripTextDirection EndGetTextDirection(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            return EndGetTextDirection(result);
        }
        public static System.Windows.Forms.ToolStripTextDirection EndGetTextDirection(IAsyncResult result)
        {
            return getTextDirectionCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripTextDirection> GetTextDirectionAsync(this System.Windows.Forms.ToolStrip target)
        {
            return Task<System.Windows.Forms.ToolStripTextDirection>.Factory.FromAsync<System.Windows.Forms.ToolStrip>(
                BeginGetTextDirection,
                EndGetTextDirection,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripTextDirection> setTextDirectionInternal = (x, v) => x.TextDirection = v;
        public static void SetTextDirection(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripTextDirection value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTextDirectionInternal, target, value);
            else
                setTextDirectionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripTextDirection> setTextDirectionCallback = SetTextDirection;
        public static IAsyncResult BeginSetTextDirection(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripTextDirection value, AsyncCallback callback, object state)
        {
            return setTextDirectionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTextDirection(this System.Windows.Forms.ToolStrip target, IAsyncResult result)
        {
            EndSetTextDirection(result);
        }
        public static void EndSetTextDirection(IAsyncResult result)
        {
            setTextDirectionCallback.EndInvoke(result);
        }
        public static Task SetTextDirectionAsync(this System.Windows.Forms.ToolStrip target, System.Windows.Forms.ToolStripTextDirection value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStrip, System.Windows.Forms.ToolStripTextDirection>(
                BeginSetTextDirection,
                EndSetTextDirection,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.BindingNavigator> addStandardItems1Internal = (c) => c.AddStandardItems();
        public static void AddStandardItems(this System.Windows.Forms.BindingNavigator __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(addStandardItems1Internal, __control__);
            else
                addStandardItems1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator> addStandardItems1Callback = AddStandardItems;
        public static IAsyncResult BeginAddStandardItems1(this System.Windows.Forms.BindingNavigator __control__, AsyncCallback callback, object state)
        {
            return addStandardItems1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndAddStandardItems1(this System.Windows.Forms.BindingNavigator __control__, IAsyncResult result)
        {
            EndAddStandardItems1(result);
        }
        public static void EndAddStandardItems1(IAsyncResult result)
        {
            addStandardItems1Callback.EndInvoke(result);
        }
        public static Task AddStandardItemsAsync(this System.Windows.Forms.BindingNavigator __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                (Func<System.Windows.Forms.BindingNavigator, AsyncCallback, object, IAsyncResult>)BeginAddStandardItems1,
                (Action<IAsyncResult>)EndAddStandardItems1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Boolean> validate3Internal = (c) => c.Validate();
        public static System.Boolean Validate(this System.Windows.Forms.BindingNavigator __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(validate3Internal, __control__);
            else
                return validate3Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Boolean> validate3Callback = Validate;
        public static IAsyncResult BeginValidate3(this System.Windows.Forms.BindingNavigator __control__, AsyncCallback callback, object state)
        {
            return validate3Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndValidate3(this System.Windows.Forms.BindingNavigator __control__, IAsyncResult result)
        {
            return EndValidate3(result);
        }
        public static System.Boolean EndValidate3(IAsyncResult result)
        {
            return validate3Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> ValidateAsync(this System.Windows.Forms.BindingNavigator __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                (Func<System.Windows.Forms.BindingNavigator, AsyncCallback, object, IAsyncResult>)BeginValidate3,
                (Func<IAsyncResult, System.Boolean>)EndValidate3,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.BindingSource> getBindingSourceInternal = (x) => x.BindingSource;
        public static System.Windows.Forms.BindingSource GetBindingSource(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.BindingSource)target.Invoke(getBindingSourceInternal, target);
            else
                return getBindingSourceInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.BindingSource> getBindingSourceCallback = GetBindingSource;
        public static IAsyncResult BeginGetBindingSource(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getBindingSourceCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.BindingSource EndGetBindingSource(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetBindingSource(result);
        }
        public static System.Windows.Forms.BindingSource EndGetBindingSource(IAsyncResult result)
        {
            return getBindingSourceCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.BindingSource> GetBindingSourceAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.Windows.Forms.BindingSource>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetBindingSource,
                EndGetBindingSource,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.BindingSource> setBindingSourceInternal = (x, v) => x.BindingSource = v;
        public static void SetBindingSource(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.BindingSource value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBindingSourceInternal, target, value);
            else
                setBindingSourceInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.BindingSource> setBindingSourceCallback = SetBindingSource;
        public static IAsyncResult BeginSetBindingSource(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.BindingSource value, AsyncCallback callback, object state)
        {
            return setBindingSourceCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBindingSource(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetBindingSource(result);
        }
        public static void EndSetBindingSource(IAsyncResult result)
        {
            setBindingSourceCallback.EndInvoke(result);
        }
        public static Task SetBindingSourceAsync(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.BindingSource value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.Windows.Forms.BindingSource>(
                BeginSetBindingSource,
                EndSetBindingSource,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getMoveFirstItemInternal = (x) => x.MoveFirstItem;
        public static System.Windows.Forms.ToolStripItem GetMoveFirstItem(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)target.Invoke(getMoveFirstItemInternal, target);
            else
                return getMoveFirstItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getMoveFirstItemCallback = GetMoveFirstItem;
        public static IAsyncResult BeginGetMoveFirstItem(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getMoveFirstItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetMoveFirstItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetMoveFirstItem(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetMoveFirstItem(IAsyncResult result)
        {
            return getMoveFirstItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetMoveFirstItemAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetMoveFirstItem,
                EndGetMoveFirstItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setMoveFirstItemInternal = (x, v) => x.MoveFirstItem = v;
        public static void SetMoveFirstItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMoveFirstItemInternal, target, value);
            else
                setMoveFirstItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setMoveFirstItemCallback = SetMoveFirstItem;
        public static IAsyncResult BeginSetMoveFirstItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value, AsyncCallback callback, object state)
        {
            return setMoveFirstItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMoveFirstItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetMoveFirstItem(result);
        }
        public static void EndSetMoveFirstItem(IAsyncResult result)
        {
            setMoveFirstItemCallback.EndInvoke(result);
        }
        public static Task SetMoveFirstItemAsync(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem>(
                BeginSetMoveFirstItem,
                EndSetMoveFirstItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getMovePreviousItemInternal = (x) => x.MovePreviousItem;
        public static System.Windows.Forms.ToolStripItem GetMovePreviousItem(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)target.Invoke(getMovePreviousItemInternal, target);
            else
                return getMovePreviousItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getMovePreviousItemCallback = GetMovePreviousItem;
        public static IAsyncResult BeginGetMovePreviousItem(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getMovePreviousItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetMovePreviousItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetMovePreviousItem(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetMovePreviousItem(IAsyncResult result)
        {
            return getMovePreviousItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetMovePreviousItemAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetMovePreviousItem,
                EndGetMovePreviousItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setMovePreviousItemInternal = (x, v) => x.MovePreviousItem = v;
        public static void SetMovePreviousItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMovePreviousItemInternal, target, value);
            else
                setMovePreviousItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setMovePreviousItemCallback = SetMovePreviousItem;
        public static IAsyncResult BeginSetMovePreviousItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value, AsyncCallback callback, object state)
        {
            return setMovePreviousItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMovePreviousItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetMovePreviousItem(result);
        }
        public static void EndSetMovePreviousItem(IAsyncResult result)
        {
            setMovePreviousItemCallback.EndInvoke(result);
        }
        public static Task SetMovePreviousItemAsync(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem>(
                BeginSetMovePreviousItem,
                EndSetMovePreviousItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getMoveNextItemInternal = (x) => x.MoveNextItem;
        public static System.Windows.Forms.ToolStripItem GetMoveNextItem(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)target.Invoke(getMoveNextItemInternal, target);
            else
                return getMoveNextItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getMoveNextItemCallback = GetMoveNextItem;
        public static IAsyncResult BeginGetMoveNextItem(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getMoveNextItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetMoveNextItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetMoveNextItem(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetMoveNextItem(IAsyncResult result)
        {
            return getMoveNextItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetMoveNextItemAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetMoveNextItem,
                EndGetMoveNextItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setMoveNextItemInternal = (x, v) => x.MoveNextItem = v;
        public static void SetMoveNextItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMoveNextItemInternal, target, value);
            else
                setMoveNextItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setMoveNextItemCallback = SetMoveNextItem;
        public static IAsyncResult BeginSetMoveNextItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value, AsyncCallback callback, object state)
        {
            return setMoveNextItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMoveNextItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetMoveNextItem(result);
        }
        public static void EndSetMoveNextItem(IAsyncResult result)
        {
            setMoveNextItemCallback.EndInvoke(result);
        }
        public static Task SetMoveNextItemAsync(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem>(
                BeginSetMoveNextItem,
                EndSetMoveNextItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getMoveLastItemInternal = (x) => x.MoveLastItem;
        public static System.Windows.Forms.ToolStripItem GetMoveLastItem(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)target.Invoke(getMoveLastItemInternal, target);
            else
                return getMoveLastItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getMoveLastItemCallback = GetMoveLastItem;
        public static IAsyncResult BeginGetMoveLastItem(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getMoveLastItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetMoveLastItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetMoveLastItem(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetMoveLastItem(IAsyncResult result)
        {
            return getMoveLastItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetMoveLastItemAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetMoveLastItem,
                EndGetMoveLastItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setMoveLastItemInternal = (x, v) => x.MoveLastItem = v;
        public static void SetMoveLastItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMoveLastItemInternal, target, value);
            else
                setMoveLastItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setMoveLastItemCallback = SetMoveLastItem;
        public static IAsyncResult BeginSetMoveLastItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value, AsyncCallback callback, object state)
        {
            return setMoveLastItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMoveLastItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetMoveLastItem(result);
        }
        public static void EndSetMoveLastItem(IAsyncResult result)
        {
            setMoveLastItemCallback.EndInvoke(result);
        }
        public static Task SetMoveLastItemAsync(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem>(
                BeginSetMoveLastItem,
                EndSetMoveLastItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getAddNewItemInternal = (x) => x.AddNewItem;
        public static System.Windows.Forms.ToolStripItem GetAddNewItem(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)target.Invoke(getAddNewItemInternal, target);
            else
                return getAddNewItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getAddNewItemCallback = GetAddNewItem;
        public static IAsyncResult BeginGetAddNewItem(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getAddNewItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetAddNewItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetAddNewItem(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetAddNewItem(IAsyncResult result)
        {
            return getAddNewItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetAddNewItemAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetAddNewItem,
                EndGetAddNewItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setAddNewItemInternal = (x, v) => x.AddNewItem = v;
        public static void SetAddNewItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAddNewItemInternal, target, value);
            else
                setAddNewItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setAddNewItemCallback = SetAddNewItem;
        public static IAsyncResult BeginSetAddNewItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value, AsyncCallback callback, object state)
        {
            return setAddNewItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAddNewItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetAddNewItem(result);
        }
        public static void EndSetAddNewItem(IAsyncResult result)
        {
            setAddNewItemCallback.EndInvoke(result);
        }
        public static Task SetAddNewItemAsync(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem>(
                BeginSetAddNewItem,
                EndSetAddNewItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getDeleteItemInternal = (x) => x.DeleteItem;
        public static System.Windows.Forms.ToolStripItem GetDeleteItem(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)target.Invoke(getDeleteItemInternal, target);
            else
                return getDeleteItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getDeleteItemCallback = GetDeleteItem;
        public static IAsyncResult BeginGetDeleteItem(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getDeleteItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetDeleteItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetDeleteItem(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetDeleteItem(IAsyncResult result)
        {
            return getDeleteItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetDeleteItemAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetDeleteItem,
                EndGetDeleteItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setDeleteItemInternal = (x, v) => x.DeleteItem = v;
        public static void SetDeleteItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDeleteItemInternal, target, value);
            else
                setDeleteItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setDeleteItemCallback = SetDeleteItem;
        public static IAsyncResult BeginSetDeleteItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value, AsyncCallback callback, object state)
        {
            return setDeleteItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDeleteItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetDeleteItem(result);
        }
        public static void EndSetDeleteItem(IAsyncResult result)
        {
            setDeleteItemCallback.EndInvoke(result);
        }
        public static Task SetDeleteItemAsync(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem>(
                BeginSetDeleteItem,
                EndSetDeleteItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getPositionItemInternal = (x) => x.PositionItem;
        public static System.Windows.Forms.ToolStripItem GetPositionItem(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)target.Invoke(getPositionItemInternal, target);
            else
                return getPositionItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getPositionItemCallback = GetPositionItem;
        public static IAsyncResult BeginGetPositionItem(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getPositionItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetPositionItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetPositionItem(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetPositionItem(IAsyncResult result)
        {
            return getPositionItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetPositionItemAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetPositionItem,
                EndGetPositionItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setPositionItemInternal = (x, v) => x.PositionItem = v;
        public static void SetPositionItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPositionItemInternal, target, value);
            else
                setPositionItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setPositionItemCallback = SetPositionItem;
        public static IAsyncResult BeginSetPositionItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value, AsyncCallback callback, object state)
        {
            return setPositionItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPositionItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetPositionItem(result);
        }
        public static void EndSetPositionItem(IAsyncResult result)
        {
            setPositionItemCallback.EndInvoke(result);
        }
        public static Task SetPositionItemAsync(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem>(
                BeginSetPositionItem,
                EndSetPositionItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getCountItemInternal = (x) => x.CountItem;
        public static System.Windows.Forms.ToolStripItem GetCountItem(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)target.Invoke(getCountItemInternal, target);
            else
                return getCountItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> getCountItemCallback = GetCountItem;
        public static IAsyncResult BeginGetCountItem(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getCountItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetCountItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetCountItem(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetCountItem(IAsyncResult result)
        {
            return getCountItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetCountItemAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetCountItem,
                EndGetCountItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setCountItemInternal = (x, v) => x.CountItem = v;
        public static void SetCountItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCountItemInternal, target, value);
            else
                setCountItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem> setCountItemCallback = SetCountItem;
        public static IAsyncResult BeginSetCountItem(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value, AsyncCallback callback, object state)
        {
            return setCountItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCountItem(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetCountItem(result);
        }
        public static void EndSetCountItem(IAsyncResult result)
        {
            setCountItemCallback.EndInvoke(result);
        }
        public static Task SetCountItemAsync(this System.Windows.Forms.BindingNavigator target, System.Windows.Forms.ToolStripItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.Windows.Forms.ToolStripItem>(
                BeginSetCountItem,
                EndSetCountItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.BindingNavigator, System.String> getCountItemFormatInternal = (x) => x.CountItemFormat;
        public static System.String GetCountItemFormat(this System.Windows.Forms.BindingNavigator target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getCountItemFormatInternal, target);
            else
                return getCountItemFormatInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.BindingNavigator, System.String> getCountItemFormatCallback = GetCountItemFormat;
        public static IAsyncResult BeginGetCountItemFormat(this System.Windows.Forms.BindingNavigator target, AsyncCallback callback, object state)
        {
            return getCountItemFormatCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetCountItemFormat(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            return EndGetCountItemFormat(result);
        }
        public static System.String EndGetCountItemFormat(IAsyncResult result)
        {
            return getCountItemFormatCallback.EndInvoke(result);
        }
        public static Task<System.String> GetCountItemFormatAsync(this System.Windows.Forms.BindingNavigator target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.BindingNavigator>(
                BeginGetCountItemFormat,
                EndGetCountItemFormat,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.BindingNavigator, System.String> setCountItemFormatInternal = (x, v) => x.CountItemFormat = v;
        public static void SetCountItemFormat(this System.Windows.Forms.BindingNavigator target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCountItemFormatInternal, target, value);
            else
                setCountItemFormatInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.BindingNavigator, System.String> setCountItemFormatCallback = SetCountItemFormat;
        public static IAsyncResult BeginSetCountItemFormat(this System.Windows.Forms.BindingNavigator target, System.String value, AsyncCallback callback, object state)
        {
            return setCountItemFormatCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCountItemFormat(this System.Windows.Forms.BindingNavigator target, IAsyncResult result)
        {
            EndSetCountItemFormat(result);
        }
        public static void EndSetCountItemFormat(IAsyncResult result)
        {
            setCountItemFormatCallback.EndInvoke(result);
        }
        public static Task SetCountItemFormatAsync(this System.Windows.Forms.BindingNavigator target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.BindingNavigator, System.String>(
                BeginSetCountItemFormat,
                EndSetCountItemFormat,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.ToolStripDropDown> close2Internal = (c) => c.Close();
        public static void Close(this System.Windows.Forms.ToolStripDropDown __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(close2Internal, __control__);
            else
                close2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown> close2Callback = Close;
        public static IAsyncResult BeginClose2(this System.Windows.Forms.ToolStripDropDown __control__, AsyncCallback callback, object state)
        {
            return close2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndClose2(this System.Windows.Forms.ToolStripDropDown __control__, IAsyncResult result)
        {
            EndClose2(result);
        }
        public static void EndClose2(IAsyncResult result)
        {
            close2Callback.EndInvoke(result);
        }
        public static Task CloseAsync(this System.Windows.Forms.ToolStripDropDown __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown>(
                (Func<System.Windows.Forms.ToolStripDropDown, AsyncCallback, object, IAsyncResult>)BeginClose2,
                (Action<IAsyncResult>)EndClose2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.ToolStripDropDownCloseReason> close3Internal = (c, reason) => c.Close(reason);
        public static void Close(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.ToolStripDropDownCloseReason reason)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(close3Internal, __control__, reason);
            else
                close3Internal.Invoke(__control__, reason);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.ToolStripDropDownCloseReason> close3Callback = Close;
        public static IAsyncResult BeginClose3(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.ToolStripDropDownCloseReason reason, AsyncCallback callback, object state)
        {
            return close3Callback.BeginInvoke(__control__, reason, callback, state);
        }
        public static void EndClose3(this System.Windows.Forms.ToolStripDropDown __control__, IAsyncResult result)
        {
            EndClose3(result);
        }
        public static void EndClose3(IAsyncResult result)
        {
            close3Callback.EndInvoke(result);
        }
        public static Task CloseAsync(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.ToolStripDropDownCloseReason reason)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.ToolStripDropDownCloseReason>(
                (Func<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.ToolStripDropDownCloseReason, AsyncCallback, object, IAsyncResult>)BeginClose3,
                (Action<IAsyncResult>)EndClose3,
                __control__, reason, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown> show3Internal = (c) => c.Show();
        public static void Show(this System.Windows.Forms.ToolStripDropDown __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(show3Internal, __control__);
            else
                show3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown> show3Callback = Show;
        public static IAsyncResult BeginShow3(this System.Windows.Forms.ToolStripDropDown __control__, AsyncCallback callback, object state)
        {
            return show3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShow3(this System.Windows.Forms.ToolStripDropDown __control__, IAsyncResult result)
        {
            EndShow3(result);
        }
        public static void EndShow3(IAsyncResult result)
        {
            show3Callback.EndInvoke(result);
        }
        public static Task ShowAsync(this System.Windows.Forms.ToolStripDropDown __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown>(
                (Func<System.Windows.Forms.ToolStripDropDown, AsyncCallback, object, IAsyncResult>)BeginShow3,
                (Action<IAsyncResult>)EndShow3,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.Control, System.Drawing.Point> show4Internal = (c, control, position) => c.Show(control, position);
        public static void Show(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.Control control, System.Drawing.Point position)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(show4Internal, __control__, control, position);
            else
                show4Internal.Invoke(__control__, control, position);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.Control, System.Drawing.Point> show4Callback = Show;
        public static IAsyncResult BeginShow4(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.Control control, System.Drawing.Point position, AsyncCallback callback, object state)
        {
            return show4Callback.BeginInvoke(__control__, control, position, callback, state);
        }
        public static void EndShow4(this System.Windows.Forms.ToolStripDropDown __control__, IAsyncResult result)
        {
            EndShow4(result);
        }
        public static void EndShow4(IAsyncResult result)
        {
            show4Callback.EndInvoke(result);
        }
        public static Task ShowAsync(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.Control control, System.Drawing.Point position)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.Control, System.Drawing.Point>(
                (Func<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.Control, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginShow4,
                (Action<IAsyncResult>)EndShow4,
                __control__, control, position, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.Control, System.Drawing.Point, System.Windows.Forms.ToolStripDropDownDirection> show5Internal = (c, control, position, direction) => c.Show(control, position, direction);
        public static void Show(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.Control control, System.Drawing.Point position, System.Windows.Forms.ToolStripDropDownDirection direction)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(show5Internal, __control__, control, position, direction);
            else
                show5Internal.Invoke(__control__, control, position, direction);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.Control, System.Drawing.Point, System.Windows.Forms.ToolStripDropDownDirection> show5Callback = Show;
        public static IAsyncResult BeginShow5(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.Control control, System.Drawing.Point position, System.Windows.Forms.ToolStripDropDownDirection direction, AsyncCallback callback, object state)
        {
            return show5Callback.BeginInvoke(__control__, control, position, direction, callback, state);
        }
        public static void EndShow5(this System.Windows.Forms.ToolStripDropDown __control__, IAsyncResult result)
        {
            EndShow5(result);
        }
        public static void EndShow5(IAsyncResult result)
        {
            show5Callback.EndInvoke(result);
        }
        public static Task ShowAsync(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.Control control, System.Drawing.Point position, System.Windows.Forms.ToolStripDropDownDirection direction)
        {
            return Task.Factory.FromAsync(
                BeginShow5(__control__, control, position, direction, null, null),
                (Action<IAsyncResult>)EndShow5);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.Control, System.Int32, System.Int32> show6Internal = (c, control, x, y) => c.Show(control, x, y);
        public static void Show(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.Control control, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(show6Internal, __control__, control, x, y);
            else
                show6Internal.Invoke(__control__, control, x, y);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.Control, System.Int32, System.Int32> show6Callback = Show;
        public static IAsyncResult BeginShow6(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.Control control, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return show6Callback.BeginInvoke(__control__, control, x, y, callback, state);
        }
        public static void EndShow6(this System.Windows.Forms.ToolStripDropDown __control__, IAsyncResult result)
        {
            EndShow6(result);
        }
        public static void EndShow6(IAsyncResult result)
        {
            show6Callback.EndInvoke(result);
        }
        public static Task ShowAsync(this System.Windows.Forms.ToolStripDropDown __control__, System.Windows.Forms.Control control, System.Int32 x, System.Int32 y)
        {
            return Task.Factory.FromAsync(
                BeginShow6(__control__, control, x, y, null, null),
                (Action<IAsyncResult>)EndShow6);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Drawing.Point> show7Internal = (c, screenLocation) => c.Show(screenLocation);
        public static void Show(this System.Windows.Forms.ToolStripDropDown __control__, System.Drawing.Point screenLocation)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(show7Internal, __control__, screenLocation);
            else
                show7Internal.Invoke(__control__, screenLocation);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Drawing.Point> show7Callback = Show;
        public static IAsyncResult BeginShow7(this System.Windows.Forms.ToolStripDropDown __control__, System.Drawing.Point screenLocation, AsyncCallback callback, object state)
        {
            return show7Callback.BeginInvoke(__control__, screenLocation, callback, state);
        }
        public static void EndShow7(this System.Windows.Forms.ToolStripDropDown __control__, IAsyncResult result)
        {
            EndShow7(result);
        }
        public static void EndShow7(IAsyncResult result)
        {
            show7Callback.EndInvoke(result);
        }
        public static Task ShowAsync(this System.Windows.Forms.ToolStripDropDown __control__, System.Drawing.Point screenLocation)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown, System.Drawing.Point>(
                (Func<System.Windows.Forms.ToolStripDropDown, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginShow7,
                (Action<IAsyncResult>)EndShow7,
                __control__, screenLocation, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Drawing.Point, System.Windows.Forms.ToolStripDropDownDirection> show8Internal = (c, position, direction) => c.Show(position, direction);
        public static void Show(this System.Windows.Forms.ToolStripDropDown __control__, System.Drawing.Point position, System.Windows.Forms.ToolStripDropDownDirection direction)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(show8Internal, __control__, position, direction);
            else
                show8Internal.Invoke(__control__, position, direction);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Drawing.Point, System.Windows.Forms.ToolStripDropDownDirection> show8Callback = Show;
        public static IAsyncResult BeginShow8(this System.Windows.Forms.ToolStripDropDown __control__, System.Drawing.Point position, System.Windows.Forms.ToolStripDropDownDirection direction, AsyncCallback callback, object state)
        {
            return show8Callback.BeginInvoke(__control__, position, direction, callback, state);
        }
        public static void EndShow8(this System.Windows.Forms.ToolStripDropDown __control__, IAsyncResult result)
        {
            EndShow8(result);
        }
        public static void EndShow8(IAsyncResult result)
        {
            show8Callback.EndInvoke(result);
        }
        public static Task ShowAsync(this System.Windows.Forms.ToolStripDropDown __control__, System.Drawing.Point position, System.Windows.Forms.ToolStripDropDownDirection direction)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown, System.Drawing.Point, System.Windows.Forms.ToolStripDropDownDirection>(
                (Func<System.Windows.Forms.ToolStripDropDown, System.Drawing.Point, System.Windows.Forms.ToolStripDropDownDirection, AsyncCallback, object, IAsyncResult>)BeginShow8,
                (Action<IAsyncResult>)EndShow8,
                __control__, position, direction, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Int32, System.Int32> show9Internal = (c, x, y) => c.Show(x, y);
        public static void Show(this System.Windows.Forms.ToolStripDropDown __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(show9Internal, __control__, x, y);
            else
                show9Internal.Invoke(__control__, x, y);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Int32, System.Int32> show9Callback = Show;
        public static IAsyncResult BeginShow9(this System.Windows.Forms.ToolStripDropDown __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return show9Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static void EndShow9(this System.Windows.Forms.ToolStripDropDown __control__, IAsyncResult result)
        {
            EndShow9(result);
        }
        public static void EndShow9(IAsyncResult result)
        {
            show9Callback.EndInvoke(result);
        }
        public static Task ShowAsync(this System.Windows.Forms.ToolStripDropDown __control__, System.Int32 x, System.Int32 y)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.ToolStripDropDown, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginShow9,
                (Action<IAsyncResult>)EndShow9,
                __control__, x, y, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ToolStripDropDown, System.Boolean> getAutoCloseInternal = (x) => x.AutoClose;
        public static System.Boolean GetAutoClose(this System.Windows.Forms.ToolStripDropDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoCloseInternal, target);
            else
                return getAutoCloseInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripDropDown, System.Boolean> getAutoCloseCallback = GetAutoClose;
        public static IAsyncResult BeginGetAutoClose(this System.Windows.Forms.ToolStripDropDown target, AsyncCallback callback, object state)
        {
            return getAutoCloseCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoClose(this System.Windows.Forms.ToolStripDropDown target, IAsyncResult result)
        {
            return EndGetAutoClose(result);
        }
        public static System.Boolean EndGetAutoClose(IAsyncResult result)
        {
            return getAutoCloseCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoCloseAsync(this System.Windows.Forms.ToolStripDropDown target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown>(
                BeginGetAutoClose,
                EndGetAutoClose,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Boolean> setAutoCloseInternal = (x, v) => x.AutoClose = v;
        public static void SetAutoClose(this System.Windows.Forms.ToolStripDropDown target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoCloseInternal, target, value);
            else
                setAutoCloseInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Boolean> setAutoCloseCallback = SetAutoClose;
        public static IAsyncResult BeginSetAutoClose(this System.Windows.Forms.ToolStripDropDown target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoCloseCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoClose(this System.Windows.Forms.ToolStripDropDown target, IAsyncResult result)
        {
            EndSetAutoClose(result);
        }
        public static void EndSetAutoClose(IAsyncResult result)
        {
            setAutoCloseCallback.EndInvoke(result);
        }
        public static Task SetAutoCloseAsync(this System.Windows.Forms.ToolStripDropDown target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown, System.Boolean>(
                BeginSetAutoClose,
                EndSetAutoClose,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripDropDown, System.Boolean> getDropShadowEnabledInternal = (x) => x.DropShadowEnabled;
        public static System.Boolean GetDropShadowEnabled(this System.Windows.Forms.ToolStripDropDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getDropShadowEnabledInternal, target);
            else
                return getDropShadowEnabledInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripDropDown, System.Boolean> getDropShadowEnabledCallback = GetDropShadowEnabled;
        public static IAsyncResult BeginGetDropShadowEnabled(this System.Windows.Forms.ToolStripDropDown target, AsyncCallback callback, object state)
        {
            return getDropShadowEnabledCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetDropShadowEnabled(this System.Windows.Forms.ToolStripDropDown target, IAsyncResult result)
        {
            return EndGetDropShadowEnabled(result);
        }
        public static System.Boolean EndGetDropShadowEnabled(IAsyncResult result)
        {
            return getDropShadowEnabledCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetDropShadowEnabledAsync(this System.Windows.Forms.ToolStripDropDown target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown>(
                BeginGetDropShadowEnabled,
                EndGetDropShadowEnabled,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Boolean> setDropShadowEnabledInternal = (x, v) => x.DropShadowEnabled = v;
        public static void SetDropShadowEnabled(this System.Windows.Forms.ToolStripDropDown target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDropShadowEnabledInternal, target, value);
            else
                setDropShadowEnabledInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Boolean> setDropShadowEnabledCallback = SetDropShadowEnabled;
        public static IAsyncResult BeginSetDropShadowEnabled(this System.Windows.Forms.ToolStripDropDown target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setDropShadowEnabledCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDropShadowEnabled(this System.Windows.Forms.ToolStripDropDown target, IAsyncResult result)
        {
            EndSetDropShadowEnabled(result);
        }
        public static void EndSetDropShadowEnabled(IAsyncResult result)
        {
            setDropShadowEnabledCallback.EndInvoke(result);
        }
        public static Task SetDropShadowEnabledAsync(this System.Windows.Forms.ToolStripDropDown target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown, System.Boolean>(
                BeginSetDropShadowEnabled,
                EndSetDropShadowEnabled,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripDropDown, System.Boolean> getIsAutoGeneratedInternal = (x) => x.IsAutoGenerated;
        public static System.Boolean GetIsAutoGenerated(this System.Windows.Forms.ToolStripDropDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsAutoGeneratedInternal, target);
            else
                return getIsAutoGeneratedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripDropDown, System.Boolean> getIsAutoGeneratedCallback = GetIsAutoGenerated;
        public static IAsyncResult BeginGetIsAutoGenerated(this System.Windows.Forms.ToolStripDropDown target, AsyncCallback callback, object state)
        {
            return getIsAutoGeneratedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsAutoGenerated(this System.Windows.Forms.ToolStripDropDown target, IAsyncResult result)
        {
            return EndGetIsAutoGenerated(result);
        }
        public static System.Boolean EndGetIsAutoGenerated(IAsyncResult result)
        {
            return getIsAutoGeneratedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsAutoGeneratedAsync(this System.Windows.Forms.ToolStripDropDown target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown>(
                BeginGetIsAutoGenerated,
                EndGetIsAutoGenerated,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.ToolStripItem> getOwnerItemInternal = (x) => x.OwnerItem;
        public static System.Windows.Forms.ToolStripItem GetOwnerItem(this System.Windows.Forms.ToolStripDropDown target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripItem)target.Invoke(getOwnerItemInternal, target);
            else
                return getOwnerItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.ToolStripItem> getOwnerItemCallback = GetOwnerItem;
        public static IAsyncResult BeginGetOwnerItem(this System.Windows.Forms.ToolStripDropDown target, AsyncCallback callback, object state)
        {
            return getOwnerItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripItem EndGetOwnerItem(this System.Windows.Forms.ToolStripDropDown target, IAsyncResult result)
        {
            return EndGetOwnerItem(result);
        }
        public static System.Windows.Forms.ToolStripItem EndGetOwnerItem(IAsyncResult result)
        {
            return getOwnerItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripItem> GetOwnerItemAsync(this System.Windows.Forms.ToolStripDropDown target)
        {
            return Task<System.Windows.Forms.ToolStripItem>.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown>(
                BeginGetOwnerItem,
                EndGetOwnerItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.ToolStripItem> setOwnerItemInternal = (x, v) => x.OwnerItem = v;
        public static void SetOwnerItem(this System.Windows.Forms.ToolStripDropDown target, System.Windows.Forms.ToolStripItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setOwnerItemInternal, target, value);
            else
                setOwnerItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.ToolStripItem> setOwnerItemCallback = SetOwnerItem;
        public static IAsyncResult BeginSetOwnerItem(this System.Windows.Forms.ToolStripDropDown target, System.Windows.Forms.ToolStripItem value, AsyncCallback callback, object state)
        {
            return setOwnerItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetOwnerItem(this System.Windows.Forms.ToolStripDropDown target, IAsyncResult result)
        {
            EndSetOwnerItem(result);
        }
        public static void EndSetOwnerItem(IAsyncResult result)
        {
            setOwnerItemCallback.EndInvoke(result);
        }
        public static Task SetOwnerItemAsync(this System.Windows.Forms.ToolStripDropDown target, System.Windows.Forms.ToolStripItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDown, System.Windows.Forms.ToolStripItem>(
                BeginSetOwnerItem,
                EndSetOwnerItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean> getShowImageMarginInternal = (x) => x.ShowImageMargin;
        public static System.Boolean GetShowImageMargin(this System.Windows.Forms.ToolStripDropDownMenu target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowImageMarginInternal, target);
            else
                return getShowImageMarginInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean> getShowImageMarginCallback = GetShowImageMargin;
        public static IAsyncResult BeginGetShowImageMargin(this System.Windows.Forms.ToolStripDropDownMenu target, AsyncCallback callback, object state)
        {
            return getShowImageMarginCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowImageMargin(this System.Windows.Forms.ToolStripDropDownMenu target, IAsyncResult result)
        {
            return EndGetShowImageMargin(result);
        }
        public static System.Boolean EndGetShowImageMargin(IAsyncResult result)
        {
            return getShowImageMarginCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowImageMarginAsync(this System.Windows.Forms.ToolStripDropDownMenu target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripDropDownMenu>(
                BeginGetShowImageMargin,
                EndGetShowImageMargin,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean> setShowImageMarginInternal = (x, v) => x.ShowImageMargin = v;
        public static void SetShowImageMargin(this System.Windows.Forms.ToolStripDropDownMenu target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowImageMarginInternal, target, value);
            else
                setShowImageMarginInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean> setShowImageMarginCallback = SetShowImageMargin;
        public static IAsyncResult BeginSetShowImageMargin(this System.Windows.Forms.ToolStripDropDownMenu target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowImageMarginCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowImageMargin(this System.Windows.Forms.ToolStripDropDownMenu target, IAsyncResult result)
        {
            EndSetShowImageMargin(result);
        }
        public static void EndSetShowImageMargin(IAsyncResult result)
        {
            setShowImageMarginCallback.EndInvoke(result);
        }
        public static Task SetShowImageMarginAsync(this System.Windows.Forms.ToolStripDropDownMenu target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean>(
                BeginSetShowImageMargin,
                EndSetShowImageMargin,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean> getShowCheckMarginInternal = (x) => x.ShowCheckMargin;
        public static System.Boolean GetShowCheckMargin(this System.Windows.Forms.ToolStripDropDownMenu target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowCheckMarginInternal, target);
            else
                return getShowCheckMarginInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean> getShowCheckMarginCallback = GetShowCheckMargin;
        public static IAsyncResult BeginGetShowCheckMargin(this System.Windows.Forms.ToolStripDropDownMenu target, AsyncCallback callback, object state)
        {
            return getShowCheckMarginCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowCheckMargin(this System.Windows.Forms.ToolStripDropDownMenu target, IAsyncResult result)
        {
            return EndGetShowCheckMargin(result);
        }
        public static System.Boolean EndGetShowCheckMargin(IAsyncResult result)
        {
            return getShowCheckMarginCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowCheckMarginAsync(this System.Windows.Forms.ToolStripDropDownMenu target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolStripDropDownMenu>(
                BeginGetShowCheckMargin,
                EndGetShowCheckMargin,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean> setShowCheckMarginInternal = (x, v) => x.ShowCheckMargin = v;
        public static void SetShowCheckMargin(this System.Windows.Forms.ToolStripDropDownMenu target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowCheckMarginInternal, target, value);
            else
                setShowCheckMarginInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean> setShowCheckMarginCallback = SetShowCheckMargin;
        public static IAsyncResult BeginSetShowCheckMargin(this System.Windows.Forms.ToolStripDropDownMenu target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowCheckMarginCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowCheckMargin(this System.Windows.Forms.ToolStripDropDownMenu target, IAsyncResult result)
        {
            EndSetShowCheckMargin(result);
        }
        public static void EndSetShowCheckMargin(IAsyncResult result)
        {
            setShowCheckMarginCallback.EndInvoke(result);
        }
        public static Task SetShowCheckMarginAsync(this System.Windows.Forms.ToolStripDropDownMenu target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolStripDropDownMenu, System.Boolean>(
                BeginSetShowCheckMargin,
                EndSetShowCheckMargin,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ContextMenuStrip, System.Windows.Forms.Control> getSourceControlInternal = (x) => x.SourceControl;
        public static System.Windows.Forms.Control GetSourceControl(this System.Windows.Forms.ContextMenuStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Control)target.Invoke(getSourceControlInternal, target);
            else
                return getSourceControlInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ContextMenuStrip, System.Windows.Forms.Control> getSourceControlCallback = GetSourceControl;
        public static IAsyncResult BeginGetSourceControl(this System.Windows.Forms.ContextMenuStrip target, AsyncCallback callback, object state)
        {
            return getSourceControlCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Control EndGetSourceControl(this System.Windows.Forms.ContextMenuStrip target, IAsyncResult result)
        {
            return EndGetSourceControl(result);
        }
        public static System.Windows.Forms.Control EndGetSourceControl(IAsyncResult result)
        {
            return getSourceControlCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetSourceControlAsync(this System.Windows.Forms.ContextMenuStrip target)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.ContextMenuStrip>(
                BeginGetSourceControl,
                EndGetSourceControl,
                target, null);
        }


        private static readonly Func<System.Windows.Forms.ToolStripOverflow, System.Drawing.Size, System.Drawing.Size> getPreferredSize2Internal = (c, constrainingSize) => c.GetPreferredSize(constrainingSize);
        public static System.Drawing.Size GetPreferredSize(this System.Windows.Forms.ToolStripOverflow __control__, System.Drawing.Size constrainingSize)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Size)__control__.Invoke(getPreferredSize2Internal, __control__, constrainingSize);
            else
                return getPreferredSize2Internal.Invoke(__control__, constrainingSize);
        }
        private static readonly Func<System.Windows.Forms.ToolStripOverflow, System.Drawing.Size, System.Drawing.Size> getPreferredSize2Callback = GetPreferredSize;
        public static IAsyncResult BeginGetPreferredSize2(this System.Windows.Forms.ToolStripOverflow __control__, System.Drawing.Size constrainingSize, AsyncCallback callback, object state)
        {
            return getPreferredSize2Callback.BeginInvoke(__control__, constrainingSize, callback, state);
        }
        public static System.Drawing.Size EndGetPreferredSize2(this System.Windows.Forms.ToolStripOverflow __control__, IAsyncResult result)
        {
            return EndGetPreferredSize2(result);
        }
        public static System.Drawing.Size EndGetPreferredSize2(IAsyncResult result)
        {
            return getPreferredSize2Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetPreferredSizeAsync(this System.Windows.Forms.ToolStripOverflow __control__, System.Drawing.Size constrainingSize)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.ToolStripOverflow, System.Drawing.Size>(
                (Func<System.Windows.Forms.ToolStripOverflow, System.Drawing.Size, AsyncCallback, object, IAsyncResult>)BeginGetPreferredSize2,
                (Func<IAsyncResult, System.Drawing.Size>)EndGetPreferredSize2,
                __control__, constrainingSize, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.MenuStrip, System.Windows.Forms.ToolStripMenuItem> getMdiWindowListItemInternal = (x) => x.MdiWindowListItem;
        public static System.Windows.Forms.ToolStripMenuItem GetMdiWindowListItem(this System.Windows.Forms.MenuStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolStripMenuItem)target.Invoke(getMdiWindowListItemInternal, target);
            else
                return getMdiWindowListItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MenuStrip, System.Windows.Forms.ToolStripMenuItem> getMdiWindowListItemCallback = GetMdiWindowListItem;
        public static IAsyncResult BeginGetMdiWindowListItem(this System.Windows.Forms.MenuStrip target, AsyncCallback callback, object state)
        {
            return getMdiWindowListItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolStripMenuItem EndGetMdiWindowListItem(this System.Windows.Forms.MenuStrip target, IAsyncResult result)
        {
            return EndGetMdiWindowListItem(result);
        }
        public static System.Windows.Forms.ToolStripMenuItem EndGetMdiWindowListItem(IAsyncResult result)
        {
            return getMdiWindowListItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolStripMenuItem> GetMdiWindowListItemAsync(this System.Windows.Forms.MenuStrip target)
        {
            return Task<System.Windows.Forms.ToolStripMenuItem>.Factory.FromAsync<System.Windows.Forms.MenuStrip>(
                BeginGetMdiWindowListItem,
                EndGetMdiWindowListItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MenuStrip, System.Windows.Forms.ToolStripMenuItem> setMdiWindowListItemInternal = (x, v) => x.MdiWindowListItem = v;
        public static void SetMdiWindowListItem(this System.Windows.Forms.MenuStrip target, System.Windows.Forms.ToolStripMenuItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMdiWindowListItemInternal, target, value);
            else
                setMdiWindowListItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MenuStrip, System.Windows.Forms.ToolStripMenuItem> setMdiWindowListItemCallback = SetMdiWindowListItem;
        public static IAsyncResult BeginSetMdiWindowListItem(this System.Windows.Forms.MenuStrip target, System.Windows.Forms.ToolStripMenuItem value, AsyncCallback callback, object state)
        {
            return setMdiWindowListItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMdiWindowListItem(this System.Windows.Forms.MenuStrip target, IAsyncResult result)
        {
            EndSetMdiWindowListItem(result);
        }
        public static void EndSetMdiWindowListItem(IAsyncResult result)
        {
            setMdiWindowListItemCallback.EndInvoke(result);
        }
        public static Task SetMdiWindowListItemAsync(this System.Windows.Forms.MenuStrip target, System.Windows.Forms.ToolStripMenuItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MenuStrip, System.Windows.Forms.ToolStripMenuItem>(
                BeginSetMdiWindowListItem,
                EndSetMdiWindowListItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.StatusStrip, System.Boolean> getSizingGripInternal = (x) => x.SizingGrip;
        public static System.Boolean GetSizingGrip(this System.Windows.Forms.StatusStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getSizingGripInternal, target);
            else
                return getSizingGripInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.StatusStrip, System.Boolean> getSizingGripCallback = GetSizingGrip;
        public static IAsyncResult BeginGetSizingGrip(this System.Windows.Forms.StatusStrip target, AsyncCallback callback, object state)
        {
            return getSizingGripCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetSizingGrip(this System.Windows.Forms.StatusStrip target, IAsyncResult result)
        {
            return EndGetSizingGrip(result);
        }
        public static System.Boolean EndGetSizingGrip(IAsyncResult result)
        {
            return getSizingGripCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetSizingGripAsync(this System.Windows.Forms.StatusStrip target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.StatusStrip>(
                BeginGetSizingGrip,
                EndGetSizingGrip,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.StatusStrip, System.Boolean> setSizingGripInternal = (x, v) => x.SizingGrip = v;
        public static void SetSizingGrip(this System.Windows.Forms.StatusStrip target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSizingGripInternal, target, value);
            else
                setSizingGripInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.StatusStrip, System.Boolean> setSizingGripCallback = SetSizingGrip;
        public static IAsyncResult BeginSetSizingGrip(this System.Windows.Forms.StatusStrip target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setSizingGripCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSizingGrip(this System.Windows.Forms.StatusStrip target, IAsyncResult result)
        {
            EndSetSizingGrip(result);
        }
        public static void EndSetSizingGrip(IAsyncResult result)
        {
            setSizingGripCallback.EndInvoke(result);
        }
        public static Task SetSizingGripAsync(this System.Windows.Forms.StatusStrip target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.StatusStrip, System.Boolean>(
                BeginSetSizingGrip,
                EndSetSizingGrip,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.StatusStrip, System.Drawing.Rectangle> getSizeGripBoundsInternal = (x) => x.SizeGripBounds;
        public static System.Drawing.Rectangle GetSizeGripBounds(this System.Windows.Forms.StatusStrip target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Rectangle)target.Invoke(getSizeGripBoundsInternal, target);
            else
                return getSizeGripBoundsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.StatusStrip, System.Drawing.Rectangle> getSizeGripBoundsCallback = GetSizeGripBounds;
        public static IAsyncResult BeginGetSizeGripBounds(this System.Windows.Forms.StatusStrip target, AsyncCallback callback, object state)
        {
            return getSizeGripBoundsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Rectangle EndGetSizeGripBounds(this System.Windows.Forms.StatusStrip target, IAsyncResult result)
        {
            return EndGetSizeGripBounds(result);
        }
        public static System.Drawing.Rectangle EndGetSizeGripBounds(IAsyncResult result)
        {
            return getSizeGripBoundsCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetSizeGripBoundsAsync(this System.Windows.Forms.StatusStrip target)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.StatusStrip>(
                BeginGetSizeGripBounds,
                EndGetSizeGripBounds,
                target, null);
        }


        private static readonly Func<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.Control, System.Boolean> getFlowBreak1Internal = (c, control) => c.GetFlowBreak(control);
        public static System.Boolean GetFlowBreak(this System.Windows.Forms.FlowLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(getFlowBreak1Internal, __control__, control);
            else
                return getFlowBreak1Internal.Invoke(__control__, control);
        }
        private static readonly Func<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.Control, System.Boolean> getFlowBreak1Callback = GetFlowBreak;
        public static IAsyncResult BeginGetFlowBreak1(this System.Windows.Forms.FlowLayoutPanel __control__, System.Windows.Forms.Control control, AsyncCallback callback, object state)
        {
            return getFlowBreak1Callback.BeginInvoke(__control__, control, callback, state);
        }
        public static System.Boolean EndGetFlowBreak1(this System.Windows.Forms.FlowLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetFlowBreak1(result);
        }
        public static System.Boolean EndGetFlowBreak1(IAsyncResult result)
        {
            return getFlowBreak1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetFlowBreakAsync(this System.Windows.Forms.FlowLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginGetFlowBreak1,
                (Func<IAsyncResult, System.Boolean>)EndGetFlowBreak1,
                __control__, control, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.Control, System.Boolean> setFlowBreak1Internal = (c, control, value) => c.SetFlowBreak(control, value);
        public static void SetFlowBreak(this System.Windows.Forms.FlowLayoutPanel __control__, System.Windows.Forms.Control control, System.Boolean value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setFlowBreak1Internal, __control__, control, value);
            else
                setFlowBreak1Internal.Invoke(__control__, control, value);
        }
        private static readonly Action<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.Control, System.Boolean> setFlowBreak1Callback = SetFlowBreak;
        public static IAsyncResult BeginSetFlowBreak1(this System.Windows.Forms.FlowLayoutPanel __control__, System.Windows.Forms.Control control, System.Boolean value, AsyncCallback callback, object state)
        {
            return setFlowBreak1Callback.BeginInvoke(__control__, control, value, callback, state);
        }
        public static void EndSetFlowBreak1(this System.Windows.Forms.FlowLayoutPanel __control__, IAsyncResult result)
        {
            EndSetFlowBreak1(result);
        }
        public static void EndSetFlowBreak1(IAsyncResult result)
        {
            setFlowBreak1Callback.EndInvoke(result);
        }
        public static Task SetFlowBreakAsync(this System.Windows.Forms.FlowLayoutPanel __control__, System.Windows.Forms.Control control, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.Control, System.Boolean>(
                (Func<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.Control, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginSetFlowBreak1,
                (Action<IAsyncResult>)EndSetFlowBreak1,
                __control__, control, value, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.FlowDirection> getFlowDirectionInternal = (x) => x.FlowDirection;
        public static System.Windows.Forms.FlowDirection GetFlowDirection(this System.Windows.Forms.FlowLayoutPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.FlowDirection)target.Invoke(getFlowDirectionInternal, target);
            else
                return getFlowDirectionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.FlowDirection> getFlowDirectionCallback = GetFlowDirection;
        public static IAsyncResult BeginGetFlowDirection(this System.Windows.Forms.FlowLayoutPanel target, AsyncCallback callback, object state)
        {
            return getFlowDirectionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.FlowDirection EndGetFlowDirection(this System.Windows.Forms.FlowLayoutPanel target, IAsyncResult result)
        {
            return EndGetFlowDirection(result);
        }
        public static System.Windows.Forms.FlowDirection EndGetFlowDirection(IAsyncResult result)
        {
            return getFlowDirectionCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.FlowDirection> GetFlowDirectionAsync(this System.Windows.Forms.FlowLayoutPanel target)
        {
            return Task<System.Windows.Forms.FlowDirection>.Factory.FromAsync<System.Windows.Forms.FlowLayoutPanel>(
                BeginGetFlowDirection,
                EndGetFlowDirection,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.FlowDirection> setFlowDirectionInternal = (x, v) => x.FlowDirection = v;
        public static void SetFlowDirection(this System.Windows.Forms.FlowLayoutPanel target, System.Windows.Forms.FlowDirection value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFlowDirectionInternal, target, value);
            else
                setFlowDirectionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.FlowDirection> setFlowDirectionCallback = SetFlowDirection;
        public static IAsyncResult BeginSetFlowDirection(this System.Windows.Forms.FlowLayoutPanel target, System.Windows.Forms.FlowDirection value, AsyncCallback callback, object state)
        {
            return setFlowDirectionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFlowDirection(this System.Windows.Forms.FlowLayoutPanel target, IAsyncResult result)
        {
            EndSetFlowDirection(result);
        }
        public static void EndSetFlowDirection(IAsyncResult result)
        {
            setFlowDirectionCallback.EndInvoke(result);
        }
        public static Task SetFlowDirectionAsync(this System.Windows.Forms.FlowLayoutPanel target, System.Windows.Forms.FlowDirection value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.FlowLayoutPanel, System.Windows.Forms.FlowDirection>(
                BeginSetFlowDirection,
                EndSetFlowDirection,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.FlowLayoutPanel, System.Boolean> getWrapContentsInternal = (x) => x.WrapContents;
        public static System.Boolean GetWrapContents(this System.Windows.Forms.FlowLayoutPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getWrapContentsInternal, target);
            else
                return getWrapContentsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.FlowLayoutPanel, System.Boolean> getWrapContentsCallback = GetWrapContents;
        public static IAsyncResult BeginGetWrapContents(this System.Windows.Forms.FlowLayoutPanel target, AsyncCallback callback, object state)
        {
            return getWrapContentsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetWrapContents(this System.Windows.Forms.FlowLayoutPanel target, IAsyncResult result)
        {
            return EndGetWrapContents(result);
        }
        public static System.Boolean EndGetWrapContents(IAsyncResult result)
        {
            return getWrapContentsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetWrapContentsAsync(this System.Windows.Forms.FlowLayoutPanel target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.FlowLayoutPanel>(
                BeginGetWrapContents,
                EndGetWrapContents,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.FlowLayoutPanel, System.Boolean> setWrapContentsInternal = (x, v) => x.WrapContents = v;
        public static void SetWrapContents(this System.Windows.Forms.FlowLayoutPanel target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setWrapContentsInternal, target, value);
            else
                setWrapContentsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.FlowLayoutPanel, System.Boolean> setWrapContentsCallback = SetWrapContents;
        public static IAsyncResult BeginSetWrapContents(this System.Windows.Forms.FlowLayoutPanel target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setWrapContentsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetWrapContents(this System.Windows.Forms.FlowLayoutPanel target, IAsyncResult result)
        {
            EndSetWrapContents(result);
        }
        public static void EndSetWrapContents(IAsyncResult result)
        {
            setWrapContentsCallback.EndInvoke(result);
        }
        public static Task SetWrapContentsAsync(this System.Windows.Forms.FlowLayoutPanel target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.FlowLayoutPanel, System.Boolean>(
                BeginSetWrapContents,
                EndSetWrapContents,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> setRow1Internal = (c, control, row) => c.SetRow(control, row);
        public static void SetRow(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 row)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setRow1Internal, __control__, control, row);
            else
                setRow1Internal.Invoke(__control__, control, row);
        }
        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> setRow1Callback = SetRow;
        public static IAsyncResult BeginSetRow1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 row, AsyncCallback callback, object state)
        {
            return setRow1Callback.BeginInvoke(__control__, control, row, callback, state);
        }
        public static void EndSetRow1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            EndSetRow1(result);
        }
        public static void EndSetRow1(IAsyncResult result)
        {
            setRow1Callback.EndInvoke(result);
        }
        public static Task SetRowAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 row)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSetRow1,
                (Action<IAsyncResult>)EndSetRow1,
                __control__, control, row, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> setColumn1Internal = (c, control, column) => c.SetColumn(control, column);
        public static void SetColumn(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 column)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setColumn1Internal, __control__, control, column);
            else
                setColumn1Internal.Invoke(__control__, control, column);
        }
        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> setColumn1Callback = SetColumn;
        public static IAsyncResult BeginSetColumn1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 column, AsyncCallback callback, object state)
        {
            return setColumn1Callback.BeginInvoke(__control__, control, column, callback, state);
        }
        public static void EndSetColumn1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            EndSetColumn1(result);
        }
        public static void EndSetColumn1(IAsyncResult result)
        {
            setColumn1Callback.EndInvoke(result);
        }
        public static Task SetColumnAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 column)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSetColumn1,
                (Action<IAsyncResult>)EndSetColumn1,
                __control__, control, column, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> getColumnSpan1Internal = (c, control) => c.GetColumnSpan(control);
        public static System.Int32 GetColumnSpan(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getColumnSpan1Internal, __control__, control);
            else
                return getColumnSpan1Internal.Invoke(__control__, control);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> getColumnSpan1Callback = GetColumnSpan;
        public static IAsyncResult BeginGetColumnSpan1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, AsyncCallback callback, object state)
        {
            return getColumnSpan1Callback.BeginInvoke(__control__, control, callback, state);
        }
        public static System.Int32 EndGetColumnSpan1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetColumnSpan1(result);
        }
        public static System.Int32 EndGetColumnSpan1(IAsyncResult result)
        {
            return getColumnSpan1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetColumnSpanAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginGetColumnSpan1,
                (Func<IAsyncResult, System.Int32>)EndGetColumnSpan1,
                __control__, control, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> setColumnSpan1Internal = (c, control, value) => c.SetColumnSpan(control, value);
        public static void SetColumnSpan(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setColumnSpan1Internal, __control__, control, value);
            else
                setColumnSpan1Internal.Invoke(__control__, control, value);
        }
        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> setColumnSpan1Callback = SetColumnSpan;
        public static IAsyncResult BeginSetColumnSpan1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 value, AsyncCallback callback, object state)
        {
            return setColumnSpan1Callback.BeginInvoke(__control__, control, value, callback, state);
        }
        public static void EndSetColumnSpan1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            EndSetColumnSpan1(result);
        }
        public static void EndSetColumnSpan1(IAsyncResult result)
        {
            setColumnSpan1Callback.EndInvoke(result);
        }
        public static Task SetColumnSpanAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSetColumnSpan1,
                (Action<IAsyncResult>)EndSetColumnSpan1,
                __control__, control, value, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> getRowSpan1Internal = (c, control) => c.GetRowSpan(control);
        public static System.Int32 GetRowSpan(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getRowSpan1Internal, __control__, control);
            else
                return getRowSpan1Internal.Invoke(__control__, control);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> getRowSpan1Callback = GetRowSpan;
        public static IAsyncResult BeginGetRowSpan1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, AsyncCallback callback, object state)
        {
            return getRowSpan1Callback.BeginInvoke(__control__, control, callback, state);
        }
        public static System.Int32 EndGetRowSpan1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetRowSpan1(result);
        }
        public static System.Int32 EndGetRowSpan1(IAsyncResult result)
        {
            return getRowSpan1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetRowSpanAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginGetRowSpan1,
                (Func<IAsyncResult, System.Int32>)EndGetRowSpan1,
                __control__, control, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> setRowSpan1Internal = (c, control, value) => c.SetRowSpan(control, value);
        public static void SetRowSpan(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setRowSpan1Internal, __control__, control, value);
            else
                setRowSpan1Internal.Invoke(__control__, control, value);
        }
        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> setRowSpan1Callback = SetRowSpan;
        public static IAsyncResult BeginSetRowSpan1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 value, AsyncCallback callback, object state)
        {
            return setRowSpan1Callback.BeginInvoke(__control__, control, value, callback, state);
        }
        public static void EndSetRowSpan1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            EndSetRowSpan1(result);
        }
        public static void EndSetRowSpan1(IAsyncResult result)
        {
            setRowSpan1Callback.EndInvoke(result);
        }
        public static Task SetRowSpanAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSetRowSpan1,
                (Action<IAsyncResult>)EndSetRowSpan1,
                __control__, control, value, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> getRow1Internal = (c, control) => c.GetRow(control);
        public static System.Int32 GetRow(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getRow1Internal, __control__, control);
            else
                return getRow1Internal.Invoke(__control__, control);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> getRow1Callback = GetRow;
        public static IAsyncResult BeginGetRow1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, AsyncCallback callback, object state)
        {
            return getRow1Callback.BeginInvoke(__control__, control, callback, state);
        }
        public static System.Int32 EndGetRow1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetRow1(result);
        }
        public static System.Int32 EndGetRow1(IAsyncResult result)
        {
            return getRow1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetRowAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginGetRow1,
                (Func<IAsyncResult, System.Int32>)EndGetRow1,
                __control__, control, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Windows.Forms.TableLayoutPanelCellPosition> getCellPosition1Internal = (c, control) => c.GetCellPosition(control);
        public static System.Windows.Forms.TableLayoutPanelCellPosition GetCellPosition(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.TableLayoutPanelCellPosition)__control__.Invoke(getCellPosition1Internal, __control__, control);
            else
                return getCellPosition1Internal.Invoke(__control__, control);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Windows.Forms.TableLayoutPanelCellPosition> getCellPosition1Callback = GetCellPosition;
        public static IAsyncResult BeginGetCellPosition1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, AsyncCallback callback, object state)
        {
            return getCellPosition1Callback.BeginInvoke(__control__, control, callback, state);
        }
        public static System.Windows.Forms.TableLayoutPanelCellPosition EndGetCellPosition1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetCellPosition1(result);
        }
        public static System.Windows.Forms.TableLayoutPanelCellPosition EndGetCellPosition1(IAsyncResult result)
        {
            return getCellPosition1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TableLayoutPanelCellPosition> GetCellPositionAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            return Task<System.Windows.Forms.TableLayoutPanelCellPosition>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginGetCellPosition1,
                (Func<IAsyncResult, System.Windows.Forms.TableLayoutPanelCellPosition>)EndGetCellPosition1,
                __control__, control, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Windows.Forms.TableLayoutPanelCellPosition> setCellPosition1Internal = (c, control, position) => c.SetCellPosition(control, position);
        public static void SetCellPosition(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Windows.Forms.TableLayoutPanelCellPosition position)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setCellPosition1Internal, __control__, control, position);
            else
                setCellPosition1Internal.Invoke(__control__, control, position);
        }
        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Windows.Forms.TableLayoutPanelCellPosition> setCellPosition1Callback = SetCellPosition;
        public static IAsyncResult BeginSetCellPosition1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Windows.Forms.TableLayoutPanelCellPosition position, AsyncCallback callback, object state)
        {
            return setCellPosition1Callback.BeginInvoke(__control__, control, position, callback, state);
        }
        public static void EndSetCellPosition1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            EndSetCellPosition1(result);
        }
        public static void EndSetCellPosition1(IAsyncResult result)
        {
            setCellPosition1Callback.EndInvoke(result);
        }
        public static Task SetCellPositionAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, System.Windows.Forms.TableLayoutPanelCellPosition position)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Windows.Forms.TableLayoutPanelCellPosition>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Windows.Forms.TableLayoutPanelCellPosition, AsyncCallback, object, IAsyncResult>)BeginSetCellPosition1,
                (Action<IAsyncResult>)EndSetCellPosition1,
                __control__, control, position, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> getColumn1Internal = (c, control) => c.GetColumn(control);
        public static System.Int32 GetColumn(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getColumn1Internal, __control__, control);
            else
                return getColumn1Internal.Invoke(__control__, control);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Int32> getColumn1Callback = GetColumn;
        public static IAsyncResult BeginGetColumn1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, AsyncCallback callback, object state)
        {
            return getColumn1Callback.BeginInvoke(__control__, control, callback, state);
        }
        public static System.Int32 EndGetColumn1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetColumn1(result);
        }
        public static System.Int32 EndGetColumn1(IAsyncResult result)
        {
            return getColumn1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetColumnAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginGetColumn1,
                (Func<IAsyncResult, System.Int32>)EndGetColumn1,
                __control__, control, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32, System.Int32, System.Windows.Forms.Control> getControlFromPosition1Internal = (c, column, row) => c.GetControlFromPosition(column, row);
        public static System.Windows.Forms.Control GetControlFromPosition(this System.Windows.Forms.TableLayoutPanel __control__, System.Int32 column, System.Int32 row)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.Control)__control__.Invoke(getControlFromPosition1Internal, __control__, column, row);
            else
                return getControlFromPosition1Internal.Invoke(__control__, column, row);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32, System.Int32, System.Windows.Forms.Control> getControlFromPosition1Callback = GetControlFromPosition;
        public static IAsyncResult BeginGetControlFromPosition1(this System.Windows.Forms.TableLayoutPanel __control__, System.Int32 column, System.Int32 row, AsyncCallback callback, object state)
        {
            return getControlFromPosition1Callback.BeginInvoke(__control__, column, row, callback, state);
        }
        public static System.Windows.Forms.Control EndGetControlFromPosition1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetControlFromPosition1(result);
        }
        public static System.Windows.Forms.Control EndGetControlFromPosition1(IAsyncResult result)
        {
            return getControlFromPosition1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetControlFromPositionAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Int32 column, System.Int32 row)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetControlFromPosition1,
                (Func<IAsyncResult, System.Windows.Forms.Control>)EndGetControlFromPosition1,
                __control__, column, row, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Windows.Forms.TableLayoutPanelCellPosition> getPositionFromControl1Internal = (c, control) => c.GetPositionFromControl(control);
        public static System.Windows.Forms.TableLayoutPanelCellPosition GetPositionFromControl(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.TableLayoutPanelCellPosition)__control__.Invoke(getPositionFromControl1Internal, __control__, control);
            else
                return getPositionFromControl1Internal.Invoke(__control__, control);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, System.Windows.Forms.TableLayoutPanelCellPosition> getPositionFromControl1Callback = GetPositionFromControl;
        public static IAsyncResult BeginGetPositionFromControl1(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control, AsyncCallback callback, object state)
        {
            return getPositionFromControl1Callback.BeginInvoke(__control__, control, callback, state);
        }
        public static System.Windows.Forms.TableLayoutPanelCellPosition EndGetPositionFromControl1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetPositionFromControl1(result);
        }
        public static System.Windows.Forms.TableLayoutPanelCellPosition EndGetPositionFromControl1(IAsyncResult result)
        {
            return getPositionFromControl1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TableLayoutPanelCellPosition> GetPositionFromControlAsync(this System.Windows.Forms.TableLayoutPanel __control__, System.Windows.Forms.Control control)
        {
            return Task<System.Windows.Forms.TableLayoutPanelCellPosition>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginGetPositionFromControl1,
                (Func<IAsyncResult, System.Windows.Forms.TableLayoutPanelCellPosition>)EndGetPositionFromControl1,
                __control__, control, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32[]> getColumnWidths1Internal = (c) => c.GetColumnWidths();
        public static System.Int32[] GetColumnWidths(this System.Windows.Forms.TableLayoutPanel __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32[])__control__.Invoke(getColumnWidths1Internal, __control__);
            else
                return getColumnWidths1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32[]> getColumnWidths1Callback = GetColumnWidths;
        public static IAsyncResult BeginGetColumnWidths1(this System.Windows.Forms.TableLayoutPanel __control__, AsyncCallback callback, object state)
        {
            return getColumnWidths1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Int32[] EndGetColumnWidths1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetColumnWidths1(result);
        }
        public static System.Int32[] EndGetColumnWidths1(IAsyncResult result)
        {
            return getColumnWidths1Callback.EndInvoke(result);
        }
        public static Task<System.Int32[]> GetColumnWidthsAsync(this System.Windows.Forms.TableLayoutPanel __control__)
        {
            return Task<System.Int32[]>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel>(
                (Func<System.Windows.Forms.TableLayoutPanel, AsyncCallback, object, IAsyncResult>)BeginGetColumnWidths1,
                (Func<IAsyncResult, System.Int32[]>)EndGetColumnWidths1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32[]> getRowHeights1Internal = (c) => c.GetRowHeights();
        public static System.Int32[] GetRowHeights(this System.Windows.Forms.TableLayoutPanel __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32[])__control__.Invoke(getRowHeights1Internal, __control__);
            else
                return getRowHeights1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32[]> getRowHeights1Callback = GetRowHeights;
        public static IAsyncResult BeginGetRowHeights1(this System.Windows.Forms.TableLayoutPanel __control__, AsyncCallback callback, object state)
        {
            return getRowHeights1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Int32[] EndGetRowHeights1(this System.Windows.Forms.TableLayoutPanel __control__, IAsyncResult result)
        {
            return EndGetRowHeights1(result);
        }
        public static System.Int32[] EndGetRowHeights1(IAsyncResult result)
        {
            return getRowHeights1Callback.EndInvoke(result);
        }
        public static Task<System.Int32[]> GetRowHeightsAsync(this System.Windows.Forms.TableLayoutPanel __control__)
        {
            return Task<System.Int32[]>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel>(
                (Func<System.Windows.Forms.TableLayoutPanel, AsyncCallback, object, IAsyncResult>)BeginGetRowHeights1,
                (Func<IAsyncResult, System.Int32[]>)EndGetRowHeights1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelCellBorderStyle> getCellBorderStyleInternal = (x) => x.CellBorderStyle;
        public static System.Windows.Forms.TableLayoutPanelCellBorderStyle GetCellBorderStyle(this System.Windows.Forms.TableLayoutPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TableLayoutPanelCellBorderStyle)target.Invoke(getCellBorderStyleInternal, target);
            else
                return getCellBorderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelCellBorderStyle> getCellBorderStyleCallback = GetCellBorderStyle;
        public static IAsyncResult BeginGetCellBorderStyle(this System.Windows.Forms.TableLayoutPanel target, AsyncCallback callback, object state)
        {
            return getCellBorderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TableLayoutPanelCellBorderStyle EndGetCellBorderStyle(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            return EndGetCellBorderStyle(result);
        }
        public static System.Windows.Forms.TableLayoutPanelCellBorderStyle EndGetCellBorderStyle(IAsyncResult result)
        {
            return getCellBorderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TableLayoutPanelCellBorderStyle> GetCellBorderStyleAsync(this System.Windows.Forms.TableLayoutPanel target)
        {
            return Task<System.Windows.Forms.TableLayoutPanelCellBorderStyle>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel>(
                BeginGetCellBorderStyle,
                EndGetCellBorderStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelCellBorderStyle> setCellBorderStyleInternal = (x, v) => x.CellBorderStyle = v;
        public static void SetCellBorderStyle(this System.Windows.Forms.TableLayoutPanel target, System.Windows.Forms.TableLayoutPanelCellBorderStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCellBorderStyleInternal, target, value);
            else
                setCellBorderStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelCellBorderStyle> setCellBorderStyleCallback = SetCellBorderStyle;
        public static IAsyncResult BeginSetCellBorderStyle(this System.Windows.Forms.TableLayoutPanel target, System.Windows.Forms.TableLayoutPanelCellBorderStyle value, AsyncCallback callback, object state)
        {
            return setCellBorderStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCellBorderStyle(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            EndSetCellBorderStyle(result);
        }
        public static void EndSetCellBorderStyle(IAsyncResult result)
        {
            setCellBorderStyleCallback.EndInvoke(result);
        }
        public static Task SetCellBorderStyleAsync(this System.Windows.Forms.TableLayoutPanel target, System.Windows.Forms.TableLayoutPanelCellBorderStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelCellBorderStyle>(
                BeginSetCellBorderStyle,
                EndSetCellBorderStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32> getColumnCountInternal = (x) => x.ColumnCount;
        public static System.Int32 GetColumnCount(this System.Windows.Forms.TableLayoutPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getColumnCountInternal, target);
            else
                return getColumnCountInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32> getColumnCountCallback = GetColumnCount;
        public static IAsyncResult BeginGetColumnCount(this System.Windows.Forms.TableLayoutPanel target, AsyncCallback callback, object state)
        {
            return getColumnCountCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetColumnCount(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            return EndGetColumnCount(result);
        }
        public static System.Int32 EndGetColumnCount(IAsyncResult result)
        {
            return getColumnCountCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetColumnCountAsync(this System.Windows.Forms.TableLayoutPanel target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel>(
                BeginGetColumnCount,
                EndGetColumnCount,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Int32> setColumnCountInternal = (x, v) => x.ColumnCount = v;
        public static void SetColumnCount(this System.Windows.Forms.TableLayoutPanel target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setColumnCountInternal, target, value);
            else
                setColumnCountInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Int32> setColumnCountCallback = SetColumnCount;
        public static IAsyncResult BeginSetColumnCount(this System.Windows.Forms.TableLayoutPanel target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setColumnCountCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetColumnCount(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            EndSetColumnCount(result);
        }
        public static void EndSetColumnCount(IAsyncResult result)
        {
            setColumnCountCallback.EndInvoke(result);
        }
        public static Task SetColumnCountAsync(this System.Windows.Forms.TableLayoutPanel target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Int32>(
                BeginSetColumnCount,
                EndSetColumnCount,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelGrowStyle> getGrowStyleInternal = (x) => x.GrowStyle;
        public static System.Windows.Forms.TableLayoutPanelGrowStyle GetGrowStyle(this System.Windows.Forms.TableLayoutPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TableLayoutPanelGrowStyle)target.Invoke(getGrowStyleInternal, target);
            else
                return getGrowStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelGrowStyle> getGrowStyleCallback = GetGrowStyle;
        public static IAsyncResult BeginGetGrowStyle(this System.Windows.Forms.TableLayoutPanel target, AsyncCallback callback, object state)
        {
            return getGrowStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TableLayoutPanelGrowStyle EndGetGrowStyle(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            return EndGetGrowStyle(result);
        }
        public static System.Windows.Forms.TableLayoutPanelGrowStyle EndGetGrowStyle(IAsyncResult result)
        {
            return getGrowStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TableLayoutPanelGrowStyle> GetGrowStyleAsync(this System.Windows.Forms.TableLayoutPanel target)
        {
            return Task<System.Windows.Forms.TableLayoutPanelGrowStyle>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel>(
                BeginGetGrowStyle,
                EndGetGrowStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelGrowStyle> setGrowStyleInternal = (x, v) => x.GrowStyle = v;
        public static void SetGrowStyle(this System.Windows.Forms.TableLayoutPanel target, System.Windows.Forms.TableLayoutPanelGrowStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setGrowStyleInternal, target, value);
            else
                setGrowStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelGrowStyle> setGrowStyleCallback = SetGrowStyle;
        public static IAsyncResult BeginSetGrowStyle(this System.Windows.Forms.TableLayoutPanel target, System.Windows.Forms.TableLayoutPanelGrowStyle value, AsyncCallback callback, object state)
        {
            return setGrowStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetGrowStyle(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            EndSetGrowStyle(result);
        }
        public static void EndSetGrowStyle(IAsyncResult result)
        {
            setGrowStyleCallback.EndInvoke(result);
        }
        public static Task SetGrowStyleAsync(this System.Windows.Forms.TableLayoutPanel target, System.Windows.Forms.TableLayoutPanelGrowStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutPanelGrowStyle>(
                BeginSetGrowStyle,
                EndSetGrowStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32> getRowCountInternal = (x) => x.RowCount;
        public static System.Int32 GetRowCount(this System.Windows.Forms.TableLayoutPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getRowCountInternal, target);
            else
                return getRowCountInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Int32> getRowCountCallback = GetRowCount;
        public static IAsyncResult BeginGetRowCount(this System.Windows.Forms.TableLayoutPanel target, AsyncCallback callback, object state)
        {
            return getRowCountCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetRowCount(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            return EndGetRowCount(result);
        }
        public static System.Int32 EndGetRowCount(IAsyncResult result)
        {
            return getRowCountCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetRowCountAsync(this System.Windows.Forms.TableLayoutPanel target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel>(
                BeginGetRowCount,
                EndGetRowCount,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Int32> setRowCountInternal = (x, v) => x.RowCount = v;
        public static void SetRowCount(this System.Windows.Forms.TableLayoutPanel target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowCountInternal, target, value);
            else
                setRowCountInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TableLayoutPanel, System.Int32> setRowCountCallback = SetRowCount;
        public static IAsyncResult BeginSetRowCount(this System.Windows.Forms.TableLayoutPanel target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setRowCountCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowCount(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            EndSetRowCount(result);
        }
        public static void EndSetRowCount(IAsyncResult result)
        {
            setRowCountCallback.EndInvoke(result);
        }
        public static Task SetRowCountAsync(this System.Windows.Forms.TableLayoutPanel target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel, System.Int32>(
                BeginSetRowCount,
                EndSetRowCount,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutRowStyleCollection> getRowStylesInternal = (x) => x.RowStyles;
        public static System.Windows.Forms.TableLayoutRowStyleCollection GetRowStyles(this System.Windows.Forms.TableLayoutPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TableLayoutRowStyleCollection)target.Invoke(getRowStylesInternal, target);
            else
                return getRowStylesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutRowStyleCollection> getRowStylesCallback = GetRowStyles;
        public static IAsyncResult BeginGetRowStyles(this System.Windows.Forms.TableLayoutPanel target, AsyncCallback callback, object state)
        {
            return getRowStylesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TableLayoutRowStyleCollection EndGetRowStyles(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            return EndGetRowStyles(result);
        }
        public static System.Windows.Forms.TableLayoutRowStyleCollection EndGetRowStyles(IAsyncResult result)
        {
            return getRowStylesCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TableLayoutRowStyleCollection> GetRowStylesAsync(this System.Windows.Forms.TableLayoutPanel target)
        {
            return Task<System.Windows.Forms.TableLayoutRowStyleCollection>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel>(
                BeginGetRowStyles,
                EndGetRowStyles,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutColumnStyleCollection> getColumnStylesInternal = (x) => x.ColumnStyles;
        public static System.Windows.Forms.TableLayoutColumnStyleCollection GetColumnStyles(this System.Windows.Forms.TableLayoutPanel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TableLayoutColumnStyleCollection)target.Invoke(getColumnStylesInternal, target);
            else
                return getColumnStylesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TableLayoutPanel, System.Windows.Forms.TableLayoutColumnStyleCollection> getColumnStylesCallback = GetColumnStyles;
        public static IAsyncResult BeginGetColumnStyles(this System.Windows.Forms.TableLayoutPanel target, AsyncCallback callback, object state)
        {
            return getColumnStylesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TableLayoutColumnStyleCollection EndGetColumnStyles(this System.Windows.Forms.TableLayoutPanel target, IAsyncResult result)
        {
            return EndGetColumnStyles(result);
        }
        public static System.Windows.Forms.TableLayoutColumnStyleCollection EndGetColumnStyles(IAsyncResult result)
        {
            return getColumnStylesCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TableLayoutColumnStyleCollection> GetColumnStylesAsync(this System.Windows.Forms.TableLayoutPanel target)
        {
            return Task<System.Windows.Forms.TableLayoutColumnStyleCollection>.Factory.FromAsync<System.Windows.Forms.TableLayoutPanel>(
                BeginGetColumnStyles,
                EndGetColumnStyles,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.TabPage, System.Int32> getImageIndexInternal = (x) => x.ImageIndex;
        public static System.Int32 GetImageIndex(this System.Windows.Forms.TabPage target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getImageIndexInternal, target);
            else
                return getImageIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TabPage, System.Int32> getImageIndexCallback = GetImageIndex;
        public static IAsyncResult BeginGetImageIndex(this System.Windows.Forms.TabPage target, AsyncCallback callback, object state)
        {
            return getImageIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetImageIndex(this System.Windows.Forms.TabPage target, IAsyncResult result)
        {
            return EndGetImageIndex(result);
        }
        public static System.Int32 EndGetImageIndex(IAsyncResult result)
        {
            return getImageIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetImageIndexAsync(this System.Windows.Forms.TabPage target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TabPage>(
                BeginGetImageIndex,
                EndGetImageIndex,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TabPage, System.Int32> setImageIndexInternal = (x, v) => x.ImageIndex = v;
        public static void SetImageIndex(this System.Windows.Forms.TabPage target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setImageIndexInternal, target, value);
            else
                setImageIndexInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TabPage, System.Int32> setImageIndexCallback = SetImageIndex;
        public static IAsyncResult BeginSetImageIndex(this System.Windows.Forms.TabPage target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setImageIndexCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetImageIndex(this System.Windows.Forms.TabPage target, IAsyncResult result)
        {
            EndSetImageIndex(result);
        }
        public static void EndSetImageIndex(IAsyncResult result)
        {
            setImageIndexCallback.EndInvoke(result);
        }
        public static Task SetImageIndexAsync(this System.Windows.Forms.TabPage target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabPage, System.Int32>(
                BeginSetImageIndex,
                EndSetImageIndex,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TabPage, System.String> getImageKeyInternal = (x) => x.ImageKey;
        public static System.String GetImageKey(this System.Windows.Forms.TabPage target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getImageKeyInternal, target);
            else
                return getImageKeyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TabPage, System.String> getImageKeyCallback = GetImageKey;
        public static IAsyncResult BeginGetImageKey(this System.Windows.Forms.TabPage target, AsyncCallback callback, object state)
        {
            return getImageKeyCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetImageKey(this System.Windows.Forms.TabPage target, IAsyncResult result)
        {
            return EndGetImageKey(result);
        }
        public static System.String EndGetImageKey(IAsyncResult result)
        {
            return getImageKeyCallback.EndInvoke(result);
        }
        public static Task<System.String> GetImageKeyAsync(this System.Windows.Forms.TabPage target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.TabPage>(
                BeginGetImageKey,
                EndGetImageKey,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TabPage, System.String> setImageKeyInternal = (x, v) => x.ImageKey = v;
        public static void SetImageKey(this System.Windows.Forms.TabPage target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setImageKeyInternal, target, value);
            else
                setImageKeyInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TabPage, System.String> setImageKeyCallback = SetImageKey;
        public static IAsyncResult BeginSetImageKey(this System.Windows.Forms.TabPage target, System.String value, AsyncCallback callback, object state)
        {
            return setImageKeyCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetImageKey(this System.Windows.Forms.TabPage target, IAsyncResult result)
        {
            EndSetImageKey(result);
        }
        public static void EndSetImageKey(IAsyncResult result)
        {
            setImageKeyCallback.EndInvoke(result);
        }
        public static Task SetImageKeyAsync(this System.Windows.Forms.TabPage target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabPage, System.String>(
                BeginSetImageKey,
                EndSetImageKey,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TabPage, System.Boolean> getUseVisualStyleBackColorInternal = (x) => x.UseVisualStyleBackColor;
        public static System.Boolean GetUseVisualStyleBackColor(this System.Windows.Forms.TabPage target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getUseVisualStyleBackColorInternal, target);
            else
                return getUseVisualStyleBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TabPage, System.Boolean> getUseVisualStyleBackColorCallback = GetUseVisualStyleBackColor;
        public static IAsyncResult BeginGetUseVisualStyleBackColor(this System.Windows.Forms.TabPage target, AsyncCallback callback, object state)
        {
            return getUseVisualStyleBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetUseVisualStyleBackColor(this System.Windows.Forms.TabPage target, IAsyncResult result)
        {
            return EndGetUseVisualStyleBackColor(result);
        }
        public static System.Boolean EndGetUseVisualStyleBackColor(IAsyncResult result)
        {
            return getUseVisualStyleBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetUseVisualStyleBackColorAsync(this System.Windows.Forms.TabPage target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TabPage>(
                BeginGetUseVisualStyleBackColor,
                EndGetUseVisualStyleBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TabPage, System.Boolean> setUseVisualStyleBackColorInternal = (x, v) => x.UseVisualStyleBackColor = v;
        public static void SetUseVisualStyleBackColor(this System.Windows.Forms.TabPage target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUseVisualStyleBackColorInternal, target, value);
            else
                setUseVisualStyleBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TabPage, System.Boolean> setUseVisualStyleBackColorCallback = SetUseVisualStyleBackColor;
        public static IAsyncResult BeginSetUseVisualStyleBackColor(this System.Windows.Forms.TabPage target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setUseVisualStyleBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUseVisualStyleBackColor(this System.Windows.Forms.TabPage target, IAsyncResult result)
        {
            EndSetUseVisualStyleBackColor(result);
        }
        public static void EndSetUseVisualStyleBackColor(IAsyncResult result)
        {
            setUseVisualStyleBackColorCallback.EndInvoke(result);
        }
        public static Task SetUseVisualStyleBackColorAsync(this System.Windows.Forms.TabPage target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabPage, System.Boolean>(
                BeginSetUseVisualStyleBackColor,
                EndSetUseVisualStyleBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TabPage, System.String> getToolTipTextInternal = (x) => x.ToolTipText;
        public static System.String GetToolTipText(this System.Windows.Forms.TabPage target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getToolTipTextInternal, target);
            else
                return getToolTipTextInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TabPage, System.String> getToolTipTextCallback = GetToolTipText;
        public static IAsyncResult BeginGetToolTipText(this System.Windows.Forms.TabPage target, AsyncCallback callback, object state)
        {
            return getToolTipTextCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetToolTipText(this System.Windows.Forms.TabPage target, IAsyncResult result)
        {
            return EndGetToolTipText(result);
        }
        public static System.String EndGetToolTipText(IAsyncResult result)
        {
            return getToolTipTextCallback.EndInvoke(result);
        }
        public static Task<System.String> GetToolTipTextAsync(this System.Windows.Forms.TabPage target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.TabPage>(
                BeginGetToolTipText,
                EndGetToolTipText,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TabPage, System.String> setToolTipTextInternal = (x, v) => x.ToolTipText = v;
        public static void SetToolTipText(this System.Windows.Forms.TabPage target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setToolTipTextInternal, target, value);
            else
                setToolTipTextInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TabPage, System.String> setToolTipTextCallback = SetToolTipText;
        public static IAsyncResult BeginSetToolTipText(this System.Windows.Forms.TabPage target, System.String value, AsyncCallback callback, object state)
        {
            return setToolTipTextCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetToolTipText(this System.Windows.Forms.TabPage target, IAsyncResult result)
        {
            EndSetToolTipText(result);
        }
        public static void EndSetToolTipText(IAsyncResult result)
        {
            setToolTipTextCallback.EndInvoke(result);
        }
        public static Task SetToolTipTextAsync(this System.Windows.Forms.TabPage target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabPage, System.String>(
                BeginSetToolTipText,
                EndSetToolTipText,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> activate2Internal = (c) => c.Activate();
        public static void Activate(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(activate2Internal, __control__);
            else
                activate2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> activate2Callback = Activate;
        public static IAsyncResult BeginActivate2(this System.Windows.Forms.Design.ComponentEditorPage __control__, AsyncCallback callback, object state)
        {
            return activate2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndActivate2(this System.Windows.Forms.Design.ComponentEditorPage __control__, IAsyncResult result)
        {
            EndActivate2(result);
        }
        public static void EndActivate2(IAsyncResult result)
        {
            activate2Callback.EndInvoke(result);
        }
        public static Task ActivateAsync(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage>(
                (Func<System.Windows.Forms.Design.ComponentEditorPage, AsyncCallback, object, IAsyncResult>)BeginActivate2,
                (Action<IAsyncResult>)EndActivate2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> applyChanges1Internal = (c) => c.ApplyChanges();
        public static void ApplyChanges(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(applyChanges1Internal, __control__);
            else
                applyChanges1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> applyChanges1Callback = ApplyChanges;
        public static IAsyncResult BeginApplyChanges1(this System.Windows.Forms.Design.ComponentEditorPage __control__, AsyncCallback callback, object state)
        {
            return applyChanges1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndApplyChanges1(this System.Windows.Forms.Design.ComponentEditorPage __control__, IAsyncResult result)
        {
            EndApplyChanges1(result);
        }
        public static void EndApplyChanges1(IAsyncResult result)
        {
            applyChanges1Callback.EndInvoke(result);
        }
        public static Task ApplyChangesAsync(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage>(
                (Func<System.Windows.Forms.Design.ComponentEditorPage, AsyncCallback, object, IAsyncResult>)BeginApplyChanges1,
                (Action<IAsyncResult>)EndApplyChanges1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> deactivate1Internal = (c) => c.Deactivate();
        public static void Deactivate(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(deactivate1Internal, __control__);
            else
                deactivate1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> deactivate1Callback = Deactivate;
        public static IAsyncResult BeginDeactivate1(this System.Windows.Forms.Design.ComponentEditorPage __control__, AsyncCallback callback, object state)
        {
            return deactivate1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndDeactivate1(this System.Windows.Forms.Design.ComponentEditorPage __control__, IAsyncResult result)
        {
            EndDeactivate1(result);
        }
        public static void EndDeactivate1(IAsyncResult result)
        {
            deactivate1Callback.EndInvoke(result);
        }
        public static Task DeactivateAsync(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage>(
                (Func<System.Windows.Forms.Design.ComponentEditorPage, AsyncCallback, object, IAsyncResult>)BeginDeactivate1,
                (Action<IAsyncResult>)EndDeactivate1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Design.ComponentEditorPage, System.Windows.Forms.Control> getControl1Internal = (c) => c.GetControl();
        public static System.Windows.Forms.Control GetControl(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.Control)__control__.Invoke(getControl1Internal, __control__);
            else
                return getControl1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.Design.ComponentEditorPage, System.Windows.Forms.Control> getControl1Callback = GetControl;
        public static IAsyncResult BeginGetControl1(this System.Windows.Forms.Design.ComponentEditorPage __control__, AsyncCallback callback, object state)
        {
            return getControl1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Windows.Forms.Control EndGetControl1(this System.Windows.Forms.Design.ComponentEditorPage __control__, IAsyncResult result)
        {
            return EndGetControl1(result);
        }
        public static System.Windows.Forms.Control EndGetControl1(IAsyncResult result)
        {
            return getControl1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetControlAsync(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage>(
                (Func<System.Windows.Forms.Design.ComponentEditorPage, AsyncCallback, object, IAsyncResult>)BeginGetControl1,
                (Func<IAsyncResult, System.Windows.Forms.Control>)EndGetControl1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> onApplyComplete1Internal = (c) => c.OnApplyComplete();
        public static void OnApplyComplete(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(onApplyComplete1Internal, __control__);
            else
                onApplyComplete1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> onApplyComplete1Callback = OnApplyComplete;
        public static IAsyncResult BeginOnApplyComplete1(this System.Windows.Forms.Design.ComponentEditorPage __control__, AsyncCallback callback, object state)
        {
            return onApplyComplete1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndOnApplyComplete1(this System.Windows.Forms.Design.ComponentEditorPage __control__, IAsyncResult result)
        {
            EndOnApplyComplete1(result);
        }
        public static void EndOnApplyComplete1(IAsyncResult result)
        {
            onApplyComplete1Callback.EndInvoke(result);
        }
        public static Task OnApplyCompleteAsync(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage>(
                (Func<System.Windows.Forms.Design.ComponentEditorPage, AsyncCallback, object, IAsyncResult>)BeginOnApplyComplete1,
                (Action<IAsyncResult>)EndOnApplyComplete1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage, System.ComponentModel.IComponent> setComponent1Internal = (c, component) => c.SetComponent(component);
        public static void SetComponent(this System.Windows.Forms.Design.ComponentEditorPage __control__, System.ComponentModel.IComponent component)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setComponent1Internal, __control__, component);
            else
                setComponent1Internal.Invoke(__control__, component);
        }
        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage, System.ComponentModel.IComponent> setComponent1Callback = SetComponent;
        public static IAsyncResult BeginSetComponent1(this System.Windows.Forms.Design.ComponentEditorPage __control__, System.ComponentModel.IComponent component, AsyncCallback callback, object state)
        {
            return setComponent1Callback.BeginInvoke(__control__, component, callback, state);
        }
        public static void EndSetComponent1(this System.Windows.Forms.Design.ComponentEditorPage __control__, IAsyncResult result)
        {
            EndSetComponent1(result);
        }
        public static void EndSetComponent1(IAsyncResult result)
        {
            setComponent1Callback.EndInvoke(result);
        }
        public static Task SetComponentAsync(this System.Windows.Forms.Design.ComponentEditorPage __control__, System.ComponentModel.IComponent component)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage, System.ComponentModel.IComponent>(
                (Func<System.Windows.Forms.Design.ComponentEditorPage, System.ComponentModel.IComponent, AsyncCallback, object, IAsyncResult>)BeginSetComponent1,
                (Action<IAsyncResult>)EndSetComponent1,
                __control__, component, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage, System.Windows.Forms.IComponentEditorPageSite> setSite1Internal = (c, site) => c.SetSite(site);
        public static void SetSite(this System.Windows.Forms.Design.ComponentEditorPage __control__, System.Windows.Forms.IComponentEditorPageSite site)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setSite1Internal, __control__, site);
            else
                setSite1Internal.Invoke(__control__, site);
        }
        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage, System.Windows.Forms.IComponentEditorPageSite> setSite1Callback = SetSite;
        public static IAsyncResult BeginSetSite1(this System.Windows.Forms.Design.ComponentEditorPage __control__, System.Windows.Forms.IComponentEditorPageSite site, AsyncCallback callback, object state)
        {
            return setSite1Callback.BeginInvoke(__control__, site, callback, state);
        }
        public static void EndSetSite1(this System.Windows.Forms.Design.ComponentEditorPage __control__, IAsyncResult result)
        {
            EndSetSite1(result);
        }
        public static void EndSetSite1(IAsyncResult result)
        {
            setSite1Callback.EndInvoke(result);
        }
        public static Task SetSiteAsync(this System.Windows.Forms.Design.ComponentEditorPage __control__, System.Windows.Forms.IComponentEditorPageSite site)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage, System.Windows.Forms.IComponentEditorPageSite>(
                (Func<System.Windows.Forms.Design.ComponentEditorPage, System.Windows.Forms.IComponentEditorPageSite, AsyncCallback, object, IAsyncResult>)BeginSetSite1,
                (Action<IAsyncResult>)EndSetSite1,
                __control__, site, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> showHelp1Internal = (c) => c.ShowHelp();
        public static void ShowHelp(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(showHelp1Internal, __control__);
            else
                showHelp1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage> showHelp1Callback = ShowHelp;
        public static IAsyncResult BeginShowHelp1(this System.Windows.Forms.Design.ComponentEditorPage __control__, AsyncCallback callback, object state)
        {
            return showHelp1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShowHelp1(this System.Windows.Forms.Design.ComponentEditorPage __control__, IAsyncResult result)
        {
            EndShowHelp1(result);
        }
        public static void EndShowHelp1(IAsyncResult result)
        {
            showHelp1Callback.EndInvoke(result);
        }
        public static Task ShowHelpAsync(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage>(
                (Func<System.Windows.Forms.Design.ComponentEditorPage, AsyncCallback, object, IAsyncResult>)BeginShowHelp1,
                (Action<IAsyncResult>)EndShowHelp1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.Design.ComponentEditorPage, System.Boolean> supportsHelp1Internal = (c) => c.SupportsHelp();
        public static System.Boolean SupportsHelp(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(supportsHelp1Internal, __control__);
            else
                return supportsHelp1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.Design.ComponentEditorPage, System.Boolean> supportsHelp1Callback = SupportsHelp;
        public static IAsyncResult BeginSupportsHelp1(this System.Windows.Forms.Design.ComponentEditorPage __control__, AsyncCallback callback, object state)
        {
            return supportsHelp1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndSupportsHelp1(this System.Windows.Forms.Design.ComponentEditorPage __control__, IAsyncResult result)
        {
            return EndSupportsHelp1(result);
        }
        public static System.Boolean EndSupportsHelp1(IAsyncResult result)
        {
            return supportsHelp1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> SupportsHelpAsync(this System.Windows.Forms.Design.ComponentEditorPage __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage>(
                (Func<System.Windows.Forms.Design.ComponentEditorPage, AsyncCallback, object, IAsyncResult>)BeginSupportsHelp1,
                (Func<IAsyncResult, System.Boolean>)EndSupportsHelp1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.Design.ComponentEditorPage, System.Boolean> getCommitOnDeactivateInternal = (x) => x.CommitOnDeactivate;
        public static System.Boolean GetCommitOnDeactivate(this System.Windows.Forms.Design.ComponentEditorPage target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCommitOnDeactivateInternal, target);
            else
                return getCommitOnDeactivateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Design.ComponentEditorPage, System.Boolean> getCommitOnDeactivateCallback = GetCommitOnDeactivate;
        public static IAsyncResult BeginGetCommitOnDeactivate(this System.Windows.Forms.Design.ComponentEditorPage target, AsyncCallback callback, object state)
        {
            return getCommitOnDeactivateCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCommitOnDeactivate(this System.Windows.Forms.Design.ComponentEditorPage target, IAsyncResult result)
        {
            return EndGetCommitOnDeactivate(result);
        }
        public static System.Boolean EndGetCommitOnDeactivate(IAsyncResult result)
        {
            return getCommitOnDeactivateCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCommitOnDeactivateAsync(this System.Windows.Forms.Design.ComponentEditorPage target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage>(
                BeginGetCommitOnDeactivate,
                EndGetCommitOnDeactivate,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage, System.Boolean> setCommitOnDeactivateInternal = (x, v) => x.CommitOnDeactivate = v;
        public static void SetCommitOnDeactivate(this System.Windows.Forms.Design.ComponentEditorPage target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCommitOnDeactivateInternal, target, value);
            else
                setCommitOnDeactivateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Design.ComponentEditorPage, System.Boolean> setCommitOnDeactivateCallback = SetCommitOnDeactivate;
        public static IAsyncResult BeginSetCommitOnDeactivate(this System.Windows.Forms.Design.ComponentEditorPage target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCommitOnDeactivateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCommitOnDeactivate(this System.Windows.Forms.Design.ComponentEditorPage target, IAsyncResult result)
        {
            EndSetCommitOnDeactivate(result);
        }
        public static void EndSetCommitOnDeactivate(IAsyncResult result)
        {
            setCommitOnDeactivateCallback.EndInvoke(result);
        }
        public static Task SetCommitOnDeactivateAsync(this System.Windows.Forms.Design.ComponentEditorPage target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage, System.Boolean>(
                BeginSetCommitOnDeactivate,
                EndSetCommitOnDeactivate,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Design.ComponentEditorPage, System.String> getTitleInternal = (x) => x.Title;
        public static System.String GetTitle(this System.Windows.Forms.Design.ComponentEditorPage target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getTitleInternal, target);
            else
                return getTitleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Design.ComponentEditorPage, System.String> getTitleCallback = GetTitle;
        public static IAsyncResult BeginGetTitle(this System.Windows.Forms.Design.ComponentEditorPage target, AsyncCallback callback, object state)
        {
            return getTitleCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetTitle(this System.Windows.Forms.Design.ComponentEditorPage target, IAsyncResult result)
        {
            return EndGetTitle(result);
        }
        public static System.String EndGetTitle(IAsyncResult result)
        {
            return getTitleCallback.EndInvoke(result);
        }
        public static Task<System.String> GetTitleAsync(this System.Windows.Forms.Design.ComponentEditorPage target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.Design.ComponentEditorPage>(
                BeginGetTitle,
                EndGetTitle,
                target, null);
        }


        private static readonly Action<System.Windows.Forms.AxHost> showAboutBox1Internal = (c) => c.ShowAboutBox();
        public static void ShowAboutBox(this System.Windows.Forms.AxHost __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(showAboutBox1Internal, __control__);
            else
                showAboutBox1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.AxHost> showAboutBox1Callback = ShowAboutBox;
        public static IAsyncResult BeginShowAboutBox1(this System.Windows.Forms.AxHost __control__, AsyncCallback callback, object state)
        {
            return showAboutBox1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShowAboutBox1(this System.Windows.Forms.AxHost __control__, IAsyncResult result)
        {
            EndShowAboutBox1(result);
        }
        public static void EndShowAboutBox1(IAsyncResult result)
        {
            showAboutBox1Callback.EndInvoke(result);
        }
        public static Task ShowAboutBoxAsync(this System.Windows.Forms.AxHost __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.AxHost>(
                (Func<System.Windows.Forms.AxHost, AsyncCallback, object, IAsyncResult>)BeginShowAboutBox1,
                (Action<IAsyncResult>)EndShowAboutBox1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.AxHost, System.Drawing.Bitmap, System.Drawing.Rectangle> drawToBitmap2Internal = (c, bitmap, targetBounds) => c.DrawToBitmap(bitmap, targetBounds);
        public static void DrawToBitmap(this System.Windows.Forms.AxHost __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(drawToBitmap2Internal, __control__, bitmap, targetBounds);
            else
                drawToBitmap2Internal.Invoke(__control__, bitmap, targetBounds);
        }
        private static readonly Action<System.Windows.Forms.AxHost, System.Drawing.Bitmap, System.Drawing.Rectangle> drawToBitmap2Callback = DrawToBitmap;
        public static IAsyncResult BeginDrawToBitmap2(this System.Windows.Forms.AxHost __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds, AsyncCallback callback, object state)
        {
            return drawToBitmap2Callback.BeginInvoke(__control__, bitmap, targetBounds, callback, state);
        }
        public static void EndDrawToBitmap2(this System.Windows.Forms.AxHost __control__, IAsyncResult result)
        {
            EndDrawToBitmap2(result);
        }
        public static void EndDrawToBitmap2(IAsyncResult result)
        {
            drawToBitmap2Callback.EndInvoke(result);
        }
        public static Task DrawToBitmapAsync(this System.Windows.Forms.AxHost __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.AxHost, System.Drawing.Bitmap, System.Drawing.Rectangle>(
                (Func<System.Windows.Forms.AxHost, System.Drawing.Bitmap, System.Drawing.Rectangle, AsyncCallback, object, IAsyncResult>)BeginDrawToBitmap2,
                (Action<IAsyncResult>)EndDrawToBitmap2,
                __control__, bitmap, targetBounds, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.AxHost, System.Int32> doVerb1Internal = (c, verb) => c.DoVerb(verb);
        public static void DoVerb(this System.Windows.Forms.AxHost __control__, System.Int32 verb)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(doVerb1Internal, __control__, verb);
            else
                doVerb1Internal.Invoke(__control__, verb);
        }
        private static readonly Action<System.Windows.Forms.AxHost, System.Int32> doVerb1Callback = DoVerb;
        public static IAsyncResult BeginDoVerb1(this System.Windows.Forms.AxHost __control__, System.Int32 verb, AsyncCallback callback, object state)
        {
            return doVerb1Callback.BeginInvoke(__control__, verb, callback, state);
        }
        public static void EndDoVerb1(this System.Windows.Forms.AxHost __control__, IAsyncResult result)
        {
            EndDoVerb1(result);
        }
        public static void EndDoVerb1(IAsyncResult result)
        {
            doVerb1Callback.EndInvoke(result);
        }
        public static Task DoVerbAsync(this System.Windows.Forms.AxHost __control__, System.Int32 verb)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.AxHost, System.Int32>(
                (Func<System.Windows.Forms.AxHost, System.Int32, AsyncCallback, object, IAsyncResult>)BeginDoVerb1,
                (Action<IAsyncResult>)EndDoVerb1,
                __control__, verb, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.AxHost> invokeEditMode1Internal = (c) => c.InvokeEditMode();
        public static void InvokeEditMode(this System.Windows.Forms.AxHost __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invokeEditMode1Internal, __control__);
            else
                invokeEditMode1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.AxHost> invokeEditMode1Callback = InvokeEditMode;
        public static IAsyncResult BeginInvokeEditMode1(this System.Windows.Forms.AxHost __control__, AsyncCallback callback, object state)
        {
            return invokeEditMode1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndInvokeEditMode1(this System.Windows.Forms.AxHost __control__, IAsyncResult result)
        {
            EndInvokeEditMode1(result);
        }
        public static void EndInvokeEditMode1(IAsyncResult result)
        {
            invokeEditMode1Callback.EndInvoke(result);
        }
        public static Task InvokeEditModeAsync(this System.Windows.Forms.AxHost __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.AxHost>(
                (Func<System.Windows.Forms.AxHost, AsyncCallback, object, IAsyncResult>)BeginInvokeEditMode1,
                (Action<IAsyncResult>)EndInvokeEditMode1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.AxHost, System.Object> getOcx1Internal = (c) => c.GetOcx();
        public static System.Object GetOcx(this System.Windows.Forms.AxHost __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Object)__control__.Invoke(getOcx1Internal, __control__);
            else
                return getOcx1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.AxHost, System.Object> getOcx1Callback = GetOcx;
        public static IAsyncResult BeginGetOcx1(this System.Windows.Forms.AxHost __control__, AsyncCallback callback, object state)
        {
            return getOcx1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Object EndGetOcx1(this System.Windows.Forms.AxHost __control__, IAsyncResult result)
        {
            return EndGetOcx1(result);
        }
        public static System.Object EndGetOcx1(IAsyncResult result)
        {
            return getOcx1Callback.EndInvoke(result);
        }
        public static Task<System.Object> GetOcxAsync(this System.Windows.Forms.AxHost __control__)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.AxHost>(
                (Func<System.Windows.Forms.AxHost, AsyncCallback, object, IAsyncResult>)BeginGetOcx1,
                (Func<IAsyncResult, System.Object>)EndGetOcx1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.AxHost, System.Boolean> hasPropertyPages1Internal = (c) => c.HasPropertyPages();
        public static System.Boolean HasPropertyPages(this System.Windows.Forms.AxHost __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(hasPropertyPages1Internal, __control__);
            else
                return hasPropertyPages1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.AxHost, System.Boolean> hasPropertyPages1Callback = HasPropertyPages;
        public static IAsyncResult BeginHasPropertyPages1(this System.Windows.Forms.AxHost __control__, AsyncCallback callback, object state)
        {
            return hasPropertyPages1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndHasPropertyPages1(this System.Windows.Forms.AxHost __control__, IAsyncResult result)
        {
            return EndHasPropertyPages1(result);
        }
        public static System.Boolean EndHasPropertyPages1(IAsyncResult result)
        {
            return hasPropertyPages1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> HasPropertyPagesAsync(this System.Windows.Forms.AxHost __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.AxHost>(
                (Func<System.Windows.Forms.AxHost, AsyncCallback, object, IAsyncResult>)BeginHasPropertyPages1,
                (Func<IAsyncResult, System.Boolean>)EndHasPropertyPages1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.AxHost> makeDirty1Internal = (c) => c.MakeDirty();
        public static void MakeDirty(this System.Windows.Forms.AxHost __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(makeDirty1Internal, __control__);
            else
                makeDirty1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.AxHost> makeDirty1Callback = MakeDirty;
        public static IAsyncResult BeginMakeDirty1(this System.Windows.Forms.AxHost __control__, AsyncCallback callback, object state)
        {
            return makeDirty1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndMakeDirty1(this System.Windows.Forms.AxHost __control__, IAsyncResult result)
        {
            EndMakeDirty1(result);
        }
        public static void EndMakeDirty1(IAsyncResult result)
        {
            makeDirty1Callback.EndInvoke(result);
        }
        public static Task MakeDirtyAsync(this System.Windows.Forms.AxHost __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.AxHost>(
                (Func<System.Windows.Forms.AxHost, AsyncCallback, object, IAsyncResult>)BeginMakeDirty1,
                (Action<IAsyncResult>)EndMakeDirty1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.AxHost> showPropertyPages1Internal = (c) => c.ShowPropertyPages();
        public static void ShowPropertyPages(this System.Windows.Forms.AxHost __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(showPropertyPages1Internal, __control__);
            else
                showPropertyPages1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.AxHost> showPropertyPages1Callback = ShowPropertyPages;
        public static IAsyncResult BeginShowPropertyPages1(this System.Windows.Forms.AxHost __control__, AsyncCallback callback, object state)
        {
            return showPropertyPages1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShowPropertyPages1(this System.Windows.Forms.AxHost __control__, IAsyncResult result)
        {
            EndShowPropertyPages1(result);
        }
        public static void EndShowPropertyPages1(IAsyncResult result)
        {
            showPropertyPages1Callback.EndInvoke(result);
        }
        public static Task ShowPropertyPagesAsync(this System.Windows.Forms.AxHost __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.AxHost>(
                (Func<System.Windows.Forms.AxHost, AsyncCallback, object, IAsyncResult>)BeginShowPropertyPages1,
                (Action<IAsyncResult>)EndShowPropertyPages1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.AxHost, System.Windows.Forms.Control> showPropertyPages2Internal = (c, control) => c.ShowPropertyPages(control);
        public static void ShowPropertyPages(this System.Windows.Forms.AxHost __control__, System.Windows.Forms.Control control)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(showPropertyPages2Internal, __control__, control);
            else
                showPropertyPages2Internal.Invoke(__control__, control);
        }
        private static readonly Action<System.Windows.Forms.AxHost, System.Windows.Forms.Control> showPropertyPages2Callback = ShowPropertyPages;
        public static IAsyncResult BeginShowPropertyPages2(this System.Windows.Forms.AxHost __control__, System.Windows.Forms.Control control, AsyncCallback callback, object state)
        {
            return showPropertyPages2Callback.BeginInvoke(__control__, control, callback, state);
        }
        public static void EndShowPropertyPages2(this System.Windows.Forms.AxHost __control__, IAsyncResult result)
        {
            EndShowPropertyPages2(result);
        }
        public static void EndShowPropertyPages2(IAsyncResult result)
        {
            showPropertyPages2Callback.EndInvoke(result);
        }
        public static Task ShowPropertyPagesAsync(this System.Windows.Forms.AxHost __control__, System.Windows.Forms.Control control)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.AxHost, System.Windows.Forms.Control>(
                (Func<System.Windows.Forms.AxHost, System.Windows.Forms.Control, AsyncCallback, object, IAsyncResult>)BeginShowPropertyPages2,
                (Action<IAsyncResult>)EndShowPropertyPages2,
                __control__, control, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.AxHost, System.Boolean> getEditModeInternal = (x) => x.EditMode;
        public static System.Boolean GetEditMode(this System.Windows.Forms.AxHost target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getEditModeInternal, target);
            else
                return getEditModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.AxHost, System.Boolean> getEditModeCallback = GetEditMode;
        public static IAsyncResult BeginGetEditMode(this System.Windows.Forms.AxHost target, AsyncCallback callback, object state)
        {
            return getEditModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetEditMode(this System.Windows.Forms.AxHost target, IAsyncResult result)
        {
            return EndGetEditMode(result);
        }
        public static System.Boolean EndGetEditMode(IAsyncResult result)
        {
            return getEditModeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetEditModeAsync(this System.Windows.Forms.AxHost target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.AxHost>(
                BeginGetEditMode,
                EndGetEditMode,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.AxHost, System.Boolean> getHasAboutBoxInternal = (x) => x.HasAboutBox;
        public static System.Boolean GetHasAboutBox(this System.Windows.Forms.AxHost target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHasAboutBoxInternal, target);
            else
                return getHasAboutBoxInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.AxHost, System.Boolean> getHasAboutBoxCallback = GetHasAboutBox;
        public static IAsyncResult BeginGetHasAboutBox(this System.Windows.Forms.AxHost target, AsyncCallback callback, object state)
        {
            return getHasAboutBoxCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHasAboutBox(this System.Windows.Forms.AxHost target, IAsyncResult result)
        {
            return EndGetHasAboutBox(result);
        }
        public static System.Boolean EndGetHasAboutBox(IAsyncResult result)
        {
            return getHasAboutBoxCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHasAboutBoxAsync(this System.Windows.Forms.AxHost target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.AxHost>(
                BeginGetHasAboutBox,
                EndGetHasAboutBox,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.AxHost, System.Windows.Forms.AxHost.State> getOcxStateInternal = (x) => x.OcxState;
        public static System.Windows.Forms.AxHost.State GetOcxState(this System.Windows.Forms.AxHost target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AxHost.State)target.Invoke(getOcxStateInternal, target);
            else
                return getOcxStateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.AxHost, System.Windows.Forms.AxHost.State> getOcxStateCallback = GetOcxState;
        public static IAsyncResult BeginGetOcxState(this System.Windows.Forms.AxHost target, AsyncCallback callback, object state)
        {
            return getOcxStateCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AxHost.State EndGetOcxState(this System.Windows.Forms.AxHost target, IAsyncResult result)
        {
            return EndGetOcxState(result);
        }
        public static System.Windows.Forms.AxHost.State EndGetOcxState(IAsyncResult result)
        {
            return getOcxStateCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AxHost.State> GetOcxStateAsync(this System.Windows.Forms.AxHost target)
        {
            return Task<System.Windows.Forms.AxHost.State>.Factory.FromAsync<System.Windows.Forms.AxHost>(
                BeginGetOcxState,
                EndGetOcxState,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.AxHost, System.Windows.Forms.AxHost.State> setOcxStateInternal = (x, v) => x.OcxState = v;
        public static void SetOcxState(this System.Windows.Forms.AxHost target, System.Windows.Forms.AxHost.State value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setOcxStateInternal, target, value);
            else
                setOcxStateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.AxHost, System.Windows.Forms.AxHost.State> setOcxStateCallback = SetOcxState;
        public static IAsyncResult BeginSetOcxState(this System.Windows.Forms.AxHost target, System.Windows.Forms.AxHost.State value, AsyncCallback callback, object state)
        {
            return setOcxStateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetOcxState(this System.Windows.Forms.AxHost target, IAsyncResult result)
        {
            EndSetOcxState(result);
        }
        public static void EndSetOcxState(IAsyncResult result)
        {
            setOcxStateCallback.EndInvoke(result);
        }
        public static Task SetOcxStateAsync(this System.Windows.Forms.AxHost target, System.Windows.Forms.AxHost.State value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.AxHost, System.Windows.Forms.AxHost.State>(
                BeginSetOcxState,
                EndSetOcxState,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.AxHost, System.Windows.Forms.ContainerControl> getContainingControlInternal = (x) => x.ContainingControl;
        public static System.Windows.Forms.ContainerControl GetContainingControl(this System.Windows.Forms.AxHost target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ContainerControl)target.Invoke(getContainingControlInternal, target);
            else
                return getContainingControlInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.AxHost, System.Windows.Forms.ContainerControl> getContainingControlCallback = GetContainingControl;
        public static IAsyncResult BeginGetContainingControl(this System.Windows.Forms.AxHost target, AsyncCallback callback, object state)
        {
            return getContainingControlCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ContainerControl EndGetContainingControl(this System.Windows.Forms.AxHost target, IAsyncResult result)
        {
            return EndGetContainingControl(result);
        }
        public static System.Windows.Forms.ContainerControl EndGetContainingControl(IAsyncResult result)
        {
            return getContainingControlCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ContainerControl> GetContainingControlAsync(this System.Windows.Forms.AxHost target)
        {
            return Task<System.Windows.Forms.ContainerControl>.Factory.FromAsync<System.Windows.Forms.AxHost>(
                BeginGetContainingControl,
                EndGetContainingControl,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.AxHost, System.Windows.Forms.ContainerControl> setContainingControlInternal = (x, v) => x.ContainingControl = v;
        public static void SetContainingControl(this System.Windows.Forms.AxHost target, System.Windows.Forms.ContainerControl value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setContainingControlInternal, target, value);
            else
                setContainingControlInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.AxHost, System.Windows.Forms.ContainerControl> setContainingControlCallback = SetContainingControl;
        public static IAsyncResult BeginSetContainingControl(this System.Windows.Forms.AxHost target, System.Windows.Forms.ContainerControl value, AsyncCallback callback, object state)
        {
            return setContainingControlCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetContainingControl(this System.Windows.Forms.AxHost target, IAsyncResult result)
        {
            EndSetContainingControl(result);
        }
        public static void EndSetContainingControl(IAsyncResult result)
        {
            setContainingControlCallback.EndInvoke(result);
        }
        public static Task SetContainingControlAsync(this System.Windows.Forms.AxHost target, System.Windows.Forms.ContainerControl value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.AxHost, System.Windows.Forms.ContainerControl>(
                BeginSetContainingControl,
                EndSetContainingControl,
                target, value, null);
        }


        private static readonly Func<System.Windows.Forms.ButtonBase, System.Drawing.Size, System.Drawing.Size> getPreferredSize3Internal = (c, proposedSize) => c.GetPreferredSize(proposedSize);
        public static System.Drawing.Size GetPreferredSize(this System.Windows.Forms.ButtonBase __control__, System.Drawing.Size proposedSize)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Size)__control__.Invoke(getPreferredSize3Internal, __control__, proposedSize);
            else
                return getPreferredSize3Internal.Invoke(__control__, proposedSize);
        }
        private static readonly Func<System.Windows.Forms.ButtonBase, System.Drawing.Size, System.Drawing.Size> getPreferredSize3Callback = GetPreferredSize;
        public static IAsyncResult BeginGetPreferredSize3(this System.Windows.Forms.ButtonBase __control__, System.Drawing.Size proposedSize, AsyncCallback callback, object state)
        {
            return getPreferredSize3Callback.BeginInvoke(__control__, proposedSize, callback, state);
        }
        public static System.Drawing.Size EndGetPreferredSize3(this System.Windows.Forms.ButtonBase __control__, IAsyncResult result)
        {
            return EndGetPreferredSize3(result);
        }
        public static System.Drawing.Size EndGetPreferredSize3(IAsyncResult result)
        {
            return getPreferredSize3Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetPreferredSizeAsync(this System.Windows.Forms.ButtonBase __control__, System.Drawing.Size proposedSize)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.ButtonBase, System.Drawing.Size>(
                (Func<System.Windows.Forms.ButtonBase, System.Drawing.Size, AsyncCallback, object, IAsyncResult>)BeginGetPreferredSize3,
                (Func<IAsyncResult, System.Drawing.Size>)EndGetPreferredSize3,
                __control__, proposedSize, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ButtonBase, System.Boolean> getAutoEllipsisInternal = (x) => x.AutoEllipsis;
        public static System.Boolean GetAutoEllipsis(this System.Windows.Forms.ButtonBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoEllipsisInternal, target);
            else
                return getAutoEllipsisInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ButtonBase, System.Boolean> getAutoEllipsisCallback = GetAutoEllipsis;
        public static IAsyncResult BeginGetAutoEllipsis(this System.Windows.Forms.ButtonBase target, AsyncCallback callback, object state)
        {
            return getAutoEllipsisCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoEllipsis(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            return EndGetAutoEllipsis(result);
        }
        public static System.Boolean EndGetAutoEllipsis(IAsyncResult result)
        {
            return getAutoEllipsisCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoEllipsisAsync(this System.Windows.Forms.ButtonBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ButtonBase>(
                BeginGetAutoEllipsis,
                EndGetAutoEllipsis,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ButtonBase, System.Boolean> setAutoEllipsisInternal = (x, v) => x.AutoEllipsis = v;
        public static void SetAutoEllipsis(this System.Windows.Forms.ButtonBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoEllipsisInternal, target, value);
            else
                setAutoEllipsisInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ButtonBase, System.Boolean> setAutoEllipsisCallback = SetAutoEllipsis;
        public static IAsyncResult BeginSetAutoEllipsis(this System.Windows.Forms.ButtonBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoEllipsisCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoEllipsis(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            EndSetAutoEllipsis(result);
        }
        public static void EndSetAutoEllipsis(IAsyncResult result)
        {
            setAutoEllipsisCallback.EndInvoke(result);
        }
        public static Task SetAutoEllipsisAsync(this System.Windows.Forms.ButtonBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ButtonBase, System.Boolean>(
                BeginSetAutoEllipsis,
                EndSetAutoEllipsis,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ButtonBase, System.Windows.Forms.FlatStyle> getFlatStyleInternal = (x) => x.FlatStyle;
        public static System.Windows.Forms.FlatStyle GetFlatStyle(this System.Windows.Forms.ButtonBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.FlatStyle)target.Invoke(getFlatStyleInternal, target);
            else
                return getFlatStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ButtonBase, System.Windows.Forms.FlatStyle> getFlatStyleCallback = GetFlatStyle;
        public static IAsyncResult BeginGetFlatStyle(this System.Windows.Forms.ButtonBase target, AsyncCallback callback, object state)
        {
            return getFlatStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.FlatStyle EndGetFlatStyle(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            return EndGetFlatStyle(result);
        }
        public static System.Windows.Forms.FlatStyle EndGetFlatStyle(IAsyncResult result)
        {
            return getFlatStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.FlatStyle> GetFlatStyleAsync(this System.Windows.Forms.ButtonBase target)
        {
            return Task<System.Windows.Forms.FlatStyle>.Factory.FromAsync<System.Windows.Forms.ButtonBase>(
                BeginGetFlatStyle,
                EndGetFlatStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ButtonBase, System.Windows.Forms.FlatStyle> setFlatStyleInternal = (x, v) => x.FlatStyle = v;
        public static void SetFlatStyle(this System.Windows.Forms.ButtonBase target, System.Windows.Forms.FlatStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFlatStyleInternal, target, value);
            else
                setFlatStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ButtonBase, System.Windows.Forms.FlatStyle> setFlatStyleCallback = SetFlatStyle;
        public static IAsyncResult BeginSetFlatStyle(this System.Windows.Forms.ButtonBase target, System.Windows.Forms.FlatStyle value, AsyncCallback callback, object state)
        {
            return setFlatStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFlatStyle(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            EndSetFlatStyle(result);
        }
        public static void EndSetFlatStyle(IAsyncResult result)
        {
            setFlatStyleCallback.EndInvoke(result);
        }
        public static Task SetFlatStyleAsync(this System.Windows.Forms.ButtonBase target, System.Windows.Forms.FlatStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ButtonBase, System.Windows.Forms.FlatStyle>(
                BeginSetFlatStyle,
                EndSetFlatStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ButtonBase, System.Windows.Forms.FlatButtonAppearance> getFlatAppearanceInternal = (x) => x.FlatAppearance;
        public static System.Windows.Forms.FlatButtonAppearance GetFlatAppearance(this System.Windows.Forms.ButtonBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.FlatButtonAppearance)target.Invoke(getFlatAppearanceInternal, target);
            else
                return getFlatAppearanceInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ButtonBase, System.Windows.Forms.FlatButtonAppearance> getFlatAppearanceCallback = GetFlatAppearance;
        public static IAsyncResult BeginGetFlatAppearance(this System.Windows.Forms.ButtonBase target, AsyncCallback callback, object state)
        {
            return getFlatAppearanceCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.FlatButtonAppearance EndGetFlatAppearance(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            return EndGetFlatAppearance(result);
        }
        public static System.Windows.Forms.FlatButtonAppearance EndGetFlatAppearance(IAsyncResult result)
        {
            return getFlatAppearanceCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.FlatButtonAppearance> GetFlatAppearanceAsync(this System.Windows.Forms.ButtonBase target)
        {
            return Task<System.Windows.Forms.FlatButtonAppearance>.Factory.FromAsync<System.Windows.Forms.ButtonBase>(
                BeginGetFlatAppearance,
                EndGetFlatAppearance,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ButtonBase, System.Drawing.Image> getImageInternal = (x) => x.Image;
        public static System.Drawing.Image GetImage(this System.Windows.Forms.ButtonBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Image)target.Invoke(getImageInternal, target);
            else
                return getImageInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ButtonBase, System.Drawing.Image> getImageCallback = GetImage;
        public static IAsyncResult BeginGetImage(this System.Windows.Forms.ButtonBase target, AsyncCallback callback, object state)
        {
            return getImageCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Image EndGetImage(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            return EndGetImage(result);
        }
        public static System.Drawing.Image EndGetImage(IAsyncResult result)
        {
            return getImageCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Image> GetImageAsync(this System.Windows.Forms.ButtonBase target)
        {
            return Task<System.Drawing.Image>.Factory.FromAsync<System.Windows.Forms.ButtonBase>(
                BeginGetImage,
                EndGetImage,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ButtonBase, System.Drawing.Image> setImageInternal = (x, v) => x.Image = v;
        public static void SetImage(this System.Windows.Forms.ButtonBase target, System.Drawing.Image value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setImageInternal, target, value);
            else
                setImageInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ButtonBase, System.Drawing.Image> setImageCallback = SetImage;
        public static IAsyncResult BeginSetImage(this System.Windows.Forms.ButtonBase target, System.Drawing.Image value, AsyncCallback callback, object state)
        {
            return setImageCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetImage(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            EndSetImage(result);
        }
        public static void EndSetImage(IAsyncResult result)
        {
            setImageCallback.EndInvoke(result);
        }
        public static Task SetImageAsync(this System.Windows.Forms.ButtonBase target, System.Drawing.Image value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ButtonBase, System.Drawing.Image>(
                BeginSetImage,
                EndSetImage,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ButtonBase, System.Drawing.ContentAlignment> getImageAlignInternal = (x) => x.ImageAlign;
        public static System.Drawing.ContentAlignment GetImageAlign(this System.Windows.Forms.ButtonBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.ContentAlignment)target.Invoke(getImageAlignInternal, target);
            else
                return getImageAlignInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ButtonBase, System.Drawing.ContentAlignment> getImageAlignCallback = GetImageAlign;
        public static IAsyncResult BeginGetImageAlign(this System.Windows.Forms.ButtonBase target, AsyncCallback callback, object state)
        {
            return getImageAlignCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.ContentAlignment EndGetImageAlign(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            return EndGetImageAlign(result);
        }
        public static System.Drawing.ContentAlignment EndGetImageAlign(IAsyncResult result)
        {
            return getImageAlignCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.ContentAlignment> GetImageAlignAsync(this System.Windows.Forms.ButtonBase target)
        {
            return Task<System.Drawing.ContentAlignment>.Factory.FromAsync<System.Windows.Forms.ButtonBase>(
                BeginGetImageAlign,
                EndGetImageAlign,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ButtonBase, System.Drawing.ContentAlignment> setImageAlignInternal = (x, v) => x.ImageAlign = v;
        public static void SetImageAlign(this System.Windows.Forms.ButtonBase target, System.Drawing.ContentAlignment value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setImageAlignInternal, target, value);
            else
                setImageAlignInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ButtonBase, System.Drawing.ContentAlignment> setImageAlignCallback = SetImageAlign;
        public static IAsyncResult BeginSetImageAlign(this System.Windows.Forms.ButtonBase target, System.Drawing.ContentAlignment value, AsyncCallback callback, object state)
        {
            return setImageAlignCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetImageAlign(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            EndSetImageAlign(result);
        }
        public static void EndSetImageAlign(IAsyncResult result)
        {
            setImageAlignCallback.EndInvoke(result);
        }
        public static Task SetImageAlignAsync(this System.Windows.Forms.ButtonBase target, System.Drawing.ContentAlignment value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ButtonBase, System.Drawing.ContentAlignment>(
                BeginSetImageAlign,
                EndSetImageAlign,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ButtonBase, System.Windows.Forms.TextImageRelation> getTextImageRelationInternal = (x) => x.TextImageRelation;
        public static System.Windows.Forms.TextImageRelation GetTextImageRelation(this System.Windows.Forms.ButtonBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TextImageRelation)target.Invoke(getTextImageRelationInternal, target);
            else
                return getTextImageRelationInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ButtonBase, System.Windows.Forms.TextImageRelation> getTextImageRelationCallback = GetTextImageRelation;
        public static IAsyncResult BeginGetTextImageRelation(this System.Windows.Forms.ButtonBase target, AsyncCallback callback, object state)
        {
            return getTextImageRelationCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TextImageRelation EndGetTextImageRelation(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            return EndGetTextImageRelation(result);
        }
        public static System.Windows.Forms.TextImageRelation EndGetTextImageRelation(IAsyncResult result)
        {
            return getTextImageRelationCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TextImageRelation> GetTextImageRelationAsync(this System.Windows.Forms.ButtonBase target)
        {
            return Task<System.Windows.Forms.TextImageRelation>.Factory.FromAsync<System.Windows.Forms.ButtonBase>(
                BeginGetTextImageRelation,
                EndGetTextImageRelation,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ButtonBase, System.Windows.Forms.TextImageRelation> setTextImageRelationInternal = (x, v) => x.TextImageRelation = v;
        public static void SetTextImageRelation(this System.Windows.Forms.ButtonBase target, System.Windows.Forms.TextImageRelation value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTextImageRelationInternal, target, value);
            else
                setTextImageRelationInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ButtonBase, System.Windows.Forms.TextImageRelation> setTextImageRelationCallback = SetTextImageRelation;
        public static IAsyncResult BeginSetTextImageRelation(this System.Windows.Forms.ButtonBase target, System.Windows.Forms.TextImageRelation value, AsyncCallback callback, object state)
        {
            return setTextImageRelationCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTextImageRelation(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            EndSetTextImageRelation(result);
        }
        public static void EndSetTextImageRelation(IAsyncResult result)
        {
            setTextImageRelationCallback.EndInvoke(result);
        }
        public static Task SetTextImageRelationAsync(this System.Windows.Forms.ButtonBase target, System.Windows.Forms.TextImageRelation value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ButtonBase, System.Windows.Forms.TextImageRelation>(
                BeginSetTextImageRelation,
                EndSetTextImageRelation,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ButtonBase, System.Boolean> getUseMnemonicInternal = (x) => x.UseMnemonic;
        public static System.Boolean GetUseMnemonic(this System.Windows.Forms.ButtonBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getUseMnemonicInternal, target);
            else
                return getUseMnemonicInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ButtonBase, System.Boolean> getUseMnemonicCallback = GetUseMnemonic;
        public static IAsyncResult BeginGetUseMnemonic(this System.Windows.Forms.ButtonBase target, AsyncCallback callback, object state)
        {
            return getUseMnemonicCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetUseMnemonic(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            return EndGetUseMnemonic(result);
        }
        public static System.Boolean EndGetUseMnemonic(IAsyncResult result)
        {
            return getUseMnemonicCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetUseMnemonicAsync(this System.Windows.Forms.ButtonBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ButtonBase>(
                BeginGetUseMnemonic,
                EndGetUseMnemonic,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ButtonBase, System.Boolean> setUseMnemonicInternal = (x, v) => x.UseMnemonic = v;
        public static void SetUseMnemonic(this System.Windows.Forms.ButtonBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUseMnemonicInternal, target, value);
            else
                setUseMnemonicInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ButtonBase, System.Boolean> setUseMnemonicCallback = SetUseMnemonic;
        public static IAsyncResult BeginSetUseMnemonic(this System.Windows.Forms.ButtonBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setUseMnemonicCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUseMnemonic(this System.Windows.Forms.ButtonBase target, IAsyncResult result)
        {
            EndSetUseMnemonic(result);
        }
        public static void EndSetUseMnemonic(IAsyncResult result)
        {
            setUseMnemonicCallback.EndInvoke(result);
        }
        public static Task SetUseMnemonicAsync(this System.Windows.Forms.ButtonBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ButtonBase, System.Boolean>(
                BeginSetUseMnemonic,
                EndSetUseMnemonic,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.Button, System.Boolean> notifyDefault1Internal = (c, value) => c.NotifyDefault(value);
        public static void NotifyDefault(this System.Windows.Forms.Button __control__, System.Boolean value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(notifyDefault1Internal, __control__, value);
            else
                notifyDefault1Internal.Invoke(__control__, value);
        }
        private static readonly Action<System.Windows.Forms.Button, System.Boolean> notifyDefault1Callback = NotifyDefault;
        public static IAsyncResult BeginNotifyDefault1(this System.Windows.Forms.Button __control__, System.Boolean value, AsyncCallback callback, object state)
        {
            return notifyDefault1Callback.BeginInvoke(__control__, value, callback, state);
        }
        public static void EndNotifyDefault1(this System.Windows.Forms.Button __control__, IAsyncResult result)
        {
            EndNotifyDefault1(result);
        }
        public static void EndNotifyDefault1(IAsyncResult result)
        {
            notifyDefault1Callback.EndInvoke(result);
        }
        public static Task NotifyDefaultAsync(this System.Windows.Forms.Button __control__, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Button, System.Boolean>(
                (Func<System.Windows.Forms.Button, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginNotifyDefault1,
                (Action<IAsyncResult>)EndNotifyDefault1,
                __control__, value, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.Button> performClick1Internal = (c) => c.PerformClick();
        public static void PerformClick(this System.Windows.Forms.Button __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(performClick1Internal, __control__);
            else
                performClick1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.Button> performClick1Callback = PerformClick;
        public static IAsyncResult BeginPerformClick1(this System.Windows.Forms.Button __control__, AsyncCallback callback, object state)
        {
            return performClick1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndPerformClick1(this System.Windows.Forms.Button __control__, IAsyncResult result)
        {
            EndPerformClick1(result);
        }
        public static void EndPerformClick1(IAsyncResult result)
        {
            performClick1Callback.EndInvoke(result);
        }
        public static Task PerformClickAsync(this System.Windows.Forms.Button __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Button>(
                (Func<System.Windows.Forms.Button, AsyncCallback, object, IAsyncResult>)BeginPerformClick1,
                (Action<IAsyncResult>)EndPerformClick1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.CheckBox, System.Windows.Forms.Appearance> getAppearanceInternal = (x) => x.Appearance;
        public static System.Windows.Forms.Appearance GetAppearance(this System.Windows.Forms.CheckBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Appearance)target.Invoke(getAppearanceInternal, target);
            else
                return getAppearanceInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckBox, System.Windows.Forms.Appearance> getAppearanceCallback = GetAppearance;
        public static IAsyncResult BeginGetAppearance(this System.Windows.Forms.CheckBox target, AsyncCallback callback, object state)
        {
            return getAppearanceCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Appearance EndGetAppearance(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            return EndGetAppearance(result);
        }
        public static System.Windows.Forms.Appearance EndGetAppearance(IAsyncResult result)
        {
            return getAppearanceCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Appearance> GetAppearanceAsync(this System.Windows.Forms.CheckBox target)
        {
            return Task<System.Windows.Forms.Appearance>.Factory.FromAsync<System.Windows.Forms.CheckBox>(
                BeginGetAppearance,
                EndGetAppearance,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.CheckBox, System.Windows.Forms.Appearance> setAppearanceInternal = (x, v) => x.Appearance = v;
        public static void SetAppearance(this System.Windows.Forms.CheckBox target, System.Windows.Forms.Appearance value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAppearanceInternal, target, value);
            else
                setAppearanceInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.CheckBox, System.Windows.Forms.Appearance> setAppearanceCallback = SetAppearance;
        public static IAsyncResult BeginSetAppearance(this System.Windows.Forms.CheckBox target, System.Windows.Forms.Appearance value, AsyncCallback callback, object state)
        {
            return setAppearanceCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAppearance(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            EndSetAppearance(result);
        }
        public static void EndSetAppearance(IAsyncResult result)
        {
            setAppearanceCallback.EndInvoke(result);
        }
        public static Task SetAppearanceAsync(this System.Windows.Forms.CheckBox target, System.Windows.Forms.Appearance value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckBox, System.Windows.Forms.Appearance>(
                BeginSetAppearance,
                EndSetAppearance,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.CheckBox, System.Boolean> getAutoCheckInternal = (x) => x.AutoCheck;
        public static System.Boolean GetAutoCheck(this System.Windows.Forms.CheckBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoCheckInternal, target);
            else
                return getAutoCheckInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckBox, System.Boolean> getAutoCheckCallback = GetAutoCheck;
        public static IAsyncResult BeginGetAutoCheck(this System.Windows.Forms.CheckBox target, AsyncCallback callback, object state)
        {
            return getAutoCheckCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoCheck(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            return EndGetAutoCheck(result);
        }
        public static System.Boolean EndGetAutoCheck(IAsyncResult result)
        {
            return getAutoCheckCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoCheckAsync(this System.Windows.Forms.CheckBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.CheckBox>(
                BeginGetAutoCheck,
                EndGetAutoCheck,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.CheckBox, System.Boolean> setAutoCheckInternal = (x, v) => x.AutoCheck = v;
        public static void SetAutoCheck(this System.Windows.Forms.CheckBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoCheckInternal, target, value);
            else
                setAutoCheckInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.CheckBox, System.Boolean> setAutoCheckCallback = SetAutoCheck;
        public static IAsyncResult BeginSetAutoCheck(this System.Windows.Forms.CheckBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoCheckCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoCheck(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            EndSetAutoCheck(result);
        }
        public static void EndSetAutoCheck(IAsyncResult result)
        {
            setAutoCheckCallback.EndInvoke(result);
        }
        public static Task SetAutoCheckAsync(this System.Windows.Forms.CheckBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckBox, System.Boolean>(
                BeginSetAutoCheck,
                EndSetAutoCheck,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.CheckBox, System.Drawing.ContentAlignment> getCheckAlignInternal = (x) => x.CheckAlign;
        public static System.Drawing.ContentAlignment GetCheckAlign(this System.Windows.Forms.CheckBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.ContentAlignment)target.Invoke(getCheckAlignInternal, target);
            else
                return getCheckAlignInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckBox, System.Drawing.ContentAlignment> getCheckAlignCallback = GetCheckAlign;
        public static IAsyncResult BeginGetCheckAlign(this System.Windows.Forms.CheckBox target, AsyncCallback callback, object state)
        {
            return getCheckAlignCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.ContentAlignment EndGetCheckAlign(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            return EndGetCheckAlign(result);
        }
        public static System.Drawing.ContentAlignment EndGetCheckAlign(IAsyncResult result)
        {
            return getCheckAlignCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.ContentAlignment> GetCheckAlignAsync(this System.Windows.Forms.CheckBox target)
        {
            return Task<System.Drawing.ContentAlignment>.Factory.FromAsync<System.Windows.Forms.CheckBox>(
                BeginGetCheckAlign,
                EndGetCheckAlign,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.CheckBox, System.Drawing.ContentAlignment> setCheckAlignInternal = (x, v) => x.CheckAlign = v;
        public static void SetCheckAlign(this System.Windows.Forms.CheckBox target, System.Drawing.ContentAlignment value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCheckAlignInternal, target, value);
            else
                setCheckAlignInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.CheckBox, System.Drawing.ContentAlignment> setCheckAlignCallback = SetCheckAlign;
        public static IAsyncResult BeginSetCheckAlign(this System.Windows.Forms.CheckBox target, System.Drawing.ContentAlignment value, AsyncCallback callback, object state)
        {
            return setCheckAlignCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCheckAlign(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            EndSetCheckAlign(result);
        }
        public static void EndSetCheckAlign(IAsyncResult result)
        {
            setCheckAlignCallback.EndInvoke(result);
        }
        public static Task SetCheckAlignAsync(this System.Windows.Forms.CheckBox target, System.Drawing.ContentAlignment value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckBox, System.Drawing.ContentAlignment>(
                BeginSetCheckAlign,
                EndSetCheckAlign,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.CheckBox, System.Boolean> getCheckedInternal = (x) => x.Checked;
        public static System.Boolean GetChecked(this System.Windows.Forms.CheckBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCheckedInternal, target);
            else
                return getCheckedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckBox, System.Boolean> getCheckedCallback = GetChecked;
        public static IAsyncResult BeginGetChecked(this System.Windows.Forms.CheckBox target, AsyncCallback callback, object state)
        {
            return getCheckedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetChecked(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            return EndGetChecked(result);
        }
        public static System.Boolean EndGetChecked(IAsyncResult result)
        {
            return getCheckedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCheckedAsync(this System.Windows.Forms.CheckBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.CheckBox>(
                BeginGetChecked,
                EndGetChecked,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.CheckBox, System.Boolean> setCheckedInternal = (x, v) => x.Checked = v;
        public static void SetChecked(this System.Windows.Forms.CheckBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCheckedInternal, target, value);
            else
                setCheckedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.CheckBox, System.Boolean> setCheckedCallback = SetChecked;
        public static IAsyncResult BeginSetChecked(this System.Windows.Forms.CheckBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCheckedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetChecked(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            EndSetChecked(result);
        }
        public static void EndSetChecked(IAsyncResult result)
        {
            setCheckedCallback.EndInvoke(result);
        }
        public static Task SetCheckedAsync(this System.Windows.Forms.CheckBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckBox, System.Boolean>(
                BeginSetChecked,
                EndSetChecked,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.CheckBox, System.Windows.Forms.CheckState> getCheckStateInternal = (x) => x.CheckState;
        public static System.Windows.Forms.CheckState GetCheckState(this System.Windows.Forms.CheckBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.CheckState)target.Invoke(getCheckStateInternal, target);
            else
                return getCheckStateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckBox, System.Windows.Forms.CheckState> getCheckStateCallback = GetCheckState;
        public static IAsyncResult BeginGetCheckState(this System.Windows.Forms.CheckBox target, AsyncCallback callback, object state)
        {
            return getCheckStateCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.CheckState EndGetCheckState(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            return EndGetCheckState(result);
        }
        public static System.Windows.Forms.CheckState EndGetCheckState(IAsyncResult result)
        {
            return getCheckStateCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.CheckState> GetCheckStateAsync(this System.Windows.Forms.CheckBox target)
        {
            return Task<System.Windows.Forms.CheckState>.Factory.FromAsync<System.Windows.Forms.CheckBox>(
                BeginGetCheckState,
                EndGetCheckState,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.CheckBox, System.Windows.Forms.CheckState> setCheckStateInternal = (x, v) => x.CheckState = v;
        public static void SetCheckState(this System.Windows.Forms.CheckBox target, System.Windows.Forms.CheckState value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCheckStateInternal, target, value);
            else
                setCheckStateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.CheckBox, System.Windows.Forms.CheckState> setCheckStateCallback = SetCheckState;
        public static IAsyncResult BeginSetCheckState(this System.Windows.Forms.CheckBox target, System.Windows.Forms.CheckState value, AsyncCallback callback, object state)
        {
            return setCheckStateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCheckState(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            EndSetCheckState(result);
        }
        public static void EndSetCheckState(IAsyncResult result)
        {
            setCheckStateCallback.EndInvoke(result);
        }
        public static Task SetCheckStateAsync(this System.Windows.Forms.CheckBox target, System.Windows.Forms.CheckState value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckBox, System.Windows.Forms.CheckState>(
                BeginSetCheckState,
                EndSetCheckState,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.CheckBox, System.Boolean> getThreeStateInternal = (x) => x.ThreeState;
        public static System.Boolean GetThreeState(this System.Windows.Forms.CheckBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getThreeStateInternal, target);
            else
                return getThreeStateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckBox, System.Boolean> getThreeStateCallback = GetThreeState;
        public static IAsyncResult BeginGetThreeState(this System.Windows.Forms.CheckBox target, AsyncCallback callback, object state)
        {
            return getThreeStateCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetThreeState(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            return EndGetThreeState(result);
        }
        public static System.Boolean EndGetThreeState(IAsyncResult result)
        {
            return getThreeStateCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetThreeStateAsync(this System.Windows.Forms.CheckBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.CheckBox>(
                BeginGetThreeState,
                EndGetThreeState,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.CheckBox, System.Boolean> setThreeStateInternal = (x, v) => x.ThreeState = v;
        public static void SetThreeState(this System.Windows.Forms.CheckBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setThreeStateInternal, target, value);
            else
                setThreeStateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.CheckBox, System.Boolean> setThreeStateCallback = SetThreeState;
        public static IAsyncResult BeginSetThreeState(this System.Windows.Forms.CheckBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setThreeStateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetThreeState(this System.Windows.Forms.CheckBox target, IAsyncResult result)
        {
            EndSetThreeState(result);
        }
        public static void EndSetThreeState(IAsyncResult result)
        {
            setThreeStateCallback.EndInvoke(result);
        }
        public static Task SetThreeStateAsync(this System.Windows.Forms.CheckBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckBox, System.Boolean>(
                BeginSetThreeState,
                EndSetThreeState,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.RadioButton> performClick2Internal = (c) => c.PerformClick();
        public static void PerformClick(this System.Windows.Forms.RadioButton __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(performClick2Internal, __control__);
            else
                performClick2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.RadioButton> performClick2Callback = PerformClick;
        public static IAsyncResult BeginPerformClick2(this System.Windows.Forms.RadioButton __control__, AsyncCallback callback, object state)
        {
            return performClick2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndPerformClick2(this System.Windows.Forms.RadioButton __control__, IAsyncResult result)
        {
            EndPerformClick2(result);
        }
        public static void EndPerformClick2(IAsyncResult result)
        {
            performClick2Callback.EndInvoke(result);
        }
        public static Task PerformClickAsync(this System.Windows.Forms.RadioButton __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RadioButton>(
                (Func<System.Windows.Forms.RadioButton, AsyncCallback, object, IAsyncResult>)BeginPerformClick2,
                (Action<IAsyncResult>)EndPerformClick2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListControl, System.Object, System.String> getItemText1Internal = (c, item) => c.GetItemText(item);
        public static System.String GetItemText(this System.Windows.Forms.ListControl __control__, System.Object item)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.String)__control__.Invoke(getItemText1Internal, __control__, item);
            else
                return getItemText1Internal.Invoke(__control__, item);
        }
        private static readonly Func<System.Windows.Forms.ListControl, System.Object, System.String> getItemText1Callback = GetItemText;
        public static IAsyncResult BeginGetItemText1(this System.Windows.Forms.ListControl __control__, System.Object item, AsyncCallback callback, object state)
        {
            return getItemText1Callback.BeginInvoke(__control__, item, callback, state);
        }
        public static System.String EndGetItemText1(this System.Windows.Forms.ListControl __control__, IAsyncResult result)
        {
            return EndGetItemText1(result);
        }
        public static System.String EndGetItemText1(IAsyncResult result)
        {
            return getItemText1Callback.EndInvoke(result);
        }
        public static Task<System.String> GetItemTextAsync(this System.Windows.Forms.ListControl __control__, System.Object item)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.ListControl, System.Object>(
                (Func<System.Windows.Forms.ListControl, System.Object, AsyncCallback, object, IAsyncResult>)BeginGetItemText1,
                (Func<IAsyncResult, System.String>)EndGetItemText1,
                __control__, item, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ListControl, System.Object> getDataSourceInternal = (x) => x.DataSource;
        public static System.Object GetDataSource(this System.Windows.Forms.ListControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Object)target.Invoke(getDataSourceInternal, target);
            else
                return getDataSourceInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListControl, System.Object> getDataSourceCallback = GetDataSource;
        public static IAsyncResult BeginGetDataSource(this System.Windows.Forms.ListControl target, AsyncCallback callback, object state)
        {
            return getDataSourceCallback.BeginInvoke(target, callback, state);
        }
        public static System.Object EndGetDataSource(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            return EndGetDataSource(result);
        }
        public static System.Object EndGetDataSource(IAsyncResult result)
        {
            return getDataSourceCallback.EndInvoke(result);
        }
        public static Task<System.Object> GetDataSourceAsync(this System.Windows.Forms.ListControl target)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.ListControl>(
                BeginGetDataSource,
                EndGetDataSource,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListControl, System.Object> setDataSourceInternal = (x, v) => x.DataSource = v;
        public static void SetDataSource(this System.Windows.Forms.ListControl target, System.Object value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDataSourceInternal, target, value);
            else
                setDataSourceInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListControl, System.Object> setDataSourceCallback = SetDataSource;
        public static IAsyncResult BeginSetDataSource(this System.Windows.Forms.ListControl target, System.Object value, AsyncCallback callback, object state)
        {
            return setDataSourceCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDataSource(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            EndSetDataSource(result);
        }
        public static void EndSetDataSource(IAsyncResult result)
        {
            setDataSourceCallback.EndInvoke(result);
        }
        public static Task SetDataSourceAsync(this System.Windows.Forms.ListControl target, System.Object value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListControl, System.Object>(
                BeginSetDataSource,
                EndSetDataSource,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListControl, System.String> getDisplayMemberInternal = (x) => x.DisplayMember;
        public static System.String GetDisplayMember(this System.Windows.Forms.ListControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getDisplayMemberInternal, target);
            else
                return getDisplayMemberInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListControl, System.String> getDisplayMemberCallback = GetDisplayMember;
        public static IAsyncResult BeginGetDisplayMember(this System.Windows.Forms.ListControl target, AsyncCallback callback, object state)
        {
            return getDisplayMemberCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetDisplayMember(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            return EndGetDisplayMember(result);
        }
        public static System.String EndGetDisplayMember(IAsyncResult result)
        {
            return getDisplayMemberCallback.EndInvoke(result);
        }
        public static Task<System.String> GetDisplayMemberAsync(this System.Windows.Forms.ListControl target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.ListControl>(
                BeginGetDisplayMember,
                EndGetDisplayMember,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListControl, System.String> setDisplayMemberInternal = (x, v) => x.DisplayMember = v;
        public static void SetDisplayMember(this System.Windows.Forms.ListControl target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDisplayMemberInternal, target, value);
            else
                setDisplayMemberInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListControl, System.String> setDisplayMemberCallback = SetDisplayMember;
        public static IAsyncResult BeginSetDisplayMember(this System.Windows.Forms.ListControl target, System.String value, AsyncCallback callback, object state)
        {
            return setDisplayMemberCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDisplayMember(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            EndSetDisplayMember(result);
        }
        public static void EndSetDisplayMember(IAsyncResult result)
        {
            setDisplayMemberCallback.EndInvoke(result);
        }
        public static Task SetDisplayMemberAsync(this System.Windows.Forms.ListControl target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListControl, System.String>(
                BeginSetDisplayMember,
                EndSetDisplayMember,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListControl, System.IFormatProvider> getFormatInfoInternal = (x) => x.FormatInfo;
        public static System.IFormatProvider GetFormatInfo(this System.Windows.Forms.ListControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.IFormatProvider)target.Invoke(getFormatInfoInternal, target);
            else
                return getFormatInfoInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListControl, System.IFormatProvider> getFormatInfoCallback = GetFormatInfo;
        public static IAsyncResult BeginGetFormatInfo(this System.Windows.Forms.ListControl target, AsyncCallback callback, object state)
        {
            return getFormatInfoCallback.BeginInvoke(target, callback, state);
        }
        public static System.IFormatProvider EndGetFormatInfo(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            return EndGetFormatInfo(result);
        }
        public static System.IFormatProvider EndGetFormatInfo(IAsyncResult result)
        {
            return getFormatInfoCallback.EndInvoke(result);
        }
        public static Task<System.IFormatProvider> GetFormatInfoAsync(this System.Windows.Forms.ListControl target)
        {
            return Task<System.IFormatProvider>.Factory.FromAsync<System.Windows.Forms.ListControl>(
                BeginGetFormatInfo,
                EndGetFormatInfo,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListControl, System.IFormatProvider> setFormatInfoInternal = (x, v) => x.FormatInfo = v;
        public static void SetFormatInfo(this System.Windows.Forms.ListControl target, System.IFormatProvider value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFormatInfoInternal, target, value);
            else
                setFormatInfoInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListControl, System.IFormatProvider> setFormatInfoCallback = SetFormatInfo;
        public static IAsyncResult BeginSetFormatInfo(this System.Windows.Forms.ListControl target, System.IFormatProvider value, AsyncCallback callback, object state)
        {
            return setFormatInfoCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFormatInfo(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            EndSetFormatInfo(result);
        }
        public static void EndSetFormatInfo(IAsyncResult result)
        {
            setFormatInfoCallback.EndInvoke(result);
        }
        public static Task SetFormatInfoAsync(this System.Windows.Forms.ListControl target, System.IFormatProvider value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListControl, System.IFormatProvider>(
                BeginSetFormatInfo,
                EndSetFormatInfo,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListControl, System.String> getFormatStringInternal = (x) => x.FormatString;
        public static System.String GetFormatString(this System.Windows.Forms.ListControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getFormatStringInternal, target);
            else
                return getFormatStringInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListControl, System.String> getFormatStringCallback = GetFormatString;
        public static IAsyncResult BeginGetFormatString(this System.Windows.Forms.ListControl target, AsyncCallback callback, object state)
        {
            return getFormatStringCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetFormatString(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            return EndGetFormatString(result);
        }
        public static System.String EndGetFormatString(IAsyncResult result)
        {
            return getFormatStringCallback.EndInvoke(result);
        }
        public static Task<System.String> GetFormatStringAsync(this System.Windows.Forms.ListControl target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.ListControl>(
                BeginGetFormatString,
                EndGetFormatString,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListControl, System.String> setFormatStringInternal = (x, v) => x.FormatString = v;
        public static void SetFormatString(this System.Windows.Forms.ListControl target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFormatStringInternal, target, value);
            else
                setFormatStringInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListControl, System.String> setFormatStringCallback = SetFormatString;
        public static IAsyncResult BeginSetFormatString(this System.Windows.Forms.ListControl target, System.String value, AsyncCallback callback, object state)
        {
            return setFormatStringCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFormatString(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            EndSetFormatString(result);
        }
        public static void EndSetFormatString(IAsyncResult result)
        {
            setFormatStringCallback.EndInvoke(result);
        }
        public static Task SetFormatStringAsync(this System.Windows.Forms.ListControl target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListControl, System.String>(
                BeginSetFormatString,
                EndSetFormatString,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListControl, System.Boolean> getFormattingEnabledInternal = (x) => x.FormattingEnabled;
        public static System.Boolean GetFormattingEnabled(this System.Windows.Forms.ListControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getFormattingEnabledInternal, target);
            else
                return getFormattingEnabledInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListControl, System.Boolean> getFormattingEnabledCallback = GetFormattingEnabled;
        public static IAsyncResult BeginGetFormattingEnabled(this System.Windows.Forms.ListControl target, AsyncCallback callback, object state)
        {
            return getFormattingEnabledCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetFormattingEnabled(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            return EndGetFormattingEnabled(result);
        }
        public static System.Boolean EndGetFormattingEnabled(IAsyncResult result)
        {
            return getFormattingEnabledCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetFormattingEnabledAsync(this System.Windows.Forms.ListControl target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListControl>(
                BeginGetFormattingEnabled,
                EndGetFormattingEnabled,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListControl, System.Boolean> setFormattingEnabledInternal = (x, v) => x.FormattingEnabled = v;
        public static void SetFormattingEnabled(this System.Windows.Forms.ListControl target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFormattingEnabledInternal, target, value);
            else
                setFormattingEnabledInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListControl, System.Boolean> setFormattingEnabledCallback = SetFormattingEnabled;
        public static IAsyncResult BeginSetFormattingEnabled(this System.Windows.Forms.ListControl target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setFormattingEnabledCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFormattingEnabled(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            EndSetFormattingEnabled(result);
        }
        public static void EndSetFormattingEnabled(IAsyncResult result)
        {
            setFormattingEnabledCallback.EndInvoke(result);
        }
        public static Task SetFormattingEnabledAsync(this System.Windows.Forms.ListControl target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListControl, System.Boolean>(
                BeginSetFormattingEnabled,
                EndSetFormattingEnabled,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListControl, System.String> getValueMemberInternal = (x) => x.ValueMember;
        public static System.String GetValueMember(this System.Windows.Forms.ListControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getValueMemberInternal, target);
            else
                return getValueMemberInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListControl, System.String> getValueMemberCallback = GetValueMember;
        public static IAsyncResult BeginGetValueMember(this System.Windows.Forms.ListControl target, AsyncCallback callback, object state)
        {
            return getValueMemberCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetValueMember(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            return EndGetValueMember(result);
        }
        public static System.String EndGetValueMember(IAsyncResult result)
        {
            return getValueMemberCallback.EndInvoke(result);
        }
        public static Task<System.String> GetValueMemberAsync(this System.Windows.Forms.ListControl target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.ListControl>(
                BeginGetValueMember,
                EndGetValueMember,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListControl, System.String> setValueMemberInternal = (x, v) => x.ValueMember = v;
        public static void SetValueMember(this System.Windows.Forms.ListControl target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setValueMemberInternal, target, value);
            else
                setValueMemberInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListControl, System.String> setValueMemberCallback = SetValueMember;
        public static IAsyncResult BeginSetValueMember(this System.Windows.Forms.ListControl target, System.String value, AsyncCallback callback, object state)
        {
            return setValueMemberCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetValueMember(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            EndSetValueMember(result);
        }
        public static void EndSetValueMember(IAsyncResult result)
        {
            setValueMemberCallback.EndInvoke(result);
        }
        public static Task SetValueMemberAsync(this System.Windows.Forms.ListControl target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListControl, System.String>(
                BeginSetValueMember,
                EndSetValueMember,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListControl, System.Object> getSelectedValueInternal = (x) => x.SelectedValue;
        public static System.Object GetSelectedValue(this System.Windows.Forms.ListControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Object)target.Invoke(getSelectedValueInternal, target);
            else
                return getSelectedValueInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListControl, System.Object> getSelectedValueCallback = GetSelectedValue;
        public static IAsyncResult BeginGetSelectedValue(this System.Windows.Forms.ListControl target, AsyncCallback callback, object state)
        {
            return getSelectedValueCallback.BeginInvoke(target, callback, state);
        }
        public static System.Object EndGetSelectedValue(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            return EndGetSelectedValue(result);
        }
        public static System.Object EndGetSelectedValue(IAsyncResult result)
        {
            return getSelectedValueCallback.EndInvoke(result);
        }
        public static Task<System.Object> GetSelectedValueAsync(this System.Windows.Forms.ListControl target)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.ListControl>(
                BeginGetSelectedValue,
                EndGetSelectedValue,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListControl, System.Object> setSelectedValueInternal = (x, v) => x.SelectedValue = v;
        public static void SetSelectedValue(this System.Windows.Forms.ListControl target, System.Object value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedValueInternal, target, value);
            else
                setSelectedValueInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListControl, System.Object> setSelectedValueCallback = SetSelectedValue;
        public static IAsyncResult BeginSetSelectedValue(this System.Windows.Forms.ListControl target, System.Object value, AsyncCallback callback, object state)
        {
            return setSelectedValueCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedValue(this System.Windows.Forms.ListControl target, IAsyncResult result)
        {
            EndSetSelectedValue(result);
        }
        public static void EndSetSelectedValue(IAsyncResult result)
        {
            setSelectedValueCallback.EndInvoke(result);
        }
        public static Task SetSelectedValueAsync(this System.Windows.Forms.ListControl target, System.Object value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListControl, System.Object>(
                BeginSetSelectedValue,
                EndSetSelectedValue,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.ListBox> clearSelected1Internal = (c) => c.ClearSelected();
        public static void ClearSelected(this System.Windows.Forms.ListBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(clearSelected1Internal, __control__);
            else
                clearSelected1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ListBox> clearSelected1Callback = ClearSelected;
        public static IAsyncResult BeginClearSelected1(this System.Windows.Forms.ListBox __control__, AsyncCallback callback, object state)
        {
            return clearSelected1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndClearSelected1(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            EndClearSelected1(result);
        }
        public static void EndClearSelected1(IAsyncResult result)
        {
            clearSelected1Callback.EndInvoke(result);
        }
        public static Task ClearSelectedAsync(this System.Windows.Forms.ListBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox>(
                (Func<System.Windows.Forms.ListBox, AsyncCallback, object, IAsyncResult>)BeginClearSelected1,
                (Action<IAsyncResult>)EndClearSelected1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.String, System.Int32> findString1Internal = (c, s) => c.FindString(s);
        public static System.Int32 FindString(this System.Windows.Forms.ListBox __control__, System.String s)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(findString1Internal, __control__, s);
            else
                return findString1Internal.Invoke(__control__, s);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.String, System.Int32> findString1Callback = FindString;
        public static IAsyncResult BeginFindString1(this System.Windows.Forms.ListBox __control__, System.String s, AsyncCallback callback, object state)
        {
            return findString1Callback.BeginInvoke(__control__, s, callback, state);
        }
        public static System.Int32 EndFindString1(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            return EndFindString1(result);
        }
        public static System.Int32 EndFindString1(IAsyncResult result)
        {
            return findString1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindStringAsync(this System.Windows.Forms.ListBox __control__, System.String s)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox, System.String>(
                (Func<System.Windows.Forms.ListBox, System.String, AsyncCallback, object, IAsyncResult>)BeginFindString1,
                (Func<IAsyncResult, System.Int32>)EndFindString1,
                __control__, s, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.String, System.Int32, System.Int32> findString2Internal = (c, s, startIndex) => c.FindString(s, startIndex);
        public static System.Int32 FindString(this System.Windows.Forms.ListBox __control__, System.String s, System.Int32 startIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(findString2Internal, __control__, s, startIndex);
            else
                return findString2Internal.Invoke(__control__, s, startIndex);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.String, System.Int32, System.Int32> findString2Callback = FindString;
        public static IAsyncResult BeginFindString2(this System.Windows.Forms.ListBox __control__, System.String s, System.Int32 startIndex, AsyncCallback callback, object state)
        {
            return findString2Callback.BeginInvoke(__control__, s, startIndex, callback, state);
        }
        public static System.Int32 EndFindString2(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            return EndFindString2(result);
        }
        public static System.Int32 EndFindString2(IAsyncResult result)
        {
            return findString2Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindStringAsync(this System.Windows.Forms.ListBox __control__, System.String s, System.Int32 startIndex)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox, System.String, System.Int32>(
                (Func<System.Windows.Forms.ListBox, System.String, System.Int32, AsyncCallback, object, IAsyncResult>)BeginFindString2,
                (Func<IAsyncResult, System.Int32>)EndFindString2,
                __control__, s, startIndex, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.String, System.Int32> findStringExact1Internal = (c, s) => c.FindStringExact(s);
        public static System.Int32 FindStringExact(this System.Windows.Forms.ListBox __control__, System.String s)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(findStringExact1Internal, __control__, s);
            else
                return findStringExact1Internal.Invoke(__control__, s);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.String, System.Int32> findStringExact1Callback = FindStringExact;
        public static IAsyncResult BeginFindStringExact1(this System.Windows.Forms.ListBox __control__, System.String s, AsyncCallback callback, object state)
        {
            return findStringExact1Callback.BeginInvoke(__control__, s, callback, state);
        }
        public static System.Int32 EndFindStringExact1(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            return EndFindStringExact1(result);
        }
        public static System.Int32 EndFindStringExact1(IAsyncResult result)
        {
            return findStringExact1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindStringExactAsync(this System.Windows.Forms.ListBox __control__, System.String s)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox, System.String>(
                (Func<System.Windows.Forms.ListBox, System.String, AsyncCallback, object, IAsyncResult>)BeginFindStringExact1,
                (Func<IAsyncResult, System.Int32>)EndFindStringExact1,
                __control__, s, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.String, System.Int32, System.Int32> findStringExact2Internal = (c, s, startIndex) => c.FindStringExact(s, startIndex);
        public static System.Int32 FindStringExact(this System.Windows.Forms.ListBox __control__, System.String s, System.Int32 startIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(findStringExact2Internal, __control__, s, startIndex);
            else
                return findStringExact2Internal.Invoke(__control__, s, startIndex);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.String, System.Int32, System.Int32> findStringExact2Callback = FindStringExact;
        public static IAsyncResult BeginFindStringExact2(this System.Windows.Forms.ListBox __control__, System.String s, System.Int32 startIndex, AsyncCallback callback, object state)
        {
            return findStringExact2Callback.BeginInvoke(__control__, s, startIndex, callback, state);
        }
        public static System.Int32 EndFindStringExact2(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            return EndFindStringExact2(result);
        }
        public static System.Int32 EndFindStringExact2(IAsyncResult result)
        {
            return findStringExact2Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindStringExactAsync(this System.Windows.Forms.ListBox __control__, System.String s, System.Int32 startIndex)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox, System.String, System.Int32>(
                (Func<System.Windows.Forms.ListBox, System.String, System.Int32, AsyncCallback, object, IAsyncResult>)BeginFindStringExact2,
                (Func<IAsyncResult, System.Int32>)EndFindStringExact2,
                __control__, s, startIndex, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Int32, System.Int32> getItemHeight1Internal = (c, index) => c.GetItemHeight(index);
        public static System.Int32 GetItemHeight(this System.Windows.Forms.ListBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getItemHeight1Internal, __control__, index);
            else
                return getItemHeight1Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Int32, System.Int32> getItemHeight1Callback = GetItemHeight;
        public static IAsyncResult BeginGetItemHeight1(this System.Windows.Forms.ListBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getItemHeight1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Int32 EndGetItemHeight1(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            return EndGetItemHeight1(result);
        }
        public static System.Int32 EndGetItemHeight1(IAsyncResult result)
        {
            return getItemHeight1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetItemHeightAsync(this System.Windows.Forms.ListBox __control__, System.Int32 index)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox, System.Int32>(
                (Func<System.Windows.Forms.ListBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetItemHeight1,
                (Func<IAsyncResult, System.Int32>)EndGetItemHeight1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Int32, System.Drawing.Rectangle> getItemRectangle1Internal = (c, index) => c.GetItemRectangle(index);
        public static System.Drawing.Rectangle GetItemRectangle(this System.Windows.Forms.ListBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getItemRectangle1Internal, __control__, index);
            else
                return getItemRectangle1Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Int32, System.Drawing.Rectangle> getItemRectangle1Callback = GetItemRectangle;
        public static IAsyncResult BeginGetItemRectangle1(this System.Windows.Forms.ListBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getItemRectangle1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Drawing.Rectangle EndGetItemRectangle1(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            return EndGetItemRectangle1(result);
        }
        public static System.Drawing.Rectangle EndGetItemRectangle1(IAsyncResult result)
        {
            return getItemRectangle1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetItemRectangleAsync(this System.Windows.Forms.ListBox __control__, System.Int32 index)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.ListBox, System.Int32>(
                (Func<System.Windows.Forms.ListBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetItemRectangle1,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetItemRectangle1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Int32, System.Boolean> getSelected1Internal = (c, index) => c.GetSelected(index);
        public static System.Boolean GetSelected(this System.Windows.Forms.ListBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(getSelected1Internal, __control__, index);
            else
                return getSelected1Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Int32, System.Boolean> getSelected1Callback = GetSelected;
        public static IAsyncResult BeginGetSelected1(this System.Windows.Forms.ListBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getSelected1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Boolean EndGetSelected1(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            return EndGetSelected1(result);
        }
        public static System.Boolean EndGetSelected1(IAsyncResult result)
        {
            return getSelected1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetSelectedAsync(this System.Windows.Forms.ListBox __control__, System.Int32 index)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListBox, System.Int32>(
                (Func<System.Windows.Forms.ListBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetSelected1,
                (Func<IAsyncResult, System.Boolean>)EndGetSelected1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Drawing.Point, System.Int32> indexFromPoint1Internal = (c, p) => c.IndexFromPoint(p);
        public static System.Int32 IndexFromPoint(this System.Windows.Forms.ListBox __control__, System.Drawing.Point p)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(indexFromPoint1Internal, __control__, p);
            else
                return indexFromPoint1Internal.Invoke(__control__, p);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Drawing.Point, System.Int32> indexFromPoint1Callback = IndexFromPoint;
        public static IAsyncResult BeginIndexFromPoint1(this System.Windows.Forms.ListBox __control__, System.Drawing.Point p, AsyncCallback callback, object state)
        {
            return indexFromPoint1Callback.BeginInvoke(__control__, p, callback, state);
        }
        public static System.Int32 EndIndexFromPoint1(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            return EndIndexFromPoint1(result);
        }
        public static System.Int32 EndIndexFromPoint1(IAsyncResult result)
        {
            return indexFromPoint1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> IndexFromPointAsync(this System.Windows.Forms.ListBox __control__, System.Drawing.Point p)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox, System.Drawing.Point>(
                (Func<System.Windows.Forms.ListBox, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginIndexFromPoint1,
                (Func<IAsyncResult, System.Int32>)EndIndexFromPoint1,
                __control__, p, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Int32, System.Int32, System.Int32> indexFromPoint2Internal = (c, x, y) => c.IndexFromPoint(x, y);
        public static System.Int32 IndexFromPoint(this System.Windows.Forms.ListBox __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(indexFromPoint2Internal, __control__, x, y);
            else
                return indexFromPoint2Internal.Invoke(__control__, x, y);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Int32, System.Int32, System.Int32> indexFromPoint2Callback = IndexFromPoint;
        public static IAsyncResult BeginIndexFromPoint2(this System.Windows.Forms.ListBox __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return indexFromPoint2Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static System.Int32 EndIndexFromPoint2(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            return EndIndexFromPoint2(result);
        }
        public static System.Int32 EndIndexFromPoint2(IAsyncResult result)
        {
            return indexFromPoint2Callback.EndInvoke(result);
        }
        public static Task<System.Int32> IndexFromPointAsync(this System.Windows.Forms.ListBox __control__, System.Int32 x, System.Int32 y)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.ListBox, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginIndexFromPoint2,
                (Func<IAsyncResult, System.Int32>)EndIndexFromPoint2,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListBox> refresh3Internal = (c) => c.Refresh();
        public static void Refresh(this System.Windows.Forms.ListBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(refresh3Internal, __control__);
            else
                refresh3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ListBox> refresh3Callback = Refresh;
        public static IAsyncResult BeginRefresh3(this System.Windows.Forms.ListBox __control__, AsyncCallback callback, object state)
        {
            return refresh3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndRefresh3(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            EndRefresh3(result);
        }
        public static void EndRefresh3(IAsyncResult result)
        {
            refresh3Callback.EndInvoke(result);
        }
        public static Task RefreshAsync(this System.Windows.Forms.ListBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox>(
                (Func<System.Windows.Forms.ListBox, AsyncCallback, object, IAsyncResult>)BeginRefresh3,
                (Action<IAsyncResult>)EndRefresh3,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListBox> resetBackColor2Internal = (c) => c.ResetBackColor();
        public static void ResetBackColor(this System.Windows.Forms.ListBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetBackColor2Internal, __control__);
            else
                resetBackColor2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ListBox> resetBackColor2Callback = ResetBackColor;
        public static IAsyncResult BeginResetBackColor2(this System.Windows.Forms.ListBox __control__, AsyncCallback callback, object state)
        {
            return resetBackColor2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetBackColor2(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            EndResetBackColor2(result);
        }
        public static void EndResetBackColor2(IAsyncResult result)
        {
            resetBackColor2Callback.EndInvoke(result);
        }
        public static Task ResetBackColorAsync(this System.Windows.Forms.ListBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox>(
                (Func<System.Windows.Forms.ListBox, AsyncCallback, object, IAsyncResult>)BeginResetBackColor2,
                (Action<IAsyncResult>)EndResetBackColor2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListBox> resetForeColor2Internal = (c) => c.ResetForeColor();
        public static void ResetForeColor(this System.Windows.Forms.ListBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetForeColor2Internal, __control__);
            else
                resetForeColor2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ListBox> resetForeColor2Callback = ResetForeColor;
        public static IAsyncResult BeginResetForeColor2(this System.Windows.Forms.ListBox __control__, AsyncCallback callback, object state)
        {
            return resetForeColor2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetForeColor2(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            EndResetForeColor2(result);
        }
        public static void EndResetForeColor2(IAsyncResult result)
        {
            resetForeColor2Callback.EndInvoke(result);
        }
        public static Task ResetForeColorAsync(this System.Windows.Forms.ListBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox>(
                (Func<System.Windows.Forms.ListBox, AsyncCallback, object, IAsyncResult>)BeginResetForeColor2,
                (Action<IAsyncResult>)EndResetForeColor2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Int32, System.Boolean> setSelected1Internal = (c, index, value) => c.SetSelected(index, value);
        public static void SetSelected(this System.Windows.Forms.ListBox __control__, System.Int32 index, System.Boolean value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setSelected1Internal, __control__, index, value);
            else
                setSelected1Internal.Invoke(__control__, index, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Int32, System.Boolean> setSelected1Callback = SetSelected;
        public static IAsyncResult BeginSetSelected1(this System.Windows.Forms.ListBox __control__, System.Int32 index, System.Boolean value, AsyncCallback callback, object state)
        {
            return setSelected1Callback.BeginInvoke(__control__, index, value, callback, state);
        }
        public static void EndSetSelected1(this System.Windows.Forms.ListBox __control__, IAsyncResult result)
        {
            EndSetSelected1(result);
        }
        public static void EndSetSelected1(IAsyncResult result)
        {
            setSelected1Callback.EndInvoke(result);
        }
        public static Task SetSelectedAsync(this System.Windows.Forms.ListBox __control__, System.Int32 index, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Int32, System.Boolean>(
                (Func<System.Windows.Forms.ListBox, System.Int32, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginSetSelected1,
                (Action<IAsyncResult>)EndSetSelected1,
                __control__, index, value, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Int32> getColumnWidthInternal = (x) => x.ColumnWidth;
        public static System.Int32 GetColumnWidth(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getColumnWidthInternal, target);
            else
                return getColumnWidthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Int32> getColumnWidthCallback = GetColumnWidth;
        public static IAsyncResult BeginGetColumnWidth(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getColumnWidthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetColumnWidth(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetColumnWidth(result);
        }
        public static System.Int32 EndGetColumnWidth(IAsyncResult result)
        {
            return getColumnWidthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetColumnWidthAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetColumnWidth,
                EndGetColumnWidth,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Int32> setColumnWidthInternal = (x, v) => x.ColumnWidth = v;
        public static void SetColumnWidth(this System.Windows.Forms.ListBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setColumnWidthInternal, target, value);
            else
                setColumnWidthInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Int32> setColumnWidthCallback = SetColumnWidth;
        public static IAsyncResult BeginSetColumnWidth(this System.Windows.Forms.ListBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setColumnWidthCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetColumnWidth(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetColumnWidth(result);
        }
        public static void EndSetColumnWidth(IAsyncResult result)
        {
            setColumnWidthCallback.EndInvoke(result);
        }
        public static Task SetColumnWidthAsync(this System.Windows.Forms.ListBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Int32>(
                BeginSetColumnWidth,
                EndSetColumnWidth,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getUseCustomTabOffsetsInternal = (x) => x.UseCustomTabOffsets;
        public static System.Boolean GetUseCustomTabOffsets(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getUseCustomTabOffsetsInternal, target);
            else
                return getUseCustomTabOffsetsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getUseCustomTabOffsetsCallback = GetUseCustomTabOffsets;
        public static IAsyncResult BeginGetUseCustomTabOffsets(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getUseCustomTabOffsetsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetUseCustomTabOffsets(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetUseCustomTabOffsets(result);
        }
        public static System.Boolean EndGetUseCustomTabOffsets(IAsyncResult result)
        {
            return getUseCustomTabOffsetsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetUseCustomTabOffsetsAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetUseCustomTabOffsets,
                EndGetUseCustomTabOffsets,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setUseCustomTabOffsetsInternal = (x, v) => x.UseCustomTabOffsets = v;
        public static void SetUseCustomTabOffsets(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUseCustomTabOffsetsInternal, target, value);
            else
                setUseCustomTabOffsetsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setUseCustomTabOffsetsCallback = SetUseCustomTabOffsets;
        public static IAsyncResult BeginSetUseCustomTabOffsets(this System.Windows.Forms.ListBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setUseCustomTabOffsetsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUseCustomTabOffsets(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetUseCustomTabOffsets(result);
        }
        public static void EndSetUseCustomTabOffsets(IAsyncResult result)
        {
            setUseCustomTabOffsetsCallback.EndInvoke(result);
        }
        public static Task SetUseCustomTabOffsetsAsync(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Boolean>(
                BeginSetUseCustomTabOffsets,
                EndSetUseCustomTabOffsets,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.DrawMode> getDrawModeInternal = (x) => x.DrawMode;
        public static System.Windows.Forms.DrawMode GetDrawMode(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DrawMode)target.Invoke(getDrawModeInternal, target);
            else
                return getDrawModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.DrawMode> getDrawModeCallback = GetDrawMode;
        public static IAsyncResult BeginGetDrawMode(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getDrawModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DrawMode EndGetDrawMode(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetDrawMode(result);
        }
        public static System.Windows.Forms.DrawMode EndGetDrawMode(IAsyncResult result)
        {
            return getDrawModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DrawMode> GetDrawModeAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Windows.Forms.DrawMode>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetDrawMode,
                EndGetDrawMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Windows.Forms.DrawMode> setDrawModeInternal = (x, v) => x.DrawMode = v;
        public static void SetDrawMode(this System.Windows.Forms.ListBox target, System.Windows.Forms.DrawMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDrawModeInternal, target, value);
            else
                setDrawModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Windows.Forms.DrawMode> setDrawModeCallback = SetDrawMode;
        public static IAsyncResult BeginSetDrawMode(this System.Windows.Forms.ListBox target, System.Windows.Forms.DrawMode value, AsyncCallback callback, object state)
        {
            return setDrawModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDrawMode(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetDrawMode(result);
        }
        public static void EndSetDrawMode(IAsyncResult result)
        {
            setDrawModeCallback.EndInvoke(result);
        }
        public static Task SetDrawModeAsync(this System.Windows.Forms.ListBox target, System.Windows.Forms.DrawMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Windows.Forms.DrawMode>(
                BeginSetDrawMode,
                EndSetDrawMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Int32> getHorizontalExtentInternal = (x) => x.HorizontalExtent;
        public static System.Int32 GetHorizontalExtent(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getHorizontalExtentInternal, target);
            else
                return getHorizontalExtentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Int32> getHorizontalExtentCallback = GetHorizontalExtent;
        public static IAsyncResult BeginGetHorizontalExtent(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getHorizontalExtentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetHorizontalExtent(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetHorizontalExtent(result);
        }
        public static System.Int32 EndGetHorizontalExtent(IAsyncResult result)
        {
            return getHorizontalExtentCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetHorizontalExtentAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetHorizontalExtent,
                EndGetHorizontalExtent,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Int32> setHorizontalExtentInternal = (x, v) => x.HorizontalExtent = v;
        public static void SetHorizontalExtent(this System.Windows.Forms.ListBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHorizontalExtentInternal, target, value);
            else
                setHorizontalExtentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Int32> setHorizontalExtentCallback = SetHorizontalExtent;
        public static IAsyncResult BeginSetHorizontalExtent(this System.Windows.Forms.ListBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setHorizontalExtentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHorizontalExtent(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetHorizontalExtent(result);
        }
        public static void EndSetHorizontalExtent(IAsyncResult result)
        {
            setHorizontalExtentCallback.EndInvoke(result);
        }
        public static Task SetHorizontalExtentAsync(this System.Windows.Forms.ListBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Int32>(
                BeginSetHorizontalExtent,
                EndSetHorizontalExtent,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getHorizontalScrollbarInternal = (x) => x.HorizontalScrollbar;
        public static System.Boolean GetHorizontalScrollbar(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHorizontalScrollbarInternal, target);
            else
                return getHorizontalScrollbarInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getHorizontalScrollbarCallback = GetHorizontalScrollbar;
        public static IAsyncResult BeginGetHorizontalScrollbar(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getHorizontalScrollbarCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHorizontalScrollbar(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetHorizontalScrollbar(result);
        }
        public static System.Boolean EndGetHorizontalScrollbar(IAsyncResult result)
        {
            return getHorizontalScrollbarCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHorizontalScrollbarAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetHorizontalScrollbar,
                EndGetHorizontalScrollbar,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setHorizontalScrollbarInternal = (x, v) => x.HorizontalScrollbar = v;
        public static void SetHorizontalScrollbar(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHorizontalScrollbarInternal, target, value);
            else
                setHorizontalScrollbarInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setHorizontalScrollbarCallback = SetHorizontalScrollbar;
        public static IAsyncResult BeginSetHorizontalScrollbar(this System.Windows.Forms.ListBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setHorizontalScrollbarCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHorizontalScrollbar(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetHorizontalScrollbar(result);
        }
        public static void EndSetHorizontalScrollbar(IAsyncResult result)
        {
            setHorizontalScrollbarCallback.EndInvoke(result);
        }
        public static Task SetHorizontalScrollbarAsync(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Boolean>(
                BeginSetHorizontalScrollbar,
                EndSetHorizontalScrollbar,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getIntegralHeightInternal = (x) => x.IntegralHeight;
        public static System.Boolean GetIntegralHeight(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIntegralHeightInternal, target);
            else
                return getIntegralHeightInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getIntegralHeightCallback = GetIntegralHeight;
        public static IAsyncResult BeginGetIntegralHeight(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getIntegralHeightCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIntegralHeight(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetIntegralHeight(result);
        }
        public static System.Boolean EndGetIntegralHeight(IAsyncResult result)
        {
            return getIntegralHeightCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIntegralHeightAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetIntegralHeight,
                EndGetIntegralHeight,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setIntegralHeightInternal = (x, v) => x.IntegralHeight = v;
        public static void SetIntegralHeight(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setIntegralHeightInternal, target, value);
            else
                setIntegralHeightInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setIntegralHeightCallback = SetIntegralHeight;
        public static IAsyncResult BeginSetIntegralHeight(this System.Windows.Forms.ListBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setIntegralHeightCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetIntegralHeight(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetIntegralHeight(result);
        }
        public static void EndSetIntegralHeight(IAsyncResult result)
        {
            setIntegralHeightCallback.EndInvoke(result);
        }
        public static Task SetIntegralHeightAsync(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Boolean>(
                BeginSetIntegralHeight,
                EndSetIntegralHeight,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Int32> getItemHeightInternal = (x) => x.ItemHeight;
        public static System.Int32 GetItemHeight(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getItemHeightInternal, target);
            else
                return getItemHeightInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Int32> getItemHeightCallback = GetItemHeight;
        public static IAsyncResult BeginGetItemHeight(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getItemHeightCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetItemHeight(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetItemHeight(result);
        }
        public static System.Int32 EndGetItemHeight(IAsyncResult result)
        {
            return getItemHeightCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetItemHeightAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetItemHeight,
                EndGetItemHeight,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Int32> setItemHeightInternal = (x, v) => x.ItemHeight = v;
        public static void SetItemHeight(this System.Windows.Forms.ListBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setItemHeightInternal, target, value);
            else
                setItemHeightInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Int32> setItemHeightCallback = SetItemHeight;
        public static IAsyncResult BeginSetItemHeight(this System.Windows.Forms.ListBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setItemHeightCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetItemHeight(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetItemHeight(result);
        }
        public static void EndSetItemHeight(IAsyncResult result)
        {
            setItemHeightCallback.EndInvoke(result);
        }
        public static Task SetItemHeightAsync(this System.Windows.Forms.ListBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Int32>(
                BeginSetItemHeight,
                EndSetItemHeight,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getMultiColumnInternal = (x) => x.MultiColumn;
        public static System.Boolean GetMultiColumn(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getMultiColumnInternal, target);
            else
                return getMultiColumnInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getMultiColumnCallback = GetMultiColumn;
        public static IAsyncResult BeginGetMultiColumn(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getMultiColumnCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetMultiColumn(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetMultiColumn(result);
        }
        public static System.Boolean EndGetMultiColumn(IAsyncResult result)
        {
            return getMultiColumnCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetMultiColumnAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetMultiColumn,
                EndGetMultiColumn,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setMultiColumnInternal = (x, v) => x.MultiColumn = v;
        public static void SetMultiColumn(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMultiColumnInternal, target, value);
            else
                setMultiColumnInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setMultiColumnCallback = SetMultiColumn;
        public static IAsyncResult BeginSetMultiColumn(this System.Windows.Forms.ListBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setMultiColumnCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMultiColumn(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetMultiColumn(result);
        }
        public static void EndSetMultiColumn(IAsyncResult result)
        {
            setMultiColumnCallback.EndInvoke(result);
        }
        public static Task SetMultiColumnAsync(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Boolean>(
                BeginSetMultiColumn,
                EndSetMultiColumn,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getScrollAlwaysVisibleInternal = (x) => x.ScrollAlwaysVisible;
        public static System.Boolean GetScrollAlwaysVisible(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getScrollAlwaysVisibleInternal, target);
            else
                return getScrollAlwaysVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getScrollAlwaysVisibleCallback = GetScrollAlwaysVisible;
        public static IAsyncResult BeginGetScrollAlwaysVisible(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getScrollAlwaysVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetScrollAlwaysVisible(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetScrollAlwaysVisible(result);
        }
        public static System.Boolean EndGetScrollAlwaysVisible(IAsyncResult result)
        {
            return getScrollAlwaysVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetScrollAlwaysVisibleAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetScrollAlwaysVisible,
                EndGetScrollAlwaysVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setScrollAlwaysVisibleInternal = (x, v) => x.ScrollAlwaysVisible = v;
        public static void SetScrollAlwaysVisible(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setScrollAlwaysVisibleInternal, target, value);
            else
                setScrollAlwaysVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setScrollAlwaysVisibleCallback = SetScrollAlwaysVisible;
        public static IAsyncResult BeginSetScrollAlwaysVisible(this System.Windows.Forms.ListBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setScrollAlwaysVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetScrollAlwaysVisible(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetScrollAlwaysVisible(result);
        }
        public static void EndSetScrollAlwaysVisible(IAsyncResult result)
        {
            setScrollAlwaysVisibleCallback.EndInvoke(result);
        }
        public static Task SetScrollAlwaysVisibleAsync(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Boolean>(
                BeginSetScrollAlwaysVisible,
                EndSetScrollAlwaysVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.ListBox.SelectedIndexCollection> getSelectedIndicesInternal = (x) => x.SelectedIndices;
        public static System.Windows.Forms.ListBox.SelectedIndexCollection GetSelectedIndices(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ListBox.SelectedIndexCollection)target.Invoke(getSelectedIndicesInternal, target);
            else
                return getSelectedIndicesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.ListBox.SelectedIndexCollection> getSelectedIndicesCallback = GetSelectedIndices;
        public static IAsyncResult BeginGetSelectedIndices(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getSelectedIndicesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ListBox.SelectedIndexCollection EndGetSelectedIndices(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetSelectedIndices(result);
        }
        public static System.Windows.Forms.ListBox.SelectedIndexCollection EndGetSelectedIndices(IAsyncResult result)
        {
            return getSelectedIndicesCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListBox.SelectedIndexCollection> GetSelectedIndicesAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Windows.Forms.ListBox.SelectedIndexCollection>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetSelectedIndices,
                EndGetSelectedIndices,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.ListBox.SelectedObjectCollection> getSelectedItemsInternal = (x) => x.SelectedItems;
        public static System.Windows.Forms.ListBox.SelectedObjectCollection GetSelectedItems(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ListBox.SelectedObjectCollection)target.Invoke(getSelectedItemsInternal, target);
            else
                return getSelectedItemsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.ListBox.SelectedObjectCollection> getSelectedItemsCallback = GetSelectedItems;
        public static IAsyncResult BeginGetSelectedItems(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getSelectedItemsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ListBox.SelectedObjectCollection EndGetSelectedItems(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetSelectedItems(result);
        }
        public static System.Windows.Forms.ListBox.SelectedObjectCollection EndGetSelectedItems(IAsyncResult result)
        {
            return getSelectedItemsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListBox.SelectedObjectCollection> GetSelectedItemsAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Windows.Forms.ListBox.SelectedObjectCollection>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetSelectedItems,
                EndGetSelectedItems,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.SelectionMode> getSelectionModeInternal = (x) => x.SelectionMode;
        public static System.Windows.Forms.SelectionMode GetSelectionMode(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.SelectionMode)target.Invoke(getSelectionModeInternal, target);
            else
                return getSelectionModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.SelectionMode> getSelectionModeCallback = GetSelectionMode;
        public static IAsyncResult BeginGetSelectionMode(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getSelectionModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.SelectionMode EndGetSelectionMode(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetSelectionMode(result);
        }
        public static System.Windows.Forms.SelectionMode EndGetSelectionMode(IAsyncResult result)
        {
            return getSelectionModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.SelectionMode> GetSelectionModeAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Windows.Forms.SelectionMode>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetSelectionMode,
                EndGetSelectionMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Windows.Forms.SelectionMode> setSelectionModeInternal = (x, v) => x.SelectionMode = v;
        public static void SetSelectionMode(this System.Windows.Forms.ListBox target, System.Windows.Forms.SelectionMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionModeInternal, target, value);
            else
                setSelectionModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Windows.Forms.SelectionMode> setSelectionModeCallback = SetSelectionMode;
        public static IAsyncResult BeginSetSelectionMode(this System.Windows.Forms.ListBox target, System.Windows.Forms.SelectionMode value, AsyncCallback callback, object state)
        {
            return setSelectionModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionMode(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetSelectionMode(result);
        }
        public static void EndSetSelectionMode(IAsyncResult result)
        {
            setSelectionModeCallback.EndInvoke(result);
        }
        public static Task SetSelectionModeAsync(this System.Windows.Forms.ListBox target, System.Windows.Forms.SelectionMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Windows.Forms.SelectionMode>(
                BeginSetSelectionMode,
                EndSetSelectionMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Int32> getTopIndexInternal = (x) => x.TopIndex;
        public static System.Int32 GetTopIndex(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getTopIndexInternal, target);
            else
                return getTopIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Int32> getTopIndexCallback = GetTopIndex;
        public static IAsyncResult BeginGetTopIndex(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getTopIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetTopIndex(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetTopIndex(result);
        }
        public static System.Int32 EndGetTopIndex(IAsyncResult result)
        {
            return getTopIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetTopIndexAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetTopIndex,
                EndGetTopIndex,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Int32> setTopIndexInternal = (x, v) => x.TopIndex = v;
        public static void SetTopIndex(this System.Windows.Forms.ListBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTopIndexInternal, target, value);
            else
                setTopIndexInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Int32> setTopIndexCallback = SetTopIndex;
        public static IAsyncResult BeginSetTopIndex(this System.Windows.Forms.ListBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setTopIndexCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTopIndex(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetTopIndex(result);
        }
        public static void EndSetTopIndex(IAsyncResult result)
        {
            setTopIndexCallback.EndInvoke(result);
        }
        public static Task SetTopIndexAsync(this System.Windows.Forms.ListBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Int32>(
                BeginSetTopIndex,
                EndSetTopIndex,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getUseTabStopsInternal = (x) => x.UseTabStops;
        public static System.Boolean GetUseTabStops(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getUseTabStopsInternal, target);
            else
                return getUseTabStopsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Boolean> getUseTabStopsCallback = GetUseTabStops;
        public static IAsyncResult BeginGetUseTabStops(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getUseTabStopsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetUseTabStops(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetUseTabStops(result);
        }
        public static System.Boolean EndGetUseTabStops(IAsyncResult result)
        {
            return getUseTabStopsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetUseTabStopsAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetUseTabStops,
                EndGetUseTabStops,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setUseTabStopsInternal = (x, v) => x.UseTabStops = v;
        public static void SetUseTabStops(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUseTabStopsInternal, target, value);
            else
                setUseTabStopsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListBox, System.Boolean> setUseTabStopsCallback = SetUseTabStops;
        public static IAsyncResult BeginSetUseTabStops(this System.Windows.Forms.ListBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setUseTabStopsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUseTabStops(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            EndSetUseTabStops(result);
        }
        public static void EndSetUseTabStops(IAsyncResult result)
        {
            setUseTabStopsCallback.EndInvoke(result);
        }
        public static Task SetUseTabStopsAsync(this System.Windows.Forms.ListBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListBox, System.Boolean>(
                BeginSetUseTabStops,
                EndSetUseTabStops,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.ListBox.IntegerCollection> getCustomTabOffsetsInternal = (x) => x.CustomTabOffsets;
        public static System.Windows.Forms.ListBox.IntegerCollection GetCustomTabOffsets(this System.Windows.Forms.ListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ListBox.IntegerCollection)target.Invoke(getCustomTabOffsetsInternal, target);
            else
                return getCustomTabOffsetsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListBox, System.Windows.Forms.ListBox.IntegerCollection> getCustomTabOffsetsCallback = GetCustomTabOffsets;
        public static IAsyncResult BeginGetCustomTabOffsets(this System.Windows.Forms.ListBox target, AsyncCallback callback, object state)
        {
            return getCustomTabOffsetsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ListBox.IntegerCollection EndGetCustomTabOffsets(this System.Windows.Forms.ListBox target, IAsyncResult result)
        {
            return EndGetCustomTabOffsets(result);
        }
        public static System.Windows.Forms.ListBox.IntegerCollection EndGetCustomTabOffsets(IAsyncResult result)
        {
            return getCustomTabOffsetsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListBox.IntegerCollection> GetCustomTabOffsetsAsync(this System.Windows.Forms.ListBox target)
        {
            return Task<System.Windows.Forms.ListBox.IntegerCollection>.Factory.FromAsync<System.Windows.Forms.ListBox>(
                BeginGetCustomTabOffsets,
                EndGetCustomTabOffsets,
                target, null);
        }


        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Int32, System.Windows.Forms.CheckState> getItemCheckState1Internal = (c, index) => c.GetItemCheckState(index);
        public static System.Windows.Forms.CheckState GetItemCheckState(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.CheckState)__control__.Invoke(getItemCheckState1Internal, __control__, index);
            else
                return getItemCheckState1Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Int32, System.Windows.Forms.CheckState> getItemCheckState1Callback = GetItemCheckState;
        public static IAsyncResult BeginGetItemCheckState1(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getItemCheckState1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Windows.Forms.CheckState EndGetItemCheckState1(this System.Windows.Forms.CheckedListBox __control__, IAsyncResult result)
        {
            return EndGetItemCheckState1(result);
        }
        public static System.Windows.Forms.CheckState EndGetItemCheckState1(IAsyncResult result)
        {
            return getItemCheckState1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.CheckState> GetItemCheckStateAsync(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index)
        {
            return Task<System.Windows.Forms.CheckState>.Factory.FromAsync<System.Windows.Forms.CheckedListBox, System.Int32>(
                (Func<System.Windows.Forms.CheckedListBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetItemCheckState1,
                (Func<IAsyncResult, System.Windows.Forms.CheckState>)EndGetItemCheckState1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Int32, System.Boolean> getItemChecked1Internal = (c, index) => c.GetItemChecked(index);
        public static System.Boolean GetItemChecked(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(getItemChecked1Internal, __control__, index);
            else
                return getItemChecked1Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Int32, System.Boolean> getItemChecked1Callback = GetItemChecked;
        public static IAsyncResult BeginGetItemChecked1(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getItemChecked1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Boolean EndGetItemChecked1(this System.Windows.Forms.CheckedListBox __control__, IAsyncResult result)
        {
            return EndGetItemChecked1(result);
        }
        public static System.Boolean EndGetItemChecked1(IAsyncResult result)
        {
            return getItemChecked1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetItemCheckedAsync(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.CheckedListBox, System.Int32>(
                (Func<System.Windows.Forms.CheckedListBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetItemChecked1,
                (Func<IAsyncResult, System.Boolean>)EndGetItemChecked1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.CheckedListBox, System.Int32, System.Windows.Forms.CheckState> setItemCheckState1Internal = (c, index, value) => c.SetItemCheckState(index, value);
        public static void SetItemCheckState(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index, System.Windows.Forms.CheckState value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setItemCheckState1Internal, __control__, index, value);
            else
                setItemCheckState1Internal.Invoke(__control__, index, value);
        }
        private static readonly Action<System.Windows.Forms.CheckedListBox, System.Int32, System.Windows.Forms.CheckState> setItemCheckState1Callback = SetItemCheckState;
        public static IAsyncResult BeginSetItemCheckState1(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index, System.Windows.Forms.CheckState value, AsyncCallback callback, object state)
        {
            return setItemCheckState1Callback.BeginInvoke(__control__, index, value, callback, state);
        }
        public static void EndSetItemCheckState1(this System.Windows.Forms.CheckedListBox __control__, IAsyncResult result)
        {
            EndSetItemCheckState1(result);
        }
        public static void EndSetItemCheckState1(IAsyncResult result)
        {
            setItemCheckState1Callback.EndInvoke(result);
        }
        public static Task SetItemCheckStateAsync(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index, System.Windows.Forms.CheckState value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckedListBox, System.Int32, System.Windows.Forms.CheckState>(
                (Func<System.Windows.Forms.CheckedListBox, System.Int32, System.Windows.Forms.CheckState, AsyncCallback, object, IAsyncResult>)BeginSetItemCheckState1,
                (Action<IAsyncResult>)EndSetItemCheckState1,
                __control__, index, value, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.CheckedListBox, System.Int32, System.Boolean> setItemChecked1Internal = (c, index, value) => c.SetItemChecked(index, value);
        public static void SetItemChecked(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index, System.Boolean value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setItemChecked1Internal, __control__, index, value);
            else
                setItemChecked1Internal.Invoke(__control__, index, value);
        }
        private static readonly Action<System.Windows.Forms.CheckedListBox, System.Int32, System.Boolean> setItemChecked1Callback = SetItemChecked;
        public static IAsyncResult BeginSetItemChecked1(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index, System.Boolean value, AsyncCallback callback, object state)
        {
            return setItemChecked1Callback.BeginInvoke(__control__, index, value, callback, state);
        }
        public static void EndSetItemChecked1(this System.Windows.Forms.CheckedListBox __control__, IAsyncResult result)
        {
            EndSetItemChecked1(result);
        }
        public static void EndSetItemChecked1(IAsyncResult result)
        {
            setItemChecked1Callback.EndInvoke(result);
        }
        public static Task SetItemCheckedAsync(this System.Windows.Forms.CheckedListBox __control__, System.Int32 index, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckedListBox, System.Int32, System.Boolean>(
                (Func<System.Windows.Forms.CheckedListBox, System.Int32, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginSetItemChecked1,
                (Action<IAsyncResult>)EndSetItemChecked1,
                __control__, index, value, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Boolean> getCheckOnClickInternal = (x) => x.CheckOnClick;
        public static System.Boolean GetCheckOnClick(this System.Windows.Forms.CheckedListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCheckOnClickInternal, target);
            else
                return getCheckOnClickInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Boolean> getCheckOnClickCallback = GetCheckOnClick;
        public static IAsyncResult BeginGetCheckOnClick(this System.Windows.Forms.CheckedListBox target, AsyncCallback callback, object state)
        {
            return getCheckOnClickCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCheckOnClick(this System.Windows.Forms.CheckedListBox target, IAsyncResult result)
        {
            return EndGetCheckOnClick(result);
        }
        public static System.Boolean EndGetCheckOnClick(IAsyncResult result)
        {
            return getCheckOnClickCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCheckOnClickAsync(this System.Windows.Forms.CheckedListBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.CheckedListBox>(
                BeginGetCheckOnClick,
                EndGetCheckOnClick,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.CheckedListBox, System.Boolean> setCheckOnClickInternal = (x, v) => x.CheckOnClick = v;
        public static void SetCheckOnClick(this System.Windows.Forms.CheckedListBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCheckOnClickInternal, target, value);
            else
                setCheckOnClickInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.CheckedListBox, System.Boolean> setCheckOnClickCallback = SetCheckOnClick;
        public static IAsyncResult BeginSetCheckOnClick(this System.Windows.Forms.CheckedListBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCheckOnClickCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCheckOnClick(this System.Windows.Forms.CheckedListBox target, IAsyncResult result)
        {
            EndSetCheckOnClick(result);
        }
        public static void EndSetCheckOnClick(IAsyncResult result)
        {
            setCheckOnClickCallback.EndInvoke(result);
        }
        public static Task SetCheckOnClickAsync(this System.Windows.Forms.CheckedListBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckedListBox, System.Boolean>(
                BeginSetCheckOnClick,
                EndSetCheckOnClick,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Windows.Forms.CheckedListBox.CheckedIndexCollection> getCheckedIndicesInternal = (x) => x.CheckedIndices;
        public static System.Windows.Forms.CheckedListBox.CheckedIndexCollection GetCheckedIndices(this System.Windows.Forms.CheckedListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.CheckedListBox.CheckedIndexCollection)target.Invoke(getCheckedIndicesInternal, target);
            else
                return getCheckedIndicesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Windows.Forms.CheckedListBox.CheckedIndexCollection> getCheckedIndicesCallback = GetCheckedIndices;
        public static IAsyncResult BeginGetCheckedIndices(this System.Windows.Forms.CheckedListBox target, AsyncCallback callback, object state)
        {
            return getCheckedIndicesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.CheckedListBox.CheckedIndexCollection EndGetCheckedIndices(this System.Windows.Forms.CheckedListBox target, IAsyncResult result)
        {
            return EndGetCheckedIndices(result);
        }
        public static System.Windows.Forms.CheckedListBox.CheckedIndexCollection EndGetCheckedIndices(IAsyncResult result)
        {
            return getCheckedIndicesCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.CheckedListBox.CheckedIndexCollection> GetCheckedIndicesAsync(this System.Windows.Forms.CheckedListBox target)
        {
            return Task<System.Windows.Forms.CheckedListBox.CheckedIndexCollection>.Factory.FromAsync<System.Windows.Forms.CheckedListBox>(
                BeginGetCheckedIndices,
                EndGetCheckedIndices,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Windows.Forms.CheckedListBox.CheckedItemCollection> getCheckedItemsInternal = (x) => x.CheckedItems;
        public static System.Windows.Forms.CheckedListBox.CheckedItemCollection GetCheckedItems(this System.Windows.Forms.CheckedListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.CheckedListBox.CheckedItemCollection)target.Invoke(getCheckedItemsInternal, target);
            else
                return getCheckedItemsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Windows.Forms.CheckedListBox.CheckedItemCollection> getCheckedItemsCallback = GetCheckedItems;
        public static IAsyncResult BeginGetCheckedItems(this System.Windows.Forms.CheckedListBox target, AsyncCallback callback, object state)
        {
            return getCheckedItemsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.CheckedListBox.CheckedItemCollection EndGetCheckedItems(this System.Windows.Forms.CheckedListBox target, IAsyncResult result)
        {
            return EndGetCheckedItems(result);
        }
        public static System.Windows.Forms.CheckedListBox.CheckedItemCollection EndGetCheckedItems(IAsyncResult result)
        {
            return getCheckedItemsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.CheckedListBox.CheckedItemCollection> GetCheckedItemsAsync(this System.Windows.Forms.CheckedListBox target)
        {
            return Task<System.Windows.Forms.CheckedListBox.CheckedItemCollection>.Factory.FromAsync<System.Windows.Forms.CheckedListBox>(
                BeginGetCheckedItems,
                EndGetCheckedItems,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Boolean> getThreeDCheckBoxesInternal = (x) => x.ThreeDCheckBoxes;
        public static System.Boolean GetThreeDCheckBoxes(this System.Windows.Forms.CheckedListBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getThreeDCheckBoxesInternal, target);
            else
                return getThreeDCheckBoxesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.CheckedListBox, System.Boolean> getThreeDCheckBoxesCallback = GetThreeDCheckBoxes;
        public static IAsyncResult BeginGetThreeDCheckBoxes(this System.Windows.Forms.CheckedListBox target, AsyncCallback callback, object state)
        {
            return getThreeDCheckBoxesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetThreeDCheckBoxes(this System.Windows.Forms.CheckedListBox target, IAsyncResult result)
        {
            return EndGetThreeDCheckBoxes(result);
        }
        public static System.Boolean EndGetThreeDCheckBoxes(IAsyncResult result)
        {
            return getThreeDCheckBoxesCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetThreeDCheckBoxesAsync(this System.Windows.Forms.CheckedListBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.CheckedListBox>(
                BeginGetThreeDCheckBoxes,
                EndGetThreeDCheckBoxes,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.CheckedListBox, System.Boolean> setThreeDCheckBoxesInternal = (x, v) => x.ThreeDCheckBoxes = v;
        public static void SetThreeDCheckBoxes(this System.Windows.Forms.CheckedListBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setThreeDCheckBoxesInternal, target, value);
            else
                setThreeDCheckBoxesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.CheckedListBox, System.Boolean> setThreeDCheckBoxesCallback = SetThreeDCheckBoxes;
        public static IAsyncResult BeginSetThreeDCheckBoxes(this System.Windows.Forms.CheckedListBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setThreeDCheckBoxesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetThreeDCheckBoxes(this System.Windows.Forms.CheckedListBox target, IAsyncResult result)
        {
            EndSetThreeDCheckBoxes(result);
        }
        public static void EndSetThreeDCheckBoxes(IAsyncResult result)
        {
            setThreeDCheckBoxesCallback.EndInvoke(result);
        }
        public static Task SetThreeDCheckBoxesAsync(this System.Windows.Forms.CheckedListBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.CheckedListBox, System.Boolean>(
                BeginSetThreeDCheckBoxes,
                EndSetThreeDCheckBoxes,
                target, value, null);
        }


        private static readonly Func<System.Windows.Forms.ComboBox, System.String, System.Int32> findString3Internal = (c, s) => c.FindString(s);
        public static System.Int32 FindString(this System.Windows.Forms.ComboBox __control__, System.String s)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(findString3Internal, __control__, s);
            else
                return findString3Internal.Invoke(__control__, s);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.String, System.Int32> findString3Callback = FindString;
        public static IAsyncResult BeginFindString3(this System.Windows.Forms.ComboBox __control__, System.String s, AsyncCallback callback, object state)
        {
            return findString3Callback.BeginInvoke(__control__, s, callback, state);
        }
        public static System.Int32 EndFindString3(this System.Windows.Forms.ComboBox __control__, IAsyncResult result)
        {
            return EndFindString3(result);
        }
        public static System.Int32 EndFindString3(IAsyncResult result)
        {
            return findString3Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindStringAsync(this System.Windows.Forms.ComboBox __control__, System.String s)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox, System.String>(
                (Func<System.Windows.Forms.ComboBox, System.String, AsyncCallback, object, IAsyncResult>)BeginFindString3,
                (Func<IAsyncResult, System.Int32>)EndFindString3,
                __control__, s, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.String, System.Int32, System.Int32> findString4Internal = (c, s, startIndex) => c.FindString(s, startIndex);
        public static System.Int32 FindString(this System.Windows.Forms.ComboBox __control__, System.String s, System.Int32 startIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(findString4Internal, __control__, s, startIndex);
            else
                return findString4Internal.Invoke(__control__, s, startIndex);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.String, System.Int32, System.Int32> findString4Callback = FindString;
        public static IAsyncResult BeginFindString4(this System.Windows.Forms.ComboBox __control__, System.String s, System.Int32 startIndex, AsyncCallback callback, object state)
        {
            return findString4Callback.BeginInvoke(__control__, s, startIndex, callback, state);
        }
        public static System.Int32 EndFindString4(this System.Windows.Forms.ComboBox __control__, IAsyncResult result)
        {
            return EndFindString4(result);
        }
        public static System.Int32 EndFindString4(IAsyncResult result)
        {
            return findString4Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindStringAsync(this System.Windows.Forms.ComboBox __control__, System.String s, System.Int32 startIndex)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox, System.String, System.Int32>(
                (Func<System.Windows.Forms.ComboBox, System.String, System.Int32, AsyncCallback, object, IAsyncResult>)BeginFindString4,
                (Func<IAsyncResult, System.Int32>)EndFindString4,
                __control__, s, startIndex, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.String, System.Int32> findStringExact3Internal = (c, s) => c.FindStringExact(s);
        public static System.Int32 FindStringExact(this System.Windows.Forms.ComboBox __control__, System.String s)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(findStringExact3Internal, __control__, s);
            else
                return findStringExact3Internal.Invoke(__control__, s);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.String, System.Int32> findStringExact3Callback = FindStringExact;
        public static IAsyncResult BeginFindStringExact3(this System.Windows.Forms.ComboBox __control__, System.String s, AsyncCallback callback, object state)
        {
            return findStringExact3Callback.BeginInvoke(__control__, s, callback, state);
        }
        public static System.Int32 EndFindStringExact3(this System.Windows.Forms.ComboBox __control__, IAsyncResult result)
        {
            return EndFindStringExact3(result);
        }
        public static System.Int32 EndFindStringExact3(IAsyncResult result)
        {
            return findStringExact3Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindStringExactAsync(this System.Windows.Forms.ComboBox __control__, System.String s)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox, System.String>(
                (Func<System.Windows.Forms.ComboBox, System.String, AsyncCallback, object, IAsyncResult>)BeginFindStringExact3,
                (Func<IAsyncResult, System.Int32>)EndFindStringExact3,
                __control__, s, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.String, System.Int32, System.Int32> findStringExact4Internal = (c, s, startIndex) => c.FindStringExact(s, startIndex);
        public static System.Int32 FindStringExact(this System.Windows.Forms.ComboBox __control__, System.String s, System.Int32 startIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(findStringExact4Internal, __control__, s, startIndex);
            else
                return findStringExact4Internal.Invoke(__control__, s, startIndex);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.String, System.Int32, System.Int32> findStringExact4Callback = FindStringExact;
        public static IAsyncResult BeginFindStringExact4(this System.Windows.Forms.ComboBox __control__, System.String s, System.Int32 startIndex, AsyncCallback callback, object state)
        {
            return findStringExact4Callback.BeginInvoke(__control__, s, startIndex, callback, state);
        }
        public static System.Int32 EndFindStringExact4(this System.Windows.Forms.ComboBox __control__, IAsyncResult result)
        {
            return EndFindStringExact4(result);
        }
        public static System.Int32 EndFindStringExact4(IAsyncResult result)
        {
            return findStringExact4Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindStringExactAsync(this System.Windows.Forms.ComboBox __control__, System.String s, System.Int32 startIndex)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox, System.String, System.Int32>(
                (Func<System.Windows.Forms.ComboBox, System.String, System.Int32, AsyncCallback, object, IAsyncResult>)BeginFindStringExact4,
                (Func<IAsyncResult, System.Int32>)EndFindStringExact4,
                __control__, s, startIndex, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32, System.Int32> getItemHeight2Internal = (c, index) => c.GetItemHeight(index);
        public static System.Int32 GetItemHeight(this System.Windows.Forms.ComboBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getItemHeight2Internal, __control__, index);
            else
                return getItemHeight2Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32, System.Int32> getItemHeight2Callback = GetItemHeight;
        public static IAsyncResult BeginGetItemHeight2(this System.Windows.Forms.ComboBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getItemHeight2Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Int32 EndGetItemHeight2(this System.Windows.Forms.ComboBox __control__, IAsyncResult result)
        {
            return EndGetItemHeight2(result);
        }
        public static System.Int32 EndGetItemHeight2(IAsyncResult result)
        {
            return getItemHeight2Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetItemHeightAsync(this System.Windows.Forms.ComboBox __control__, System.Int32 index)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Int32>(
                (Func<System.Windows.Forms.ComboBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetItemHeight2,
                (Func<IAsyncResult, System.Int32>)EndGetItemHeight2,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ComboBox> resetText2Internal = (c) => c.ResetText();
        public static void ResetText(this System.Windows.Forms.ComboBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetText2Internal, __control__);
            else
                resetText2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ComboBox> resetText2Callback = ResetText;
        public static IAsyncResult BeginResetText2(this System.Windows.Forms.ComboBox __control__, AsyncCallback callback, object state)
        {
            return resetText2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetText2(this System.Windows.Forms.ComboBox __control__, IAsyncResult result)
        {
            EndResetText2(result);
        }
        public static void EndResetText2(IAsyncResult result)
        {
            resetText2Callback.EndInvoke(result);
        }
        public static Task ResetTextAsync(this System.Windows.Forms.ComboBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                (Func<System.Windows.Forms.ComboBox, AsyncCallback, object, IAsyncResult>)BeginResetText2,
                (Action<IAsyncResult>)EndResetText2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32, System.Int32> select3Internal = (c, start, length) => c.Select(start, length);
        public static void Select(this System.Windows.Forms.ComboBox __control__, System.Int32 start, System.Int32 length)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(select3Internal, __control__, start, length);
            else
                select3Internal.Invoke(__control__, start, length);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32, System.Int32> select3Callback = Select;
        public static IAsyncResult BeginSelect3(this System.Windows.Forms.ComboBox __control__, System.Int32 start, System.Int32 length, AsyncCallback callback, object state)
        {
            return select3Callback.BeginInvoke(__control__, start, length, callback, state);
        }
        public static void EndSelect3(this System.Windows.Forms.ComboBox __control__, IAsyncResult result)
        {
            EndSelect3(result);
        }
        public static void EndSelect3(IAsyncResult result)
        {
            select3Callback.EndInvoke(result);
        }
        public static Task SelectAsync(this System.Windows.Forms.ComboBox __control__, System.Int32 start, System.Int32 length)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.ComboBox, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSelect3,
                (Action<IAsyncResult>)EndSelect3,
                __control__, start, length, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ComboBox> selectAll1Internal = (c) => c.SelectAll();
        public static void SelectAll(this System.Windows.Forms.ComboBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(selectAll1Internal, __control__);
            else
                selectAll1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ComboBox> selectAll1Callback = SelectAll;
        public static IAsyncResult BeginSelectAll1(this System.Windows.Forms.ComboBox __control__, AsyncCallback callback, object state)
        {
            return selectAll1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndSelectAll1(this System.Windows.Forms.ComboBox __control__, IAsyncResult result)
        {
            EndSelectAll1(result);
        }
        public static void EndSelectAll1(IAsyncResult result)
        {
            selectAll1Callback.EndInvoke(result);
        }
        public static Task SelectAllAsync(this System.Windows.Forms.ComboBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                (Func<System.Windows.Forms.ComboBox, AsyncCallback, object, IAsyncResult>)BeginSelectAll1,
                (Action<IAsyncResult>)EndSelectAll1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteMode> getAutoCompleteModeInternal = (x) => x.AutoCompleteMode;
        public static System.Windows.Forms.AutoCompleteMode GetAutoCompleteMode(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AutoCompleteMode)target.Invoke(getAutoCompleteModeInternal, target);
            else
                return getAutoCompleteModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteMode> getAutoCompleteModeCallback = GetAutoCompleteMode;
        public static IAsyncResult BeginGetAutoCompleteMode(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getAutoCompleteModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AutoCompleteMode EndGetAutoCompleteMode(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetAutoCompleteMode(result);
        }
        public static System.Windows.Forms.AutoCompleteMode EndGetAutoCompleteMode(IAsyncResult result)
        {
            return getAutoCompleteModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AutoCompleteMode> GetAutoCompleteModeAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Windows.Forms.AutoCompleteMode>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetAutoCompleteMode,
                EndGetAutoCompleteMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteMode> setAutoCompleteModeInternal = (x, v) => x.AutoCompleteMode = v;
        public static void SetAutoCompleteMode(this System.Windows.Forms.ComboBox target, System.Windows.Forms.AutoCompleteMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoCompleteModeInternal, target, value);
            else
                setAutoCompleteModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteMode> setAutoCompleteModeCallback = SetAutoCompleteMode;
        public static IAsyncResult BeginSetAutoCompleteMode(this System.Windows.Forms.ComboBox target, System.Windows.Forms.AutoCompleteMode value, AsyncCallback callback, object state)
        {
            return setAutoCompleteModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoCompleteMode(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetAutoCompleteMode(result);
        }
        public static void EndSetAutoCompleteMode(IAsyncResult result)
        {
            setAutoCompleteModeCallback.EndInvoke(result);
        }
        public static Task SetAutoCompleteModeAsync(this System.Windows.Forms.ComboBox target, System.Windows.Forms.AutoCompleteMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteMode>(
                BeginSetAutoCompleteMode,
                EndSetAutoCompleteMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteSource> getAutoCompleteSourceInternal = (x) => x.AutoCompleteSource;
        public static System.Windows.Forms.AutoCompleteSource GetAutoCompleteSource(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AutoCompleteSource)target.Invoke(getAutoCompleteSourceInternal, target);
            else
                return getAutoCompleteSourceInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteSource> getAutoCompleteSourceCallback = GetAutoCompleteSource;
        public static IAsyncResult BeginGetAutoCompleteSource(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getAutoCompleteSourceCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AutoCompleteSource EndGetAutoCompleteSource(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetAutoCompleteSource(result);
        }
        public static System.Windows.Forms.AutoCompleteSource EndGetAutoCompleteSource(IAsyncResult result)
        {
            return getAutoCompleteSourceCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AutoCompleteSource> GetAutoCompleteSourceAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Windows.Forms.AutoCompleteSource>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetAutoCompleteSource,
                EndGetAutoCompleteSource,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteSource> setAutoCompleteSourceInternal = (x, v) => x.AutoCompleteSource = v;
        public static void SetAutoCompleteSource(this System.Windows.Forms.ComboBox target, System.Windows.Forms.AutoCompleteSource value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoCompleteSourceInternal, target, value);
            else
                setAutoCompleteSourceInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteSource> setAutoCompleteSourceCallback = SetAutoCompleteSource;
        public static IAsyncResult BeginSetAutoCompleteSource(this System.Windows.Forms.ComboBox target, System.Windows.Forms.AutoCompleteSource value, AsyncCallback callback, object state)
        {
            return setAutoCompleteSourceCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoCompleteSource(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetAutoCompleteSource(result);
        }
        public static void EndSetAutoCompleteSource(IAsyncResult result)
        {
            setAutoCompleteSourceCallback.EndInvoke(result);
        }
        public static Task SetAutoCompleteSourceAsync(this System.Windows.Forms.ComboBox target, System.Windows.Forms.AutoCompleteSource value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteSource>(
                BeginSetAutoCompleteSource,
                EndSetAutoCompleteSource,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteStringCollection> getAutoCompleteCustomSourceInternal = (x) => x.AutoCompleteCustomSource;
        public static System.Windows.Forms.AutoCompleteStringCollection GetAutoCompleteCustomSource(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.AutoCompleteStringCollection)target.Invoke(getAutoCompleteCustomSourceInternal, target);
            else
                return getAutoCompleteCustomSourceInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteStringCollection> getAutoCompleteCustomSourceCallback = GetAutoCompleteCustomSource;
        public static IAsyncResult BeginGetAutoCompleteCustomSource(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getAutoCompleteCustomSourceCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.AutoCompleteStringCollection EndGetAutoCompleteCustomSource(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetAutoCompleteCustomSource(result);
        }
        public static System.Windows.Forms.AutoCompleteStringCollection EndGetAutoCompleteCustomSource(IAsyncResult result)
        {
            return getAutoCompleteCustomSourceCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.AutoCompleteStringCollection> GetAutoCompleteCustomSourceAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Windows.Forms.AutoCompleteStringCollection>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetAutoCompleteCustomSource,
                EndGetAutoCompleteCustomSource,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteStringCollection> setAutoCompleteCustomSourceInternal = (x, v) => x.AutoCompleteCustomSource = v;
        public static void SetAutoCompleteCustomSource(this System.Windows.Forms.ComboBox target, System.Windows.Forms.AutoCompleteStringCollection value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoCompleteCustomSourceInternal, target, value);
            else
                setAutoCompleteCustomSourceInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteStringCollection> setAutoCompleteCustomSourceCallback = SetAutoCompleteCustomSource;
        public static IAsyncResult BeginSetAutoCompleteCustomSource(this System.Windows.Forms.ComboBox target, System.Windows.Forms.AutoCompleteStringCollection value, AsyncCallback callback, object state)
        {
            return setAutoCompleteCustomSourceCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoCompleteCustomSource(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetAutoCompleteCustomSource(result);
        }
        public static void EndSetAutoCompleteCustomSource(IAsyncResult result)
        {
            setAutoCompleteCustomSourceCallback.EndInvoke(result);
        }
        public static Task SetAutoCompleteCustomSourceAsync(this System.Windows.Forms.ComboBox target, System.Windows.Forms.AutoCompleteStringCollection value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Windows.Forms.AutoCompleteStringCollection>(
                BeginSetAutoCompleteCustomSource,
                EndSetAutoCompleteCustomSource,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getDropDownWidthInternal = (x) => x.DropDownWidth;
        public static System.Int32 GetDropDownWidth(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getDropDownWidthInternal, target);
            else
                return getDropDownWidthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getDropDownWidthCallback = GetDropDownWidth;
        public static IAsyncResult BeginGetDropDownWidth(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getDropDownWidthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetDropDownWidth(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetDropDownWidth(result);
        }
        public static System.Int32 EndGetDropDownWidth(IAsyncResult result)
        {
            return getDropDownWidthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetDropDownWidthAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetDropDownWidth,
                EndGetDropDownWidth,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setDropDownWidthInternal = (x, v) => x.DropDownWidth = v;
        public static void SetDropDownWidth(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDropDownWidthInternal, target, value);
            else
                setDropDownWidthInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setDropDownWidthCallback = SetDropDownWidth;
        public static IAsyncResult BeginSetDropDownWidth(this System.Windows.Forms.ComboBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setDropDownWidthCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDropDownWidth(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetDropDownWidth(result);
        }
        public static void EndSetDropDownWidth(IAsyncResult result)
        {
            setDropDownWidthCallback.EndInvoke(result);
        }
        public static Task SetDropDownWidthAsync(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Int32>(
                BeginSetDropDownWidth,
                EndSetDropDownWidth,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getDropDownHeightInternal = (x) => x.DropDownHeight;
        public static System.Int32 GetDropDownHeight(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getDropDownHeightInternal, target);
            else
                return getDropDownHeightInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getDropDownHeightCallback = GetDropDownHeight;
        public static IAsyncResult BeginGetDropDownHeight(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getDropDownHeightCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetDropDownHeight(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetDropDownHeight(result);
        }
        public static System.Int32 EndGetDropDownHeight(IAsyncResult result)
        {
            return getDropDownHeightCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetDropDownHeightAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetDropDownHeight,
                EndGetDropDownHeight,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setDropDownHeightInternal = (x, v) => x.DropDownHeight = v;
        public static void SetDropDownHeight(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDropDownHeightInternal, target, value);
            else
                setDropDownHeightInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setDropDownHeightCallback = SetDropDownHeight;
        public static IAsyncResult BeginSetDropDownHeight(this System.Windows.Forms.ComboBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setDropDownHeightCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDropDownHeight(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetDropDownHeight(result);
        }
        public static void EndSetDropDownHeight(IAsyncResult result)
        {
            setDropDownHeightCallback.EndInvoke(result);
        }
        public static Task SetDropDownHeightAsync(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Int32>(
                BeginSetDropDownHeight,
                EndSetDropDownHeight,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Boolean> getDroppedDownInternal = (x) => x.DroppedDown;
        public static System.Boolean GetDroppedDown(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getDroppedDownInternal, target);
            else
                return getDroppedDownInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Boolean> getDroppedDownCallback = GetDroppedDown;
        public static IAsyncResult BeginGetDroppedDown(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getDroppedDownCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetDroppedDown(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetDroppedDown(result);
        }
        public static System.Boolean EndGetDroppedDown(IAsyncResult result)
        {
            return getDroppedDownCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetDroppedDownAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetDroppedDown,
                EndGetDroppedDown,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Boolean> setDroppedDownInternal = (x, v) => x.DroppedDown = v;
        public static void SetDroppedDown(this System.Windows.Forms.ComboBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDroppedDownInternal, target, value);
            else
                setDroppedDownInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Boolean> setDroppedDownCallback = SetDroppedDown;
        public static IAsyncResult BeginSetDroppedDown(this System.Windows.Forms.ComboBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setDroppedDownCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDroppedDown(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetDroppedDown(result);
        }
        public static void EndSetDroppedDown(IAsyncResult result)
        {
            setDroppedDownCallback.EndInvoke(result);
        }
        public static Task SetDroppedDownAsync(this System.Windows.Forms.ComboBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Boolean>(
                BeginSetDroppedDown,
                EndSetDroppedDown,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getMaxDropDownItemsInternal = (x) => x.MaxDropDownItems;
        public static System.Int32 GetMaxDropDownItems(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getMaxDropDownItemsInternal, target);
            else
                return getMaxDropDownItemsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getMaxDropDownItemsCallback = GetMaxDropDownItems;
        public static IAsyncResult BeginGetMaxDropDownItems(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getMaxDropDownItemsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetMaxDropDownItems(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetMaxDropDownItems(result);
        }
        public static System.Int32 EndGetMaxDropDownItems(IAsyncResult result)
        {
            return getMaxDropDownItemsCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetMaxDropDownItemsAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetMaxDropDownItems,
                EndGetMaxDropDownItems,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setMaxDropDownItemsInternal = (x, v) => x.MaxDropDownItems = v;
        public static void SetMaxDropDownItems(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMaxDropDownItemsInternal, target, value);
            else
                setMaxDropDownItemsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setMaxDropDownItemsCallback = SetMaxDropDownItems;
        public static IAsyncResult BeginSetMaxDropDownItems(this System.Windows.Forms.ComboBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setMaxDropDownItemsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMaxDropDownItems(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetMaxDropDownItems(result);
        }
        public static void EndSetMaxDropDownItems(IAsyncResult result)
        {
            setMaxDropDownItemsCallback.EndInvoke(result);
        }
        public static Task SetMaxDropDownItemsAsync(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Int32>(
                BeginSetMaxDropDownItems,
                EndSetMaxDropDownItems,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getMaxLengthInternal = (x) => x.MaxLength;
        public static System.Int32 GetMaxLength(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getMaxLengthInternal, target);
            else
                return getMaxLengthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getMaxLengthCallback = GetMaxLength;
        public static IAsyncResult BeginGetMaxLength(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getMaxLengthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetMaxLength(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetMaxLength(result);
        }
        public static System.Int32 EndGetMaxLength(IAsyncResult result)
        {
            return getMaxLengthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetMaxLengthAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetMaxLength,
                EndGetMaxLength,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setMaxLengthInternal = (x, v) => x.MaxLength = v;
        public static void SetMaxLength(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMaxLengthInternal, target, value);
            else
                setMaxLengthInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setMaxLengthCallback = SetMaxLength;
        public static IAsyncResult BeginSetMaxLength(this System.Windows.Forms.ComboBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setMaxLengthCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMaxLength(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetMaxLength(result);
        }
        public static void EndSetMaxLength(IAsyncResult result)
        {
            setMaxLengthCallback.EndInvoke(result);
        }
        public static Task SetMaxLengthAsync(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Int32>(
                BeginSetMaxLength,
                EndSetMaxLength,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.String> getSelectedTextInternal = (x) => x.SelectedText;
        public static System.String GetSelectedText(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getSelectedTextInternal, target);
            else
                return getSelectedTextInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.String> getSelectedTextCallback = GetSelectedText;
        public static IAsyncResult BeginGetSelectedText(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getSelectedTextCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetSelectedText(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetSelectedText(result);
        }
        public static System.String EndGetSelectedText(IAsyncResult result)
        {
            return getSelectedTextCallback.EndInvoke(result);
        }
        public static Task<System.String> GetSelectedTextAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetSelectedText,
                EndGetSelectedText,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.String> setSelectedTextInternal = (x, v) => x.SelectedText = v;
        public static void SetSelectedText(this System.Windows.Forms.ComboBox target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedTextInternal, target, value);
            else
                setSelectedTextInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.String> setSelectedTextCallback = SetSelectedText;
        public static IAsyncResult BeginSetSelectedText(this System.Windows.Forms.ComboBox target, System.String value, AsyncCallback callback, object state)
        {
            return setSelectedTextCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedText(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetSelectedText(result);
        }
        public static void EndSetSelectedText(IAsyncResult result)
        {
            setSelectedTextCallback.EndInvoke(result);
        }
        public static Task SetSelectedTextAsync(this System.Windows.Forms.ComboBox target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.String>(
                BeginSetSelectedText,
                EndSetSelectedText,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getSelectionLengthInternal = (x) => x.SelectionLength;
        public static System.Int32 GetSelectionLength(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSelectionLengthInternal, target);
            else
                return getSelectionLengthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getSelectionLengthCallback = GetSelectionLength;
        public static IAsyncResult BeginGetSelectionLength(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getSelectionLengthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSelectionLength(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetSelectionLength(result);
        }
        public static System.Int32 EndGetSelectionLength(IAsyncResult result)
        {
            return getSelectionLengthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSelectionLengthAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetSelectionLength,
                EndGetSelectionLength,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setSelectionLengthInternal = (x, v) => x.SelectionLength = v;
        public static void SetSelectionLength(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionLengthInternal, target, value);
            else
                setSelectionLengthInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setSelectionLengthCallback = SetSelectionLength;
        public static IAsyncResult BeginSetSelectionLength(this System.Windows.Forms.ComboBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSelectionLengthCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionLength(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetSelectionLength(result);
        }
        public static void EndSetSelectionLength(IAsyncResult result)
        {
            setSelectionLengthCallback.EndInvoke(result);
        }
        public static Task SetSelectionLengthAsync(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Int32>(
                BeginSetSelectionLength,
                EndSetSelectionLength,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getSelectionStartInternal = (x) => x.SelectionStart;
        public static System.Int32 GetSelectionStart(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSelectionStartInternal, target);
            else
                return getSelectionStartInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Int32> getSelectionStartCallback = GetSelectionStart;
        public static IAsyncResult BeginGetSelectionStart(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getSelectionStartCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSelectionStart(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetSelectionStart(result);
        }
        public static System.Int32 EndGetSelectionStart(IAsyncResult result)
        {
            return getSelectionStartCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSelectionStartAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetSelectionStart,
                EndGetSelectionStart,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setSelectionStartInternal = (x, v) => x.SelectionStart = v;
        public static void SetSelectionStart(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionStartInternal, target, value);
            else
                setSelectionStartInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Int32> setSelectionStartCallback = SetSelectionStart;
        public static IAsyncResult BeginSetSelectionStart(this System.Windows.Forms.ComboBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSelectionStartCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionStart(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetSelectionStart(result);
        }
        public static void EndSetSelectionStart(IAsyncResult result)
        {
            setSelectionStartCallback.EndInvoke(result);
        }
        public static Task SetSelectionStartAsync(this System.Windows.Forms.ComboBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Int32>(
                BeginSetSelectionStart,
                EndSetSelectionStart,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ComboBox, System.Windows.Forms.ComboBoxStyle> getDropDownStyleInternal = (x) => x.DropDownStyle;
        public static System.Windows.Forms.ComboBoxStyle GetDropDownStyle(this System.Windows.Forms.ComboBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ComboBoxStyle)target.Invoke(getDropDownStyleInternal, target);
            else
                return getDropDownStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ComboBox, System.Windows.Forms.ComboBoxStyle> getDropDownStyleCallback = GetDropDownStyle;
        public static IAsyncResult BeginGetDropDownStyle(this System.Windows.Forms.ComboBox target, AsyncCallback callback, object state)
        {
            return getDropDownStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ComboBoxStyle EndGetDropDownStyle(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            return EndGetDropDownStyle(result);
        }
        public static System.Windows.Forms.ComboBoxStyle EndGetDropDownStyle(IAsyncResult result)
        {
            return getDropDownStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ComboBoxStyle> GetDropDownStyleAsync(this System.Windows.Forms.ComboBox target)
        {
            return Task<System.Windows.Forms.ComboBoxStyle>.Factory.FromAsync<System.Windows.Forms.ComboBox>(
                BeginGetDropDownStyle,
                EndGetDropDownStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ComboBox, System.Windows.Forms.ComboBoxStyle> setDropDownStyleInternal = (x, v) => x.DropDownStyle = v;
        public static void SetDropDownStyle(this System.Windows.Forms.ComboBox target, System.Windows.Forms.ComboBoxStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDropDownStyleInternal, target, value);
            else
                setDropDownStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ComboBox, System.Windows.Forms.ComboBoxStyle> setDropDownStyleCallback = SetDropDownStyle;
        public static IAsyncResult BeginSetDropDownStyle(this System.Windows.Forms.ComboBox target, System.Windows.Forms.ComboBoxStyle value, AsyncCallback callback, object state)
        {
            return setDropDownStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDropDownStyle(this System.Windows.Forms.ComboBox target, IAsyncResult result)
        {
            EndSetDropDownStyle(result);
        }
        public static void EndSetDropDownStyle(IAsyncResult result)
        {
            setDropDownStyleCallback.EndInvoke(result);
        }
        public static Task SetDropDownStyleAsync(this System.Windows.Forms.ComboBox target, System.Windows.Forms.ComboBoxStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ComboBox, System.Windows.Forms.ComboBoxStyle>(
                BeginSetDropDownStyle,
                EndSetDropDownStyle,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridViewCellStyle> applyCellStyleToEditingControl1Internal = (c, dataGridViewCellStyle) => c.ApplyCellStyleToEditingControl(dataGridViewCellStyle);
        public static void ApplyCellStyleToEditingControl(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(applyCellStyleToEditingControl1Internal, __control__, dataGridViewCellStyle);
            else
                applyCellStyleToEditingControl1Internal.Invoke(__control__, dataGridViewCellStyle);
        }
        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridViewCellStyle> applyCellStyleToEditingControl1Callback = ApplyCellStyleToEditingControl;
        public static IAsyncResult BeginApplyCellStyleToEditingControl1(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle, AsyncCallback callback, object state)
        {
            return applyCellStyleToEditingControl1Callback.BeginInvoke(__control__, dataGridViewCellStyle, callback, state);
        }
        public static void EndApplyCellStyleToEditingControl1(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, IAsyncResult result)
        {
            EndApplyCellStyleToEditingControl1(result);
        }
        public static void EndApplyCellStyleToEditingControl1(IAsyncResult result)
        {
            applyCellStyleToEditingControl1Callback.EndInvoke(result);
        }
        public static Task ApplyCellStyleToEditingControlAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridViewCellStyle>(
                (Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridViewCellStyle, AsyncCallback, object, IAsyncResult>)BeginApplyCellStyleToEditingControl1,
                (Action<IAsyncResult>)EndApplyCellStyleToEditingControl1,
                __control__, dataGridViewCellStyle, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.Keys, System.Boolean, System.Boolean> editingControlWantsInputKey1Internal = (c, keyData, dataGridViewWantsInputKey) => c.EditingControlWantsInputKey(keyData, dataGridViewWantsInputKey);
        public static System.Boolean EditingControlWantsInputKey(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Windows.Forms.Keys keyData, System.Boolean dataGridViewWantsInputKey)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(editingControlWantsInputKey1Internal, __control__, keyData, dataGridViewWantsInputKey);
            else
                return editingControlWantsInputKey1Internal.Invoke(__control__, keyData, dataGridViewWantsInputKey);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.Keys, System.Boolean, System.Boolean> editingControlWantsInputKey1Callback = EditingControlWantsInputKey;
        public static IAsyncResult BeginEditingControlWantsInputKey1(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Windows.Forms.Keys keyData, System.Boolean dataGridViewWantsInputKey, AsyncCallback callback, object state)
        {
            return editingControlWantsInputKey1Callback.BeginInvoke(__control__, keyData, dataGridViewWantsInputKey, callback, state);
        }
        public static System.Boolean EndEditingControlWantsInputKey1(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, IAsyncResult result)
        {
            return EndEditingControlWantsInputKey1(result);
        }
        public static System.Boolean EndEditingControlWantsInputKey1(IAsyncResult result)
        {
            return editingControlWantsInputKey1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> EditingControlWantsInputKeyAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Windows.Forms.Keys keyData, System.Boolean dataGridViewWantsInputKey)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.Keys, System.Boolean>(
                (Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.Keys, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginEditingControlWantsInputKey1,
                (Func<IAsyncResult, System.Boolean>)EndEditingControlWantsInputKey1,
                __control__, keyData, dataGridViewWantsInputKey, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridViewDataErrorContexts, System.Object> getEditingControlFormattedValue1Internal = (c, context) => c.GetEditingControlFormattedValue(context);
        public static System.Object GetEditingControlFormattedValue(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Windows.Forms.DataGridViewDataErrorContexts context)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Object)__control__.Invoke(getEditingControlFormattedValue1Internal, __control__, context);
            else
                return getEditingControlFormattedValue1Internal.Invoke(__control__, context);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridViewDataErrorContexts, System.Object> getEditingControlFormattedValue1Callback = GetEditingControlFormattedValue;
        public static IAsyncResult BeginGetEditingControlFormattedValue1(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Windows.Forms.DataGridViewDataErrorContexts context, AsyncCallback callback, object state)
        {
            return getEditingControlFormattedValue1Callback.BeginInvoke(__control__, context, callback, state);
        }
        public static System.Object EndGetEditingControlFormattedValue1(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, IAsyncResult result)
        {
            return EndGetEditingControlFormattedValue1(result);
        }
        public static System.Object EndGetEditingControlFormattedValue1(IAsyncResult result)
        {
            return getEditingControlFormattedValue1Callback.EndInvoke(result);
        }
        public static Task<System.Object> GetEditingControlFormattedValueAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Windows.Forms.DataGridViewDataErrorContexts context)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridViewDataErrorContexts>(
                (Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridViewDataErrorContexts, AsyncCallback, object, IAsyncResult>)BeginGetEditingControlFormattedValue1,
                (Func<IAsyncResult, System.Object>)EndGetEditingControlFormattedValue1,
                __control__, context, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean> prepareEditingControlForEdit1Internal = (c, selectAll) => c.PrepareEditingControlForEdit(selectAll);
        public static void PrepareEditingControlForEdit(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Boolean selectAll)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(prepareEditingControlForEdit1Internal, __control__, selectAll);
            else
                prepareEditingControlForEdit1Internal.Invoke(__control__, selectAll);
        }
        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean> prepareEditingControlForEdit1Callback = PrepareEditingControlForEdit;
        public static IAsyncResult BeginPrepareEditingControlForEdit1(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Boolean selectAll, AsyncCallback callback, object state)
        {
            return prepareEditingControlForEdit1Callback.BeginInvoke(__control__, selectAll, callback, state);
        }
        public static void EndPrepareEditingControlForEdit1(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, IAsyncResult result)
        {
            EndPrepareEditingControlForEdit1(result);
        }
        public static void EndPrepareEditingControlForEdit1(IAsyncResult result)
        {
            prepareEditingControlForEdit1Callback.EndInvoke(result);
        }
        public static Task PrepareEditingControlForEditAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl __control__, System.Boolean selectAll)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean>(
                (Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginPrepareEditingControlForEdit1,
                (Action<IAsyncResult>)EndPrepareEditingControlForEdit1,
                __control__, selectAll, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridView> getEditingControlDataGridViewInternal = (x) => x.EditingControlDataGridView;
        public static System.Windows.Forms.DataGridView GetEditingControlDataGridView(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridView)target.Invoke(getEditingControlDataGridViewInternal, target);
            else
                return getEditingControlDataGridViewInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridView> getEditingControlDataGridViewCallback = GetEditingControlDataGridView;
        public static IAsyncResult BeginGetEditingControlDataGridView(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, AsyncCallback callback, object state)
        {
            return getEditingControlDataGridViewCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridView EndGetEditingControlDataGridView(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            return EndGetEditingControlDataGridView(result);
        }
        public static System.Windows.Forms.DataGridView EndGetEditingControlDataGridView(IAsyncResult result)
        {
            return getEditingControlDataGridViewCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridView> GetEditingControlDataGridViewAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            return Task<System.Windows.Forms.DataGridView>.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl>(
                BeginGetEditingControlDataGridView,
                EndGetEditingControlDataGridView,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridView> setEditingControlDataGridViewInternal = (x, v) => x.EditingControlDataGridView = v;
        public static void SetEditingControlDataGridView(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Windows.Forms.DataGridView value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setEditingControlDataGridViewInternal, target, value);
            else
                setEditingControlDataGridViewInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridView> setEditingControlDataGridViewCallback = SetEditingControlDataGridView;
        public static IAsyncResult BeginSetEditingControlDataGridView(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Windows.Forms.DataGridView value, AsyncCallback callback, object state)
        {
            return setEditingControlDataGridViewCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetEditingControlDataGridView(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            EndSetEditingControlDataGridView(result);
        }
        public static void EndSetEditingControlDataGridView(IAsyncResult result)
        {
            setEditingControlDataGridViewCallback.EndInvoke(result);
        }
        public static Task SetEditingControlDataGridViewAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Windows.Forms.DataGridView value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.DataGridView>(
                BeginSetEditingControlDataGridView,
                EndSetEditingControlDataGridView,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Object> getEditingControlFormattedValueInternal = (x) => x.EditingControlFormattedValue;
        public static System.Object GetEditingControlFormattedValue(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Object)target.Invoke(getEditingControlFormattedValueInternal, target);
            else
                return getEditingControlFormattedValueInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Object> getEditingControlFormattedValueCallback = GetEditingControlFormattedValue;
        public static IAsyncResult BeginGetEditingControlFormattedValue(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, AsyncCallback callback, object state)
        {
            return getEditingControlFormattedValueCallback.BeginInvoke(target, callback, state);
        }
        public static System.Object EndGetEditingControlFormattedValue(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            return EndGetEditingControlFormattedValue(result);
        }
        public static System.Object EndGetEditingControlFormattedValue(IAsyncResult result)
        {
            return getEditingControlFormattedValueCallback.EndInvoke(result);
        }
        public static Task<System.Object> GetEditingControlFormattedValueAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl>(
                BeginGetEditingControlFormattedValue,
                EndGetEditingControlFormattedValue,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Object> setEditingControlFormattedValueInternal = (x, v) => x.EditingControlFormattedValue = v;
        public static void SetEditingControlFormattedValue(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Object value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setEditingControlFormattedValueInternal, target, value);
            else
                setEditingControlFormattedValueInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Object> setEditingControlFormattedValueCallback = SetEditingControlFormattedValue;
        public static IAsyncResult BeginSetEditingControlFormattedValue(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Object value, AsyncCallback callback, object state)
        {
            return setEditingControlFormattedValueCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetEditingControlFormattedValue(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            EndSetEditingControlFormattedValue(result);
        }
        public static void EndSetEditingControlFormattedValue(IAsyncResult result)
        {
            setEditingControlFormattedValueCallback.EndInvoke(result);
        }
        public static Task SetEditingControlFormattedValueAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Object value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Object>(
                BeginSetEditingControlFormattedValue,
                EndSetEditingControlFormattedValue,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Int32> getEditingControlRowIndexInternal = (x) => x.EditingControlRowIndex;
        public static System.Int32 GetEditingControlRowIndex(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getEditingControlRowIndexInternal, target);
            else
                return getEditingControlRowIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Int32> getEditingControlRowIndexCallback = GetEditingControlRowIndex;
        public static IAsyncResult BeginGetEditingControlRowIndex(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, AsyncCallback callback, object state)
        {
            return getEditingControlRowIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetEditingControlRowIndex(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            return EndGetEditingControlRowIndex(result);
        }
        public static System.Int32 EndGetEditingControlRowIndex(IAsyncResult result)
        {
            return getEditingControlRowIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetEditingControlRowIndexAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl>(
                BeginGetEditingControlRowIndex,
                EndGetEditingControlRowIndex,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Int32> setEditingControlRowIndexInternal = (x, v) => x.EditingControlRowIndex = v;
        public static void SetEditingControlRowIndex(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setEditingControlRowIndexInternal, target, value);
            else
                setEditingControlRowIndexInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Int32> setEditingControlRowIndexCallback = SetEditingControlRowIndex;
        public static IAsyncResult BeginSetEditingControlRowIndex(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setEditingControlRowIndexCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetEditingControlRowIndex(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            EndSetEditingControlRowIndex(result);
        }
        public static void EndSetEditingControlRowIndex(IAsyncResult result)
        {
            setEditingControlRowIndexCallback.EndInvoke(result);
        }
        public static Task SetEditingControlRowIndexAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Int32>(
                BeginSetEditingControlRowIndex,
                EndSetEditingControlRowIndex,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean> getEditingControlValueChangedInternal = (x) => x.EditingControlValueChanged;
        public static System.Boolean GetEditingControlValueChanged(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getEditingControlValueChangedInternal, target);
            else
                return getEditingControlValueChangedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean> getEditingControlValueChangedCallback = GetEditingControlValueChanged;
        public static IAsyncResult BeginGetEditingControlValueChanged(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, AsyncCallback callback, object state)
        {
            return getEditingControlValueChangedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetEditingControlValueChanged(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            return EndGetEditingControlValueChanged(result);
        }
        public static System.Boolean EndGetEditingControlValueChanged(IAsyncResult result)
        {
            return getEditingControlValueChangedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetEditingControlValueChangedAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl>(
                BeginGetEditingControlValueChanged,
                EndGetEditingControlValueChanged,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean> setEditingControlValueChangedInternal = (x, v) => x.EditingControlValueChanged = v;
        public static void SetEditingControlValueChanged(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setEditingControlValueChangedInternal, target, value);
            else
                setEditingControlValueChangedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean> setEditingControlValueChangedCallback = SetEditingControlValueChanged;
        public static IAsyncResult BeginSetEditingControlValueChanged(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setEditingControlValueChangedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetEditingControlValueChanged(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            EndSetEditingControlValueChanged(result);
        }
        public static void EndSetEditingControlValueChanged(IAsyncResult result)
        {
            setEditingControlValueChangedCallback.EndInvoke(result);
        }
        public static Task SetEditingControlValueChangedAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean>(
                BeginSetEditingControlValueChanged,
                EndSetEditingControlValueChanged,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.Cursor> getEditingPanelCursorInternal = (x) => x.EditingPanelCursor;
        public static System.Windows.Forms.Cursor GetEditingPanelCursor(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Cursor)target.Invoke(getEditingPanelCursorInternal, target);
            else
                return getEditingPanelCursorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Windows.Forms.Cursor> getEditingPanelCursorCallback = GetEditingPanelCursor;
        public static IAsyncResult BeginGetEditingPanelCursor(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, AsyncCallback callback, object state)
        {
            return getEditingPanelCursorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Cursor EndGetEditingPanelCursor(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            return EndGetEditingPanelCursor(result);
        }
        public static System.Windows.Forms.Cursor EndGetEditingPanelCursor(IAsyncResult result)
        {
            return getEditingPanelCursorCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Cursor> GetEditingPanelCursorAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            return Task<System.Windows.Forms.Cursor>.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl>(
                BeginGetEditingPanelCursor,
                EndGetEditingPanelCursor,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean> getRepositionEditingControlOnValueChangeInternal = (x) => x.RepositionEditingControlOnValueChange;
        public static System.Boolean GetRepositionEditingControlOnValueChange(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getRepositionEditingControlOnValueChangeInternal, target);
            else
                return getRepositionEditingControlOnValueChangeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewComboBoxEditingControl, System.Boolean> getRepositionEditingControlOnValueChangeCallback = GetRepositionEditingControlOnValueChange;
        public static IAsyncResult BeginGetRepositionEditingControlOnValueChange(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, AsyncCallback callback, object state)
        {
            return getRepositionEditingControlOnValueChangeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetRepositionEditingControlOnValueChange(this System.Windows.Forms.DataGridViewComboBoxEditingControl target, IAsyncResult result)
        {
            return EndGetRepositionEditingControlOnValueChange(result);
        }
        public static System.Boolean EndGetRepositionEditingControlOnValueChange(IAsyncResult result)
        {
            return getRepositionEditingControlOnValueChangeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetRepositionEditingControlOnValueChangeAsync(this System.Windows.Forms.DataGridViewComboBoxEditingControl target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridViewComboBoxEditingControl>(
                BeginGetRepositionEditingControlOnValueChange,
                EndGetRepositionEditingControlOnValueChange,
                target, null);
        }


        private static readonly Action<System.Windows.Forms.DataGrid> resetAlternatingBackColor1Internal = (c) => c.ResetAlternatingBackColor();
        public static void ResetAlternatingBackColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetAlternatingBackColor1Internal, __control__);
            else
                resetAlternatingBackColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetAlternatingBackColor1Callback = ResetAlternatingBackColor;
        public static IAsyncResult BeginResetAlternatingBackColor1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetAlternatingBackColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetAlternatingBackColor1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetAlternatingBackColor1(result);
        }
        public static void EndResetAlternatingBackColor1(IAsyncResult result)
        {
            resetAlternatingBackColor1Callback.EndInvoke(result);
        }
        public static Task ResetAlternatingBackColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetAlternatingBackColor1,
                (Action<IAsyncResult>)EndResetAlternatingBackColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetBackColor3Internal = (c) => c.ResetBackColor();
        public static void ResetBackColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetBackColor3Internal, __control__);
            else
                resetBackColor3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetBackColor3Callback = ResetBackColor;
        public static IAsyncResult BeginResetBackColor3(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetBackColor3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetBackColor3(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetBackColor3(result);
        }
        public static void EndResetBackColor3(IAsyncResult result)
        {
            resetBackColor3Callback.EndInvoke(result);
        }
        public static Task ResetBackColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetBackColor3,
                (Action<IAsyncResult>)EndResetBackColor3,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetForeColor3Internal = (c) => c.ResetForeColor();
        public static void ResetForeColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetForeColor3Internal, __control__);
            else
                resetForeColor3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetForeColor3Callback = ResetForeColor;
        public static IAsyncResult BeginResetForeColor3(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetForeColor3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetForeColor3(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetForeColor3(result);
        }
        public static void EndResetForeColor3(IAsyncResult result)
        {
            resetForeColor3Callback.EndInvoke(result);
        }
        public static Task ResetForeColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetForeColor3,
                (Action<IAsyncResult>)EndResetForeColor3,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetSelectionBackColor1Internal = (c) => c.ResetSelectionBackColor();
        public static void ResetSelectionBackColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetSelectionBackColor1Internal, __control__);
            else
                resetSelectionBackColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetSelectionBackColor1Callback = ResetSelectionBackColor;
        public static IAsyncResult BeginResetSelectionBackColor1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetSelectionBackColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetSelectionBackColor1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetSelectionBackColor1(result);
        }
        public static void EndResetSelectionBackColor1(IAsyncResult result)
        {
            resetSelectionBackColor1Callback.EndInvoke(result);
        }
        public static Task ResetSelectionBackColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetSelectionBackColor1,
                (Action<IAsyncResult>)EndResetSelectionBackColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetSelectionForeColor1Internal = (c) => c.ResetSelectionForeColor();
        public static void ResetSelectionForeColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetSelectionForeColor1Internal, __control__);
            else
                resetSelectionForeColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetSelectionForeColor1Callback = ResetSelectionForeColor;
        public static IAsyncResult BeginResetSelectionForeColor1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetSelectionForeColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetSelectionForeColor1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetSelectionForeColor1(result);
        }
        public static void EndResetSelectionForeColor1(IAsyncResult result)
        {
            resetSelectionForeColor1Callback.EndInvoke(result);
        }
        public static Task ResetSelectionForeColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetSelectionForeColor1,
                (Action<IAsyncResult>)EndResetSelectionForeColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Object, System.String> setDataBinding1Internal = (c, dataSource, dataMember) => c.SetDataBinding(dataSource, dataMember);
        public static void SetDataBinding(this System.Windows.Forms.DataGrid __control__, System.Object dataSource, System.String dataMember)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setDataBinding1Internal, __control__, dataSource, dataMember);
            else
                setDataBinding1Internal.Invoke(__control__, dataSource, dataMember);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Object, System.String> setDataBinding1Callback = SetDataBinding;
        public static IAsyncResult BeginSetDataBinding1(this System.Windows.Forms.DataGrid __control__, System.Object dataSource, System.String dataMember, AsyncCallback callback, object state)
        {
            return setDataBinding1Callback.BeginInvoke(__control__, dataSource, dataMember, callback, state);
        }
        public static void EndSetDataBinding1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndSetDataBinding1(result);
        }
        public static void EndSetDataBinding1(IAsyncResult result)
        {
            setDataBinding1Callback.EndInvoke(result);
        }
        public static Task SetDataBindingAsync(this System.Windows.Forms.DataGrid __control__, System.Object dataSource, System.String dataMember)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Object, System.String>(
                (Func<System.Windows.Forms.DataGrid, System.Object, System.String, AsyncCallback, object, IAsyncResult>)BeginSetDataBinding1,
                (Action<IAsyncResult>)EndSetDataBinding1,
                __control__, dataSource, dataMember, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetGridLineColor1Internal = (c) => c.ResetGridLineColor();
        public static void ResetGridLineColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetGridLineColor1Internal, __control__);
            else
                resetGridLineColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetGridLineColor1Callback = ResetGridLineColor;
        public static IAsyncResult BeginResetGridLineColor1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetGridLineColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetGridLineColor1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetGridLineColor1(result);
        }
        public static void EndResetGridLineColor1(IAsyncResult result)
        {
            resetGridLineColor1Callback.EndInvoke(result);
        }
        public static Task ResetGridLineColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetGridLineColor1,
                (Action<IAsyncResult>)EndResetGridLineColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetHeaderBackColor1Internal = (c) => c.ResetHeaderBackColor();
        public static void ResetHeaderBackColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetHeaderBackColor1Internal, __control__);
            else
                resetHeaderBackColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetHeaderBackColor1Callback = ResetHeaderBackColor;
        public static IAsyncResult BeginResetHeaderBackColor1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetHeaderBackColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetHeaderBackColor1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetHeaderBackColor1(result);
        }
        public static void EndResetHeaderBackColor1(IAsyncResult result)
        {
            resetHeaderBackColor1Callback.EndInvoke(result);
        }
        public static Task ResetHeaderBackColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetHeaderBackColor1,
                (Action<IAsyncResult>)EndResetHeaderBackColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetHeaderFont1Internal = (c) => c.ResetHeaderFont();
        public static void ResetHeaderFont(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetHeaderFont1Internal, __control__);
            else
                resetHeaderFont1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetHeaderFont1Callback = ResetHeaderFont;
        public static IAsyncResult BeginResetHeaderFont1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetHeaderFont1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetHeaderFont1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetHeaderFont1(result);
        }
        public static void EndResetHeaderFont1(IAsyncResult result)
        {
            resetHeaderFont1Callback.EndInvoke(result);
        }
        public static Task ResetHeaderFontAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetHeaderFont1,
                (Action<IAsyncResult>)EndResetHeaderFont1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetHeaderForeColor1Internal = (c) => c.ResetHeaderForeColor();
        public static void ResetHeaderForeColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetHeaderForeColor1Internal, __control__);
            else
                resetHeaderForeColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetHeaderForeColor1Callback = ResetHeaderForeColor;
        public static IAsyncResult BeginResetHeaderForeColor1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetHeaderForeColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetHeaderForeColor1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetHeaderForeColor1(result);
        }
        public static void EndResetHeaderForeColor1(IAsyncResult result)
        {
            resetHeaderForeColor1Callback.EndInvoke(result);
        }
        public static Task ResetHeaderForeColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetHeaderForeColor1,
                (Action<IAsyncResult>)EndResetHeaderForeColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetLinkColor1Internal = (c) => c.ResetLinkColor();
        public static void ResetLinkColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetLinkColor1Internal, __control__);
            else
                resetLinkColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetLinkColor1Callback = ResetLinkColor;
        public static IAsyncResult BeginResetLinkColor1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetLinkColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetLinkColor1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetLinkColor1(result);
        }
        public static void EndResetLinkColor1(IAsyncResult result)
        {
            resetLinkColor1Callback.EndInvoke(result);
        }
        public static Task ResetLinkColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetLinkColor1,
                (Action<IAsyncResult>)EndResetLinkColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> resetLinkHoverColor1Internal = (c) => c.ResetLinkHoverColor();
        public static void ResetLinkHoverColor(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetLinkHoverColor1Internal, __control__);
            else
                resetLinkHoverColor1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> resetLinkHoverColor1Callback = ResetLinkHoverColor;
        public static IAsyncResult BeginResetLinkHoverColor1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return resetLinkHoverColor1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetLinkHoverColor1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndResetLinkHoverColor1(result);
        }
        public static void EndResetLinkHoverColor1(IAsyncResult result)
        {
            resetLinkHoverColor1Callback.EndInvoke(result);
        }
        public static Task ResetLinkHoverColorAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginResetLinkHoverColor1,
                (Action<IAsyncResult>)EndResetLinkHoverColor1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> collapse1Internal = (c, row) => c.Collapse(row);
        public static void Collapse(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(collapse1Internal, __control__, row);
            else
                collapse1Internal.Invoke(__control__, row);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> collapse1Callback = Collapse;
        public static IAsyncResult BeginCollapse1(this System.Windows.Forms.DataGrid __control__, System.Int32 row, AsyncCallback callback, object state)
        {
            return collapse1Callback.BeginInvoke(__control__, row, callback, state);
        }
        public static void EndCollapse1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndCollapse1(result);
        }
        public static void EndCollapse1(IAsyncResult result)
        {
            collapse1Callback.EndInvoke(result);
        }
        public static Task CollapseAsync(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                (Func<System.Windows.Forms.DataGrid, System.Int32, AsyncCallback, object, IAsyncResult>)BeginCollapse1,
                (Action<IAsyncResult>)EndCollapse1,
                __control__, row, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> expand1Internal = (c, row) => c.Expand(row);
        public static void Expand(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(expand1Internal, __control__, row);
            else
                expand1Internal.Invoke(__control__, row);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> expand1Callback = Expand;
        public static IAsyncResult BeginExpand1(this System.Windows.Forms.DataGrid __control__, System.Int32 row, AsyncCallback callback, object state)
        {
            return expand1Callback.BeginInvoke(__control__, row, callback, state);
        }
        public static void EndExpand1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndExpand1(result);
        }
        public static void EndExpand1(IAsyncResult result)
        {
            expand1Callback.EndInvoke(result);
        }
        public static Task ExpandAsync(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                (Func<System.Windows.Forms.DataGrid, System.Int32, AsyncCallback, object, IAsyncResult>)BeginExpand1,
                (Action<IAsyncResult>)EndExpand1,
                __control__, row, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Rectangle> getCurrentCellBounds1Internal = (c) => c.GetCurrentCellBounds();
        public static System.Drawing.Rectangle GetCurrentCellBounds(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getCurrentCellBounds1Internal, __control__);
            else
                return getCurrentCellBounds1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Rectangle> getCurrentCellBounds1Callback = GetCurrentCellBounds;
        public static IAsyncResult BeginGetCurrentCellBounds1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return getCurrentCellBounds1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Drawing.Rectangle EndGetCurrentCellBounds1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            return EndGetCurrentCellBounds1(result);
        }
        public static System.Drawing.Rectangle EndGetCurrentCellBounds1(IAsyncResult result)
        {
            return getCurrentCellBounds1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetCurrentCellBoundsAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginGetCurrentCellBounds1,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetCurrentCellBounds1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32, System.Int32, System.Drawing.Rectangle> getCellBounds1Internal = (c, row, col) => c.GetCellBounds(row, col);
        public static System.Drawing.Rectangle GetCellBounds(this System.Windows.Forms.DataGrid __control__, System.Int32 row, System.Int32 col)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getCellBounds1Internal, __control__, row, col);
            else
                return getCellBounds1Internal.Invoke(__control__, row, col);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32, System.Int32, System.Drawing.Rectangle> getCellBounds1Callback = GetCellBounds;
        public static IAsyncResult BeginGetCellBounds1(this System.Windows.Forms.DataGrid __control__, System.Int32 row, System.Int32 col, AsyncCallback callback, object state)
        {
            return getCellBounds1Callback.BeginInvoke(__control__, row, col, callback, state);
        }
        public static System.Drawing.Rectangle EndGetCellBounds1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            return EndGetCellBounds1(result);
        }
        public static System.Drawing.Rectangle EndGetCellBounds1(IAsyncResult result)
        {
            return getCellBounds1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetCellBoundsAsync(this System.Windows.Forms.DataGrid __control__, System.Int32 row, System.Int32 col)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.DataGrid, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetCellBounds1,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetCellBounds1,
                __control__, row, col, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridCell, System.Drawing.Rectangle> getCellBounds2Internal = (c, dgc) => c.GetCellBounds(dgc);
        public static System.Drawing.Rectangle GetCellBounds(this System.Windows.Forms.DataGrid __control__, System.Windows.Forms.DataGridCell dgc)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getCellBounds2Internal, __control__, dgc);
            else
                return getCellBounds2Internal.Invoke(__control__, dgc);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridCell, System.Drawing.Rectangle> getCellBounds2Callback = GetCellBounds;
        public static IAsyncResult BeginGetCellBounds2(this System.Windows.Forms.DataGrid __control__, System.Windows.Forms.DataGridCell dgc, AsyncCallback callback, object state)
        {
            return getCellBounds2Callback.BeginInvoke(__control__, dgc, callback, state);
        }
        public static System.Drawing.Rectangle EndGetCellBounds2(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            return EndGetCellBounds2(result);
        }
        public static System.Drawing.Rectangle EndGetCellBounds2(IAsyncResult result)
        {
            return getCellBounds2Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetCellBoundsAsync(this System.Windows.Forms.DataGrid __control__, System.Windows.Forms.DataGridCell dgc)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridCell>(
                (Func<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridCell, AsyncCallback, object, IAsyncResult>)BeginGetCellBounds2,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetCellBounds2,
                __control__, dgc, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32, System.Int32, System.Windows.Forms.DataGrid.HitTestInfo> hitTest1Internal = (c, x, y) => c.HitTest(x, y);
        public static System.Windows.Forms.DataGrid.HitTestInfo HitTest(this System.Windows.Forms.DataGrid __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DataGrid.HitTestInfo)__control__.Invoke(hitTest1Internal, __control__, x, y);
            else
                return hitTest1Internal.Invoke(__control__, x, y);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32, System.Int32, System.Windows.Forms.DataGrid.HitTestInfo> hitTest1Callback = HitTest;
        public static IAsyncResult BeginHitTest1(this System.Windows.Forms.DataGrid __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return hitTest1Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static System.Windows.Forms.DataGrid.HitTestInfo EndHitTest1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            return EndHitTest1(result);
        }
        public static System.Windows.Forms.DataGrid.HitTestInfo EndHitTest1(IAsyncResult result)
        {
            return hitTest1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGrid.HitTestInfo> HitTestAsync(this System.Windows.Forms.DataGrid __control__, System.Int32 x, System.Int32 y)
        {
            return Task<System.Windows.Forms.DataGrid.HitTestInfo>.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.DataGrid, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginHitTest1,
                (Func<IAsyncResult, System.Windows.Forms.DataGrid.HitTestInfo>)EndHitTest1,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Point, System.Windows.Forms.DataGrid.HitTestInfo> hitTest2Internal = (c, position) => c.HitTest(position);
        public static System.Windows.Forms.DataGrid.HitTestInfo HitTest(this System.Windows.Forms.DataGrid __control__, System.Drawing.Point position)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DataGrid.HitTestInfo)__control__.Invoke(hitTest2Internal, __control__, position);
            else
                return hitTest2Internal.Invoke(__control__, position);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Point, System.Windows.Forms.DataGrid.HitTestInfo> hitTest2Callback = HitTest;
        public static IAsyncResult BeginHitTest2(this System.Windows.Forms.DataGrid __control__, System.Drawing.Point position, AsyncCallback callback, object state)
        {
            return hitTest2Callback.BeginInvoke(__control__, position, callback, state);
        }
        public static System.Windows.Forms.DataGrid.HitTestInfo EndHitTest2(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            return EndHitTest2(result);
        }
        public static System.Windows.Forms.DataGrid.HitTestInfo EndHitTest2(IAsyncResult result)
        {
            return hitTest2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGrid.HitTestInfo> HitTestAsync(this System.Windows.Forms.DataGrid __control__, System.Drawing.Point position)
        {
            return Task<System.Windows.Forms.DataGrid.HitTestInfo>.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Point>(
                (Func<System.Windows.Forms.DataGrid, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginHitTest2,
                (Func<IAsyncResult, System.Windows.Forms.DataGrid.HitTestInfo>)EndHitTest2,
                __control__, position, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32, System.Boolean> isExpanded1Internal = (c, rowNumber) => c.IsExpanded(rowNumber);
        public static System.Boolean IsExpanded(this System.Windows.Forms.DataGrid __control__, System.Int32 rowNumber)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(isExpanded1Internal, __control__, rowNumber);
            else
                return isExpanded1Internal.Invoke(__control__, rowNumber);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32, System.Boolean> isExpanded1Callback = IsExpanded;
        public static IAsyncResult BeginIsExpanded1(this System.Windows.Forms.DataGrid __control__, System.Int32 rowNumber, AsyncCallback callback, object state)
        {
            return isExpanded1Callback.BeginInvoke(__control__, rowNumber, callback, state);
        }
        public static System.Boolean EndIsExpanded1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            return EndIsExpanded1(result);
        }
        public static System.Boolean EndIsExpanded1(IAsyncResult result)
        {
            return isExpanded1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> IsExpandedAsync(this System.Windows.Forms.DataGrid __control__, System.Int32 rowNumber)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                (Func<System.Windows.Forms.DataGrid, System.Int32, AsyncCallback, object, IAsyncResult>)BeginIsExpanded1,
                (Func<IAsyncResult, System.Boolean>)EndIsExpanded1,
                __control__, rowNumber, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32, System.Boolean> isSelected1Internal = (c, row) => c.IsSelected(row);
        public static System.Boolean IsSelected(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(isSelected1Internal, __control__, row);
            else
                return isSelected1Internal.Invoke(__control__, row);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32, System.Boolean> isSelected1Callback = IsSelected;
        public static IAsyncResult BeginIsSelected1(this System.Windows.Forms.DataGrid __control__, System.Int32 row, AsyncCallback callback, object state)
        {
            return isSelected1Callback.BeginInvoke(__control__, row, callback, state);
        }
        public static System.Boolean EndIsSelected1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            return EndIsSelected1(result);
        }
        public static System.Boolean EndIsSelected1(IAsyncResult result)
        {
            return isSelected1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> IsSelectedAsync(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                (Func<System.Windows.Forms.DataGrid, System.Int32, AsyncCallback, object, IAsyncResult>)BeginIsSelected1,
                (Func<IAsyncResult, System.Boolean>)EndIsSelected1,
                __control__, row, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid> navigateBack1Internal = (c) => c.NavigateBack();
        public static void NavigateBack(this System.Windows.Forms.DataGrid __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigateBack1Internal, __control__);
            else
                navigateBack1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGrid> navigateBack1Callback = NavigateBack;
        public static IAsyncResult BeginNavigateBack1(this System.Windows.Forms.DataGrid __control__, AsyncCallback callback, object state)
        {
            return navigateBack1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndNavigateBack1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndNavigateBack1(result);
        }
        public static void EndNavigateBack1(IAsyncResult result)
        {
            navigateBack1Callback.EndInvoke(result);
        }
        public static Task NavigateBackAsync(this System.Windows.Forms.DataGrid __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginNavigateBack1,
                (Action<IAsyncResult>)EndNavigateBack1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32, System.String> navigateTo1Internal = (c, rowNumber, relationName) => c.NavigateTo(rowNumber, relationName);
        public static void NavigateTo(this System.Windows.Forms.DataGrid __control__, System.Int32 rowNumber, System.String relationName)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigateTo1Internal, __control__, rowNumber, relationName);
            else
                navigateTo1Internal.Invoke(__control__, rowNumber, relationName);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32, System.String> navigateTo1Callback = NavigateTo;
        public static IAsyncResult BeginNavigateTo1(this System.Windows.Forms.DataGrid __control__, System.Int32 rowNumber, System.String relationName, AsyncCallback callback, object state)
        {
            return navigateTo1Callback.BeginInvoke(__control__, rowNumber, relationName, callback, state);
        }
        public static void EndNavigateTo1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndNavigateTo1(result);
        }
        public static void EndNavigateTo1(IAsyncResult result)
        {
            navigateTo1Callback.EndInvoke(result);
        }
        public static Task NavigateToAsync(this System.Windows.Forms.DataGrid __control__, System.Int32 rowNumber, System.String relationName)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32, System.String>(
                (Func<System.Windows.Forms.DataGrid, System.Int32, System.String, AsyncCallback, object, IAsyncResult>)BeginNavigateTo1,
                (Action<IAsyncResult>)EndNavigateTo1,
                __control__, rowNumber, relationName, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> select4Internal = (c, row) => c.Select(row);
        public static void Select(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(select4Internal, __control__, row);
            else
                select4Internal.Invoke(__control__, row);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> select4Callback = Select;
        public static IAsyncResult BeginSelect4(this System.Windows.Forms.DataGrid __control__, System.Int32 row, AsyncCallback callback, object state)
        {
            return select4Callback.BeginInvoke(__control__, row, callback, state);
        }
        public static void EndSelect4(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndSelect4(result);
        }
        public static void EndSelect4(IAsyncResult result)
        {
            select4Callback.EndInvoke(result);
        }
        public static Task SelectAsync(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                (Func<System.Windows.Forms.DataGrid, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSelect4,
                (Action<IAsyncResult>)EndSelect4,
                __control__, row, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> subObjectsSiteChange1Internal = (c, site) => c.SubObjectsSiteChange(site);
        public static void SubObjectsSiteChange(this System.Windows.Forms.DataGrid __control__, System.Boolean site)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(subObjectsSiteChange1Internal, __control__, site);
            else
                subObjectsSiteChange1Internal.Invoke(__control__, site);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> subObjectsSiteChange1Callback = SubObjectsSiteChange;
        public static IAsyncResult BeginSubObjectsSiteChange1(this System.Windows.Forms.DataGrid __control__, System.Boolean site, AsyncCallback callback, object state)
        {
            return subObjectsSiteChange1Callback.BeginInvoke(__control__, site, callback, state);
        }
        public static void EndSubObjectsSiteChange1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndSubObjectsSiteChange1(result);
        }
        public static void EndSubObjectsSiteChange1(IAsyncResult result)
        {
            subObjectsSiteChange1Callback.EndInvoke(result);
        }
        public static Task SubObjectsSiteChangeAsync(this System.Windows.Forms.DataGrid __control__, System.Boolean site)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Boolean>(
                (Func<System.Windows.Forms.DataGrid, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginSubObjectsSiteChange1,
                (Action<IAsyncResult>)EndSubObjectsSiteChange1,
                __control__, site, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> unSelect1Internal = (c, row) => c.UnSelect(row);
        public static void UnSelect(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(unSelect1Internal, __control__, row);
            else
                unSelect1Internal.Invoke(__control__, row);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> unSelect1Callback = UnSelect;
        public static IAsyncResult BeginUnSelect1(this System.Windows.Forms.DataGrid __control__, System.Int32 row, AsyncCallback callback, object state)
        {
            return unSelect1Callback.BeginInvoke(__control__, row, callback, state);
        }
        public static void EndUnSelect1(this System.Windows.Forms.DataGrid __control__, IAsyncResult result)
        {
            EndUnSelect1(result);
        }
        public static void EndUnSelect1(IAsyncResult result)
        {
            unSelect1Callback.EndInvoke(result);
        }
        public static Task UnSelectAsync(this System.Windows.Forms.DataGrid __control__, System.Int32 row)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                (Func<System.Windows.Forms.DataGrid, System.Int32, AsyncCallback, object, IAsyncResult>)BeginUnSelect1,
                (Action<IAsyncResult>)EndUnSelect1,
                __control__, row, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getAllowSortingInternal = (x) => x.AllowSorting;
        public static System.Boolean GetAllowSorting(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowSortingInternal, target);
            else
                return getAllowSortingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getAllowSortingCallback = GetAllowSorting;
        public static IAsyncResult BeginGetAllowSorting(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getAllowSortingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowSorting(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetAllowSorting(result);
        }
        public static System.Boolean EndGetAllowSorting(IAsyncResult result)
        {
            return getAllowSortingCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowSortingAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetAllowSorting,
                EndGetAllowSorting,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setAllowSortingInternal = (x, v) => x.AllowSorting = v;
        public static void SetAllowSorting(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowSortingInternal, target, value);
            else
                setAllowSortingInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setAllowSortingCallback = SetAllowSorting;
        public static IAsyncResult BeginSetAllowSorting(this System.Windows.Forms.DataGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowSortingCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowSorting(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetAllowSorting(result);
        }
        public static void EndSetAllowSorting(IAsyncResult result)
        {
            setAllowSortingCallback.EndInvoke(result);
        }
        public static Task SetAllowSortingAsync(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Boolean>(
                BeginSetAllowSorting,
                EndSetAllowSorting,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getAlternatingBackColorInternal = (x) => x.AlternatingBackColor;
        public static System.Drawing.Color GetAlternatingBackColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getAlternatingBackColorInternal, target);
            else
                return getAlternatingBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getAlternatingBackColorCallback = GetAlternatingBackColor;
        public static IAsyncResult BeginGetAlternatingBackColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getAlternatingBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetAlternatingBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetAlternatingBackColor(result);
        }
        public static System.Drawing.Color EndGetAlternatingBackColor(IAsyncResult result)
        {
            return getAlternatingBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetAlternatingBackColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetAlternatingBackColor,
                EndGetAlternatingBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setAlternatingBackColorInternal = (x, v) => x.AlternatingBackColor = v;
        public static void SetAlternatingBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAlternatingBackColorInternal, target, value);
            else
                setAlternatingBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setAlternatingBackColorCallback = SetAlternatingBackColor;
        public static IAsyncResult BeginSetAlternatingBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setAlternatingBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAlternatingBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetAlternatingBackColor(result);
        }
        public static void EndSetAlternatingBackColor(IAsyncResult result)
        {
            setAlternatingBackColorCallback.EndInvoke(result);
        }
        public static Task SetAlternatingBackColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetAlternatingBackColor,
                EndSetAlternatingBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getCaptionBackColorInternal = (x) => x.CaptionBackColor;
        public static System.Drawing.Color GetCaptionBackColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCaptionBackColorInternal, target);
            else
                return getCaptionBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getCaptionBackColorCallback = GetCaptionBackColor;
        public static IAsyncResult BeginGetCaptionBackColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getCaptionBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCaptionBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetCaptionBackColor(result);
        }
        public static System.Drawing.Color EndGetCaptionBackColor(IAsyncResult result)
        {
            return getCaptionBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCaptionBackColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetCaptionBackColor,
                EndGetCaptionBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setCaptionBackColorInternal = (x, v) => x.CaptionBackColor = v;
        public static void SetCaptionBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCaptionBackColorInternal, target, value);
            else
                setCaptionBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setCaptionBackColorCallback = SetCaptionBackColor;
        public static IAsyncResult BeginSetCaptionBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCaptionBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCaptionBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetCaptionBackColor(result);
        }
        public static void EndSetCaptionBackColor(IAsyncResult result)
        {
            setCaptionBackColorCallback.EndInvoke(result);
        }
        public static Task SetCaptionBackColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetCaptionBackColor,
                EndSetCaptionBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getCaptionForeColorInternal = (x) => x.CaptionForeColor;
        public static System.Drawing.Color GetCaptionForeColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCaptionForeColorInternal, target);
            else
                return getCaptionForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getCaptionForeColorCallback = GetCaptionForeColor;
        public static IAsyncResult BeginGetCaptionForeColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getCaptionForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCaptionForeColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetCaptionForeColor(result);
        }
        public static System.Drawing.Color EndGetCaptionForeColor(IAsyncResult result)
        {
            return getCaptionForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCaptionForeColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetCaptionForeColor,
                EndGetCaptionForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setCaptionForeColorInternal = (x, v) => x.CaptionForeColor = v;
        public static void SetCaptionForeColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCaptionForeColorInternal, target, value);
            else
                setCaptionForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setCaptionForeColorCallback = SetCaptionForeColor;
        public static IAsyncResult BeginSetCaptionForeColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCaptionForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCaptionForeColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetCaptionForeColor(result);
        }
        public static void EndSetCaptionForeColor(IAsyncResult result)
        {
            setCaptionForeColorCallback.EndInvoke(result);
        }
        public static Task SetCaptionForeColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetCaptionForeColor,
                EndSetCaptionForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Font> getCaptionFontInternal = (x) => x.CaptionFont;
        public static System.Drawing.Font GetCaptionFont(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Font)target.Invoke(getCaptionFontInternal, target);
            else
                return getCaptionFontInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Font> getCaptionFontCallback = GetCaptionFont;
        public static IAsyncResult BeginGetCaptionFont(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getCaptionFontCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Font EndGetCaptionFont(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetCaptionFont(result);
        }
        public static System.Drawing.Font EndGetCaptionFont(IAsyncResult result)
        {
            return getCaptionFontCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Font> GetCaptionFontAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Font>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetCaptionFont,
                EndGetCaptionFont,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Font> setCaptionFontInternal = (x, v) => x.CaptionFont = v;
        public static void SetCaptionFont(this System.Windows.Forms.DataGrid target, System.Drawing.Font value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCaptionFontInternal, target, value);
            else
                setCaptionFontInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Font> setCaptionFontCallback = SetCaptionFont;
        public static IAsyncResult BeginSetCaptionFont(this System.Windows.Forms.DataGrid target, System.Drawing.Font value, AsyncCallback callback, object state)
        {
            return setCaptionFontCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCaptionFont(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetCaptionFont(result);
        }
        public static void EndSetCaptionFont(IAsyncResult result)
        {
            setCaptionFontCallback.EndInvoke(result);
        }
        public static Task SetCaptionFontAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Font value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Font>(
                BeginSetCaptionFont,
                EndSetCaptionFont,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.String> getCaptionTextInternal = (x) => x.CaptionText;
        public static System.String GetCaptionText(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getCaptionTextInternal, target);
            else
                return getCaptionTextInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.String> getCaptionTextCallback = GetCaptionText;
        public static IAsyncResult BeginGetCaptionText(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getCaptionTextCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetCaptionText(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetCaptionText(result);
        }
        public static System.String EndGetCaptionText(IAsyncResult result)
        {
            return getCaptionTextCallback.EndInvoke(result);
        }
        public static Task<System.String> GetCaptionTextAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetCaptionText,
                EndGetCaptionText,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.String> setCaptionTextInternal = (x, v) => x.CaptionText = v;
        public static void SetCaptionText(this System.Windows.Forms.DataGrid target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCaptionTextInternal, target, value);
            else
                setCaptionTextInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.String> setCaptionTextCallback = SetCaptionText;
        public static IAsyncResult BeginSetCaptionText(this System.Windows.Forms.DataGrid target, System.String value, AsyncCallback callback, object state)
        {
            return setCaptionTextCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCaptionText(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetCaptionText(result);
        }
        public static void EndSetCaptionText(IAsyncResult result)
        {
            setCaptionTextCallback.EndInvoke(result);
        }
        public static Task SetCaptionTextAsync(this System.Windows.Forms.DataGrid target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.String>(
                BeginSetCaptionText,
                EndSetCaptionText,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getCaptionVisibleInternal = (x) => x.CaptionVisible;
        public static System.Boolean GetCaptionVisible(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCaptionVisibleInternal, target);
            else
                return getCaptionVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getCaptionVisibleCallback = GetCaptionVisible;
        public static IAsyncResult BeginGetCaptionVisible(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getCaptionVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCaptionVisible(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetCaptionVisible(result);
        }
        public static System.Boolean EndGetCaptionVisible(IAsyncResult result)
        {
            return getCaptionVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCaptionVisibleAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetCaptionVisible,
                EndGetCaptionVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setCaptionVisibleInternal = (x, v) => x.CaptionVisible = v;
        public static void SetCaptionVisible(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCaptionVisibleInternal, target, value);
            else
                setCaptionVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setCaptionVisibleCallback = SetCaptionVisible;
        public static IAsyncResult BeginSetCaptionVisible(this System.Windows.Forms.DataGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCaptionVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCaptionVisible(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetCaptionVisible(result);
        }
        public static void EndSetCaptionVisible(IAsyncResult result)
        {
            setCaptionVisibleCallback.EndInvoke(result);
        }
        public static Task SetCaptionVisibleAsync(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Boolean>(
                BeginSetCaptionVisible,
                EndSetCaptionVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridCell> getCurrentCellInternal = (x) => x.CurrentCell;
        public static System.Windows.Forms.DataGridCell GetCurrentCell(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridCell)target.Invoke(getCurrentCellInternal, target);
            else
                return getCurrentCellInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridCell> getCurrentCellCallback = GetCurrentCell;
        public static IAsyncResult BeginGetCurrentCell(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getCurrentCellCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridCell EndGetCurrentCell(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetCurrentCell(result);
        }
        public static System.Windows.Forms.DataGridCell EndGetCurrentCell(IAsyncResult result)
        {
            return getCurrentCellCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridCell> GetCurrentCellAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Windows.Forms.DataGridCell>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetCurrentCell,
                EndGetCurrentCell,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridCell> setCurrentCellInternal = (x, v) => x.CurrentCell = v;
        public static void SetCurrentCell(this System.Windows.Forms.DataGrid target, System.Windows.Forms.DataGridCell value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCurrentCellInternal, target, value);
            else
                setCurrentCellInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridCell> setCurrentCellCallback = SetCurrentCell;
        public static IAsyncResult BeginSetCurrentCell(this System.Windows.Forms.DataGrid target, System.Windows.Forms.DataGridCell value, AsyncCallback callback, object state)
        {
            return setCurrentCellCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCurrentCell(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetCurrentCell(result);
        }
        public static void EndSetCurrentCell(IAsyncResult result)
        {
            setCurrentCellCallback.EndInvoke(result);
        }
        public static Task SetCurrentCellAsync(this System.Windows.Forms.DataGrid target, System.Windows.Forms.DataGridCell value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridCell>(
                BeginSetCurrentCell,
                EndSetCurrentCell,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getSelectionBackColorInternal = (x) => x.SelectionBackColor;
        public static System.Drawing.Color GetSelectionBackColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getSelectionBackColorInternal, target);
            else
                return getSelectionBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getSelectionBackColorCallback = GetSelectionBackColor;
        public static IAsyncResult BeginGetSelectionBackColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getSelectionBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetSelectionBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetSelectionBackColor(result);
        }
        public static System.Drawing.Color EndGetSelectionBackColor(IAsyncResult result)
        {
            return getSelectionBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetSelectionBackColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetSelectionBackColor,
                EndGetSelectionBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setSelectionBackColorInternal = (x, v) => x.SelectionBackColor = v;
        public static void SetSelectionBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionBackColorInternal, target, value);
            else
                setSelectionBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setSelectionBackColorCallback = SetSelectionBackColor;
        public static IAsyncResult BeginSetSelectionBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setSelectionBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetSelectionBackColor(result);
        }
        public static void EndSetSelectionBackColor(IAsyncResult result)
        {
            setSelectionBackColorCallback.EndInvoke(result);
        }
        public static Task SetSelectionBackColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetSelectionBackColor,
                EndSetSelectionBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getSelectionForeColorInternal = (x) => x.SelectionForeColor;
        public static System.Drawing.Color GetSelectionForeColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getSelectionForeColorInternal, target);
            else
                return getSelectionForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getSelectionForeColorCallback = GetSelectionForeColor;
        public static IAsyncResult BeginGetSelectionForeColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getSelectionForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetSelectionForeColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetSelectionForeColor(result);
        }
        public static System.Drawing.Color EndGetSelectionForeColor(IAsyncResult result)
        {
            return getSelectionForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetSelectionForeColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetSelectionForeColor,
                EndGetSelectionForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setSelectionForeColorInternal = (x, v) => x.SelectionForeColor = v;
        public static void SetSelectionForeColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionForeColorInternal, target, value);
            else
                setSelectionForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setSelectionForeColorCallback = SetSelectionForeColor;
        public static IAsyncResult BeginSetSelectionForeColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setSelectionForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionForeColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetSelectionForeColor(result);
        }
        public static void EndSetSelectionForeColor(IAsyncResult result)
        {
            setSelectionForeColorCallback.EndInvoke(result);
        }
        public static Task SetSelectionForeColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetSelectionForeColor,
                EndSetSelectionForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.String> getDataMemberInternal = (x) => x.DataMember;
        public static System.String GetDataMember(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getDataMemberInternal, target);
            else
                return getDataMemberInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.String> getDataMemberCallback = GetDataMember;
        public static IAsyncResult BeginGetDataMember(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getDataMemberCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetDataMember(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetDataMember(result);
        }
        public static System.String EndGetDataMember(IAsyncResult result)
        {
            return getDataMemberCallback.EndInvoke(result);
        }
        public static Task<System.String> GetDataMemberAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetDataMember,
                EndGetDataMember,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.String> setDataMemberInternal = (x, v) => x.DataMember = v;
        public static void SetDataMember(this System.Windows.Forms.DataGrid target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDataMemberInternal, target, value);
            else
                setDataMemberInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.String> setDataMemberCallback = SetDataMember;
        public static IAsyncResult BeginSetDataMember(this System.Windows.Forms.DataGrid target, System.String value, AsyncCallback callback, object state)
        {
            return setDataMemberCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDataMember(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetDataMember(result);
        }
        public static void EndSetDataMember(IAsyncResult result)
        {
            setDataMemberCallback.EndInvoke(result);
        }
        public static Task SetDataMemberAsync(this System.Windows.Forms.DataGrid target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.String>(
                BeginSetDataMember,
                EndSetDataMember,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getCurrentRowIndexInternal = (x) => x.CurrentRowIndex;
        public static System.Int32 GetCurrentRowIndex(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getCurrentRowIndexInternal, target);
            else
                return getCurrentRowIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getCurrentRowIndexCallback = GetCurrentRowIndex;
        public static IAsyncResult BeginGetCurrentRowIndex(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getCurrentRowIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetCurrentRowIndex(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetCurrentRowIndex(result);
        }
        public static System.Int32 EndGetCurrentRowIndex(IAsyncResult result)
        {
            return getCurrentRowIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetCurrentRowIndexAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetCurrentRowIndex,
                EndGetCurrentRowIndex,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> setCurrentRowIndexInternal = (x, v) => x.CurrentRowIndex = v;
        public static void SetCurrentRowIndex(this System.Windows.Forms.DataGrid target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCurrentRowIndexInternal, target, value);
            else
                setCurrentRowIndexInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> setCurrentRowIndexCallback = SetCurrentRowIndex;
        public static IAsyncResult BeginSetCurrentRowIndex(this System.Windows.Forms.DataGrid target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setCurrentRowIndexCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCurrentRowIndex(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetCurrentRowIndex(result);
        }
        public static void EndSetCurrentRowIndex(IAsyncResult result)
        {
            setCurrentRowIndexCallback.EndInvoke(result);
        }
        public static Task SetCurrentRowIndexAsync(this System.Windows.Forms.DataGrid target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                BeginSetCurrentRowIndex,
                EndSetCurrentRowIndex,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.GridTableStylesCollection> getTableStylesInternal = (x) => x.TableStyles;
        public static System.Windows.Forms.GridTableStylesCollection GetTableStyles(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.GridTableStylesCollection)target.Invoke(getTableStylesInternal, target);
            else
                return getTableStylesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.GridTableStylesCollection> getTableStylesCallback = GetTableStyles;
        public static IAsyncResult BeginGetTableStyles(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getTableStylesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.GridTableStylesCollection EndGetTableStyles(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetTableStyles(result);
        }
        public static System.Windows.Forms.GridTableStylesCollection EndGetTableStyles(IAsyncResult result)
        {
            return getTableStylesCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.GridTableStylesCollection> GetTableStylesAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Windows.Forms.GridTableStylesCollection>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetTableStyles,
                EndGetTableStyles,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getGridLineColorInternal = (x) => x.GridLineColor;
        public static System.Drawing.Color GetGridLineColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getGridLineColorInternal, target);
            else
                return getGridLineColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getGridLineColorCallback = GetGridLineColor;
        public static IAsyncResult BeginGetGridLineColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getGridLineColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetGridLineColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetGridLineColor(result);
        }
        public static System.Drawing.Color EndGetGridLineColor(IAsyncResult result)
        {
            return getGridLineColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetGridLineColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetGridLineColor,
                EndGetGridLineColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setGridLineColorInternal = (x, v) => x.GridLineColor = v;
        public static void SetGridLineColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setGridLineColorInternal, target, value);
            else
                setGridLineColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setGridLineColorCallback = SetGridLineColor;
        public static IAsyncResult BeginSetGridLineColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setGridLineColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetGridLineColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetGridLineColor(result);
        }
        public static void EndSetGridLineColor(IAsyncResult result)
        {
            setGridLineColorCallback.EndInvoke(result);
        }
        public static Task SetGridLineColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetGridLineColor,
                EndSetGridLineColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridLineStyle> getGridLineStyleInternal = (x) => x.GridLineStyle;
        public static System.Windows.Forms.DataGridLineStyle GetGridLineStyle(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridLineStyle)target.Invoke(getGridLineStyleInternal, target);
            else
                return getGridLineStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridLineStyle> getGridLineStyleCallback = GetGridLineStyle;
        public static IAsyncResult BeginGetGridLineStyle(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getGridLineStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridLineStyle EndGetGridLineStyle(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetGridLineStyle(result);
        }
        public static System.Windows.Forms.DataGridLineStyle EndGetGridLineStyle(IAsyncResult result)
        {
            return getGridLineStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridLineStyle> GetGridLineStyleAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Windows.Forms.DataGridLineStyle>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetGridLineStyle,
                EndGetGridLineStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridLineStyle> setGridLineStyleInternal = (x, v) => x.GridLineStyle = v;
        public static void SetGridLineStyle(this System.Windows.Forms.DataGrid target, System.Windows.Forms.DataGridLineStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setGridLineStyleInternal, target, value);
            else
                setGridLineStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridLineStyle> setGridLineStyleCallback = SetGridLineStyle;
        public static IAsyncResult BeginSetGridLineStyle(this System.Windows.Forms.DataGrid target, System.Windows.Forms.DataGridLineStyle value, AsyncCallback callback, object state)
        {
            return setGridLineStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetGridLineStyle(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetGridLineStyle(result);
        }
        public static void EndSetGridLineStyle(IAsyncResult result)
        {
            setGridLineStyleCallback.EndInvoke(result);
        }
        public static Task SetGridLineStyleAsync(this System.Windows.Forms.DataGrid target, System.Windows.Forms.DataGridLineStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridLineStyle>(
                BeginSetGridLineStyle,
                EndSetGridLineStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridParentRowsLabelStyle> getParentRowsLabelStyleInternal = (x) => x.ParentRowsLabelStyle;
        public static System.Windows.Forms.DataGridParentRowsLabelStyle GetParentRowsLabelStyle(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridParentRowsLabelStyle)target.Invoke(getParentRowsLabelStyleInternal, target);
            else
                return getParentRowsLabelStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridParentRowsLabelStyle> getParentRowsLabelStyleCallback = GetParentRowsLabelStyle;
        public static IAsyncResult BeginGetParentRowsLabelStyle(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getParentRowsLabelStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridParentRowsLabelStyle EndGetParentRowsLabelStyle(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetParentRowsLabelStyle(result);
        }
        public static System.Windows.Forms.DataGridParentRowsLabelStyle EndGetParentRowsLabelStyle(IAsyncResult result)
        {
            return getParentRowsLabelStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridParentRowsLabelStyle> GetParentRowsLabelStyleAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Windows.Forms.DataGridParentRowsLabelStyle>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetParentRowsLabelStyle,
                EndGetParentRowsLabelStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridParentRowsLabelStyle> setParentRowsLabelStyleInternal = (x, v) => x.ParentRowsLabelStyle = v;
        public static void SetParentRowsLabelStyle(this System.Windows.Forms.DataGrid target, System.Windows.Forms.DataGridParentRowsLabelStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setParentRowsLabelStyleInternal, target, value);
            else
                setParentRowsLabelStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridParentRowsLabelStyle> setParentRowsLabelStyleCallback = SetParentRowsLabelStyle;
        public static IAsyncResult BeginSetParentRowsLabelStyle(this System.Windows.Forms.DataGrid target, System.Windows.Forms.DataGridParentRowsLabelStyle value, AsyncCallback callback, object state)
        {
            return setParentRowsLabelStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetParentRowsLabelStyle(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetParentRowsLabelStyle(result);
        }
        public static void EndSetParentRowsLabelStyle(IAsyncResult result)
        {
            setParentRowsLabelStyleCallback.EndInvoke(result);
        }
        public static Task SetParentRowsLabelStyleAsync(this System.Windows.Forms.DataGrid target, System.Windows.Forms.DataGridParentRowsLabelStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Windows.Forms.DataGridParentRowsLabelStyle>(
                BeginSetParentRowsLabelStyle,
                EndSetParentRowsLabelStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getFirstVisibleColumnInternal = (x) => x.FirstVisibleColumn;
        public static System.Int32 GetFirstVisibleColumn(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getFirstVisibleColumnInternal, target);
            else
                return getFirstVisibleColumnInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getFirstVisibleColumnCallback = GetFirstVisibleColumn;
        public static IAsyncResult BeginGetFirstVisibleColumn(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getFirstVisibleColumnCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetFirstVisibleColumn(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetFirstVisibleColumn(result);
        }
        public static System.Int32 EndGetFirstVisibleColumn(IAsyncResult result)
        {
            return getFirstVisibleColumnCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetFirstVisibleColumnAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetFirstVisibleColumn,
                EndGetFirstVisibleColumn,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getFlatModeInternal = (x) => x.FlatMode;
        public static System.Boolean GetFlatMode(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getFlatModeInternal, target);
            else
                return getFlatModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getFlatModeCallback = GetFlatMode;
        public static IAsyncResult BeginGetFlatMode(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getFlatModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetFlatMode(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetFlatMode(result);
        }
        public static System.Boolean EndGetFlatMode(IAsyncResult result)
        {
            return getFlatModeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetFlatModeAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetFlatMode,
                EndGetFlatMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setFlatModeInternal = (x, v) => x.FlatMode = v;
        public static void SetFlatMode(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFlatModeInternal, target, value);
            else
                setFlatModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setFlatModeCallback = SetFlatMode;
        public static IAsyncResult BeginSetFlatMode(this System.Windows.Forms.DataGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setFlatModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFlatMode(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetFlatMode(result);
        }
        public static void EndSetFlatMode(IAsyncResult result)
        {
            setFlatModeCallback.EndInvoke(result);
        }
        public static Task SetFlatModeAsync(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Boolean>(
                BeginSetFlatMode,
                EndSetFlatMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getHeaderBackColorInternal = (x) => x.HeaderBackColor;
        public static System.Drawing.Color GetHeaderBackColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getHeaderBackColorInternal, target);
            else
                return getHeaderBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getHeaderBackColorCallback = GetHeaderBackColor;
        public static IAsyncResult BeginGetHeaderBackColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getHeaderBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetHeaderBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetHeaderBackColor(result);
        }
        public static System.Drawing.Color EndGetHeaderBackColor(IAsyncResult result)
        {
            return getHeaderBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetHeaderBackColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetHeaderBackColor,
                EndGetHeaderBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setHeaderBackColorInternal = (x, v) => x.HeaderBackColor = v;
        public static void SetHeaderBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHeaderBackColorInternal, target, value);
            else
                setHeaderBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setHeaderBackColorCallback = SetHeaderBackColor;
        public static IAsyncResult BeginSetHeaderBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setHeaderBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHeaderBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetHeaderBackColor(result);
        }
        public static void EndSetHeaderBackColor(IAsyncResult result)
        {
            setHeaderBackColorCallback.EndInvoke(result);
        }
        public static Task SetHeaderBackColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetHeaderBackColor,
                EndSetHeaderBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getBackgroundColorInternal = (x) => x.BackgroundColor;
        public static System.Drawing.Color GetBackgroundColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getBackgroundColorInternal, target);
            else
                return getBackgroundColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getBackgroundColorCallback = GetBackgroundColor;
        public static IAsyncResult BeginGetBackgroundColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getBackgroundColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetBackgroundColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetBackgroundColor(result);
        }
        public static System.Drawing.Color EndGetBackgroundColor(IAsyncResult result)
        {
            return getBackgroundColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetBackgroundColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetBackgroundColor,
                EndGetBackgroundColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setBackgroundColorInternal = (x, v) => x.BackgroundColor = v;
        public static void SetBackgroundColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBackgroundColorInternal, target, value);
            else
                setBackgroundColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setBackgroundColorCallback = SetBackgroundColor;
        public static IAsyncResult BeginSetBackgroundColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setBackgroundColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBackgroundColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetBackgroundColor(result);
        }
        public static void EndSetBackgroundColor(IAsyncResult result)
        {
            setBackgroundColorCallback.EndInvoke(result);
        }
        public static Task SetBackgroundColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetBackgroundColor,
                EndSetBackgroundColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Font> getHeaderFontInternal = (x) => x.HeaderFont;
        public static System.Drawing.Font GetHeaderFont(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Font)target.Invoke(getHeaderFontInternal, target);
            else
                return getHeaderFontInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Font> getHeaderFontCallback = GetHeaderFont;
        public static IAsyncResult BeginGetHeaderFont(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getHeaderFontCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Font EndGetHeaderFont(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetHeaderFont(result);
        }
        public static System.Drawing.Font EndGetHeaderFont(IAsyncResult result)
        {
            return getHeaderFontCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Font> GetHeaderFontAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Font>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetHeaderFont,
                EndGetHeaderFont,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Font> setHeaderFontInternal = (x, v) => x.HeaderFont = v;
        public static void SetHeaderFont(this System.Windows.Forms.DataGrid target, System.Drawing.Font value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHeaderFontInternal, target, value);
            else
                setHeaderFontInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Font> setHeaderFontCallback = SetHeaderFont;
        public static IAsyncResult BeginSetHeaderFont(this System.Windows.Forms.DataGrid target, System.Drawing.Font value, AsyncCallback callback, object state)
        {
            return setHeaderFontCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHeaderFont(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetHeaderFont(result);
        }
        public static void EndSetHeaderFont(IAsyncResult result)
        {
            setHeaderFontCallback.EndInvoke(result);
        }
        public static Task SetHeaderFontAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Font value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Font>(
                BeginSetHeaderFont,
                EndSetHeaderFont,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getHeaderForeColorInternal = (x) => x.HeaderForeColor;
        public static System.Drawing.Color GetHeaderForeColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getHeaderForeColorInternal, target);
            else
                return getHeaderForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getHeaderForeColorCallback = GetHeaderForeColor;
        public static IAsyncResult BeginGetHeaderForeColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getHeaderForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetHeaderForeColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetHeaderForeColor(result);
        }
        public static System.Drawing.Color EndGetHeaderForeColor(IAsyncResult result)
        {
            return getHeaderForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetHeaderForeColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetHeaderForeColor,
                EndGetHeaderForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setHeaderForeColorInternal = (x, v) => x.HeaderForeColor = v;
        public static void SetHeaderForeColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHeaderForeColorInternal, target, value);
            else
                setHeaderForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setHeaderForeColorCallback = SetHeaderForeColor;
        public static IAsyncResult BeginSetHeaderForeColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setHeaderForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHeaderForeColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetHeaderForeColor(result);
        }
        public static void EndSetHeaderForeColor(IAsyncResult result)
        {
            setHeaderForeColorCallback.EndInvoke(result);
        }
        public static Task SetHeaderForeColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetHeaderForeColor,
                EndSetHeaderForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getLinkColorInternal = (x) => x.LinkColor;
        public static System.Drawing.Color GetLinkColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getLinkColorInternal, target);
            else
                return getLinkColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getLinkColorCallback = GetLinkColor;
        public static IAsyncResult BeginGetLinkColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getLinkColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetLinkColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetLinkColor(result);
        }
        public static System.Drawing.Color EndGetLinkColor(IAsyncResult result)
        {
            return getLinkColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetLinkColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetLinkColor,
                EndGetLinkColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setLinkColorInternal = (x, v) => x.LinkColor = v;
        public static void SetLinkColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLinkColorInternal, target, value);
            else
                setLinkColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setLinkColorCallback = SetLinkColor;
        public static IAsyncResult BeginSetLinkColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setLinkColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLinkColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetLinkColor(result);
        }
        public static void EndSetLinkColor(IAsyncResult result)
        {
            setLinkColorCallback.EndInvoke(result);
        }
        public static Task SetLinkColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetLinkColor,
                EndSetLinkColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getLinkHoverColorInternal = (x) => x.LinkHoverColor;
        public static System.Drawing.Color GetLinkHoverColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getLinkHoverColorInternal, target);
            else
                return getLinkHoverColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getLinkHoverColorCallback = GetLinkHoverColor;
        public static IAsyncResult BeginGetLinkHoverColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getLinkHoverColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetLinkHoverColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetLinkHoverColor(result);
        }
        public static System.Drawing.Color EndGetLinkHoverColor(IAsyncResult result)
        {
            return getLinkHoverColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetLinkHoverColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetLinkHoverColor,
                EndGetLinkHoverColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setLinkHoverColorInternal = (x, v) => x.LinkHoverColor = v;
        public static void SetLinkHoverColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLinkHoverColorInternal, target, value);
            else
                setLinkHoverColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setLinkHoverColorCallback = SetLinkHoverColor;
        public static IAsyncResult BeginSetLinkHoverColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setLinkHoverColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLinkHoverColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetLinkHoverColor(result);
        }
        public static void EndSetLinkHoverColor(IAsyncResult result)
        {
            setLinkHoverColorCallback.EndInvoke(result);
        }
        public static Task SetLinkHoverColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetLinkHoverColor,
                EndSetLinkHoverColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getAllowNavigationInternal = (x) => x.AllowNavigation;
        public static System.Boolean GetAllowNavigation(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowNavigationInternal, target);
            else
                return getAllowNavigationInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getAllowNavigationCallback = GetAllowNavigation;
        public static IAsyncResult BeginGetAllowNavigation(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getAllowNavigationCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowNavigation(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetAllowNavigation(result);
        }
        public static System.Boolean EndGetAllowNavigation(IAsyncResult result)
        {
            return getAllowNavigationCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowNavigationAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetAllowNavigation,
                EndGetAllowNavigation,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setAllowNavigationInternal = (x, v) => x.AllowNavigation = v;
        public static void SetAllowNavigation(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowNavigationInternal, target, value);
            else
                setAllowNavigationInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setAllowNavigationCallback = SetAllowNavigation;
        public static IAsyncResult BeginSetAllowNavigation(this System.Windows.Forms.DataGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowNavigationCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowNavigation(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetAllowNavigation(result);
        }
        public static void EndSetAllowNavigation(IAsyncResult result)
        {
            setAllowNavigationCallback.EndInvoke(result);
        }
        public static Task SetAllowNavigationAsync(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Boolean>(
                BeginSetAllowNavigation,
                EndSetAllowNavigation,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getParentRowsBackColorInternal = (x) => x.ParentRowsBackColor;
        public static System.Drawing.Color GetParentRowsBackColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getParentRowsBackColorInternal, target);
            else
                return getParentRowsBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getParentRowsBackColorCallback = GetParentRowsBackColor;
        public static IAsyncResult BeginGetParentRowsBackColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getParentRowsBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetParentRowsBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetParentRowsBackColor(result);
        }
        public static System.Drawing.Color EndGetParentRowsBackColor(IAsyncResult result)
        {
            return getParentRowsBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetParentRowsBackColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetParentRowsBackColor,
                EndGetParentRowsBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setParentRowsBackColorInternal = (x, v) => x.ParentRowsBackColor = v;
        public static void SetParentRowsBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setParentRowsBackColorInternal, target, value);
            else
                setParentRowsBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setParentRowsBackColorCallback = SetParentRowsBackColor;
        public static IAsyncResult BeginSetParentRowsBackColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setParentRowsBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetParentRowsBackColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetParentRowsBackColor(result);
        }
        public static void EndSetParentRowsBackColor(IAsyncResult result)
        {
            setParentRowsBackColorCallback.EndInvoke(result);
        }
        public static Task SetParentRowsBackColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetParentRowsBackColor,
                EndSetParentRowsBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getParentRowsForeColorInternal = (x) => x.ParentRowsForeColor;
        public static System.Drawing.Color GetParentRowsForeColor(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getParentRowsForeColorInternal, target);
            else
                return getParentRowsForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Drawing.Color> getParentRowsForeColorCallback = GetParentRowsForeColor;
        public static IAsyncResult BeginGetParentRowsForeColor(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getParentRowsForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetParentRowsForeColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetParentRowsForeColor(result);
        }
        public static System.Drawing.Color EndGetParentRowsForeColor(IAsyncResult result)
        {
            return getParentRowsForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetParentRowsForeColorAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetParentRowsForeColor,
                EndGetParentRowsForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setParentRowsForeColorInternal = (x, v) => x.ParentRowsForeColor = v;
        public static void SetParentRowsForeColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setParentRowsForeColorInternal, target, value);
            else
                setParentRowsForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Drawing.Color> setParentRowsForeColorCallback = SetParentRowsForeColor;
        public static IAsyncResult BeginSetParentRowsForeColor(this System.Windows.Forms.DataGrid target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setParentRowsForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetParentRowsForeColor(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetParentRowsForeColor(result);
        }
        public static void EndSetParentRowsForeColor(IAsyncResult result)
        {
            setParentRowsForeColorCallback.EndInvoke(result);
        }
        public static Task SetParentRowsForeColorAsync(this System.Windows.Forms.DataGrid target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Drawing.Color>(
                BeginSetParentRowsForeColor,
                EndSetParentRowsForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getPreferredColumnWidthInternal = (x) => x.PreferredColumnWidth;
        public static System.Int32 GetPreferredColumnWidth(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getPreferredColumnWidthInternal, target);
            else
                return getPreferredColumnWidthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getPreferredColumnWidthCallback = GetPreferredColumnWidth;
        public static IAsyncResult BeginGetPreferredColumnWidth(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getPreferredColumnWidthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetPreferredColumnWidth(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetPreferredColumnWidth(result);
        }
        public static System.Int32 EndGetPreferredColumnWidth(IAsyncResult result)
        {
            return getPreferredColumnWidthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetPreferredColumnWidthAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetPreferredColumnWidth,
                EndGetPreferredColumnWidth,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> setPreferredColumnWidthInternal = (x, v) => x.PreferredColumnWidth = v;
        public static void SetPreferredColumnWidth(this System.Windows.Forms.DataGrid target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPreferredColumnWidthInternal, target, value);
            else
                setPreferredColumnWidthInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> setPreferredColumnWidthCallback = SetPreferredColumnWidth;
        public static IAsyncResult BeginSetPreferredColumnWidth(this System.Windows.Forms.DataGrid target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setPreferredColumnWidthCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPreferredColumnWidth(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetPreferredColumnWidth(result);
        }
        public static void EndSetPreferredColumnWidth(IAsyncResult result)
        {
            setPreferredColumnWidthCallback.EndInvoke(result);
        }
        public static Task SetPreferredColumnWidthAsync(this System.Windows.Forms.DataGrid target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                BeginSetPreferredColumnWidth,
                EndSetPreferredColumnWidth,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getPreferredRowHeightInternal = (x) => x.PreferredRowHeight;
        public static System.Int32 GetPreferredRowHeight(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getPreferredRowHeightInternal, target);
            else
                return getPreferredRowHeightInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getPreferredRowHeightCallback = GetPreferredRowHeight;
        public static IAsyncResult BeginGetPreferredRowHeight(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getPreferredRowHeightCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetPreferredRowHeight(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetPreferredRowHeight(result);
        }
        public static System.Int32 EndGetPreferredRowHeight(IAsyncResult result)
        {
            return getPreferredRowHeightCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetPreferredRowHeightAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetPreferredRowHeight,
                EndGetPreferredRowHeight,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> setPreferredRowHeightInternal = (x, v) => x.PreferredRowHeight = v;
        public static void SetPreferredRowHeight(this System.Windows.Forms.DataGrid target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPreferredRowHeightInternal, target, value);
            else
                setPreferredRowHeightInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> setPreferredRowHeightCallback = SetPreferredRowHeight;
        public static IAsyncResult BeginSetPreferredRowHeight(this System.Windows.Forms.DataGrid target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setPreferredRowHeightCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPreferredRowHeight(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetPreferredRowHeight(result);
        }
        public static void EndSetPreferredRowHeight(IAsyncResult result)
        {
            setPreferredRowHeightCallback.EndInvoke(result);
        }
        public static Task SetPreferredRowHeightAsync(this System.Windows.Forms.DataGrid target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                BeginSetPreferredRowHeight,
                EndSetPreferredRowHeight,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getColumnHeadersVisibleInternal = (x) => x.ColumnHeadersVisible;
        public static System.Boolean GetColumnHeadersVisible(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getColumnHeadersVisibleInternal, target);
            else
                return getColumnHeadersVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getColumnHeadersVisibleCallback = GetColumnHeadersVisible;
        public static IAsyncResult BeginGetColumnHeadersVisible(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getColumnHeadersVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetColumnHeadersVisible(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetColumnHeadersVisible(result);
        }
        public static System.Boolean EndGetColumnHeadersVisible(IAsyncResult result)
        {
            return getColumnHeadersVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetColumnHeadersVisibleAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetColumnHeadersVisible,
                EndGetColumnHeadersVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setColumnHeadersVisibleInternal = (x, v) => x.ColumnHeadersVisible = v;
        public static void SetColumnHeadersVisible(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setColumnHeadersVisibleInternal, target, value);
            else
                setColumnHeadersVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setColumnHeadersVisibleCallback = SetColumnHeadersVisible;
        public static IAsyncResult BeginSetColumnHeadersVisible(this System.Windows.Forms.DataGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setColumnHeadersVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetColumnHeadersVisible(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetColumnHeadersVisible(result);
        }
        public static void EndSetColumnHeadersVisible(IAsyncResult result)
        {
            setColumnHeadersVisibleCallback.EndInvoke(result);
        }
        public static Task SetColumnHeadersVisibleAsync(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Boolean>(
                BeginSetColumnHeadersVisible,
                EndSetColumnHeadersVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getParentRowsVisibleInternal = (x) => x.ParentRowsVisible;
        public static System.Boolean GetParentRowsVisible(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getParentRowsVisibleInternal, target);
            else
                return getParentRowsVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getParentRowsVisibleCallback = GetParentRowsVisible;
        public static IAsyncResult BeginGetParentRowsVisible(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getParentRowsVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetParentRowsVisible(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetParentRowsVisible(result);
        }
        public static System.Boolean EndGetParentRowsVisible(IAsyncResult result)
        {
            return getParentRowsVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetParentRowsVisibleAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetParentRowsVisible,
                EndGetParentRowsVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setParentRowsVisibleInternal = (x, v) => x.ParentRowsVisible = v;
        public static void SetParentRowsVisible(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setParentRowsVisibleInternal, target, value);
            else
                setParentRowsVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setParentRowsVisibleCallback = SetParentRowsVisible;
        public static IAsyncResult BeginSetParentRowsVisible(this System.Windows.Forms.DataGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setParentRowsVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetParentRowsVisible(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetParentRowsVisible(result);
        }
        public static void EndSetParentRowsVisible(IAsyncResult result)
        {
            setParentRowsVisibleCallback.EndInvoke(result);
        }
        public static Task SetParentRowsVisibleAsync(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Boolean>(
                BeginSetParentRowsVisible,
                EndSetParentRowsVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getRowHeadersVisibleInternal = (x) => x.RowHeadersVisible;
        public static System.Boolean GetRowHeadersVisible(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getRowHeadersVisibleInternal, target);
            else
                return getRowHeadersVisibleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Boolean> getRowHeadersVisibleCallback = GetRowHeadersVisible;
        public static IAsyncResult BeginGetRowHeadersVisible(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getRowHeadersVisibleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetRowHeadersVisible(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetRowHeadersVisible(result);
        }
        public static System.Boolean EndGetRowHeadersVisible(IAsyncResult result)
        {
            return getRowHeadersVisibleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetRowHeadersVisibleAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetRowHeadersVisible,
                EndGetRowHeadersVisible,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setRowHeadersVisibleInternal = (x, v) => x.RowHeadersVisible = v;
        public static void SetRowHeadersVisible(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowHeadersVisibleInternal, target, value);
            else
                setRowHeadersVisibleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Boolean> setRowHeadersVisibleCallback = SetRowHeadersVisible;
        public static IAsyncResult BeginSetRowHeadersVisible(this System.Windows.Forms.DataGrid target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setRowHeadersVisibleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowHeadersVisible(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetRowHeadersVisible(result);
        }
        public static void EndSetRowHeadersVisible(IAsyncResult result)
        {
            setRowHeadersVisibleCallback.EndInvoke(result);
        }
        public static Task SetRowHeadersVisibleAsync(this System.Windows.Forms.DataGrid target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Boolean>(
                BeginSetRowHeadersVisible,
                EndSetRowHeadersVisible,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getRowHeaderWidthInternal = (x) => x.RowHeaderWidth;
        public static System.Int32 GetRowHeaderWidth(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getRowHeaderWidthInternal, target);
            else
                return getRowHeaderWidthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getRowHeaderWidthCallback = GetRowHeaderWidth;
        public static IAsyncResult BeginGetRowHeaderWidth(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getRowHeaderWidthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetRowHeaderWidth(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetRowHeaderWidth(result);
        }
        public static System.Int32 EndGetRowHeaderWidth(IAsyncResult result)
        {
            return getRowHeaderWidthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetRowHeaderWidthAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetRowHeaderWidth,
                EndGetRowHeaderWidth,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> setRowHeaderWidthInternal = (x, v) => x.RowHeaderWidth = v;
        public static void SetRowHeaderWidth(this System.Windows.Forms.DataGrid target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowHeaderWidthInternal, target, value);
            else
                setRowHeaderWidthInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGrid, System.Int32> setRowHeaderWidthCallback = SetRowHeaderWidth;
        public static IAsyncResult BeginSetRowHeaderWidth(this System.Windows.Forms.DataGrid target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setRowHeaderWidthCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowHeaderWidth(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            EndSetRowHeaderWidth(result);
        }
        public static void EndSetRowHeaderWidth(IAsyncResult result)
        {
            setRowHeaderWidthCallback.EndInvoke(result);
        }
        public static Task SetRowHeaderWidthAsync(this System.Windows.Forms.DataGrid target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGrid, System.Int32>(
                BeginSetRowHeaderWidth,
                EndSetRowHeaderWidth,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getVisibleColumnCountInternal = (x) => x.VisibleColumnCount;
        public static System.Int32 GetVisibleColumnCount(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getVisibleColumnCountInternal, target);
            else
                return getVisibleColumnCountInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getVisibleColumnCountCallback = GetVisibleColumnCount;
        public static IAsyncResult BeginGetVisibleColumnCount(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getVisibleColumnCountCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetVisibleColumnCount(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetVisibleColumnCount(result);
        }
        public static System.Int32 EndGetVisibleColumnCount(IAsyncResult result)
        {
            return getVisibleColumnCountCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetVisibleColumnCountAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetVisibleColumnCount,
                EndGetVisibleColumnCount,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getVisibleRowCountInternal = (x) => x.VisibleRowCount;
        public static System.Int32 GetVisibleRowCount(this System.Windows.Forms.DataGrid target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getVisibleRowCountInternal, target);
            else
                return getVisibleRowCountInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGrid, System.Int32> getVisibleRowCountCallback = GetVisibleRowCount;
        public static IAsyncResult BeginGetVisibleRowCount(this System.Windows.Forms.DataGrid target, AsyncCallback callback, object state)
        {
            return getVisibleRowCountCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetVisibleRowCount(this System.Windows.Forms.DataGrid target, IAsyncResult result)
        {
            return EndGetVisibleRowCount(result);
        }
        public static System.Int32 EndGetVisibleRowCount(IAsyncResult result)
        {
            return getVisibleRowCountCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetVisibleRowCountAsync(this System.Windows.Forms.DataGrid target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGrid>(
                BeginGetVisibleRowCount,
                EndGetVisibleRowCount,
                target, null);
        }


        private static readonly Action<System.Windows.Forms.TextBoxBase, System.String> appendText1Internal = (c, text) => c.AppendText(text);
        public static void AppendText(this System.Windows.Forms.TextBoxBase __control__, System.String text)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(appendText1Internal, __control__, text);
            else
                appendText1Internal.Invoke(__control__, text);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase, System.String> appendText1Callback = AppendText;
        public static IAsyncResult BeginAppendText1(this System.Windows.Forms.TextBoxBase __control__, System.String text, AsyncCallback callback, object state)
        {
            return appendText1Callback.BeginInvoke(__control__, text, callback, state);
        }
        public static void EndAppendText1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndAppendText1(result);
        }
        public static void EndAppendText1(IAsyncResult result)
        {
            appendText1Callback.EndInvoke(result);
        }
        public static Task AppendTextAsync(this System.Windows.Forms.TextBoxBase __control__, System.String text)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.String>(
                (Func<System.Windows.Forms.TextBoxBase, System.String, AsyncCallback, object, IAsyncResult>)BeginAppendText1,
                (Action<IAsyncResult>)EndAppendText1,
                __control__, text, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase> clear1Internal = (c) => c.Clear();
        public static void Clear(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(clear1Internal, __control__);
            else
                clear1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase> clear1Callback = Clear;
        public static IAsyncResult BeginClear1(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return clear1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndClear1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndClear1(result);
        }
        public static void EndClear1(IAsyncResult result)
        {
            clear1Callback.EndInvoke(result);
        }
        public static Task ClearAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginClear1,
                (Action<IAsyncResult>)EndClear1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase> clearUndo1Internal = (c) => c.ClearUndo();
        public static void ClearUndo(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(clearUndo1Internal, __control__);
            else
                clearUndo1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase> clearUndo1Callback = ClearUndo;
        public static IAsyncResult BeginClearUndo1(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return clearUndo1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndClearUndo1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndClearUndo1(result);
        }
        public static void EndClearUndo1(IAsyncResult result)
        {
            clearUndo1Callback.EndInvoke(result);
        }
        public static Task ClearUndoAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginClearUndo1,
                (Action<IAsyncResult>)EndClearUndo1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase> copy1Internal = (c) => c.Copy();
        public static void Copy(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(copy1Internal, __control__);
            else
                copy1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase> copy1Callback = Copy;
        public static IAsyncResult BeginCopy1(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return copy1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndCopy1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndCopy1(result);
        }
        public static void EndCopy1(IAsyncResult result)
        {
            copy1Callback.EndInvoke(result);
        }
        public static Task CopyAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginCopy1,
                (Action<IAsyncResult>)EndCopy1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase> cut1Internal = (c) => c.Cut();
        public static void Cut(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(cut1Internal, __control__);
            else
                cut1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase> cut1Callback = Cut;
        public static IAsyncResult BeginCut1(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return cut1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndCut1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndCut1(result);
        }
        public static void EndCut1(IAsyncResult result)
        {
            cut1Callback.EndInvoke(result);
        }
        public static Task CutAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginCut1,
                (Action<IAsyncResult>)EndCut1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase> paste1Internal = (c) => c.Paste();
        public static void Paste(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(paste1Internal, __control__);
            else
                paste1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase> paste1Callback = Paste;
        public static IAsyncResult BeginPaste1(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return paste1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndPaste1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndPaste1(result);
        }
        public static void EndPaste1(IAsyncResult result)
        {
            paste1Callback.EndInvoke(result);
        }
        public static Task PasteAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginPaste1,
                (Action<IAsyncResult>)EndPaste1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Drawing.Point, System.Char> getCharFromPosition1Internal = (c, pt) => c.GetCharFromPosition(pt);
        public static System.Char GetCharFromPosition(this System.Windows.Forms.TextBoxBase __control__, System.Drawing.Point pt)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Char)__control__.Invoke(getCharFromPosition1Internal, __control__, pt);
            else
                return getCharFromPosition1Internal.Invoke(__control__, pt);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Drawing.Point, System.Char> getCharFromPosition1Callback = GetCharFromPosition;
        public static IAsyncResult BeginGetCharFromPosition1(this System.Windows.Forms.TextBoxBase __control__, System.Drawing.Point pt, AsyncCallback callback, object state)
        {
            return getCharFromPosition1Callback.BeginInvoke(__control__, pt, callback, state);
        }
        public static System.Char EndGetCharFromPosition1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            return EndGetCharFromPosition1(result);
        }
        public static System.Char EndGetCharFromPosition1(IAsyncResult result)
        {
            return getCharFromPosition1Callback.EndInvoke(result);
        }
        public static Task<System.Char> GetCharFromPositionAsync(this System.Windows.Forms.TextBoxBase __control__, System.Drawing.Point pt)
        {
            return Task<System.Char>.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Drawing.Point>(
                (Func<System.Windows.Forms.TextBoxBase, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginGetCharFromPosition1,
                (Func<IAsyncResult, System.Char>)EndGetCharFromPosition1,
                __control__, pt, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Drawing.Point, System.Int32> getCharIndexFromPosition1Internal = (c, pt) => c.GetCharIndexFromPosition(pt);
        public static System.Int32 GetCharIndexFromPosition(this System.Windows.Forms.TextBoxBase __control__, System.Drawing.Point pt)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getCharIndexFromPosition1Internal, __control__, pt);
            else
                return getCharIndexFromPosition1Internal.Invoke(__control__, pt);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Drawing.Point, System.Int32> getCharIndexFromPosition1Callback = GetCharIndexFromPosition;
        public static IAsyncResult BeginGetCharIndexFromPosition1(this System.Windows.Forms.TextBoxBase __control__, System.Drawing.Point pt, AsyncCallback callback, object state)
        {
            return getCharIndexFromPosition1Callback.BeginInvoke(__control__, pt, callback, state);
        }
        public static System.Int32 EndGetCharIndexFromPosition1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            return EndGetCharIndexFromPosition1(result);
        }
        public static System.Int32 EndGetCharIndexFromPosition1(IAsyncResult result)
        {
            return getCharIndexFromPosition1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetCharIndexFromPositionAsync(this System.Windows.Forms.TextBoxBase __control__, System.Drawing.Point pt)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Drawing.Point>(
                (Func<System.Windows.Forms.TextBoxBase, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginGetCharIndexFromPosition1,
                (Func<IAsyncResult, System.Int32>)EndGetCharIndexFromPosition1,
                __control__, pt, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32, System.Int32> getLineFromCharIndex1Internal = (c, index) => c.GetLineFromCharIndex(index);
        public static System.Int32 GetLineFromCharIndex(this System.Windows.Forms.TextBoxBase __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getLineFromCharIndex1Internal, __control__, index);
            else
                return getLineFromCharIndex1Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32, System.Int32> getLineFromCharIndex1Callback = GetLineFromCharIndex;
        public static IAsyncResult BeginGetLineFromCharIndex1(this System.Windows.Forms.TextBoxBase __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getLineFromCharIndex1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Int32 EndGetLineFromCharIndex1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            return EndGetLineFromCharIndex1(result);
        }
        public static System.Int32 EndGetLineFromCharIndex1(IAsyncResult result)
        {
            return getLineFromCharIndex1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetLineFromCharIndexAsync(this System.Windows.Forms.TextBoxBase __control__, System.Int32 index)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Int32>(
                (Func<System.Windows.Forms.TextBoxBase, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetLineFromCharIndex1,
                (Func<IAsyncResult, System.Int32>)EndGetLineFromCharIndex1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32, System.Drawing.Point> getPositionFromCharIndex1Internal = (c, index) => c.GetPositionFromCharIndex(index);
        public static System.Drawing.Point GetPositionFromCharIndex(this System.Windows.Forms.TextBoxBase __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Point)__control__.Invoke(getPositionFromCharIndex1Internal, __control__, index);
            else
                return getPositionFromCharIndex1Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32, System.Drawing.Point> getPositionFromCharIndex1Callback = GetPositionFromCharIndex;
        public static IAsyncResult BeginGetPositionFromCharIndex1(this System.Windows.Forms.TextBoxBase __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getPositionFromCharIndex1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Drawing.Point EndGetPositionFromCharIndex1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            return EndGetPositionFromCharIndex1(result);
        }
        public static System.Drawing.Point EndGetPositionFromCharIndex1(IAsyncResult result)
        {
            return getPositionFromCharIndex1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> GetPositionFromCharIndexAsync(this System.Windows.Forms.TextBoxBase __control__, System.Int32 index)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Int32>(
                (Func<System.Windows.Forms.TextBoxBase, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetPositionFromCharIndex1,
                (Func<IAsyncResult, System.Drawing.Point>)EndGetPositionFromCharIndex1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32, System.Int32> getFirstCharIndexFromLine1Internal = (c, lineNumber) => c.GetFirstCharIndexFromLine(lineNumber);
        public static System.Int32 GetFirstCharIndexFromLine(this System.Windows.Forms.TextBoxBase __control__, System.Int32 lineNumber)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getFirstCharIndexFromLine1Internal, __control__, lineNumber);
            else
                return getFirstCharIndexFromLine1Internal.Invoke(__control__, lineNumber);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32, System.Int32> getFirstCharIndexFromLine1Callback = GetFirstCharIndexFromLine;
        public static IAsyncResult BeginGetFirstCharIndexFromLine1(this System.Windows.Forms.TextBoxBase __control__, System.Int32 lineNumber, AsyncCallback callback, object state)
        {
            return getFirstCharIndexFromLine1Callback.BeginInvoke(__control__, lineNumber, callback, state);
        }
        public static System.Int32 EndGetFirstCharIndexFromLine1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            return EndGetFirstCharIndexFromLine1(result);
        }
        public static System.Int32 EndGetFirstCharIndexFromLine1(IAsyncResult result)
        {
            return getFirstCharIndexFromLine1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetFirstCharIndexFromLineAsync(this System.Windows.Forms.TextBoxBase __control__, System.Int32 lineNumber)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Int32>(
                (Func<System.Windows.Forms.TextBoxBase, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetFirstCharIndexFromLine1,
                (Func<IAsyncResult, System.Int32>)EndGetFirstCharIndexFromLine1,
                __control__, lineNumber, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32> getFirstCharIndexOfCurrentLine1Internal = (c) => c.GetFirstCharIndexOfCurrentLine();
        public static System.Int32 GetFirstCharIndexOfCurrentLine(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getFirstCharIndexOfCurrentLine1Internal, __control__);
            else
                return getFirstCharIndexOfCurrentLine1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32> getFirstCharIndexOfCurrentLine1Callback = GetFirstCharIndexOfCurrentLine;
        public static IAsyncResult BeginGetFirstCharIndexOfCurrentLine1(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return getFirstCharIndexOfCurrentLine1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Int32 EndGetFirstCharIndexOfCurrentLine1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            return EndGetFirstCharIndexOfCurrentLine1(result);
        }
        public static System.Int32 EndGetFirstCharIndexOfCurrentLine1(IAsyncResult result)
        {
            return getFirstCharIndexOfCurrentLine1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetFirstCharIndexOfCurrentLineAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginGetFirstCharIndexOfCurrentLine1,
                (Func<IAsyncResult, System.Int32>)EndGetFirstCharIndexOfCurrentLine1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase> scrollToCaret1Internal = (c) => c.ScrollToCaret();
        public static void ScrollToCaret(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(scrollToCaret1Internal, __control__);
            else
                scrollToCaret1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase> scrollToCaret1Callback = ScrollToCaret;
        public static IAsyncResult BeginScrollToCaret1(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return scrollToCaret1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndScrollToCaret1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndScrollToCaret1(result);
        }
        public static void EndScrollToCaret1(IAsyncResult result)
        {
            scrollToCaret1Callback.EndInvoke(result);
        }
        public static Task ScrollToCaretAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginScrollToCaret1,
                (Action<IAsyncResult>)EndScrollToCaret1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase> deselectAll1Internal = (c) => c.DeselectAll();
        public static void DeselectAll(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(deselectAll1Internal, __control__);
            else
                deselectAll1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase> deselectAll1Callback = DeselectAll;
        public static IAsyncResult BeginDeselectAll1(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return deselectAll1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndDeselectAll1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndDeselectAll1(result);
        }
        public static void EndDeselectAll1(IAsyncResult result)
        {
            deselectAll1Callback.EndInvoke(result);
        }
        public static Task DeselectAllAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginDeselectAll1,
                (Action<IAsyncResult>)EndDeselectAll1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Int32, System.Int32> select5Internal = (c, start, length) => c.Select(start, length);
        public static void Select(this System.Windows.Forms.TextBoxBase __control__, System.Int32 start, System.Int32 length)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(select5Internal, __control__, start, length);
            else
                select5Internal.Invoke(__control__, start, length);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Int32, System.Int32> select5Callback = Select;
        public static IAsyncResult BeginSelect5(this System.Windows.Forms.TextBoxBase __control__, System.Int32 start, System.Int32 length, AsyncCallback callback, object state)
        {
            return select5Callback.BeginInvoke(__control__, start, length, callback, state);
        }
        public static void EndSelect5(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndSelect5(result);
        }
        public static void EndSelect5(IAsyncResult result)
        {
            select5Callback.EndInvoke(result);
        }
        public static Task SelectAsync(this System.Windows.Forms.TextBoxBase __control__, System.Int32 start, System.Int32 length)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.TextBoxBase, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSelect5,
                (Action<IAsyncResult>)EndSelect5,
                __control__, start, length, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase> selectAll2Internal = (c) => c.SelectAll();
        public static void SelectAll(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(selectAll2Internal, __control__);
            else
                selectAll2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase> selectAll2Callback = SelectAll;
        public static IAsyncResult BeginSelectAll2(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return selectAll2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndSelectAll2(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndSelectAll2(result);
        }
        public static void EndSelectAll2(IAsyncResult result)
        {
            selectAll2Callback.EndInvoke(result);
        }
        public static Task SelectAllAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginSelectAll2,
                (Action<IAsyncResult>)EndSelectAll2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase> undo1Internal = (c) => c.Undo();
        public static void Undo(this System.Windows.Forms.TextBoxBase __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(undo1Internal, __control__);
            else
                undo1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase> undo1Callback = Undo;
        public static IAsyncResult BeginUndo1(this System.Windows.Forms.TextBoxBase __control__, AsyncCallback callback, object state)
        {
            return undo1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndUndo1(this System.Windows.Forms.TextBoxBase __control__, IAsyncResult result)
        {
            EndUndo1(result);
        }
        public static void EndUndo1(IAsyncResult result)
        {
            undo1Callback.EndInvoke(result);
        }
        public static Task UndoAsync(this System.Windows.Forms.TextBoxBase __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                (Func<System.Windows.Forms.TextBoxBase, AsyncCallback, object, IAsyncResult>)BeginUndo1,
                (Action<IAsyncResult>)EndUndo1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getAcceptsTabInternal = (x) => x.AcceptsTab;
        public static System.Boolean GetAcceptsTab(this System.Windows.Forms.TextBoxBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAcceptsTabInternal, target);
            else
                return getAcceptsTabInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getAcceptsTabCallback = GetAcceptsTab;
        public static IAsyncResult BeginGetAcceptsTab(this System.Windows.Forms.TextBoxBase target, AsyncCallback callback, object state)
        {
            return getAcceptsTabCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAcceptsTab(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            return EndGetAcceptsTab(result);
        }
        public static System.Boolean EndGetAcceptsTab(IAsyncResult result)
        {
            return getAcceptsTabCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAcceptsTabAsync(this System.Windows.Forms.TextBoxBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                BeginGetAcceptsTab,
                EndGetAcceptsTab,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setAcceptsTabInternal = (x, v) => x.AcceptsTab = v;
        public static void SetAcceptsTab(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAcceptsTabInternal, target, value);
            else
                setAcceptsTabInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setAcceptsTabCallback = SetAcceptsTab;
        public static IAsyncResult BeginSetAcceptsTab(this System.Windows.Forms.TextBoxBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAcceptsTabCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAcceptsTab(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            EndSetAcceptsTab(result);
        }
        public static void EndSetAcceptsTab(IAsyncResult result)
        {
            setAcceptsTabCallback.EndInvoke(result);
        }
        public static Task SetAcceptsTabAsync(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Boolean>(
                BeginSetAcceptsTab,
                EndSetAcceptsTab,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getShortcutsEnabledInternal = (x) => x.ShortcutsEnabled;
        public static System.Boolean GetShortcutsEnabled(this System.Windows.Forms.TextBoxBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShortcutsEnabledInternal, target);
            else
                return getShortcutsEnabledInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getShortcutsEnabledCallback = GetShortcutsEnabled;
        public static IAsyncResult BeginGetShortcutsEnabled(this System.Windows.Forms.TextBoxBase target, AsyncCallback callback, object state)
        {
            return getShortcutsEnabledCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShortcutsEnabled(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            return EndGetShortcutsEnabled(result);
        }
        public static System.Boolean EndGetShortcutsEnabled(IAsyncResult result)
        {
            return getShortcutsEnabledCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShortcutsEnabledAsync(this System.Windows.Forms.TextBoxBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                BeginGetShortcutsEnabled,
                EndGetShortcutsEnabled,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setShortcutsEnabledInternal = (x, v) => x.ShortcutsEnabled = v;
        public static void SetShortcutsEnabled(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShortcutsEnabledInternal, target, value);
            else
                setShortcutsEnabledInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setShortcutsEnabledCallback = SetShortcutsEnabled;
        public static IAsyncResult BeginSetShortcutsEnabled(this System.Windows.Forms.TextBoxBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShortcutsEnabledCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShortcutsEnabled(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            EndSetShortcutsEnabled(result);
        }
        public static void EndSetShortcutsEnabled(IAsyncResult result)
        {
            setShortcutsEnabledCallback.EndInvoke(result);
        }
        public static Task SetShortcutsEnabledAsync(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Boolean>(
                BeginSetShortcutsEnabled,
                EndSetShortcutsEnabled,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getCanUndoInternal = (x) => x.CanUndo;
        public static System.Boolean GetCanUndo(this System.Windows.Forms.TextBoxBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCanUndoInternal, target);
            else
                return getCanUndoInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getCanUndoCallback = GetCanUndo;
        public static IAsyncResult BeginGetCanUndo(this System.Windows.Forms.TextBoxBase target, AsyncCallback callback, object state)
        {
            return getCanUndoCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCanUndo(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            return EndGetCanUndo(result);
        }
        public static System.Boolean EndGetCanUndo(IAsyncResult result)
        {
            return getCanUndoCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCanUndoAsync(this System.Windows.Forms.TextBoxBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                BeginGetCanUndo,
                EndGetCanUndo,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getHideSelectionInternal = (x) => x.HideSelection;
        public static System.Boolean GetHideSelection(this System.Windows.Forms.TextBoxBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHideSelectionInternal, target);
            else
                return getHideSelectionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getHideSelectionCallback = GetHideSelection;
        public static IAsyncResult BeginGetHideSelection(this System.Windows.Forms.TextBoxBase target, AsyncCallback callback, object state)
        {
            return getHideSelectionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHideSelection(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            return EndGetHideSelection(result);
        }
        public static System.Boolean EndGetHideSelection(IAsyncResult result)
        {
            return getHideSelectionCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHideSelectionAsync(this System.Windows.Forms.TextBoxBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                BeginGetHideSelection,
                EndGetHideSelection,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setHideSelectionInternal = (x, v) => x.HideSelection = v;
        public static void SetHideSelection(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHideSelectionInternal, target, value);
            else
                setHideSelectionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setHideSelectionCallback = SetHideSelection;
        public static IAsyncResult BeginSetHideSelection(this System.Windows.Forms.TextBoxBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setHideSelectionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHideSelection(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            EndSetHideSelection(result);
        }
        public static void EndSetHideSelection(IAsyncResult result)
        {
            setHideSelectionCallback.EndInvoke(result);
        }
        public static Task SetHideSelectionAsync(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Boolean>(
                BeginSetHideSelection,
                EndSetHideSelection,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.String[]> getLinesInternal = (x) => x.Lines;
        public static System.String[] GetLines(this System.Windows.Forms.TextBoxBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String[])target.Invoke(getLinesInternal, target);
            else
                return getLinesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.String[]> getLinesCallback = GetLines;
        public static IAsyncResult BeginGetLines(this System.Windows.Forms.TextBoxBase target, AsyncCallback callback, object state)
        {
            return getLinesCallback.BeginInvoke(target, callback, state);
        }
        public static System.String[] EndGetLines(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            return EndGetLines(result);
        }
        public static System.String[] EndGetLines(IAsyncResult result)
        {
            return getLinesCallback.EndInvoke(result);
        }
        public static Task<System.String[]> GetLinesAsync(this System.Windows.Forms.TextBoxBase target)
        {
            return Task<System.String[]>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                BeginGetLines,
                EndGetLines,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase, System.String[]> setLinesInternal = (x, v) => x.Lines = v;
        public static void SetLines(this System.Windows.Forms.TextBoxBase target, System.String[] value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLinesInternal, target, value);
            else
                setLinesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase, System.String[]> setLinesCallback = SetLines;
        public static IAsyncResult BeginSetLines(this System.Windows.Forms.TextBoxBase target, System.String[] value, AsyncCallback callback, object state)
        {
            return setLinesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLines(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            EndSetLines(result);
        }
        public static void EndSetLines(IAsyncResult result)
        {
            setLinesCallback.EndInvoke(result);
        }
        public static Task SetLinesAsync(this System.Windows.Forms.TextBoxBase target, System.String[] value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.String[]>(
                BeginSetLines,
                EndSetLines,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getModifiedInternal = (x) => x.Modified;
        public static System.Boolean GetModified(this System.Windows.Forms.TextBoxBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getModifiedInternal, target);
            else
                return getModifiedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getModifiedCallback = GetModified;
        public static IAsyncResult BeginGetModified(this System.Windows.Forms.TextBoxBase target, AsyncCallback callback, object state)
        {
            return getModifiedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetModified(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            return EndGetModified(result);
        }
        public static System.Boolean EndGetModified(IAsyncResult result)
        {
            return getModifiedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetModifiedAsync(this System.Windows.Forms.TextBoxBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                BeginGetModified,
                EndGetModified,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setModifiedInternal = (x, v) => x.Modified = v;
        public static void SetModified(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setModifiedInternal, target, value);
            else
                setModifiedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setModifiedCallback = SetModified;
        public static IAsyncResult BeginSetModified(this System.Windows.Forms.TextBoxBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setModifiedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetModified(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            EndSetModified(result);
        }
        public static void EndSetModified(IAsyncResult result)
        {
            setModifiedCallback.EndInvoke(result);
        }
        public static Task SetModifiedAsync(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Boolean>(
                BeginSetModified,
                EndSetModified,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getMultilineInternal = (x) => x.Multiline;
        public static System.Boolean GetMultiline(this System.Windows.Forms.TextBoxBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getMultilineInternal, target);
            else
                return getMultilineInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getMultilineCallback = GetMultiline;
        public static IAsyncResult BeginGetMultiline(this System.Windows.Forms.TextBoxBase target, AsyncCallback callback, object state)
        {
            return getMultilineCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetMultiline(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            return EndGetMultiline(result);
        }
        public static System.Boolean EndGetMultiline(IAsyncResult result)
        {
            return getMultilineCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetMultilineAsync(this System.Windows.Forms.TextBoxBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                BeginGetMultiline,
                EndGetMultiline,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setMultilineInternal = (x, v) => x.Multiline = v;
        public static void SetMultiline(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMultilineInternal, target, value);
            else
                setMultilineInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setMultilineCallback = SetMultiline;
        public static IAsyncResult BeginSetMultiline(this System.Windows.Forms.TextBoxBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setMultilineCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMultiline(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            EndSetMultiline(result);
        }
        public static void EndSetMultiline(IAsyncResult result)
        {
            setMultilineCallback.EndInvoke(result);
        }
        public static Task SetMultilineAsync(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Boolean>(
                BeginSetMultiline,
                EndSetMultiline,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32> getTextLengthInternal = (x) => x.TextLength;
        public static System.Int32 GetTextLength(this System.Windows.Forms.TextBoxBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getTextLengthInternal, target);
            else
                return getTextLengthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Int32> getTextLengthCallback = GetTextLength;
        public static IAsyncResult BeginGetTextLength(this System.Windows.Forms.TextBoxBase target, AsyncCallback callback, object state)
        {
            return getTextLengthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetTextLength(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            return EndGetTextLength(result);
        }
        public static System.Int32 EndGetTextLength(IAsyncResult result)
        {
            return getTextLengthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetTextLengthAsync(this System.Windows.Forms.TextBoxBase target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                BeginGetTextLength,
                EndGetTextLength,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getWordWrapInternal = (x) => x.WordWrap;
        public static System.Boolean GetWordWrap(this System.Windows.Forms.TextBoxBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getWordWrapInternal, target);
            else
                return getWordWrapInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBoxBase, System.Boolean> getWordWrapCallback = GetWordWrap;
        public static IAsyncResult BeginGetWordWrap(this System.Windows.Forms.TextBoxBase target, AsyncCallback callback, object state)
        {
            return getWordWrapCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetWordWrap(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            return EndGetWordWrap(result);
        }
        public static System.Boolean EndGetWordWrap(IAsyncResult result)
        {
            return getWordWrapCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetWordWrapAsync(this System.Windows.Forms.TextBoxBase target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TextBoxBase>(
                BeginGetWordWrap,
                EndGetWordWrap,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setWordWrapInternal = (x, v) => x.WordWrap = v;
        public static void SetWordWrap(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setWordWrapInternal, target, value);
            else
                setWordWrapInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBoxBase, System.Boolean> setWordWrapCallback = SetWordWrap;
        public static IAsyncResult BeginSetWordWrap(this System.Windows.Forms.TextBoxBase target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setWordWrapCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetWordWrap(this System.Windows.Forms.TextBoxBase target, IAsyncResult result)
        {
            EndSetWordWrap(result);
        }
        public static void EndSetWordWrap(IAsyncResult result)
        {
            setWordWrapCallback.EndInvoke(result);
        }
        public static Task SetWordWrapAsync(this System.Windows.Forms.TextBoxBase target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBoxBase, System.Boolean>(
                BeginSetWordWrap,
                EndSetWordWrap,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.TextBox, System.String> paste2Internal = (c, text) => c.Paste(text);
        public static void Paste(this System.Windows.Forms.TextBox __control__, System.String text)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(paste2Internal, __control__, text);
            else
                paste2Internal.Invoke(__control__, text);
        }
        private static readonly Action<System.Windows.Forms.TextBox, System.String> paste2Callback = Paste;
        public static IAsyncResult BeginPaste2(this System.Windows.Forms.TextBox __control__, System.String text, AsyncCallback callback, object state)
        {
            return paste2Callback.BeginInvoke(__control__, text, callback, state);
        }
        public static void EndPaste2(this System.Windows.Forms.TextBox __control__, IAsyncResult result)
        {
            EndPaste2(result);
        }
        public static void EndPaste2(IAsyncResult result)
        {
            paste2Callback.EndInvoke(result);
        }
        public static Task PasteAsync(this System.Windows.Forms.TextBox __control__, System.String text)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBox, System.String>(
                (Func<System.Windows.Forms.TextBox, System.String, AsyncCallback, object, IAsyncResult>)BeginPaste2,
                (Action<IAsyncResult>)EndPaste2,
                __control__, text, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.TextBox, System.Boolean> getAcceptsReturnInternal = (x) => x.AcceptsReturn;
        public static System.Boolean GetAcceptsReturn(this System.Windows.Forms.TextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAcceptsReturnInternal, target);
            else
                return getAcceptsReturnInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBox, System.Boolean> getAcceptsReturnCallback = GetAcceptsReturn;
        public static IAsyncResult BeginGetAcceptsReturn(this System.Windows.Forms.TextBox target, AsyncCallback callback, object state)
        {
            return getAcceptsReturnCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAcceptsReturn(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            return EndGetAcceptsReturn(result);
        }
        public static System.Boolean EndGetAcceptsReturn(IAsyncResult result)
        {
            return getAcceptsReturnCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAcceptsReturnAsync(this System.Windows.Forms.TextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TextBox>(
                BeginGetAcceptsReturn,
                EndGetAcceptsReturn,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBox, System.Boolean> setAcceptsReturnInternal = (x, v) => x.AcceptsReturn = v;
        public static void SetAcceptsReturn(this System.Windows.Forms.TextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAcceptsReturnInternal, target, value);
            else
                setAcceptsReturnInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBox, System.Boolean> setAcceptsReturnCallback = SetAcceptsReturn;
        public static IAsyncResult BeginSetAcceptsReturn(this System.Windows.Forms.TextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAcceptsReturnCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAcceptsReturn(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            EndSetAcceptsReturn(result);
        }
        public static void EndSetAcceptsReturn(IAsyncResult result)
        {
            setAcceptsReturnCallback.EndInvoke(result);
        }
        public static Task SetAcceptsReturnAsync(this System.Windows.Forms.TextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBox, System.Boolean>(
                BeginSetAcceptsReturn,
                EndSetAcceptsReturn,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBox, System.Windows.Forms.CharacterCasing> getCharacterCasingInternal = (x) => x.CharacterCasing;
        public static System.Windows.Forms.CharacterCasing GetCharacterCasing(this System.Windows.Forms.TextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.CharacterCasing)target.Invoke(getCharacterCasingInternal, target);
            else
                return getCharacterCasingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBox, System.Windows.Forms.CharacterCasing> getCharacterCasingCallback = GetCharacterCasing;
        public static IAsyncResult BeginGetCharacterCasing(this System.Windows.Forms.TextBox target, AsyncCallback callback, object state)
        {
            return getCharacterCasingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.CharacterCasing EndGetCharacterCasing(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            return EndGetCharacterCasing(result);
        }
        public static System.Windows.Forms.CharacterCasing EndGetCharacterCasing(IAsyncResult result)
        {
            return getCharacterCasingCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.CharacterCasing> GetCharacterCasingAsync(this System.Windows.Forms.TextBox target)
        {
            return Task<System.Windows.Forms.CharacterCasing>.Factory.FromAsync<System.Windows.Forms.TextBox>(
                BeginGetCharacterCasing,
                EndGetCharacterCasing,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBox, System.Windows.Forms.CharacterCasing> setCharacterCasingInternal = (x, v) => x.CharacterCasing = v;
        public static void SetCharacterCasing(this System.Windows.Forms.TextBox target, System.Windows.Forms.CharacterCasing value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCharacterCasingInternal, target, value);
            else
                setCharacterCasingInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBox, System.Windows.Forms.CharacterCasing> setCharacterCasingCallback = SetCharacterCasing;
        public static IAsyncResult BeginSetCharacterCasing(this System.Windows.Forms.TextBox target, System.Windows.Forms.CharacterCasing value, AsyncCallback callback, object state)
        {
            return setCharacterCasingCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCharacterCasing(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            EndSetCharacterCasing(result);
        }
        public static void EndSetCharacterCasing(IAsyncResult result)
        {
            setCharacterCasingCallback.EndInvoke(result);
        }
        public static Task SetCharacterCasingAsync(this System.Windows.Forms.TextBox target, System.Windows.Forms.CharacterCasing value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBox, System.Windows.Forms.CharacterCasing>(
                BeginSetCharacterCasing,
                EndSetCharacterCasing,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBox, System.Char> getPasswordCharInternal = (x) => x.PasswordChar;
        public static System.Char GetPasswordChar(this System.Windows.Forms.TextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Char)target.Invoke(getPasswordCharInternal, target);
            else
                return getPasswordCharInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBox, System.Char> getPasswordCharCallback = GetPasswordChar;
        public static IAsyncResult BeginGetPasswordChar(this System.Windows.Forms.TextBox target, AsyncCallback callback, object state)
        {
            return getPasswordCharCallback.BeginInvoke(target, callback, state);
        }
        public static System.Char EndGetPasswordChar(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            return EndGetPasswordChar(result);
        }
        public static System.Char EndGetPasswordChar(IAsyncResult result)
        {
            return getPasswordCharCallback.EndInvoke(result);
        }
        public static Task<System.Char> GetPasswordCharAsync(this System.Windows.Forms.TextBox target)
        {
            return Task<System.Char>.Factory.FromAsync<System.Windows.Forms.TextBox>(
                BeginGetPasswordChar,
                EndGetPasswordChar,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBox, System.Char> setPasswordCharInternal = (x, v) => x.PasswordChar = v;
        public static void SetPasswordChar(this System.Windows.Forms.TextBox target, System.Char value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPasswordCharInternal, target, value);
            else
                setPasswordCharInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBox, System.Char> setPasswordCharCallback = SetPasswordChar;
        public static IAsyncResult BeginSetPasswordChar(this System.Windows.Forms.TextBox target, System.Char value, AsyncCallback callback, object state)
        {
            return setPasswordCharCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPasswordChar(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            EndSetPasswordChar(result);
        }
        public static void EndSetPasswordChar(IAsyncResult result)
        {
            setPasswordCharCallback.EndInvoke(result);
        }
        public static Task SetPasswordCharAsync(this System.Windows.Forms.TextBox target, System.Char value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBox, System.Char>(
                BeginSetPasswordChar,
                EndSetPasswordChar,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBox, System.Windows.Forms.ScrollBars> getScrollBarsInternal = (x) => x.ScrollBars;
        public static System.Windows.Forms.ScrollBars GetScrollBars(this System.Windows.Forms.TextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ScrollBars)target.Invoke(getScrollBarsInternal, target);
            else
                return getScrollBarsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBox, System.Windows.Forms.ScrollBars> getScrollBarsCallback = GetScrollBars;
        public static IAsyncResult BeginGetScrollBars(this System.Windows.Forms.TextBox target, AsyncCallback callback, object state)
        {
            return getScrollBarsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ScrollBars EndGetScrollBars(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            return EndGetScrollBars(result);
        }
        public static System.Windows.Forms.ScrollBars EndGetScrollBars(IAsyncResult result)
        {
            return getScrollBarsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ScrollBars> GetScrollBarsAsync(this System.Windows.Forms.TextBox target)
        {
            return Task<System.Windows.Forms.ScrollBars>.Factory.FromAsync<System.Windows.Forms.TextBox>(
                BeginGetScrollBars,
                EndGetScrollBars,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBox, System.Windows.Forms.ScrollBars> setScrollBarsInternal = (x, v) => x.ScrollBars = v;
        public static void SetScrollBars(this System.Windows.Forms.TextBox target, System.Windows.Forms.ScrollBars value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setScrollBarsInternal, target, value);
            else
                setScrollBarsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBox, System.Windows.Forms.ScrollBars> setScrollBarsCallback = SetScrollBars;
        public static IAsyncResult BeginSetScrollBars(this System.Windows.Forms.TextBox target, System.Windows.Forms.ScrollBars value, AsyncCallback callback, object state)
        {
            return setScrollBarsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetScrollBars(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            EndSetScrollBars(result);
        }
        public static void EndSetScrollBars(IAsyncResult result)
        {
            setScrollBarsCallback.EndInvoke(result);
        }
        public static Task SetScrollBarsAsync(this System.Windows.Forms.TextBox target, System.Windows.Forms.ScrollBars value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBox, System.Windows.Forms.ScrollBars>(
                BeginSetScrollBars,
                EndSetScrollBars,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TextBox, System.Boolean> getUseSystemPasswordCharInternal = (x) => x.UseSystemPasswordChar;
        public static System.Boolean GetUseSystemPasswordChar(this System.Windows.Forms.TextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getUseSystemPasswordCharInternal, target);
            else
                return getUseSystemPasswordCharInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TextBox, System.Boolean> getUseSystemPasswordCharCallback = GetUseSystemPasswordChar;
        public static IAsyncResult BeginGetUseSystemPasswordChar(this System.Windows.Forms.TextBox target, AsyncCallback callback, object state)
        {
            return getUseSystemPasswordCharCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetUseSystemPasswordChar(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            return EndGetUseSystemPasswordChar(result);
        }
        public static System.Boolean EndGetUseSystemPasswordChar(IAsyncResult result)
        {
            return getUseSystemPasswordCharCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetUseSystemPasswordCharAsync(this System.Windows.Forms.TextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TextBox>(
                BeginGetUseSystemPasswordChar,
                EndGetUseSystemPasswordChar,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TextBox, System.Boolean> setUseSystemPasswordCharInternal = (x, v) => x.UseSystemPasswordChar = v;
        public static void SetUseSystemPasswordChar(this System.Windows.Forms.TextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUseSystemPasswordCharInternal, target, value);
            else
                setUseSystemPasswordCharInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TextBox, System.Boolean> setUseSystemPasswordCharCallback = SetUseSystemPasswordChar;
        public static IAsyncResult BeginSetUseSystemPasswordChar(this System.Windows.Forms.TextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setUseSystemPasswordCharCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUseSystemPasswordChar(this System.Windows.Forms.TextBox target, IAsyncResult result)
        {
            EndSetUseSystemPasswordChar(result);
        }
        public static void EndSetUseSystemPasswordChar(IAsyncResult result)
        {
            setUseSystemPasswordCharCallback.EndInvoke(result);
        }
        public static Task SetUseSystemPasswordCharAsync(this System.Windows.Forms.TextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TextBox, System.Boolean>(
                BeginSetUseSystemPasswordChar,
                EndSetUseSystemPasswordChar,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.DataGridTextBox, System.Windows.Forms.DataGrid> setDataGrid1Internal = (c, parentGrid) => c.SetDataGrid(parentGrid);
        public static void SetDataGrid(this System.Windows.Forms.DataGridTextBox __control__, System.Windows.Forms.DataGrid parentGrid)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setDataGrid1Internal, __control__, parentGrid);
            else
                setDataGrid1Internal.Invoke(__control__, parentGrid);
        }
        private static readonly Action<System.Windows.Forms.DataGridTextBox, System.Windows.Forms.DataGrid> setDataGrid1Callback = SetDataGrid;
        public static IAsyncResult BeginSetDataGrid1(this System.Windows.Forms.DataGridTextBox __control__, System.Windows.Forms.DataGrid parentGrid, AsyncCallback callback, object state)
        {
            return setDataGrid1Callback.BeginInvoke(__control__, parentGrid, callback, state);
        }
        public static void EndSetDataGrid1(this System.Windows.Forms.DataGridTextBox __control__, IAsyncResult result)
        {
            EndSetDataGrid1(result);
        }
        public static void EndSetDataGrid1(IAsyncResult result)
        {
            setDataGrid1Callback.EndInvoke(result);
        }
        public static Task SetDataGridAsync(this System.Windows.Forms.DataGridTextBox __control__, System.Windows.Forms.DataGrid parentGrid)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridTextBox, System.Windows.Forms.DataGrid>(
                (Func<System.Windows.Forms.DataGridTextBox, System.Windows.Forms.DataGrid, AsyncCallback, object, IAsyncResult>)BeginSetDataGrid1,
                (Action<IAsyncResult>)EndSetDataGrid1,
                __control__, parentGrid, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.DataGridTextBox, System.Boolean> getIsInEditOrNavigateModeInternal = (x) => x.IsInEditOrNavigateMode;
        public static System.Boolean GetIsInEditOrNavigateMode(this System.Windows.Forms.DataGridTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsInEditOrNavigateModeInternal, target);
            else
                return getIsInEditOrNavigateModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridTextBox, System.Boolean> getIsInEditOrNavigateModeCallback = GetIsInEditOrNavigateMode;
        public static IAsyncResult BeginGetIsInEditOrNavigateMode(this System.Windows.Forms.DataGridTextBox target, AsyncCallback callback, object state)
        {
            return getIsInEditOrNavigateModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsInEditOrNavigateMode(this System.Windows.Forms.DataGridTextBox target, IAsyncResult result)
        {
            return EndGetIsInEditOrNavigateMode(result);
        }
        public static System.Boolean EndGetIsInEditOrNavigateMode(IAsyncResult result)
        {
            return getIsInEditOrNavigateModeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsInEditOrNavigateModeAsync(this System.Windows.Forms.DataGridTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridTextBox>(
                BeginGetIsInEditOrNavigateMode,
                EndGetIsInEditOrNavigateMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridTextBox, System.Boolean> setIsInEditOrNavigateModeInternal = (x, v) => x.IsInEditOrNavigateMode = v;
        public static void SetIsInEditOrNavigateMode(this System.Windows.Forms.DataGridTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setIsInEditOrNavigateModeInternal, target, value);
            else
                setIsInEditOrNavigateModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridTextBox, System.Boolean> setIsInEditOrNavigateModeCallback = SetIsInEditOrNavigateMode;
        public static IAsyncResult BeginSetIsInEditOrNavigateMode(this System.Windows.Forms.DataGridTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setIsInEditOrNavigateModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetIsInEditOrNavigateMode(this System.Windows.Forms.DataGridTextBox target, IAsyncResult result)
        {
            EndSetIsInEditOrNavigateMode(result);
        }
        public static void EndSetIsInEditOrNavigateMode(IAsyncResult result)
        {
            setIsInEditOrNavigateModeCallback.EndInvoke(result);
        }
        public static Task SetIsInEditOrNavigateModeAsync(this System.Windows.Forms.DataGridTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridTextBox, System.Boolean>(
                BeginSetIsInEditOrNavigateMode,
                EndSetIsInEditOrNavigateMode,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.DataGridViewCellStyle> applyCellStyleToEditingControl2Internal = (c, dataGridViewCellStyle) => c.ApplyCellStyleToEditingControl(dataGridViewCellStyle);
        public static void ApplyCellStyleToEditingControl(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(applyCellStyleToEditingControl2Internal, __control__, dataGridViewCellStyle);
            else
                applyCellStyleToEditingControl2Internal.Invoke(__control__, dataGridViewCellStyle);
        }
        private static readonly Action<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.DataGridViewCellStyle> applyCellStyleToEditingControl2Callback = ApplyCellStyleToEditingControl;
        public static IAsyncResult BeginApplyCellStyleToEditingControl2(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle, AsyncCallback callback, object state)
        {
            return applyCellStyleToEditingControl2Callback.BeginInvoke(__control__, dataGridViewCellStyle, callback, state);
        }
        public static void EndApplyCellStyleToEditingControl2(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, IAsyncResult result)
        {
            EndApplyCellStyleToEditingControl2(result);
        }
        public static void EndApplyCellStyleToEditingControl2(IAsyncResult result)
        {
            applyCellStyleToEditingControl2Callback.EndInvoke(result);
        }
        public static Task ApplyCellStyleToEditingControlAsync(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.DataGridViewCellStyle>(
                (Func<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.DataGridViewCellStyle, AsyncCallback, object, IAsyncResult>)BeginApplyCellStyleToEditingControl2,
                (Action<IAsyncResult>)EndApplyCellStyleToEditingControl2,
                __control__, dataGridViewCellStyle, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.Keys, System.Boolean, System.Boolean> editingControlWantsInputKey2Internal = (c, keyData, dataGridViewWantsInputKey) => c.EditingControlWantsInputKey(keyData, dataGridViewWantsInputKey);
        public static System.Boolean EditingControlWantsInputKey(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Windows.Forms.Keys keyData, System.Boolean dataGridViewWantsInputKey)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(editingControlWantsInputKey2Internal, __control__, keyData, dataGridViewWantsInputKey);
            else
                return editingControlWantsInputKey2Internal.Invoke(__control__, keyData, dataGridViewWantsInputKey);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.Keys, System.Boolean, System.Boolean> editingControlWantsInputKey2Callback = EditingControlWantsInputKey;
        public static IAsyncResult BeginEditingControlWantsInputKey2(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Windows.Forms.Keys keyData, System.Boolean dataGridViewWantsInputKey, AsyncCallback callback, object state)
        {
            return editingControlWantsInputKey2Callback.BeginInvoke(__control__, keyData, dataGridViewWantsInputKey, callback, state);
        }
        public static System.Boolean EndEditingControlWantsInputKey2(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, IAsyncResult result)
        {
            return EndEditingControlWantsInputKey2(result);
        }
        public static System.Boolean EndEditingControlWantsInputKey2(IAsyncResult result)
        {
            return editingControlWantsInputKey2Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> EditingControlWantsInputKeyAsync(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Windows.Forms.Keys keyData, System.Boolean dataGridViewWantsInputKey)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.Keys, System.Boolean>(
                (Func<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.Keys, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginEditingControlWantsInputKey2,
                (Func<IAsyncResult, System.Boolean>)EndEditingControlWantsInputKey2,
                __control__, keyData, dataGridViewWantsInputKey, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.DataGridViewDataErrorContexts, System.Object> getEditingControlFormattedValue2Internal = (c, context) => c.GetEditingControlFormattedValue(context);
        public static System.Object GetEditingControlFormattedValue(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Windows.Forms.DataGridViewDataErrorContexts context)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Object)__control__.Invoke(getEditingControlFormattedValue2Internal, __control__, context);
            else
                return getEditingControlFormattedValue2Internal.Invoke(__control__, context);
        }
        private static readonly Func<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.DataGridViewDataErrorContexts, System.Object> getEditingControlFormattedValue2Callback = GetEditingControlFormattedValue;
        public static IAsyncResult BeginGetEditingControlFormattedValue2(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Windows.Forms.DataGridViewDataErrorContexts context, AsyncCallback callback, object state)
        {
            return getEditingControlFormattedValue2Callback.BeginInvoke(__control__, context, callback, state);
        }
        public static System.Object EndGetEditingControlFormattedValue2(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, IAsyncResult result)
        {
            return EndGetEditingControlFormattedValue2(result);
        }
        public static System.Object EndGetEditingControlFormattedValue2(IAsyncResult result)
        {
            return getEditingControlFormattedValue2Callback.EndInvoke(result);
        }
        public static Task<System.Object> GetEditingControlFormattedValueAsync(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Windows.Forms.DataGridViewDataErrorContexts context)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.DataGridViewDataErrorContexts>(
                (Func<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Windows.Forms.DataGridViewDataErrorContexts, AsyncCallback, object, IAsyncResult>)BeginGetEditingControlFormattedValue2,
                (Func<IAsyncResult, System.Object>)EndGetEditingControlFormattedValue2,
                __control__, context, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Boolean> prepareEditingControlForEdit2Internal = (c, selectAll) => c.PrepareEditingControlForEdit(selectAll);
        public static void PrepareEditingControlForEdit(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Boolean selectAll)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(prepareEditingControlForEdit2Internal, __control__, selectAll);
            else
                prepareEditingControlForEdit2Internal.Invoke(__control__, selectAll);
        }
        private static readonly Action<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Boolean> prepareEditingControlForEdit2Callback = PrepareEditingControlForEdit;
        public static IAsyncResult BeginPrepareEditingControlForEdit2(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Boolean selectAll, AsyncCallback callback, object state)
        {
            return prepareEditingControlForEdit2Callback.BeginInvoke(__control__, selectAll, callback, state);
        }
        public static void EndPrepareEditingControlForEdit2(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, IAsyncResult result)
        {
            EndPrepareEditingControlForEdit2(result);
        }
        public static void EndPrepareEditingControlForEdit2(IAsyncResult result)
        {
            prepareEditingControlForEdit2Callback.EndInvoke(result);
        }
        public static Task PrepareEditingControlForEditAsync(this System.Windows.Forms.DataGridViewTextBoxEditingControl __control__, System.Boolean selectAll)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Boolean>(
                (Func<System.Windows.Forms.DataGridViewTextBoxEditingControl, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginPrepareEditingControlForEdit2,
                (Action<IAsyncResult>)EndPrepareEditingControlForEdit2,
                __control__, selectAll, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox> clearUndo2Internal = (c) => c.ClearUndo();
        public static void ClearUndo(this System.Windows.Forms.MaskedTextBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(clearUndo2Internal, __control__);
            else
                clearUndo2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox> clearUndo2Callback = ClearUndo;
        public static IAsyncResult BeginClearUndo2(this System.Windows.Forms.MaskedTextBox __control__, AsyncCallback callback, object state)
        {
            return clearUndo2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndClearUndo2(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            EndClearUndo2(result);
        }
        public static void EndClearUndo2(IAsyncResult result)
        {
            clearUndo2Callback.EndInvoke(result);
        }
        public static Task ClearUndoAsync(this System.Windows.Forms.MaskedTextBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                (Func<System.Windows.Forms.MaskedTextBox, AsyncCallback, object, IAsyncResult>)BeginClearUndo2,
                (Action<IAsyncResult>)EndClearUndo2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Drawing.Point, System.Char> getCharFromPosition2Internal = (c, pt) => c.GetCharFromPosition(pt);
        public static System.Char GetCharFromPosition(this System.Windows.Forms.MaskedTextBox __control__, System.Drawing.Point pt)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Char)__control__.Invoke(getCharFromPosition2Internal, __control__, pt);
            else
                return getCharFromPosition2Internal.Invoke(__control__, pt);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Drawing.Point, System.Char> getCharFromPosition2Callback = GetCharFromPosition;
        public static IAsyncResult BeginGetCharFromPosition2(this System.Windows.Forms.MaskedTextBox __control__, System.Drawing.Point pt, AsyncCallback callback, object state)
        {
            return getCharFromPosition2Callback.BeginInvoke(__control__, pt, callback, state);
        }
        public static System.Char EndGetCharFromPosition2(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            return EndGetCharFromPosition2(result);
        }
        public static System.Char EndGetCharFromPosition2(IAsyncResult result)
        {
            return getCharFromPosition2Callback.EndInvoke(result);
        }
        public static Task<System.Char> GetCharFromPositionAsync(this System.Windows.Forms.MaskedTextBox __control__, System.Drawing.Point pt)
        {
            return Task<System.Char>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Drawing.Point>(
                (Func<System.Windows.Forms.MaskedTextBox, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginGetCharFromPosition2,
                (Func<IAsyncResult, System.Char>)EndGetCharFromPosition2,
                __control__, pt, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Drawing.Point, System.Int32> getCharIndexFromPosition2Internal = (c, pt) => c.GetCharIndexFromPosition(pt);
        public static System.Int32 GetCharIndexFromPosition(this System.Windows.Forms.MaskedTextBox __control__, System.Drawing.Point pt)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getCharIndexFromPosition2Internal, __control__, pt);
            else
                return getCharIndexFromPosition2Internal.Invoke(__control__, pt);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Drawing.Point, System.Int32> getCharIndexFromPosition2Callback = GetCharIndexFromPosition;
        public static IAsyncResult BeginGetCharIndexFromPosition2(this System.Windows.Forms.MaskedTextBox __control__, System.Drawing.Point pt, AsyncCallback callback, object state)
        {
            return getCharIndexFromPosition2Callback.BeginInvoke(__control__, pt, callback, state);
        }
        public static System.Int32 EndGetCharIndexFromPosition2(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            return EndGetCharIndexFromPosition2(result);
        }
        public static System.Int32 EndGetCharIndexFromPosition2(IAsyncResult result)
        {
            return getCharIndexFromPosition2Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetCharIndexFromPositionAsync(this System.Windows.Forms.MaskedTextBox __control__, System.Drawing.Point pt)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Drawing.Point>(
                (Func<System.Windows.Forms.MaskedTextBox, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginGetCharIndexFromPosition2,
                (Func<IAsyncResult, System.Int32>)EndGetCharIndexFromPosition2,
                __control__, pt, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Int32> getFirstCharIndexOfCurrentLine2Internal = (c) => c.GetFirstCharIndexOfCurrentLine();
        public static System.Int32 GetFirstCharIndexOfCurrentLine(this System.Windows.Forms.MaskedTextBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getFirstCharIndexOfCurrentLine2Internal, __control__);
            else
                return getFirstCharIndexOfCurrentLine2Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Int32> getFirstCharIndexOfCurrentLine2Callback = GetFirstCharIndexOfCurrentLine;
        public static IAsyncResult BeginGetFirstCharIndexOfCurrentLine2(this System.Windows.Forms.MaskedTextBox __control__, AsyncCallback callback, object state)
        {
            return getFirstCharIndexOfCurrentLine2Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Int32 EndGetFirstCharIndexOfCurrentLine2(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            return EndGetFirstCharIndexOfCurrentLine2(result);
        }
        public static System.Int32 EndGetFirstCharIndexOfCurrentLine2(IAsyncResult result)
        {
            return getFirstCharIndexOfCurrentLine2Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetFirstCharIndexOfCurrentLineAsync(this System.Windows.Forms.MaskedTextBox __control__)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                (Func<System.Windows.Forms.MaskedTextBox, AsyncCallback, object, IAsyncResult>)BeginGetFirstCharIndexOfCurrentLine2,
                (Func<IAsyncResult, System.Int32>)EndGetFirstCharIndexOfCurrentLine2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Int32, System.Int32> getFirstCharIndexFromLine2Internal = (c, lineNumber) => c.GetFirstCharIndexFromLine(lineNumber);
        public static System.Int32 GetFirstCharIndexFromLine(this System.Windows.Forms.MaskedTextBox __control__, System.Int32 lineNumber)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getFirstCharIndexFromLine2Internal, __control__, lineNumber);
            else
                return getFirstCharIndexFromLine2Internal.Invoke(__control__, lineNumber);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Int32, System.Int32> getFirstCharIndexFromLine2Callback = GetFirstCharIndexFromLine;
        public static IAsyncResult BeginGetFirstCharIndexFromLine2(this System.Windows.Forms.MaskedTextBox __control__, System.Int32 lineNumber, AsyncCallback callback, object state)
        {
            return getFirstCharIndexFromLine2Callback.BeginInvoke(__control__, lineNumber, callback, state);
        }
        public static System.Int32 EndGetFirstCharIndexFromLine2(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            return EndGetFirstCharIndexFromLine2(result);
        }
        public static System.Int32 EndGetFirstCharIndexFromLine2(IAsyncResult result)
        {
            return getFirstCharIndexFromLine2Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetFirstCharIndexFromLineAsync(this System.Windows.Forms.MaskedTextBox __control__, System.Int32 lineNumber)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Int32>(
                (Func<System.Windows.Forms.MaskedTextBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetFirstCharIndexFromLine2,
                (Func<IAsyncResult, System.Int32>)EndGetFirstCharIndexFromLine2,
                __control__, lineNumber, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Int32, System.Int32> getLineFromCharIndex2Internal = (c, index) => c.GetLineFromCharIndex(index);
        public static System.Int32 GetLineFromCharIndex(this System.Windows.Forms.MaskedTextBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getLineFromCharIndex2Internal, __control__, index);
            else
                return getLineFromCharIndex2Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Int32, System.Int32> getLineFromCharIndex2Callback = GetLineFromCharIndex;
        public static IAsyncResult BeginGetLineFromCharIndex2(this System.Windows.Forms.MaskedTextBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getLineFromCharIndex2Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Int32 EndGetLineFromCharIndex2(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            return EndGetLineFromCharIndex2(result);
        }
        public static System.Int32 EndGetLineFromCharIndex2(IAsyncResult result)
        {
            return getLineFromCharIndex2Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetLineFromCharIndexAsync(this System.Windows.Forms.MaskedTextBox __control__, System.Int32 index)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Int32>(
                (Func<System.Windows.Forms.MaskedTextBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetLineFromCharIndex2,
                (Func<IAsyncResult, System.Int32>)EndGetLineFromCharIndex2,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Int32, System.Drawing.Point> getPositionFromCharIndex2Internal = (c, index) => c.GetPositionFromCharIndex(index);
        public static System.Drawing.Point GetPositionFromCharIndex(this System.Windows.Forms.MaskedTextBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Point)__control__.Invoke(getPositionFromCharIndex2Internal, __control__, index);
            else
                return getPositionFromCharIndex2Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Int32, System.Drawing.Point> getPositionFromCharIndex2Callback = GetPositionFromCharIndex;
        public static IAsyncResult BeginGetPositionFromCharIndex2(this System.Windows.Forms.MaskedTextBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getPositionFromCharIndex2Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Drawing.Point EndGetPositionFromCharIndex2(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            return EndGetPositionFromCharIndex2(result);
        }
        public static System.Drawing.Point EndGetPositionFromCharIndex2(IAsyncResult result)
        {
            return getPositionFromCharIndex2Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> GetPositionFromCharIndexAsync(this System.Windows.Forms.MaskedTextBox __control__, System.Int32 index)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Int32>(
                (Func<System.Windows.Forms.MaskedTextBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetPositionFromCharIndex2,
                (Func<IAsyncResult, System.Drawing.Point>)EndGetPositionFromCharIndex2,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox> scrollToCaret2Internal = (c) => c.ScrollToCaret();
        public static void ScrollToCaret(this System.Windows.Forms.MaskedTextBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(scrollToCaret2Internal, __control__);
            else
                scrollToCaret2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox> scrollToCaret2Callback = ScrollToCaret;
        public static IAsyncResult BeginScrollToCaret2(this System.Windows.Forms.MaskedTextBox __control__, AsyncCallback callback, object state)
        {
            return scrollToCaret2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndScrollToCaret2(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            EndScrollToCaret2(result);
        }
        public static void EndScrollToCaret2(IAsyncResult result)
        {
            scrollToCaret2Callback.EndInvoke(result);
        }
        public static Task ScrollToCaretAsync(this System.Windows.Forms.MaskedTextBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                (Func<System.Windows.Forms.MaskedTextBox, AsyncCallback, object, IAsyncResult>)BeginScrollToCaret2,
                (Action<IAsyncResult>)EndScrollToCaret2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox> undo2Internal = (c) => c.Undo();
        public static void Undo(this System.Windows.Forms.MaskedTextBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(undo2Internal, __control__);
            else
                undo2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox> undo2Callback = Undo;
        public static IAsyncResult BeginUndo2(this System.Windows.Forms.MaskedTextBox __control__, AsyncCallback callback, object state)
        {
            return undo2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndUndo2(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            EndUndo2(result);
        }
        public static void EndUndo2(IAsyncResult result)
        {
            undo2Callback.EndInvoke(result);
        }
        public static Task UndoAsync(this System.Windows.Forms.MaskedTextBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                (Func<System.Windows.Forms.MaskedTextBox, AsyncCallback, object, IAsyncResult>)BeginUndo2,
                (Action<IAsyncResult>)EndUndo2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Object> validateText1Internal = (c) => c.ValidateText();
        public static System.Object ValidateText(this System.Windows.Forms.MaskedTextBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Object)__control__.Invoke(validateText1Internal, __control__);
            else
                return validateText1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Object> validateText1Callback = ValidateText;
        public static IAsyncResult BeginValidateText1(this System.Windows.Forms.MaskedTextBox __control__, AsyncCallback callback, object state)
        {
            return validateText1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Object EndValidateText1(this System.Windows.Forms.MaskedTextBox __control__, IAsyncResult result)
        {
            return EndValidateText1(result);
        }
        public static System.Object EndValidateText1(IAsyncResult result)
        {
            return validateText1Callback.EndInvoke(result);
        }
        public static Task<System.Object> ValidateTextAsync(this System.Windows.Forms.MaskedTextBox __control__)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                (Func<System.Windows.Forms.MaskedTextBox, AsyncCallback, object, IAsyncResult>)BeginValidateText1,
                (Func<IAsyncResult, System.Object>)EndValidateText1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getAllowPromptAsInputInternal = (x) => x.AllowPromptAsInput;
        public static System.Boolean GetAllowPromptAsInput(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowPromptAsInputInternal, target);
            else
                return getAllowPromptAsInputInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getAllowPromptAsInputCallback = GetAllowPromptAsInput;
        public static IAsyncResult BeginGetAllowPromptAsInput(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getAllowPromptAsInputCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowPromptAsInput(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetAllowPromptAsInput(result);
        }
        public static System.Boolean EndGetAllowPromptAsInput(IAsyncResult result)
        {
            return getAllowPromptAsInputCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowPromptAsInputAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetAllowPromptAsInput,
                EndGetAllowPromptAsInput,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setAllowPromptAsInputInternal = (x, v) => x.AllowPromptAsInput = v;
        public static void SetAllowPromptAsInput(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowPromptAsInputInternal, target, value);
            else
                setAllowPromptAsInputInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setAllowPromptAsInputCallback = SetAllowPromptAsInput;
        public static IAsyncResult BeginSetAllowPromptAsInput(this System.Windows.Forms.MaskedTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowPromptAsInputCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowPromptAsInput(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetAllowPromptAsInput(result);
        }
        public static void EndSetAllowPromptAsInput(IAsyncResult result)
        {
            setAllowPromptAsInputCallback.EndInvoke(result);
        }
        public static Task SetAllowPromptAsInputAsync(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Boolean>(
                BeginSetAllowPromptAsInput,
                EndSetAllowPromptAsInput,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getAsciiOnlyInternal = (x) => x.AsciiOnly;
        public static System.Boolean GetAsciiOnly(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAsciiOnlyInternal, target);
            else
                return getAsciiOnlyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getAsciiOnlyCallback = GetAsciiOnly;
        public static IAsyncResult BeginGetAsciiOnly(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getAsciiOnlyCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAsciiOnly(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetAsciiOnly(result);
        }
        public static System.Boolean EndGetAsciiOnly(IAsyncResult result)
        {
            return getAsciiOnlyCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAsciiOnlyAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetAsciiOnly,
                EndGetAsciiOnly,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setAsciiOnlyInternal = (x, v) => x.AsciiOnly = v;
        public static void SetAsciiOnly(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAsciiOnlyInternal, target, value);
            else
                setAsciiOnlyInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setAsciiOnlyCallback = SetAsciiOnly;
        public static IAsyncResult BeginSetAsciiOnly(this System.Windows.Forms.MaskedTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAsciiOnlyCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAsciiOnly(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetAsciiOnly(result);
        }
        public static void EndSetAsciiOnly(IAsyncResult result)
        {
            setAsciiOnlyCallback.EndInvoke(result);
        }
        public static Task SetAsciiOnlyAsync(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Boolean>(
                BeginSetAsciiOnly,
                EndSetAsciiOnly,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getBeepOnErrorInternal = (x) => x.BeepOnError;
        public static System.Boolean GetBeepOnError(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getBeepOnErrorInternal, target);
            else
                return getBeepOnErrorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getBeepOnErrorCallback = GetBeepOnError;
        public static IAsyncResult BeginGetBeepOnError(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getBeepOnErrorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetBeepOnError(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetBeepOnError(result);
        }
        public static System.Boolean EndGetBeepOnError(IAsyncResult result)
        {
            return getBeepOnErrorCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetBeepOnErrorAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetBeepOnError,
                EndGetBeepOnError,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setBeepOnErrorInternal = (x, v) => x.BeepOnError = v;
        public static void SetBeepOnError(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBeepOnErrorInternal, target, value);
            else
                setBeepOnErrorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setBeepOnErrorCallback = SetBeepOnError;
        public static IAsyncResult BeginSetBeepOnError(this System.Windows.Forms.MaskedTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setBeepOnErrorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBeepOnError(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetBeepOnError(result);
        }
        public static void EndSetBeepOnError(IAsyncResult result)
        {
            setBeepOnErrorCallback.EndInvoke(result);
        }
        public static Task SetBeepOnErrorAsync(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Boolean>(
                BeginSetBeepOnError,
                EndSetBeepOnError,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Globalization.CultureInfo> getCultureInternal = (x) => x.Culture;
        public static System.Globalization.CultureInfo GetCulture(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Globalization.CultureInfo)target.Invoke(getCultureInternal, target);
            else
                return getCultureInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Globalization.CultureInfo> getCultureCallback = GetCulture;
        public static IAsyncResult BeginGetCulture(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getCultureCallback.BeginInvoke(target, callback, state);
        }
        public static System.Globalization.CultureInfo EndGetCulture(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetCulture(result);
        }
        public static System.Globalization.CultureInfo EndGetCulture(IAsyncResult result)
        {
            return getCultureCallback.EndInvoke(result);
        }
        public static Task<System.Globalization.CultureInfo> GetCultureAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Globalization.CultureInfo>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetCulture,
                EndGetCulture,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Globalization.CultureInfo> setCultureInternal = (x, v) => x.Culture = v;
        public static void SetCulture(this System.Windows.Forms.MaskedTextBox target, System.Globalization.CultureInfo value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCultureInternal, target, value);
            else
                setCultureInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Globalization.CultureInfo> setCultureCallback = SetCulture;
        public static IAsyncResult BeginSetCulture(this System.Windows.Forms.MaskedTextBox target, System.Globalization.CultureInfo value, AsyncCallback callback, object state)
        {
            return setCultureCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCulture(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetCulture(result);
        }
        public static void EndSetCulture(IAsyncResult result)
        {
            setCultureCallback.EndInvoke(result);
        }
        public static Task SetCultureAsync(this System.Windows.Forms.MaskedTextBox target, System.Globalization.CultureInfo value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Globalization.CultureInfo>(
                BeginSetCulture,
                EndSetCulture,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat> getCutCopyMaskFormatInternal = (x) => x.CutCopyMaskFormat;
        public static System.Windows.Forms.MaskFormat GetCutCopyMaskFormat(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.MaskFormat)target.Invoke(getCutCopyMaskFormatInternal, target);
            else
                return getCutCopyMaskFormatInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat> getCutCopyMaskFormatCallback = GetCutCopyMaskFormat;
        public static IAsyncResult BeginGetCutCopyMaskFormat(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getCutCopyMaskFormatCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.MaskFormat EndGetCutCopyMaskFormat(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetCutCopyMaskFormat(result);
        }
        public static System.Windows.Forms.MaskFormat EndGetCutCopyMaskFormat(IAsyncResult result)
        {
            return getCutCopyMaskFormatCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.MaskFormat> GetCutCopyMaskFormatAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Windows.Forms.MaskFormat>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetCutCopyMaskFormat,
                EndGetCutCopyMaskFormat,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat> setCutCopyMaskFormatInternal = (x, v) => x.CutCopyMaskFormat = v;
        public static void SetCutCopyMaskFormat(this System.Windows.Forms.MaskedTextBox target, System.Windows.Forms.MaskFormat value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCutCopyMaskFormatInternal, target, value);
            else
                setCutCopyMaskFormatInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat> setCutCopyMaskFormatCallback = SetCutCopyMaskFormat;
        public static IAsyncResult BeginSetCutCopyMaskFormat(this System.Windows.Forms.MaskedTextBox target, System.Windows.Forms.MaskFormat value, AsyncCallback callback, object state)
        {
            return setCutCopyMaskFormatCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCutCopyMaskFormat(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetCutCopyMaskFormat(result);
        }
        public static void EndSetCutCopyMaskFormat(IAsyncResult result)
        {
            setCutCopyMaskFormatCallback.EndInvoke(result);
        }
        public static Task SetCutCopyMaskFormatAsync(this System.Windows.Forms.MaskedTextBox target, System.Windows.Forms.MaskFormat value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat>(
                BeginSetCutCopyMaskFormat,
                EndSetCutCopyMaskFormat,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.IFormatProvider> getFormatProviderInternal = (x) => x.FormatProvider;
        public static System.IFormatProvider GetFormatProvider(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.IFormatProvider)target.Invoke(getFormatProviderInternal, target);
            else
                return getFormatProviderInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.IFormatProvider> getFormatProviderCallback = GetFormatProvider;
        public static IAsyncResult BeginGetFormatProvider(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getFormatProviderCallback.BeginInvoke(target, callback, state);
        }
        public static System.IFormatProvider EndGetFormatProvider(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetFormatProvider(result);
        }
        public static System.IFormatProvider EndGetFormatProvider(IAsyncResult result)
        {
            return getFormatProviderCallback.EndInvoke(result);
        }
        public static Task<System.IFormatProvider> GetFormatProviderAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.IFormatProvider>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetFormatProvider,
                EndGetFormatProvider,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.IFormatProvider> setFormatProviderInternal = (x, v) => x.FormatProvider = v;
        public static void SetFormatProvider(this System.Windows.Forms.MaskedTextBox target, System.IFormatProvider value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFormatProviderInternal, target, value);
            else
                setFormatProviderInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.IFormatProvider> setFormatProviderCallback = SetFormatProvider;
        public static IAsyncResult BeginSetFormatProvider(this System.Windows.Forms.MaskedTextBox target, System.IFormatProvider value, AsyncCallback callback, object state)
        {
            return setFormatProviderCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFormatProvider(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetFormatProvider(result);
        }
        public static void EndSetFormatProvider(IAsyncResult result)
        {
            setFormatProviderCallback.EndInvoke(result);
        }
        public static Task SetFormatProviderAsync(this System.Windows.Forms.MaskedTextBox target, System.IFormatProvider value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.IFormatProvider>(
                BeginSetFormatProvider,
                EndSetFormatProvider,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getHidePromptOnLeaveInternal = (x) => x.HidePromptOnLeave;
        public static System.Boolean GetHidePromptOnLeave(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHidePromptOnLeaveInternal, target);
            else
                return getHidePromptOnLeaveInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getHidePromptOnLeaveCallback = GetHidePromptOnLeave;
        public static IAsyncResult BeginGetHidePromptOnLeave(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getHidePromptOnLeaveCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHidePromptOnLeave(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetHidePromptOnLeave(result);
        }
        public static System.Boolean EndGetHidePromptOnLeave(IAsyncResult result)
        {
            return getHidePromptOnLeaveCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHidePromptOnLeaveAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetHidePromptOnLeave,
                EndGetHidePromptOnLeave,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setHidePromptOnLeaveInternal = (x, v) => x.HidePromptOnLeave = v;
        public static void SetHidePromptOnLeave(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHidePromptOnLeaveInternal, target, value);
            else
                setHidePromptOnLeaveInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setHidePromptOnLeaveCallback = SetHidePromptOnLeave;
        public static IAsyncResult BeginSetHidePromptOnLeave(this System.Windows.Forms.MaskedTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setHidePromptOnLeaveCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHidePromptOnLeave(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetHidePromptOnLeave(result);
        }
        public static void EndSetHidePromptOnLeave(IAsyncResult result)
        {
            setHidePromptOnLeaveCallback.EndInvoke(result);
        }
        public static Task SetHidePromptOnLeaveAsync(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Boolean>(
                BeginSetHidePromptOnLeave,
                EndSetHidePromptOnLeave,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.InsertKeyMode> getInsertKeyModeInternal = (x) => x.InsertKeyMode;
        public static System.Windows.Forms.InsertKeyMode GetInsertKeyMode(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.InsertKeyMode)target.Invoke(getInsertKeyModeInternal, target);
            else
                return getInsertKeyModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.InsertKeyMode> getInsertKeyModeCallback = GetInsertKeyMode;
        public static IAsyncResult BeginGetInsertKeyMode(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getInsertKeyModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.InsertKeyMode EndGetInsertKeyMode(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetInsertKeyMode(result);
        }
        public static System.Windows.Forms.InsertKeyMode EndGetInsertKeyMode(IAsyncResult result)
        {
            return getInsertKeyModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.InsertKeyMode> GetInsertKeyModeAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Windows.Forms.InsertKeyMode>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetInsertKeyMode,
                EndGetInsertKeyMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.InsertKeyMode> setInsertKeyModeInternal = (x, v) => x.InsertKeyMode = v;
        public static void SetInsertKeyMode(this System.Windows.Forms.MaskedTextBox target, System.Windows.Forms.InsertKeyMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setInsertKeyModeInternal, target, value);
            else
                setInsertKeyModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.InsertKeyMode> setInsertKeyModeCallback = SetInsertKeyMode;
        public static IAsyncResult BeginSetInsertKeyMode(this System.Windows.Forms.MaskedTextBox target, System.Windows.Forms.InsertKeyMode value, AsyncCallback callback, object state)
        {
            return setInsertKeyModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetInsertKeyMode(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetInsertKeyMode(result);
        }
        public static void EndSetInsertKeyMode(IAsyncResult result)
        {
            setInsertKeyModeCallback.EndInvoke(result);
        }
        public static Task SetInsertKeyModeAsync(this System.Windows.Forms.MaskedTextBox target, System.Windows.Forms.InsertKeyMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.InsertKeyMode>(
                BeginSetInsertKeyMode,
                EndSetInsertKeyMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getIsOverwriteModeInternal = (x) => x.IsOverwriteMode;
        public static System.Boolean GetIsOverwriteMode(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsOverwriteModeInternal, target);
            else
                return getIsOverwriteModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getIsOverwriteModeCallback = GetIsOverwriteMode;
        public static IAsyncResult BeginGetIsOverwriteMode(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getIsOverwriteModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsOverwriteMode(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetIsOverwriteMode(result);
        }
        public static System.Boolean EndGetIsOverwriteMode(IAsyncResult result)
        {
            return getIsOverwriteModeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsOverwriteModeAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetIsOverwriteMode,
                EndGetIsOverwriteMode,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.String> getMaskInternal = (x) => x.Mask;
        public static System.String GetMask(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getMaskInternal, target);
            else
                return getMaskInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.String> getMaskCallback = GetMask;
        public static IAsyncResult BeginGetMask(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getMaskCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetMask(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetMask(result);
        }
        public static System.String EndGetMask(IAsyncResult result)
        {
            return getMaskCallback.EndInvoke(result);
        }
        public static Task<System.String> GetMaskAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetMask,
                EndGetMask,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.String> setMaskInternal = (x, v) => x.Mask = v;
        public static void SetMask(this System.Windows.Forms.MaskedTextBox target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMaskInternal, target, value);
            else
                setMaskInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.String> setMaskCallback = SetMask;
        public static IAsyncResult BeginSetMask(this System.Windows.Forms.MaskedTextBox target, System.String value, AsyncCallback callback, object state)
        {
            return setMaskCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMask(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetMask(result);
        }
        public static void EndSetMask(IAsyncResult result)
        {
            setMaskCallback.EndInvoke(result);
        }
        public static Task SetMaskAsync(this System.Windows.Forms.MaskedTextBox target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.String>(
                BeginSetMask,
                EndSetMask,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getMaskCompletedInternal = (x) => x.MaskCompleted;
        public static System.Boolean GetMaskCompleted(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getMaskCompletedInternal, target);
            else
                return getMaskCompletedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getMaskCompletedCallback = GetMaskCompleted;
        public static IAsyncResult BeginGetMaskCompleted(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getMaskCompletedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetMaskCompleted(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetMaskCompleted(result);
        }
        public static System.Boolean EndGetMaskCompleted(IAsyncResult result)
        {
            return getMaskCompletedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetMaskCompletedAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetMaskCompleted,
                EndGetMaskCompleted,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getMaskFullInternal = (x) => x.MaskFull;
        public static System.Boolean GetMaskFull(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getMaskFullInternal, target);
            else
                return getMaskFullInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getMaskFullCallback = GetMaskFull;
        public static IAsyncResult BeginGetMaskFull(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getMaskFullCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetMaskFull(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetMaskFull(result);
        }
        public static System.Boolean EndGetMaskFull(IAsyncResult result)
        {
            return getMaskFullCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetMaskFullAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetMaskFull,
                EndGetMaskFull,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.ComponentModel.MaskedTextProvider> getMaskedTextProviderInternal = (x) => x.MaskedTextProvider;
        public static System.ComponentModel.MaskedTextProvider GetMaskedTextProvider(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.ComponentModel.MaskedTextProvider)target.Invoke(getMaskedTextProviderInternal, target);
            else
                return getMaskedTextProviderInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.ComponentModel.MaskedTextProvider> getMaskedTextProviderCallback = GetMaskedTextProvider;
        public static IAsyncResult BeginGetMaskedTextProvider(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getMaskedTextProviderCallback.BeginInvoke(target, callback, state);
        }
        public static System.ComponentModel.MaskedTextProvider EndGetMaskedTextProvider(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetMaskedTextProvider(result);
        }
        public static System.ComponentModel.MaskedTextProvider EndGetMaskedTextProvider(IAsyncResult result)
        {
            return getMaskedTextProviderCallback.EndInvoke(result);
        }
        public static Task<System.ComponentModel.MaskedTextProvider> GetMaskedTextProviderAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.ComponentModel.MaskedTextProvider>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetMaskedTextProvider,
                EndGetMaskedTextProvider,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Char> getPromptCharInternal = (x) => x.PromptChar;
        public static System.Char GetPromptChar(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Char)target.Invoke(getPromptCharInternal, target);
            else
                return getPromptCharInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Char> getPromptCharCallback = GetPromptChar;
        public static IAsyncResult BeginGetPromptChar(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getPromptCharCallback.BeginInvoke(target, callback, state);
        }
        public static System.Char EndGetPromptChar(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetPromptChar(result);
        }
        public static System.Char EndGetPromptChar(IAsyncResult result)
        {
            return getPromptCharCallback.EndInvoke(result);
        }
        public static Task<System.Char> GetPromptCharAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Char>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetPromptChar,
                EndGetPromptChar,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Char> setPromptCharInternal = (x, v) => x.PromptChar = v;
        public static void SetPromptChar(this System.Windows.Forms.MaskedTextBox target, System.Char value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPromptCharInternal, target, value);
            else
                setPromptCharInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Char> setPromptCharCallback = SetPromptChar;
        public static IAsyncResult BeginSetPromptChar(this System.Windows.Forms.MaskedTextBox target, System.Char value, AsyncCallback callback, object state)
        {
            return setPromptCharCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPromptChar(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetPromptChar(result);
        }
        public static void EndSetPromptChar(IAsyncResult result)
        {
            setPromptCharCallback.EndInvoke(result);
        }
        public static Task SetPromptCharAsync(this System.Windows.Forms.MaskedTextBox target, System.Char value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Char>(
                BeginSetPromptChar,
                EndSetPromptChar,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getRejectInputOnFirstFailureInternal = (x) => x.RejectInputOnFirstFailure;
        public static System.Boolean GetRejectInputOnFirstFailure(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getRejectInputOnFirstFailureInternal, target);
            else
                return getRejectInputOnFirstFailureInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getRejectInputOnFirstFailureCallback = GetRejectInputOnFirstFailure;
        public static IAsyncResult BeginGetRejectInputOnFirstFailure(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getRejectInputOnFirstFailureCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetRejectInputOnFirstFailure(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetRejectInputOnFirstFailure(result);
        }
        public static System.Boolean EndGetRejectInputOnFirstFailure(IAsyncResult result)
        {
            return getRejectInputOnFirstFailureCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetRejectInputOnFirstFailureAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetRejectInputOnFirstFailure,
                EndGetRejectInputOnFirstFailure,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setRejectInputOnFirstFailureInternal = (x, v) => x.RejectInputOnFirstFailure = v;
        public static void SetRejectInputOnFirstFailure(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRejectInputOnFirstFailureInternal, target, value);
            else
                setRejectInputOnFirstFailureInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setRejectInputOnFirstFailureCallback = SetRejectInputOnFirstFailure;
        public static IAsyncResult BeginSetRejectInputOnFirstFailure(this System.Windows.Forms.MaskedTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setRejectInputOnFirstFailureCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRejectInputOnFirstFailure(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetRejectInputOnFirstFailure(result);
        }
        public static void EndSetRejectInputOnFirstFailure(IAsyncResult result)
        {
            setRejectInputOnFirstFailureCallback.EndInvoke(result);
        }
        public static Task SetRejectInputOnFirstFailureAsync(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Boolean>(
                BeginSetRejectInputOnFirstFailure,
                EndSetRejectInputOnFirstFailure,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getResetOnPromptInternal = (x) => x.ResetOnPrompt;
        public static System.Boolean GetResetOnPrompt(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getResetOnPromptInternal, target);
            else
                return getResetOnPromptInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getResetOnPromptCallback = GetResetOnPrompt;
        public static IAsyncResult BeginGetResetOnPrompt(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getResetOnPromptCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetResetOnPrompt(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetResetOnPrompt(result);
        }
        public static System.Boolean EndGetResetOnPrompt(IAsyncResult result)
        {
            return getResetOnPromptCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetResetOnPromptAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetResetOnPrompt,
                EndGetResetOnPrompt,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setResetOnPromptInternal = (x, v) => x.ResetOnPrompt = v;
        public static void SetResetOnPrompt(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setResetOnPromptInternal, target, value);
            else
                setResetOnPromptInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setResetOnPromptCallback = SetResetOnPrompt;
        public static IAsyncResult BeginSetResetOnPrompt(this System.Windows.Forms.MaskedTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setResetOnPromptCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetResetOnPrompt(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetResetOnPrompt(result);
        }
        public static void EndSetResetOnPrompt(IAsyncResult result)
        {
            setResetOnPromptCallback.EndInvoke(result);
        }
        public static Task SetResetOnPromptAsync(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Boolean>(
                BeginSetResetOnPrompt,
                EndSetResetOnPrompt,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getResetOnSpaceInternal = (x) => x.ResetOnSpace;
        public static System.Boolean GetResetOnSpace(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getResetOnSpaceInternal, target);
            else
                return getResetOnSpaceInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getResetOnSpaceCallback = GetResetOnSpace;
        public static IAsyncResult BeginGetResetOnSpace(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getResetOnSpaceCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetResetOnSpace(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetResetOnSpace(result);
        }
        public static System.Boolean EndGetResetOnSpace(IAsyncResult result)
        {
            return getResetOnSpaceCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetResetOnSpaceAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetResetOnSpace,
                EndGetResetOnSpace,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setResetOnSpaceInternal = (x, v) => x.ResetOnSpace = v;
        public static void SetResetOnSpace(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setResetOnSpaceInternal, target, value);
            else
                setResetOnSpaceInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setResetOnSpaceCallback = SetResetOnSpace;
        public static IAsyncResult BeginSetResetOnSpace(this System.Windows.Forms.MaskedTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setResetOnSpaceCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetResetOnSpace(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetResetOnSpace(result);
        }
        public static void EndSetResetOnSpace(IAsyncResult result)
        {
            setResetOnSpaceCallback.EndInvoke(result);
        }
        public static Task SetResetOnSpaceAsync(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Boolean>(
                BeginSetResetOnSpace,
                EndSetResetOnSpace,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getSkipLiteralsInternal = (x) => x.SkipLiterals;
        public static System.Boolean GetSkipLiterals(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getSkipLiteralsInternal, target);
            else
                return getSkipLiteralsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Boolean> getSkipLiteralsCallback = GetSkipLiterals;
        public static IAsyncResult BeginGetSkipLiterals(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getSkipLiteralsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetSkipLiterals(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetSkipLiterals(result);
        }
        public static System.Boolean EndGetSkipLiterals(IAsyncResult result)
        {
            return getSkipLiteralsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetSkipLiteralsAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetSkipLiterals,
                EndGetSkipLiterals,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setSkipLiteralsInternal = (x, v) => x.SkipLiterals = v;
        public static void SetSkipLiterals(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSkipLiteralsInternal, target, value);
            else
                setSkipLiteralsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Boolean> setSkipLiteralsCallback = SetSkipLiterals;
        public static IAsyncResult BeginSetSkipLiterals(this System.Windows.Forms.MaskedTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setSkipLiteralsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSkipLiterals(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetSkipLiterals(result);
        }
        public static void EndSetSkipLiterals(IAsyncResult result)
        {
            setSkipLiteralsCallback.EndInvoke(result);
        }
        public static Task SetSkipLiteralsAsync(this System.Windows.Forms.MaskedTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Boolean>(
                BeginSetSkipLiterals,
                EndSetSkipLiterals,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat> getTextMaskFormatInternal = (x) => x.TextMaskFormat;
        public static System.Windows.Forms.MaskFormat GetTextMaskFormat(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.MaskFormat)target.Invoke(getTextMaskFormatInternal, target);
            else
                return getTextMaskFormatInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat> getTextMaskFormatCallback = GetTextMaskFormat;
        public static IAsyncResult BeginGetTextMaskFormat(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getTextMaskFormatCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.MaskFormat EndGetTextMaskFormat(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetTextMaskFormat(result);
        }
        public static System.Windows.Forms.MaskFormat EndGetTextMaskFormat(IAsyncResult result)
        {
            return getTextMaskFormatCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.MaskFormat> GetTextMaskFormatAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Windows.Forms.MaskFormat>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetTextMaskFormat,
                EndGetTextMaskFormat,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat> setTextMaskFormatInternal = (x, v) => x.TextMaskFormat = v;
        public static void SetTextMaskFormat(this System.Windows.Forms.MaskedTextBox target, System.Windows.Forms.MaskFormat value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTextMaskFormatInternal, target, value);
            else
                setTextMaskFormatInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat> setTextMaskFormatCallback = SetTextMaskFormat;
        public static IAsyncResult BeginSetTextMaskFormat(this System.Windows.Forms.MaskedTextBox target, System.Windows.Forms.MaskFormat value, AsyncCallback callback, object state)
        {
            return setTextMaskFormatCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTextMaskFormat(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetTextMaskFormat(result);
        }
        public static void EndSetTextMaskFormat(IAsyncResult result)
        {
            setTextMaskFormatCallback.EndInvoke(result);
        }
        public static Task SetTextMaskFormatAsync(this System.Windows.Forms.MaskedTextBox target, System.Windows.Forms.MaskFormat value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Windows.Forms.MaskFormat>(
                BeginSetTextMaskFormat,
                EndSetTextMaskFormat,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Type> getValidatingTypeInternal = (x) => x.ValidatingType;
        public static System.Type GetValidatingType(this System.Windows.Forms.MaskedTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Type)target.Invoke(getValidatingTypeInternal, target);
            else
                return getValidatingTypeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MaskedTextBox, System.Type> getValidatingTypeCallback = GetValidatingType;
        public static IAsyncResult BeginGetValidatingType(this System.Windows.Forms.MaskedTextBox target, AsyncCallback callback, object state)
        {
            return getValidatingTypeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Type EndGetValidatingType(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            return EndGetValidatingType(result);
        }
        public static System.Type EndGetValidatingType(IAsyncResult result)
        {
            return getValidatingTypeCallback.EndInvoke(result);
        }
        public static Task<System.Type> GetValidatingTypeAsync(this System.Windows.Forms.MaskedTextBox target)
        {
            return Task<System.Type>.Factory.FromAsync<System.Windows.Forms.MaskedTextBox>(
                BeginGetValidatingType,
                EndGetValidatingType,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Type> setValidatingTypeInternal = (x, v) => x.ValidatingType = v;
        public static void SetValidatingType(this System.Windows.Forms.MaskedTextBox target, System.Type value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setValidatingTypeInternal, target, value);
            else
                setValidatingTypeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MaskedTextBox, System.Type> setValidatingTypeCallback = SetValidatingType;
        public static IAsyncResult BeginSetValidatingType(this System.Windows.Forms.MaskedTextBox target, System.Type value, AsyncCallback callback, object state)
        {
            return setValidatingTypeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetValidatingType(this System.Windows.Forms.MaskedTextBox target, IAsyncResult result)
        {
            EndSetValidatingType(result);
        }
        public static void EndSetValidatingType(IAsyncResult result)
        {
            setValidatingTypeCallback.EndInvoke(result);
        }
        public static Task SetValidatingTypeAsync(this System.Windows.Forms.MaskedTextBox target, System.Type value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MaskedTextBox, System.Type>(
                BeginSetValidatingType,
                EndSetValidatingType,
                target, value, null);
        }


        private static readonly Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.DataFormats.Format, System.Boolean> canPaste1Internal = (c, clipFormat) => c.CanPaste(clipFormat);
        public static System.Boolean CanPaste(this System.Windows.Forms.RichTextBox __control__, System.Windows.Forms.DataFormats.Format clipFormat)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(canPaste1Internal, __control__, clipFormat);
            else
                return canPaste1Internal.Invoke(__control__, clipFormat);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.DataFormats.Format, System.Boolean> canPaste1Callback = CanPaste;
        public static IAsyncResult BeginCanPaste1(this System.Windows.Forms.RichTextBox __control__, System.Windows.Forms.DataFormats.Format clipFormat, AsyncCallback callback, object state)
        {
            return canPaste1Callback.BeginInvoke(__control__, clipFormat, callback, state);
        }
        public static System.Boolean EndCanPaste1(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndCanPaste1(result);
        }
        public static System.Boolean EndCanPaste1(IAsyncResult result)
        {
            return canPaste1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> CanPasteAsync(this System.Windows.Forms.RichTextBox __control__, System.Windows.Forms.DataFormats.Format clipFormat)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Windows.Forms.DataFormats.Format>(
                (Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.DataFormats.Format, AsyncCallback, object, IAsyncResult>)BeginCanPaste1,
                (Func<IAsyncResult, System.Boolean>)EndCanPaste1,
                __control__, clipFormat, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Drawing.Bitmap, System.Drawing.Rectangle> drawToBitmap3Internal = (c, bitmap, targetBounds) => c.DrawToBitmap(bitmap, targetBounds);
        public static void DrawToBitmap(this System.Windows.Forms.RichTextBox __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(drawToBitmap3Internal, __control__, bitmap, targetBounds);
            else
                drawToBitmap3Internal.Invoke(__control__, bitmap, targetBounds);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Drawing.Bitmap, System.Drawing.Rectangle> drawToBitmap3Callback = DrawToBitmap;
        public static IAsyncResult BeginDrawToBitmap3(this System.Windows.Forms.RichTextBox __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds, AsyncCallback callback, object state)
        {
            return drawToBitmap3Callback.BeginInvoke(__control__, bitmap, targetBounds, callback, state);
        }
        public static void EndDrawToBitmap3(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            EndDrawToBitmap3(result);
        }
        public static void EndDrawToBitmap3(IAsyncResult result)
        {
            drawToBitmap3Callback.EndInvoke(result);
        }
        public static Task DrawToBitmapAsync(this System.Windows.Forms.RichTextBox __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Drawing.Bitmap, System.Drawing.Rectangle>(
                (Func<System.Windows.Forms.RichTextBox, System.Drawing.Bitmap, System.Drawing.Rectangle, AsyncCallback, object, IAsyncResult>)BeginDrawToBitmap3,
                (Action<IAsyncResult>)EndDrawToBitmap3,
                __control__, bitmap, targetBounds, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.String, System.Int32> find1Internal = (c, str) => c.Find(str);
        public static System.Int32 Find(this System.Windows.Forms.RichTextBox __control__, System.String str)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(find1Internal, __control__, str);
            else
                return find1Internal.Invoke(__control__, str);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.String, System.Int32> find1Callback = Find;
        public static IAsyncResult BeginFind1(this System.Windows.Forms.RichTextBox __control__, System.String str, AsyncCallback callback, object state)
        {
            return find1Callback.BeginInvoke(__control__, str, callback, state);
        }
        public static System.Int32 EndFind1(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndFind1(result);
        }
        public static System.Int32 EndFind1(IAsyncResult result)
        {
            return find1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindAsync(this System.Windows.Forms.RichTextBox __control__, System.String str)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.String>(
                (Func<System.Windows.Forms.RichTextBox, System.String, AsyncCallback, object, IAsyncResult>)BeginFind1,
                (Func<IAsyncResult, System.Int32>)EndFind1,
                __control__, str, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxFinds, System.Int32> find2Internal = (c, str, options) => c.Find(str, options);
        public static System.Int32 Find(this System.Windows.Forms.RichTextBox __control__, System.String str, System.Windows.Forms.RichTextBoxFinds options)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(find2Internal, __control__, str, options);
            else
                return find2Internal.Invoke(__control__, str, options);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxFinds, System.Int32> find2Callback = Find;
        public static IAsyncResult BeginFind2(this System.Windows.Forms.RichTextBox __control__, System.String str, System.Windows.Forms.RichTextBoxFinds options, AsyncCallback callback, object state)
        {
            return find2Callback.BeginInvoke(__control__, str, options, callback, state);
        }
        public static System.Int32 EndFind2(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndFind2(result);
        }
        public static System.Int32 EndFind2(IAsyncResult result)
        {
            return find2Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindAsync(this System.Windows.Forms.RichTextBox __control__, System.String str, System.Windows.Forms.RichTextBoxFinds options)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxFinds>(
                (Func<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxFinds, AsyncCallback, object, IAsyncResult>)BeginFind2,
                (Func<IAsyncResult, System.Int32>)EndFind2,
                __control__, str, options, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.String, System.Int32, System.Windows.Forms.RichTextBoxFinds, System.Int32> find3Internal = (c, str, start, options) => c.Find(str, start, options);
        public static System.Int32 Find(this System.Windows.Forms.RichTextBox __control__, System.String str, System.Int32 start, System.Windows.Forms.RichTextBoxFinds options)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(find3Internal, __control__, str, start, options);
            else
                return find3Internal.Invoke(__control__, str, start, options);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.String, System.Int32, System.Windows.Forms.RichTextBoxFinds, System.Int32> find3Callback = Find;
        public static IAsyncResult BeginFind3(this System.Windows.Forms.RichTextBox __control__, System.String str, System.Int32 start, System.Windows.Forms.RichTextBoxFinds options, AsyncCallback callback, object state)
        {
            return find3Callback.BeginInvoke(__control__, str, start, options, callback, state);
        }
        public static System.Int32 EndFind3(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndFind3(result);
        }
        public static System.Int32 EndFind3(IAsyncResult result)
        {
            return find3Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindAsync(this System.Windows.Forms.RichTextBox __control__, System.String str, System.Int32 start, System.Windows.Forms.RichTextBoxFinds options)
        {
            return Task<System.Int32>.Factory.FromAsync(
                BeginFind3(__control__, str, start, options, null, null),
                (Func<IAsyncResult, System.Int32>)EndFind3);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.String, System.Int32, System.Int32, System.Windows.Forms.RichTextBoxFinds, System.Int32> find4Internal = (c, str, start, end, options) => c.Find(str, start, end, options);
        public static System.Int32 Find(this System.Windows.Forms.RichTextBox __control__, System.String str, System.Int32 start, System.Int32 end, System.Windows.Forms.RichTextBoxFinds options)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(find4Internal, __control__, str, start, end, options);
            else
                return find4Internal.Invoke(__control__, str, start, end, options);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.String, System.Int32, System.Int32, System.Windows.Forms.RichTextBoxFinds, System.Int32> find4Callback = Find;
        public static IAsyncResult BeginFind4(this System.Windows.Forms.RichTextBox __control__, System.String str, System.Int32 start, System.Int32 end, System.Windows.Forms.RichTextBoxFinds options, AsyncCallback callback, object state)
        {
            return find4Callback.BeginInvoke(__control__, str, start, end, options, callback, state);
        }
        public static System.Int32 EndFind4(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndFind4(result);
        }
        public static System.Int32 EndFind4(IAsyncResult result)
        {
            return find4Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindAsync(this System.Windows.Forms.RichTextBox __control__, System.String str, System.Int32 start, System.Int32 end, System.Windows.Forms.RichTextBoxFinds options)
        {
            return Task<System.Int32>.Factory.FromAsync(
                BeginFind4(__control__, str, start, end, options, null, null),
                (Func<IAsyncResult, System.Int32>)EndFind4);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Char[], System.Int32> find5Internal = (c, characterSet) => c.Find(characterSet);
        public static System.Int32 Find(this System.Windows.Forms.RichTextBox __control__, System.Char[] characterSet)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(find5Internal, __control__, characterSet);
            else
                return find5Internal.Invoke(__control__, characterSet);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Char[], System.Int32> find5Callback = Find;
        public static IAsyncResult BeginFind5(this System.Windows.Forms.RichTextBox __control__, System.Char[] characterSet, AsyncCallback callback, object state)
        {
            return find5Callback.BeginInvoke(__control__, characterSet, callback, state);
        }
        public static System.Int32 EndFind5(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndFind5(result);
        }
        public static System.Int32 EndFind5(IAsyncResult result)
        {
            return find5Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindAsync(this System.Windows.Forms.RichTextBox __control__, System.Char[] characterSet)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Char[]>(
                (Func<System.Windows.Forms.RichTextBox, System.Char[], AsyncCallback, object, IAsyncResult>)BeginFind5,
                (Func<IAsyncResult, System.Int32>)EndFind5,
                __control__, characterSet, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Char[], System.Int32, System.Int32> find6Internal = (c, characterSet, start) => c.Find(characterSet, start);
        public static System.Int32 Find(this System.Windows.Forms.RichTextBox __control__, System.Char[] characterSet, System.Int32 start)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(find6Internal, __control__, characterSet, start);
            else
                return find6Internal.Invoke(__control__, characterSet, start);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Char[], System.Int32, System.Int32> find6Callback = Find;
        public static IAsyncResult BeginFind6(this System.Windows.Forms.RichTextBox __control__, System.Char[] characterSet, System.Int32 start, AsyncCallback callback, object state)
        {
            return find6Callback.BeginInvoke(__control__, characterSet, start, callback, state);
        }
        public static System.Int32 EndFind6(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndFind6(result);
        }
        public static System.Int32 EndFind6(IAsyncResult result)
        {
            return find6Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindAsync(this System.Windows.Forms.RichTextBox __control__, System.Char[] characterSet, System.Int32 start)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Char[], System.Int32>(
                (Func<System.Windows.Forms.RichTextBox, System.Char[], System.Int32, AsyncCallback, object, IAsyncResult>)BeginFind6,
                (Func<IAsyncResult, System.Int32>)EndFind6,
                __control__, characterSet, start, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Char[], System.Int32, System.Int32, System.Int32> find7Internal = (c, characterSet, start, end) => c.Find(characterSet, start, end);
        public static System.Int32 Find(this System.Windows.Forms.RichTextBox __control__, System.Char[] characterSet, System.Int32 start, System.Int32 end)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(find7Internal, __control__, characterSet, start, end);
            else
                return find7Internal.Invoke(__control__, characterSet, start, end);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Char[], System.Int32, System.Int32, System.Int32> find7Callback = Find;
        public static IAsyncResult BeginFind7(this System.Windows.Forms.RichTextBox __control__, System.Char[] characterSet, System.Int32 start, System.Int32 end, AsyncCallback callback, object state)
        {
            return find7Callback.BeginInvoke(__control__, characterSet, start, end, callback, state);
        }
        public static System.Int32 EndFind7(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndFind7(result);
        }
        public static System.Int32 EndFind7(IAsyncResult result)
        {
            return find7Callback.EndInvoke(result);
        }
        public static Task<System.Int32> FindAsync(this System.Windows.Forms.RichTextBox __control__, System.Char[] characterSet, System.Int32 start, System.Int32 end)
        {
            return Task<System.Int32>.Factory.FromAsync(
                BeginFind7(__control__, characterSet, start, end, null, null),
                (Func<IAsyncResult, System.Int32>)EndFind7);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Drawing.Point, System.Int32> getCharIndexFromPosition3Internal = (c, pt) => c.GetCharIndexFromPosition(pt);
        public static System.Int32 GetCharIndexFromPosition(this System.Windows.Forms.RichTextBox __control__, System.Drawing.Point pt)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getCharIndexFromPosition3Internal, __control__, pt);
            else
                return getCharIndexFromPosition3Internal.Invoke(__control__, pt);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Drawing.Point, System.Int32> getCharIndexFromPosition3Callback = GetCharIndexFromPosition;
        public static IAsyncResult BeginGetCharIndexFromPosition3(this System.Windows.Forms.RichTextBox __control__, System.Drawing.Point pt, AsyncCallback callback, object state)
        {
            return getCharIndexFromPosition3Callback.BeginInvoke(__control__, pt, callback, state);
        }
        public static System.Int32 EndGetCharIndexFromPosition3(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndGetCharIndexFromPosition3(result);
        }
        public static System.Int32 EndGetCharIndexFromPosition3(IAsyncResult result)
        {
            return getCharIndexFromPosition3Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetCharIndexFromPositionAsync(this System.Windows.Forms.RichTextBox __control__, System.Drawing.Point pt)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Drawing.Point>(
                (Func<System.Windows.Forms.RichTextBox, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginGetCharIndexFromPosition3,
                (Func<IAsyncResult, System.Int32>)EndGetCharIndexFromPosition3,
                __control__, pt, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32, System.Int32> getLineFromCharIndex3Internal = (c, index) => c.GetLineFromCharIndex(index);
        public static System.Int32 GetLineFromCharIndex(this System.Windows.Forms.RichTextBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getLineFromCharIndex3Internal, __control__, index);
            else
                return getLineFromCharIndex3Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32, System.Int32> getLineFromCharIndex3Callback = GetLineFromCharIndex;
        public static IAsyncResult BeginGetLineFromCharIndex3(this System.Windows.Forms.RichTextBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getLineFromCharIndex3Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Int32 EndGetLineFromCharIndex3(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndGetLineFromCharIndex3(result);
        }
        public static System.Int32 EndGetLineFromCharIndex3(IAsyncResult result)
        {
            return getLineFromCharIndex3Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetLineFromCharIndexAsync(this System.Windows.Forms.RichTextBox __control__, System.Int32 index)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Int32>(
                (Func<System.Windows.Forms.RichTextBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetLineFromCharIndex3,
                (Func<IAsyncResult, System.Int32>)EndGetLineFromCharIndex3,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32, System.Drawing.Point> getPositionFromCharIndex3Internal = (c, index) => c.GetPositionFromCharIndex(index);
        public static System.Drawing.Point GetPositionFromCharIndex(this System.Windows.Forms.RichTextBox __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Point)__control__.Invoke(getPositionFromCharIndex3Internal, __control__, index);
            else
                return getPositionFromCharIndex3Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32, System.Drawing.Point> getPositionFromCharIndex3Callback = GetPositionFromCharIndex;
        public static IAsyncResult BeginGetPositionFromCharIndex3(this System.Windows.Forms.RichTextBox __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getPositionFromCharIndex3Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Drawing.Point EndGetPositionFromCharIndex3(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            return EndGetPositionFromCharIndex3(result);
        }
        public static System.Drawing.Point EndGetPositionFromCharIndex3(IAsyncResult result)
        {
            return getPositionFromCharIndex3Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> GetPositionFromCharIndexAsync(this System.Windows.Forms.RichTextBox __control__, System.Int32 index)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Int32>(
                (Func<System.Windows.Forms.RichTextBox, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetPositionFromCharIndex3,
                (Func<IAsyncResult, System.Drawing.Point>)EndGetPositionFromCharIndex3,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.String> loadFile1Internal = (c, path) => c.LoadFile(path);
        public static void LoadFile(this System.Windows.Forms.RichTextBox __control__, System.String path)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(loadFile1Internal, __control__, path);
            else
                loadFile1Internal.Invoke(__control__, path);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.String> loadFile1Callback = LoadFile;
        public static IAsyncResult BeginLoadFile1(this System.Windows.Forms.RichTextBox __control__, System.String path, AsyncCallback callback, object state)
        {
            return loadFile1Callback.BeginInvoke(__control__, path, callback, state);
        }
        public static void EndLoadFile1(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            EndLoadFile1(result);
        }
        public static void EndLoadFile1(IAsyncResult result)
        {
            loadFile1Callback.EndInvoke(result);
        }
        public static Task LoadFileAsync(this System.Windows.Forms.RichTextBox __control__, System.String path)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.String>(
                (Func<System.Windows.Forms.RichTextBox, System.String, AsyncCallback, object, IAsyncResult>)BeginLoadFile1,
                (Action<IAsyncResult>)EndLoadFile1,
                __control__, path, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxStreamType> loadFile2Internal = (c, path, fileType) => c.LoadFile(path, fileType);
        public static void LoadFile(this System.Windows.Forms.RichTextBox __control__, System.String path, System.Windows.Forms.RichTextBoxStreamType fileType)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(loadFile2Internal, __control__, path, fileType);
            else
                loadFile2Internal.Invoke(__control__, path, fileType);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxStreamType> loadFile2Callback = LoadFile;
        public static IAsyncResult BeginLoadFile2(this System.Windows.Forms.RichTextBox __control__, System.String path, System.Windows.Forms.RichTextBoxStreamType fileType, AsyncCallback callback, object state)
        {
            return loadFile2Callback.BeginInvoke(__control__, path, fileType, callback, state);
        }
        public static void EndLoadFile2(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            EndLoadFile2(result);
        }
        public static void EndLoadFile2(IAsyncResult result)
        {
            loadFile2Callback.EndInvoke(result);
        }
        public static Task LoadFileAsync(this System.Windows.Forms.RichTextBox __control__, System.String path, System.Windows.Forms.RichTextBoxStreamType fileType)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxStreamType>(
                (Func<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxStreamType, AsyncCallback, object, IAsyncResult>)BeginLoadFile2,
                (Action<IAsyncResult>)EndLoadFile2,
                __control__, path, fileType, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.IO.Stream, System.Windows.Forms.RichTextBoxStreamType> loadFile3Internal = (c, data, fileType) => c.LoadFile(data, fileType);
        public static void LoadFile(this System.Windows.Forms.RichTextBox __control__, System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(loadFile3Internal, __control__, data, fileType);
            else
                loadFile3Internal.Invoke(__control__, data, fileType);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.IO.Stream, System.Windows.Forms.RichTextBoxStreamType> loadFile3Callback = LoadFile;
        public static IAsyncResult BeginLoadFile3(this System.Windows.Forms.RichTextBox __control__, System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType, AsyncCallback callback, object state)
        {
            return loadFile3Callback.BeginInvoke(__control__, data, fileType, callback, state);
        }
        public static void EndLoadFile3(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            EndLoadFile3(result);
        }
        public static void EndLoadFile3(IAsyncResult result)
        {
            loadFile3Callback.EndInvoke(result);
        }
        public static Task LoadFileAsync(this System.Windows.Forms.RichTextBox __control__, System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.IO.Stream, System.Windows.Forms.RichTextBoxStreamType>(
                (Func<System.Windows.Forms.RichTextBox, System.IO.Stream, System.Windows.Forms.RichTextBoxStreamType, AsyncCallback, object, IAsyncResult>)BeginLoadFile3,
                (Action<IAsyncResult>)EndLoadFile3,
                __control__, data, fileType, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Windows.Forms.DataFormats.Format> paste3Internal = (c, clipFormat) => c.Paste(clipFormat);
        public static void Paste(this System.Windows.Forms.RichTextBox __control__, System.Windows.Forms.DataFormats.Format clipFormat)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(paste3Internal, __control__, clipFormat);
            else
                paste3Internal.Invoke(__control__, clipFormat);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Windows.Forms.DataFormats.Format> paste3Callback = Paste;
        public static IAsyncResult BeginPaste3(this System.Windows.Forms.RichTextBox __control__, System.Windows.Forms.DataFormats.Format clipFormat, AsyncCallback callback, object state)
        {
            return paste3Callback.BeginInvoke(__control__, clipFormat, callback, state);
        }
        public static void EndPaste3(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            EndPaste3(result);
        }
        public static void EndPaste3(IAsyncResult result)
        {
            paste3Callback.EndInvoke(result);
        }
        public static Task PasteAsync(this System.Windows.Forms.RichTextBox __control__, System.Windows.Forms.DataFormats.Format clipFormat)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Windows.Forms.DataFormats.Format>(
                (Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.DataFormats.Format, AsyncCallback, object, IAsyncResult>)BeginPaste3,
                (Action<IAsyncResult>)EndPaste3,
                __control__, clipFormat, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox> redo1Internal = (c) => c.Redo();
        public static void Redo(this System.Windows.Forms.RichTextBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(redo1Internal, __control__);
            else
                redo1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox> redo1Callback = Redo;
        public static IAsyncResult BeginRedo1(this System.Windows.Forms.RichTextBox __control__, AsyncCallback callback, object state)
        {
            return redo1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndRedo1(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            EndRedo1(result);
        }
        public static void EndRedo1(IAsyncResult result)
        {
            redo1Callback.EndInvoke(result);
        }
        public static Task RedoAsync(this System.Windows.Forms.RichTextBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                (Func<System.Windows.Forms.RichTextBox, AsyncCallback, object, IAsyncResult>)BeginRedo1,
                (Action<IAsyncResult>)EndRedo1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.String> saveFile1Internal = (c, path) => c.SaveFile(path);
        public static void SaveFile(this System.Windows.Forms.RichTextBox __control__, System.String path)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(saveFile1Internal, __control__, path);
            else
                saveFile1Internal.Invoke(__control__, path);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.String> saveFile1Callback = SaveFile;
        public static IAsyncResult BeginSaveFile1(this System.Windows.Forms.RichTextBox __control__, System.String path, AsyncCallback callback, object state)
        {
            return saveFile1Callback.BeginInvoke(__control__, path, callback, state);
        }
        public static void EndSaveFile1(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            EndSaveFile1(result);
        }
        public static void EndSaveFile1(IAsyncResult result)
        {
            saveFile1Callback.EndInvoke(result);
        }
        public static Task SaveFileAsync(this System.Windows.Forms.RichTextBox __control__, System.String path)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.String>(
                (Func<System.Windows.Forms.RichTextBox, System.String, AsyncCallback, object, IAsyncResult>)BeginSaveFile1,
                (Action<IAsyncResult>)EndSaveFile1,
                __control__, path, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxStreamType> saveFile2Internal = (c, path, fileType) => c.SaveFile(path, fileType);
        public static void SaveFile(this System.Windows.Forms.RichTextBox __control__, System.String path, System.Windows.Forms.RichTextBoxStreamType fileType)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(saveFile2Internal, __control__, path, fileType);
            else
                saveFile2Internal.Invoke(__control__, path, fileType);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxStreamType> saveFile2Callback = SaveFile;
        public static IAsyncResult BeginSaveFile2(this System.Windows.Forms.RichTextBox __control__, System.String path, System.Windows.Forms.RichTextBoxStreamType fileType, AsyncCallback callback, object state)
        {
            return saveFile2Callback.BeginInvoke(__control__, path, fileType, callback, state);
        }
        public static void EndSaveFile2(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            EndSaveFile2(result);
        }
        public static void EndSaveFile2(IAsyncResult result)
        {
            saveFile2Callback.EndInvoke(result);
        }
        public static Task SaveFileAsync(this System.Windows.Forms.RichTextBox __control__, System.String path, System.Windows.Forms.RichTextBoxStreamType fileType)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxStreamType>(
                (Func<System.Windows.Forms.RichTextBox, System.String, System.Windows.Forms.RichTextBoxStreamType, AsyncCallback, object, IAsyncResult>)BeginSaveFile2,
                (Action<IAsyncResult>)EndSaveFile2,
                __control__, path, fileType, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.IO.Stream, System.Windows.Forms.RichTextBoxStreamType> saveFile3Internal = (c, data, fileType) => c.SaveFile(data, fileType);
        public static void SaveFile(this System.Windows.Forms.RichTextBox __control__, System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(saveFile3Internal, __control__, data, fileType);
            else
                saveFile3Internal.Invoke(__control__, data, fileType);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.IO.Stream, System.Windows.Forms.RichTextBoxStreamType> saveFile3Callback = SaveFile;
        public static IAsyncResult BeginSaveFile3(this System.Windows.Forms.RichTextBox __control__, System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType, AsyncCallback callback, object state)
        {
            return saveFile3Callback.BeginInvoke(__control__, data, fileType, callback, state);
        }
        public static void EndSaveFile3(this System.Windows.Forms.RichTextBox __control__, IAsyncResult result)
        {
            EndSaveFile3(result);
        }
        public static void EndSaveFile3(IAsyncResult result)
        {
            saveFile3Callback.EndInvoke(result);
        }
        public static Task SaveFileAsync(this System.Windows.Forms.RichTextBox __control__, System.IO.Stream data, System.Windows.Forms.RichTextBoxStreamType fileType)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.IO.Stream, System.Windows.Forms.RichTextBoxStreamType>(
                (Func<System.Windows.Forms.RichTextBox, System.IO.Stream, System.Windows.Forms.RichTextBoxStreamType, AsyncCallback, object, IAsyncResult>)BeginSaveFile3,
                (Action<IAsyncResult>)EndSaveFile3,
                __control__, data, fileType, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getAutoWordSelectionInternal = (x) => x.AutoWordSelection;
        public static System.Boolean GetAutoWordSelection(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoWordSelectionInternal, target);
            else
                return getAutoWordSelectionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getAutoWordSelectionCallback = GetAutoWordSelection;
        public static IAsyncResult BeginGetAutoWordSelection(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getAutoWordSelectionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoWordSelection(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetAutoWordSelection(result);
        }
        public static System.Boolean EndGetAutoWordSelection(IAsyncResult result)
        {
            return getAutoWordSelectionCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoWordSelectionAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetAutoWordSelection,
                EndGetAutoWordSelection,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setAutoWordSelectionInternal = (x, v) => x.AutoWordSelection = v;
        public static void SetAutoWordSelection(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoWordSelectionInternal, target, value);
            else
                setAutoWordSelectionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setAutoWordSelectionCallback = SetAutoWordSelection;
        public static IAsyncResult BeginSetAutoWordSelection(this System.Windows.Forms.RichTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoWordSelectionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoWordSelection(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetAutoWordSelection(result);
        }
        public static void EndSetAutoWordSelection(IAsyncResult result)
        {
            setAutoWordSelectionCallback.EndInvoke(result);
        }
        public static Task SetAutoWordSelectionAsync(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Boolean>(
                BeginSetAutoWordSelection,
                EndSetAutoWordSelection,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getBulletIndentInternal = (x) => x.BulletIndent;
        public static System.Int32 GetBulletIndent(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getBulletIndentInternal, target);
            else
                return getBulletIndentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getBulletIndentCallback = GetBulletIndent;
        public static IAsyncResult BeginGetBulletIndent(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getBulletIndentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetBulletIndent(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetBulletIndent(result);
        }
        public static System.Int32 EndGetBulletIndent(IAsyncResult result)
        {
            return getBulletIndentCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetBulletIndentAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetBulletIndent,
                EndGetBulletIndent,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setBulletIndentInternal = (x, v) => x.BulletIndent = v;
        public static void SetBulletIndent(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBulletIndentInternal, target, value);
            else
                setBulletIndentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setBulletIndentCallback = SetBulletIndent;
        public static IAsyncResult BeginSetBulletIndent(this System.Windows.Forms.RichTextBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setBulletIndentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBulletIndent(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetBulletIndent(result);
        }
        public static void EndSetBulletIndent(IAsyncResult result)
        {
            setBulletIndentCallback.EndInvoke(result);
        }
        public static Task SetBulletIndentAsync(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Int32>(
                BeginSetBulletIndent,
                EndSetBulletIndent,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getCanRedoInternal = (x) => x.CanRedo;
        public static System.Boolean GetCanRedo(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCanRedoInternal, target);
            else
                return getCanRedoInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getCanRedoCallback = GetCanRedo;
        public static IAsyncResult BeginGetCanRedo(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getCanRedoCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCanRedo(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetCanRedo(result);
        }
        public static System.Boolean EndGetCanRedo(IAsyncResult result)
        {
            return getCanRedoCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCanRedoAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetCanRedo,
                EndGetCanRedo,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getDetectUrlsInternal = (x) => x.DetectUrls;
        public static System.Boolean GetDetectUrls(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getDetectUrlsInternal, target);
            else
                return getDetectUrlsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getDetectUrlsCallback = GetDetectUrls;
        public static IAsyncResult BeginGetDetectUrls(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getDetectUrlsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetDetectUrls(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetDetectUrls(result);
        }
        public static System.Boolean EndGetDetectUrls(IAsyncResult result)
        {
            return getDetectUrlsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetDetectUrlsAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetDetectUrls,
                EndGetDetectUrls,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setDetectUrlsInternal = (x, v) => x.DetectUrls = v;
        public static void SetDetectUrls(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDetectUrlsInternal, target, value);
            else
                setDetectUrlsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setDetectUrlsCallback = SetDetectUrls;
        public static IAsyncResult BeginSetDetectUrls(this System.Windows.Forms.RichTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setDetectUrlsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDetectUrls(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetDetectUrls(result);
        }
        public static void EndSetDetectUrls(IAsyncResult result)
        {
            setDetectUrlsCallback.EndInvoke(result);
        }
        public static Task SetDetectUrlsAsync(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Boolean>(
                BeginSetDetectUrls,
                EndSetDetectUrls,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getEnableAutoDragDropInternal = (x) => x.EnableAutoDragDrop;
        public static System.Boolean GetEnableAutoDragDrop(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getEnableAutoDragDropInternal, target);
            else
                return getEnableAutoDragDropInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getEnableAutoDragDropCallback = GetEnableAutoDragDrop;
        public static IAsyncResult BeginGetEnableAutoDragDrop(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getEnableAutoDragDropCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetEnableAutoDragDrop(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetEnableAutoDragDrop(result);
        }
        public static System.Boolean EndGetEnableAutoDragDrop(IAsyncResult result)
        {
            return getEnableAutoDragDropCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetEnableAutoDragDropAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetEnableAutoDragDrop,
                EndGetEnableAutoDragDrop,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setEnableAutoDragDropInternal = (x, v) => x.EnableAutoDragDrop = v;
        public static void SetEnableAutoDragDrop(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setEnableAutoDragDropInternal, target, value);
            else
                setEnableAutoDragDropInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setEnableAutoDragDropCallback = SetEnableAutoDragDrop;
        public static IAsyncResult BeginSetEnableAutoDragDrop(this System.Windows.Forms.RichTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setEnableAutoDragDropCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetEnableAutoDragDrop(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetEnableAutoDragDrop(result);
        }
        public static void EndSetEnableAutoDragDrop(IAsyncResult result)
        {
            setEnableAutoDragDropCallback.EndInvoke(result);
        }
        public static Task SetEnableAutoDragDropAsync(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Boolean>(
                BeginSetEnableAutoDragDrop,
                EndSetEnableAutoDragDrop,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.RichTextBoxLanguageOptions> getLanguageOptionInternal = (x) => x.LanguageOption;
        public static System.Windows.Forms.RichTextBoxLanguageOptions GetLanguageOption(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.RichTextBoxLanguageOptions)target.Invoke(getLanguageOptionInternal, target);
            else
                return getLanguageOptionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.RichTextBoxLanguageOptions> getLanguageOptionCallback = GetLanguageOption;
        public static IAsyncResult BeginGetLanguageOption(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getLanguageOptionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.RichTextBoxLanguageOptions EndGetLanguageOption(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetLanguageOption(result);
        }
        public static System.Windows.Forms.RichTextBoxLanguageOptions EndGetLanguageOption(IAsyncResult result)
        {
            return getLanguageOptionCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.RichTextBoxLanguageOptions> GetLanguageOptionAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Windows.Forms.RichTextBoxLanguageOptions>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetLanguageOption,
                EndGetLanguageOption,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Windows.Forms.RichTextBoxLanguageOptions> setLanguageOptionInternal = (x, v) => x.LanguageOption = v;
        public static void SetLanguageOption(this System.Windows.Forms.RichTextBox target, System.Windows.Forms.RichTextBoxLanguageOptions value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLanguageOptionInternal, target, value);
            else
                setLanguageOptionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Windows.Forms.RichTextBoxLanguageOptions> setLanguageOptionCallback = SetLanguageOption;
        public static IAsyncResult BeginSetLanguageOption(this System.Windows.Forms.RichTextBox target, System.Windows.Forms.RichTextBoxLanguageOptions value, AsyncCallback callback, object state)
        {
            return setLanguageOptionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLanguageOption(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetLanguageOption(result);
        }
        public static void EndSetLanguageOption(IAsyncResult result)
        {
            setLanguageOptionCallback.EndInvoke(result);
        }
        public static Task SetLanguageOptionAsync(this System.Windows.Forms.RichTextBox target, System.Windows.Forms.RichTextBoxLanguageOptions value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Windows.Forms.RichTextBoxLanguageOptions>(
                BeginSetLanguageOption,
                EndSetLanguageOption,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.String> getRedoActionNameInternal = (x) => x.RedoActionName;
        public static System.String GetRedoActionName(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getRedoActionNameInternal, target);
            else
                return getRedoActionNameInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.String> getRedoActionNameCallback = GetRedoActionName;
        public static IAsyncResult BeginGetRedoActionName(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getRedoActionNameCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetRedoActionName(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetRedoActionName(result);
        }
        public static System.String EndGetRedoActionName(IAsyncResult result)
        {
            return getRedoActionNameCallback.EndInvoke(result);
        }
        public static Task<System.String> GetRedoActionNameAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetRedoActionName,
                EndGetRedoActionName,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getRichTextShortcutsEnabledInternal = (x) => x.RichTextShortcutsEnabled;
        public static System.Boolean GetRichTextShortcutsEnabled(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getRichTextShortcutsEnabledInternal, target);
            else
                return getRichTextShortcutsEnabledInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getRichTextShortcutsEnabledCallback = GetRichTextShortcutsEnabled;
        public static IAsyncResult BeginGetRichTextShortcutsEnabled(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getRichTextShortcutsEnabledCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetRichTextShortcutsEnabled(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetRichTextShortcutsEnabled(result);
        }
        public static System.Boolean EndGetRichTextShortcutsEnabled(IAsyncResult result)
        {
            return getRichTextShortcutsEnabledCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetRichTextShortcutsEnabledAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetRichTextShortcutsEnabled,
                EndGetRichTextShortcutsEnabled,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setRichTextShortcutsEnabledInternal = (x, v) => x.RichTextShortcutsEnabled = v;
        public static void SetRichTextShortcutsEnabled(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRichTextShortcutsEnabledInternal, target, value);
            else
                setRichTextShortcutsEnabledInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setRichTextShortcutsEnabledCallback = SetRichTextShortcutsEnabled;
        public static IAsyncResult BeginSetRichTextShortcutsEnabled(this System.Windows.Forms.RichTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setRichTextShortcutsEnabledCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRichTextShortcutsEnabled(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetRichTextShortcutsEnabled(result);
        }
        public static void EndSetRichTextShortcutsEnabled(IAsyncResult result)
        {
            setRichTextShortcutsEnabledCallback.EndInvoke(result);
        }
        public static Task SetRichTextShortcutsEnabledAsync(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Boolean>(
                BeginSetRichTextShortcutsEnabled,
                EndSetRichTextShortcutsEnabled,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getRightMarginInternal = (x) => x.RightMargin;
        public static System.Int32 GetRightMargin(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getRightMarginInternal, target);
            else
                return getRightMarginInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getRightMarginCallback = GetRightMargin;
        public static IAsyncResult BeginGetRightMargin(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getRightMarginCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetRightMargin(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetRightMargin(result);
        }
        public static System.Int32 EndGetRightMargin(IAsyncResult result)
        {
            return getRightMarginCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetRightMarginAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetRightMargin,
                EndGetRightMargin,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setRightMarginInternal = (x, v) => x.RightMargin = v;
        public static void SetRightMargin(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRightMarginInternal, target, value);
            else
                setRightMarginInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setRightMarginCallback = SetRightMargin;
        public static IAsyncResult BeginSetRightMargin(this System.Windows.Forms.RichTextBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setRightMarginCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRightMargin(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetRightMargin(result);
        }
        public static void EndSetRightMargin(IAsyncResult result)
        {
            setRightMarginCallback.EndInvoke(result);
        }
        public static Task SetRightMarginAsync(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Int32>(
                BeginSetRightMargin,
                EndSetRightMargin,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.String> getRtfInternal = (x) => x.Rtf;
        public static System.String GetRtf(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getRtfInternal, target);
            else
                return getRtfInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.String> getRtfCallback = GetRtf;
        public static IAsyncResult BeginGetRtf(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getRtfCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetRtf(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetRtf(result);
        }
        public static System.String EndGetRtf(IAsyncResult result)
        {
            return getRtfCallback.EndInvoke(result);
        }
        public static Task<System.String> GetRtfAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetRtf,
                EndGetRtf,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.String> setRtfInternal = (x, v) => x.Rtf = v;
        public static void SetRtf(this System.Windows.Forms.RichTextBox target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRtfInternal, target, value);
            else
                setRtfInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.String> setRtfCallback = SetRtf;
        public static IAsyncResult BeginSetRtf(this System.Windows.Forms.RichTextBox target, System.String value, AsyncCallback callback, object state)
        {
            return setRtfCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRtf(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetRtf(result);
        }
        public static void EndSetRtf(IAsyncResult result)
        {
            setRtfCallback.EndInvoke(result);
        }
        public static Task SetRtfAsync(this System.Windows.Forms.RichTextBox target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.String>(
                BeginSetRtf,
                EndSetRtf,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.HorizontalAlignment> getSelectionAlignmentInternal = (x) => x.SelectionAlignment;
        public static System.Windows.Forms.HorizontalAlignment GetSelectionAlignment(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.HorizontalAlignment)target.Invoke(getSelectionAlignmentInternal, target);
            else
                return getSelectionAlignmentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.HorizontalAlignment> getSelectionAlignmentCallback = GetSelectionAlignment;
        public static IAsyncResult BeginGetSelectionAlignment(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionAlignmentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.HorizontalAlignment EndGetSelectionAlignment(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionAlignment(result);
        }
        public static System.Windows.Forms.HorizontalAlignment EndGetSelectionAlignment(IAsyncResult result)
        {
            return getSelectionAlignmentCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.HorizontalAlignment> GetSelectionAlignmentAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Windows.Forms.HorizontalAlignment>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionAlignment,
                EndGetSelectionAlignment,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Windows.Forms.HorizontalAlignment> setSelectionAlignmentInternal = (x, v) => x.SelectionAlignment = v;
        public static void SetSelectionAlignment(this System.Windows.Forms.RichTextBox target, System.Windows.Forms.HorizontalAlignment value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionAlignmentInternal, target, value);
            else
                setSelectionAlignmentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Windows.Forms.HorizontalAlignment> setSelectionAlignmentCallback = SetSelectionAlignment;
        public static IAsyncResult BeginSetSelectionAlignment(this System.Windows.Forms.RichTextBox target, System.Windows.Forms.HorizontalAlignment value, AsyncCallback callback, object state)
        {
            return setSelectionAlignmentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionAlignment(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionAlignment(result);
        }
        public static void EndSetSelectionAlignment(IAsyncResult result)
        {
            setSelectionAlignmentCallback.EndInvoke(result);
        }
        public static Task SetSelectionAlignmentAsync(this System.Windows.Forms.RichTextBox target, System.Windows.Forms.HorizontalAlignment value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Windows.Forms.HorizontalAlignment>(
                BeginSetSelectionAlignment,
                EndSetSelectionAlignment,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getSelectionBulletInternal = (x) => x.SelectionBullet;
        public static System.Boolean GetSelectionBullet(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getSelectionBulletInternal, target);
            else
                return getSelectionBulletInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getSelectionBulletCallback = GetSelectionBullet;
        public static IAsyncResult BeginGetSelectionBullet(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionBulletCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetSelectionBullet(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionBullet(result);
        }
        public static System.Boolean EndGetSelectionBullet(IAsyncResult result)
        {
            return getSelectionBulletCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetSelectionBulletAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionBullet,
                EndGetSelectionBullet,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setSelectionBulletInternal = (x, v) => x.SelectionBullet = v;
        public static void SetSelectionBullet(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionBulletInternal, target, value);
            else
                setSelectionBulletInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setSelectionBulletCallback = SetSelectionBullet;
        public static IAsyncResult BeginSetSelectionBullet(this System.Windows.Forms.RichTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setSelectionBulletCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionBullet(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionBullet(result);
        }
        public static void EndSetSelectionBullet(IAsyncResult result)
        {
            setSelectionBulletCallback.EndInvoke(result);
        }
        public static Task SetSelectionBulletAsync(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Boolean>(
                BeginSetSelectionBullet,
                EndSetSelectionBullet,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getSelectionCharOffsetInternal = (x) => x.SelectionCharOffset;
        public static System.Int32 GetSelectionCharOffset(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSelectionCharOffsetInternal, target);
            else
                return getSelectionCharOffsetInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getSelectionCharOffsetCallback = GetSelectionCharOffset;
        public static IAsyncResult BeginGetSelectionCharOffset(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionCharOffsetCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSelectionCharOffset(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionCharOffset(result);
        }
        public static System.Int32 EndGetSelectionCharOffset(IAsyncResult result)
        {
            return getSelectionCharOffsetCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSelectionCharOffsetAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionCharOffset,
                EndGetSelectionCharOffset,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setSelectionCharOffsetInternal = (x, v) => x.SelectionCharOffset = v;
        public static void SetSelectionCharOffset(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionCharOffsetInternal, target, value);
            else
                setSelectionCharOffsetInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setSelectionCharOffsetCallback = SetSelectionCharOffset;
        public static IAsyncResult BeginSetSelectionCharOffset(this System.Windows.Forms.RichTextBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSelectionCharOffsetCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionCharOffset(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionCharOffset(result);
        }
        public static void EndSetSelectionCharOffset(IAsyncResult result)
        {
            setSelectionCharOffsetCallback.EndInvoke(result);
        }
        public static Task SetSelectionCharOffsetAsync(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Int32>(
                BeginSetSelectionCharOffset,
                EndSetSelectionCharOffset,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Drawing.Color> getSelectionColorInternal = (x) => x.SelectionColor;
        public static System.Drawing.Color GetSelectionColor(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getSelectionColorInternal, target);
            else
                return getSelectionColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Drawing.Color> getSelectionColorCallback = GetSelectionColor;
        public static IAsyncResult BeginGetSelectionColor(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetSelectionColor(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionColor(result);
        }
        public static System.Drawing.Color EndGetSelectionColor(IAsyncResult result)
        {
            return getSelectionColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetSelectionColorAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionColor,
                EndGetSelectionColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Drawing.Color> setSelectionColorInternal = (x, v) => x.SelectionColor = v;
        public static void SetSelectionColor(this System.Windows.Forms.RichTextBox target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionColorInternal, target, value);
            else
                setSelectionColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Drawing.Color> setSelectionColorCallback = SetSelectionColor;
        public static IAsyncResult BeginSetSelectionColor(this System.Windows.Forms.RichTextBox target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setSelectionColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionColor(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionColor(result);
        }
        public static void EndSetSelectionColor(IAsyncResult result)
        {
            setSelectionColorCallback.EndInvoke(result);
        }
        public static Task SetSelectionColorAsync(this System.Windows.Forms.RichTextBox target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Drawing.Color>(
                BeginSetSelectionColor,
                EndSetSelectionColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Drawing.Font> getSelectionFontInternal = (x) => x.SelectionFont;
        public static System.Drawing.Font GetSelectionFont(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Font)target.Invoke(getSelectionFontInternal, target);
            else
                return getSelectionFontInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Drawing.Font> getSelectionFontCallback = GetSelectionFont;
        public static IAsyncResult BeginGetSelectionFont(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionFontCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Font EndGetSelectionFont(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionFont(result);
        }
        public static System.Drawing.Font EndGetSelectionFont(IAsyncResult result)
        {
            return getSelectionFontCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Font> GetSelectionFontAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Drawing.Font>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionFont,
                EndGetSelectionFont,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Drawing.Font> setSelectionFontInternal = (x, v) => x.SelectionFont = v;
        public static void SetSelectionFont(this System.Windows.Forms.RichTextBox target, System.Drawing.Font value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionFontInternal, target, value);
            else
                setSelectionFontInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Drawing.Font> setSelectionFontCallback = SetSelectionFont;
        public static IAsyncResult BeginSetSelectionFont(this System.Windows.Forms.RichTextBox target, System.Drawing.Font value, AsyncCallback callback, object state)
        {
            return setSelectionFontCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionFont(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionFont(result);
        }
        public static void EndSetSelectionFont(IAsyncResult result)
        {
            setSelectionFontCallback.EndInvoke(result);
        }
        public static Task SetSelectionFontAsync(this System.Windows.Forms.RichTextBox target, System.Drawing.Font value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Drawing.Font>(
                BeginSetSelectionFont,
                EndSetSelectionFont,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getSelectionHangingIndentInternal = (x) => x.SelectionHangingIndent;
        public static System.Int32 GetSelectionHangingIndent(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSelectionHangingIndentInternal, target);
            else
                return getSelectionHangingIndentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getSelectionHangingIndentCallback = GetSelectionHangingIndent;
        public static IAsyncResult BeginGetSelectionHangingIndent(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionHangingIndentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSelectionHangingIndent(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionHangingIndent(result);
        }
        public static System.Int32 EndGetSelectionHangingIndent(IAsyncResult result)
        {
            return getSelectionHangingIndentCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSelectionHangingIndentAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionHangingIndent,
                EndGetSelectionHangingIndent,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setSelectionHangingIndentInternal = (x, v) => x.SelectionHangingIndent = v;
        public static void SetSelectionHangingIndent(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionHangingIndentInternal, target, value);
            else
                setSelectionHangingIndentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setSelectionHangingIndentCallback = SetSelectionHangingIndent;
        public static IAsyncResult BeginSetSelectionHangingIndent(this System.Windows.Forms.RichTextBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSelectionHangingIndentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionHangingIndent(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionHangingIndent(result);
        }
        public static void EndSetSelectionHangingIndent(IAsyncResult result)
        {
            setSelectionHangingIndentCallback.EndInvoke(result);
        }
        public static Task SetSelectionHangingIndentAsync(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Int32>(
                BeginSetSelectionHangingIndent,
                EndSetSelectionHangingIndent,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getSelectionIndentInternal = (x) => x.SelectionIndent;
        public static System.Int32 GetSelectionIndent(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSelectionIndentInternal, target);
            else
                return getSelectionIndentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getSelectionIndentCallback = GetSelectionIndent;
        public static IAsyncResult BeginGetSelectionIndent(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionIndentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSelectionIndent(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionIndent(result);
        }
        public static System.Int32 EndGetSelectionIndent(IAsyncResult result)
        {
            return getSelectionIndentCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSelectionIndentAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionIndent,
                EndGetSelectionIndent,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setSelectionIndentInternal = (x, v) => x.SelectionIndent = v;
        public static void SetSelectionIndent(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionIndentInternal, target, value);
            else
                setSelectionIndentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setSelectionIndentCallback = SetSelectionIndent;
        public static IAsyncResult BeginSetSelectionIndent(this System.Windows.Forms.RichTextBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSelectionIndentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionIndent(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionIndent(result);
        }
        public static void EndSetSelectionIndent(IAsyncResult result)
        {
            setSelectionIndentCallback.EndInvoke(result);
        }
        public static Task SetSelectionIndentAsync(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Int32>(
                BeginSetSelectionIndent,
                EndSetSelectionIndent,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getSelectionProtectedInternal = (x) => x.SelectionProtected;
        public static System.Boolean GetSelectionProtected(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getSelectionProtectedInternal, target);
            else
                return getSelectionProtectedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getSelectionProtectedCallback = GetSelectionProtected;
        public static IAsyncResult BeginGetSelectionProtected(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionProtectedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetSelectionProtected(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionProtected(result);
        }
        public static System.Boolean EndGetSelectionProtected(IAsyncResult result)
        {
            return getSelectionProtectedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetSelectionProtectedAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionProtected,
                EndGetSelectionProtected,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setSelectionProtectedInternal = (x, v) => x.SelectionProtected = v;
        public static void SetSelectionProtected(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionProtectedInternal, target, value);
            else
                setSelectionProtectedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setSelectionProtectedCallback = SetSelectionProtected;
        public static IAsyncResult BeginSetSelectionProtected(this System.Windows.Forms.RichTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setSelectionProtectedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionProtected(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionProtected(result);
        }
        public static void EndSetSelectionProtected(IAsyncResult result)
        {
            setSelectionProtectedCallback.EndInvoke(result);
        }
        public static Task SetSelectionProtectedAsync(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Boolean>(
                BeginSetSelectionProtected,
                EndSetSelectionProtected,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.String> getSelectedRtfInternal = (x) => x.SelectedRtf;
        public static System.String GetSelectedRtf(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getSelectedRtfInternal, target);
            else
                return getSelectedRtfInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.String> getSelectedRtfCallback = GetSelectedRtf;
        public static IAsyncResult BeginGetSelectedRtf(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectedRtfCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetSelectedRtf(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectedRtf(result);
        }
        public static System.String EndGetSelectedRtf(IAsyncResult result)
        {
            return getSelectedRtfCallback.EndInvoke(result);
        }
        public static Task<System.String> GetSelectedRtfAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectedRtf,
                EndGetSelectedRtf,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.String> setSelectedRtfInternal = (x, v) => x.SelectedRtf = v;
        public static void SetSelectedRtf(this System.Windows.Forms.RichTextBox target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedRtfInternal, target, value);
            else
                setSelectedRtfInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.String> setSelectedRtfCallback = SetSelectedRtf;
        public static IAsyncResult BeginSetSelectedRtf(this System.Windows.Forms.RichTextBox target, System.String value, AsyncCallback callback, object state)
        {
            return setSelectedRtfCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedRtf(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectedRtf(result);
        }
        public static void EndSetSelectedRtf(IAsyncResult result)
        {
            setSelectedRtfCallback.EndInvoke(result);
        }
        public static Task SetSelectedRtfAsync(this System.Windows.Forms.RichTextBox target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.String>(
                BeginSetSelectedRtf,
                EndSetSelectedRtf,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getSelectionRightIndentInternal = (x) => x.SelectionRightIndent;
        public static System.Int32 GetSelectionRightIndent(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSelectionRightIndentInternal, target);
            else
                return getSelectionRightIndentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32> getSelectionRightIndentCallback = GetSelectionRightIndent;
        public static IAsyncResult BeginGetSelectionRightIndent(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionRightIndentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSelectionRightIndent(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionRightIndent(result);
        }
        public static System.Int32 EndGetSelectionRightIndent(IAsyncResult result)
        {
            return getSelectionRightIndentCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSelectionRightIndentAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionRightIndent,
                EndGetSelectionRightIndent,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setSelectionRightIndentInternal = (x, v) => x.SelectionRightIndent = v;
        public static void SetSelectionRightIndent(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionRightIndentInternal, target, value);
            else
                setSelectionRightIndentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32> setSelectionRightIndentCallback = SetSelectionRightIndent;
        public static IAsyncResult BeginSetSelectionRightIndent(this System.Windows.Forms.RichTextBox target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSelectionRightIndentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionRightIndent(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionRightIndent(result);
        }
        public static void EndSetSelectionRightIndent(IAsyncResult result)
        {
            setSelectionRightIndentCallback.EndInvoke(result);
        }
        public static Task SetSelectionRightIndentAsync(this System.Windows.Forms.RichTextBox target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Int32>(
                BeginSetSelectionRightIndent,
                EndSetSelectionRightIndent,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32[]> getSelectionTabsInternal = (x) => x.SelectionTabs;
        public static System.Int32[] GetSelectionTabs(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32[])target.Invoke(getSelectionTabsInternal, target);
            else
                return getSelectionTabsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Int32[]> getSelectionTabsCallback = GetSelectionTabs;
        public static IAsyncResult BeginGetSelectionTabs(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionTabsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32[] EndGetSelectionTabs(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionTabs(result);
        }
        public static System.Int32[] EndGetSelectionTabs(IAsyncResult result)
        {
            return getSelectionTabsCallback.EndInvoke(result);
        }
        public static Task<System.Int32[]> GetSelectionTabsAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Int32[]>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionTabs,
                EndGetSelectionTabs,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32[]> setSelectionTabsInternal = (x, v) => x.SelectionTabs = v;
        public static void SetSelectionTabs(this System.Windows.Forms.RichTextBox target, System.Int32[] value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionTabsInternal, target, value);
            else
                setSelectionTabsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Int32[]> setSelectionTabsCallback = SetSelectionTabs;
        public static IAsyncResult BeginSetSelectionTabs(this System.Windows.Forms.RichTextBox target, System.Int32[] value, AsyncCallback callback, object state)
        {
            return setSelectionTabsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionTabs(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetSelectionTabs(result);
        }
        public static void EndSetSelectionTabs(IAsyncResult result)
        {
            setSelectionTabsCallback.EndInvoke(result);
        }
        public static Task SetSelectionTabsAsync(this System.Windows.Forms.RichTextBox target, System.Int32[] value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Int32[]>(
                BeginSetSelectionTabs,
                EndSetSelectionTabs,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.RichTextBoxSelectionTypes> getSelectionTypeInternal = (x) => x.SelectionType;
        public static System.Windows.Forms.RichTextBoxSelectionTypes GetSelectionType(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.RichTextBoxSelectionTypes)target.Invoke(getSelectionTypeInternal, target);
            else
                return getSelectionTypeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Windows.Forms.RichTextBoxSelectionTypes> getSelectionTypeCallback = GetSelectionType;
        public static IAsyncResult BeginGetSelectionType(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getSelectionTypeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.RichTextBoxSelectionTypes EndGetSelectionType(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetSelectionType(result);
        }
        public static System.Windows.Forms.RichTextBoxSelectionTypes EndGetSelectionType(IAsyncResult result)
        {
            return getSelectionTypeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.RichTextBoxSelectionTypes> GetSelectionTypeAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Windows.Forms.RichTextBoxSelectionTypes>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetSelectionType,
                EndGetSelectionType,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getShowSelectionMarginInternal = (x) => x.ShowSelectionMargin;
        public static System.Boolean GetShowSelectionMargin(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowSelectionMarginInternal, target);
            else
                return getShowSelectionMarginInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Boolean> getShowSelectionMarginCallback = GetShowSelectionMargin;
        public static IAsyncResult BeginGetShowSelectionMargin(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getShowSelectionMarginCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowSelectionMargin(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetShowSelectionMargin(result);
        }
        public static System.Boolean EndGetShowSelectionMargin(IAsyncResult result)
        {
            return getShowSelectionMarginCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowSelectionMarginAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetShowSelectionMargin,
                EndGetShowSelectionMargin,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setShowSelectionMarginInternal = (x, v) => x.ShowSelectionMargin = v;
        public static void SetShowSelectionMargin(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowSelectionMarginInternal, target, value);
            else
                setShowSelectionMarginInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Boolean> setShowSelectionMarginCallback = SetShowSelectionMargin;
        public static IAsyncResult BeginSetShowSelectionMargin(this System.Windows.Forms.RichTextBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowSelectionMarginCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowSelectionMargin(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetShowSelectionMargin(result);
        }
        public static void EndSetShowSelectionMargin(IAsyncResult result)
        {
            setShowSelectionMarginCallback.EndInvoke(result);
        }
        public static Task SetShowSelectionMarginAsync(this System.Windows.Forms.RichTextBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Boolean>(
                BeginSetShowSelectionMargin,
                EndSetShowSelectionMargin,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.String> getUndoActionNameInternal = (x) => x.UndoActionName;
        public static System.String GetUndoActionName(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getUndoActionNameInternal, target);
            else
                return getUndoActionNameInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.String> getUndoActionNameCallback = GetUndoActionName;
        public static IAsyncResult BeginGetUndoActionName(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getUndoActionNameCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetUndoActionName(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetUndoActionName(result);
        }
        public static System.String EndGetUndoActionName(IAsyncResult result)
        {
            return getUndoActionNameCallback.EndInvoke(result);
        }
        public static Task<System.String> GetUndoActionNameAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetUndoActionName,
                EndGetUndoActionName,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.RichTextBox, System.Single> getZoomFactorInternal = (x) => x.ZoomFactor;
        public static System.Single GetZoomFactor(this System.Windows.Forms.RichTextBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Single)target.Invoke(getZoomFactorInternal, target);
            else
                return getZoomFactorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.RichTextBox, System.Single> getZoomFactorCallback = GetZoomFactor;
        public static IAsyncResult BeginGetZoomFactor(this System.Windows.Forms.RichTextBox target, AsyncCallback callback, object state)
        {
            return getZoomFactorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Single EndGetZoomFactor(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            return EndGetZoomFactor(result);
        }
        public static System.Single EndGetZoomFactor(IAsyncResult result)
        {
            return getZoomFactorCallback.EndInvoke(result);
        }
        public static Task<System.Single> GetZoomFactorAsync(this System.Windows.Forms.RichTextBox target)
        {
            return Task<System.Single>.Factory.FromAsync<System.Windows.Forms.RichTextBox>(
                BeginGetZoomFactor,
                EndGetZoomFactor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.RichTextBox, System.Single> setZoomFactorInternal = (x, v) => x.ZoomFactor = v;
        public static void SetZoomFactor(this System.Windows.Forms.RichTextBox target, System.Single value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setZoomFactorInternal, target, value);
            else
                setZoomFactorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.RichTextBox, System.Single> setZoomFactorCallback = SetZoomFactor;
        public static IAsyncResult BeginSetZoomFactor(this System.Windows.Forms.RichTextBox target, System.Single value, AsyncCallback callback, object state)
        {
            return setZoomFactorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetZoomFactor(this System.Windows.Forms.RichTextBox target, IAsyncResult result)
        {
            EndSetZoomFactor(result);
        }
        public static void EndSetZoomFactor(IAsyncResult result)
        {
            setZoomFactorCallback.EndInvoke(result);
        }
        public static Task SetZoomFactorAsync(this System.Windows.Forms.RichTextBox target, System.Single value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.RichTextBox, System.Single>(
                BeginSetZoomFactor,
                EndSetZoomFactor,
                target, value, null);
        }


        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle, System.Windows.Forms.DataGridViewAdvancedBorderStyle, System.Boolean, System.Boolean, System.Windows.Forms.DataGridViewAdvancedBorderStyle> adjustColumnHeaderBorderStyle1Internal = (c, dataGridViewAdvancedBorderStyleInput, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn) => c.AdjustColumnHeaderBorderStyle(dataGridViewAdvancedBorderStyleInput, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn);
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, System.Boolean isFirstDisplayedColumn, System.Boolean isLastVisibleColumn)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DataGridViewAdvancedBorderStyle)__control__.Invoke(adjustColumnHeaderBorderStyle1Internal, __control__, dataGridViewAdvancedBorderStyleInput, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn);
            else
                return adjustColumnHeaderBorderStyle1Internal.Invoke(__control__, dataGridViewAdvancedBorderStyleInput, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle, System.Windows.Forms.DataGridViewAdvancedBorderStyle, System.Boolean, System.Boolean, System.Windows.Forms.DataGridViewAdvancedBorderStyle> adjustColumnHeaderBorderStyle1Callback = AdjustColumnHeaderBorderStyle;
        public static IAsyncResult BeginAdjustColumnHeaderBorderStyle1(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, System.Boolean isFirstDisplayedColumn, System.Boolean isLastVisibleColumn, AsyncCallback callback, object state)
        {
            return adjustColumnHeaderBorderStyle1Callback.BeginInvoke(__control__, dataGridViewAdvancedBorderStyleInput, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn, callback, state);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndAdjustColumnHeaderBorderStyle1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndAdjustColumnHeaderBorderStyle1(result);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndAdjustColumnHeaderBorderStyle1(IAsyncResult result)
        {
            return adjustColumnHeaderBorderStyle1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle> AdjustColumnHeaderBorderStyleAsync(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, System.Boolean isFirstDisplayedColumn, System.Boolean isLastVisibleColumn)
        {
            return Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle>.Factory.FromAsync(
                BeginAdjustColumnHeaderBorderStyle1(__control__, dataGridViewAdvancedBorderStyleInput, dataGridViewAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn, null, null),
                (Func<IAsyncResult, System.Windows.Forms.DataGridViewAdvancedBorderStyle>)EndAdjustColumnHeaderBorderStyle1);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean, System.Boolean> areAllCellsSelected1Internal = (c, includeInvisibleCells) => c.AreAllCellsSelected(includeInvisibleCells);
        public static System.Boolean AreAllCellsSelected(this System.Windows.Forms.DataGridView __control__, System.Boolean includeInvisibleCells)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(areAllCellsSelected1Internal, __control__, includeInvisibleCells);
            else
                return areAllCellsSelected1Internal.Invoke(__control__, includeInvisibleCells);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean, System.Boolean> areAllCellsSelected1Callback = AreAllCellsSelected;
        public static IAsyncResult BeginAreAllCellsSelected1(this System.Windows.Forms.DataGridView __control__, System.Boolean includeInvisibleCells, AsyncCallback callback, object state)
        {
            return areAllCellsSelected1Callback.BeginInvoke(__control__, includeInvisibleCells, callback, state);
        }
        public static System.Boolean EndAreAllCellsSelected1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndAreAllCellsSelected1(result);
        }
        public static System.Boolean EndAreAllCellsSelected1(IAsyncResult result)
        {
            return areAllCellsSelected1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> AreAllCellsSelectedAsync(this System.Windows.Forms.DataGridView __control__, System.Boolean includeInvisibleCells)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                (Func<System.Windows.Forms.DataGridView, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginAreAllCellsSelected1,
                (Func<IAsyncResult, System.Boolean>)EndAreAllCellsSelected1,
                __control__, includeInvisibleCells, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> autoResizeColumn1Internal = (c, columnIndex) => c.AutoResizeColumn(columnIndex);
        public static void AutoResizeColumn(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeColumn1Internal, __control__, columnIndex);
            else
                autoResizeColumn1Internal.Invoke(__control__, columnIndex);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> autoResizeColumn1Callback = AutoResizeColumn;
        public static IAsyncResult BeginAutoResizeColumn1(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, AsyncCallback callback, object state)
        {
            return autoResizeColumn1Callback.BeginInvoke(__control__, columnIndex, callback, state);
        }
        public static void EndAutoResizeColumn1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeColumn1(result);
        }
        public static void EndAutoResizeColumn1(IAsyncResult result)
        {
            autoResizeColumn1Callback.EndInvoke(result);
        }
        public static Task AutoResizeColumnAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, AsyncCallback, object, IAsyncResult>)BeginAutoResizeColumn1,
                (Action<IAsyncResult>)EndAutoResizeColumn1,
                __control__, columnIndex, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewAutoSizeColumnMode> autoResizeColumn2Internal = (c, columnIndex, autoSizeColumnMode) => c.AutoResizeColumn(columnIndex, autoSizeColumnMode);
        public static void AutoResizeColumn(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeColumn2Internal, __control__, columnIndex, autoSizeColumnMode);
            else
                autoResizeColumn2Internal.Invoke(__control__, columnIndex, autoSizeColumnMode);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewAutoSizeColumnMode> autoResizeColumn2Callback = AutoResizeColumn;
        public static IAsyncResult BeginAutoResizeColumn2(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode, AsyncCallback callback, object state)
        {
            return autoResizeColumn2Callback.BeginInvoke(__control__, columnIndex, autoSizeColumnMode, callback, state);
        }
        public static void EndAutoResizeColumn2(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeColumn2(result);
        }
        public static void EndAutoResizeColumn2(IAsyncResult result)
        {
            autoResizeColumn2Callback.EndInvoke(result);
        }
        public static Task AutoResizeColumnAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Windows.Forms.DataGridViewAutoSizeColumnMode autoSizeColumnMode)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewAutoSizeColumnMode>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewAutoSizeColumnMode, AsyncCallback, object, IAsyncResult>)BeginAutoResizeColumn2,
                (Action<IAsyncResult>)EndAutoResizeColumn2,
                __control__, columnIndex, autoSizeColumnMode, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView> autoResizeColumnHeadersHeight1Internal = (c) => c.AutoResizeColumnHeadersHeight();
        public static void AutoResizeColumnHeadersHeight(this System.Windows.Forms.DataGridView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeColumnHeadersHeight1Internal, __control__);
            else
                autoResizeColumnHeadersHeight1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGridView> autoResizeColumnHeadersHeight1Callback = AutoResizeColumnHeadersHeight;
        public static IAsyncResult BeginAutoResizeColumnHeadersHeight1(this System.Windows.Forms.DataGridView __control__, AsyncCallback callback, object state)
        {
            return autoResizeColumnHeadersHeight1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndAutoResizeColumnHeadersHeight1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeColumnHeadersHeight1(result);
        }
        public static void EndAutoResizeColumnHeadersHeight1(IAsyncResult result)
        {
            autoResizeColumnHeadersHeight1Callback.EndInvoke(result);
        }
        public static Task AutoResizeColumnHeadersHeightAsync(this System.Windows.Forms.DataGridView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                (Func<System.Windows.Forms.DataGridView, AsyncCallback, object, IAsyncResult>)BeginAutoResizeColumnHeadersHeight1,
                (Action<IAsyncResult>)EndAutoResizeColumnHeadersHeight1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> autoResizeColumnHeadersHeight2Internal = (c, columnIndex) => c.AutoResizeColumnHeadersHeight(columnIndex);
        public static void AutoResizeColumnHeadersHeight(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeColumnHeadersHeight2Internal, __control__, columnIndex);
            else
                autoResizeColumnHeadersHeight2Internal.Invoke(__control__, columnIndex);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> autoResizeColumnHeadersHeight2Callback = AutoResizeColumnHeadersHeight;
        public static IAsyncResult BeginAutoResizeColumnHeadersHeight2(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, AsyncCallback callback, object state)
        {
            return autoResizeColumnHeadersHeight2Callback.BeginInvoke(__control__, columnIndex, callback, state);
        }
        public static void EndAutoResizeColumnHeadersHeight2(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeColumnHeadersHeight2(result);
        }
        public static void EndAutoResizeColumnHeadersHeight2(IAsyncResult result)
        {
            autoResizeColumnHeadersHeight2Callback.EndInvoke(result);
        }
        public static Task AutoResizeColumnHeadersHeightAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, AsyncCallback, object, IAsyncResult>)BeginAutoResizeColumnHeadersHeight2,
                (Action<IAsyncResult>)EndAutoResizeColumnHeadersHeight2,
                __control__, columnIndex, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView> autoResizeColumns1Internal = (c) => c.AutoResizeColumns();
        public static void AutoResizeColumns(this System.Windows.Forms.DataGridView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeColumns1Internal, __control__);
            else
                autoResizeColumns1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGridView> autoResizeColumns1Callback = AutoResizeColumns;
        public static IAsyncResult BeginAutoResizeColumns1(this System.Windows.Forms.DataGridView __control__, AsyncCallback callback, object state)
        {
            return autoResizeColumns1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndAutoResizeColumns1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeColumns1(result);
        }
        public static void EndAutoResizeColumns1(IAsyncResult result)
        {
            autoResizeColumns1Callback.EndInvoke(result);
        }
        public static Task AutoResizeColumnsAsync(this System.Windows.Forms.DataGridView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                (Func<System.Windows.Forms.DataGridView, AsyncCallback, object, IAsyncResult>)BeginAutoResizeColumns1,
                (Action<IAsyncResult>)EndAutoResizeColumns1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeColumnsMode> autoResizeColumns2Internal = (c, autoSizeColumnsMode) => c.AutoResizeColumns(autoSizeColumnsMode);
        public static void AutoResizeColumns(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeColumns2Internal, __control__, autoSizeColumnsMode);
            else
                autoResizeColumns2Internal.Invoke(__control__, autoSizeColumnsMode);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeColumnsMode> autoResizeColumns2Callback = AutoResizeColumns;
        public static IAsyncResult BeginAutoResizeColumns2(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, AsyncCallback callback, object state)
        {
            return autoResizeColumns2Callback.BeginInvoke(__control__, autoSizeColumnsMode, callback, state);
        }
        public static void EndAutoResizeColumns2(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeColumns2(result);
        }
        public static void EndAutoResizeColumns2(IAsyncResult result)
        {
            autoResizeColumns2Callback.EndInvoke(result);
        }
        public static Task AutoResizeColumnsAsync(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewAutoSizeColumnsMode autoSizeColumnsMode)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeColumnsMode>(
                (Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeColumnsMode, AsyncCallback, object, IAsyncResult>)BeginAutoResizeColumns2,
                (Action<IAsyncResult>)EndAutoResizeColumns2,
                __control__, autoSizeColumnsMode, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> autoResizeRow1Internal = (c, rowIndex) => c.AutoResizeRow(rowIndex);
        public static void AutoResizeRow(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeRow1Internal, __control__, rowIndex);
            else
                autoResizeRow1Internal.Invoke(__control__, rowIndex);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> autoResizeRow1Callback = AutoResizeRow;
        public static IAsyncResult BeginAutoResizeRow1(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, AsyncCallback callback, object state)
        {
            return autoResizeRow1Callback.BeginInvoke(__control__, rowIndex, callback, state);
        }
        public static void EndAutoResizeRow1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeRow1(result);
        }
        public static void EndAutoResizeRow1(IAsyncResult result)
        {
            autoResizeRow1Callback.EndInvoke(result);
        }
        public static Task AutoResizeRowAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, AsyncCallback, object, IAsyncResult>)BeginAutoResizeRow1,
                (Action<IAsyncResult>)EndAutoResizeRow1,
                __control__, rowIndex, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewAutoSizeRowMode> autoResizeRow2Internal = (c, rowIndex, autoSizeRowMode) => c.AutoResizeRow(rowIndex, autoSizeRowMode);
        public static void AutoResizeRow(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeRow2Internal, __control__, rowIndex, autoSizeRowMode);
            else
                autoResizeRow2Internal.Invoke(__control__, rowIndex, autoSizeRowMode);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewAutoSizeRowMode> autoResizeRow2Callback = AutoResizeRow;
        public static IAsyncResult BeginAutoResizeRow2(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode, AsyncCallback callback, object state)
        {
            return autoResizeRow2Callback.BeginInvoke(__control__, rowIndex, autoSizeRowMode, callback, state);
        }
        public static void EndAutoResizeRow2(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeRow2(result);
        }
        public static void EndAutoResizeRow2(IAsyncResult result)
        {
            autoResizeRow2Callback.EndInvoke(result);
        }
        public static Task AutoResizeRowAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Windows.Forms.DataGridViewAutoSizeRowMode autoSizeRowMode)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewAutoSizeRowMode>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewAutoSizeRowMode, AsyncCallback, object, IAsyncResult>)BeginAutoResizeRow2,
                (Action<IAsyncResult>)EndAutoResizeRow2,
                __control__, rowIndex, autoSizeRowMode, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode> autoResizeRowHeadersWidth1Internal = (c, rowHeadersWidthSizeMode) => c.AutoResizeRowHeadersWidth(rowHeadersWidthSizeMode);
        public static void AutoResizeRowHeadersWidth(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeRowHeadersWidth1Internal, __control__, rowHeadersWidthSizeMode);
            else
                autoResizeRowHeadersWidth1Internal.Invoke(__control__, rowHeadersWidthSizeMode);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode> autoResizeRowHeadersWidth1Callback = AutoResizeRowHeadersWidth;
        public static IAsyncResult BeginAutoResizeRowHeadersWidth1(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, AsyncCallback callback, object state)
        {
            return autoResizeRowHeadersWidth1Callback.BeginInvoke(__control__, rowHeadersWidthSizeMode, callback, state);
        }
        public static void EndAutoResizeRowHeadersWidth1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeRowHeadersWidth1(result);
        }
        public static void EndAutoResizeRowHeadersWidth1(IAsyncResult result)
        {
            autoResizeRowHeadersWidth1Callback.EndInvoke(result);
        }
        public static Task AutoResizeRowHeadersWidthAsync(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode>(
                (Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode, AsyncCallback, object, IAsyncResult>)BeginAutoResizeRowHeadersWidth1,
                (Action<IAsyncResult>)EndAutoResizeRowHeadersWidth1,
                __control__, rowHeadersWidthSizeMode, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode> autoResizeRowHeadersWidth2Internal = (c, rowIndex, rowHeadersWidthSizeMode) => c.AutoResizeRowHeadersWidth(rowIndex, rowHeadersWidthSizeMode);
        public static void AutoResizeRowHeadersWidth(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeRowHeadersWidth2Internal, __control__, rowIndex, rowHeadersWidthSizeMode);
            else
                autoResizeRowHeadersWidth2Internal.Invoke(__control__, rowIndex, rowHeadersWidthSizeMode);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode> autoResizeRowHeadersWidth2Callback = AutoResizeRowHeadersWidth;
        public static IAsyncResult BeginAutoResizeRowHeadersWidth2(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, AsyncCallback callback, object state)
        {
            return autoResizeRowHeadersWidth2Callback.BeginInvoke(__control__, rowIndex, rowHeadersWidthSizeMode, callback, state);
        }
        public static void EndAutoResizeRowHeadersWidth2(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeRowHeadersWidth2(result);
        }
        public static void EndAutoResizeRowHeadersWidth2(IAsyncResult result)
        {
            autoResizeRowHeadersWidth2Callback.EndInvoke(result);
        }
        public static Task AutoResizeRowHeadersWidthAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode, AsyncCallback, object, IAsyncResult>)BeginAutoResizeRowHeadersWidth2,
                (Action<IAsyncResult>)EndAutoResizeRowHeadersWidth2,
                __control__, rowIndex, rowHeadersWidthSizeMode, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView> autoResizeRows1Internal = (c) => c.AutoResizeRows();
        public static void AutoResizeRows(this System.Windows.Forms.DataGridView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeRows1Internal, __control__);
            else
                autoResizeRows1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGridView> autoResizeRows1Callback = AutoResizeRows;
        public static IAsyncResult BeginAutoResizeRows1(this System.Windows.Forms.DataGridView __control__, AsyncCallback callback, object state)
        {
            return autoResizeRows1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndAutoResizeRows1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeRows1(result);
        }
        public static void EndAutoResizeRows1(IAsyncResult result)
        {
            autoResizeRows1Callback.EndInvoke(result);
        }
        public static Task AutoResizeRowsAsync(this System.Windows.Forms.DataGridView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                (Func<System.Windows.Forms.DataGridView, AsyncCallback, object, IAsyncResult>)BeginAutoResizeRows1,
                (Action<IAsyncResult>)EndAutoResizeRows1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeRowsMode> autoResizeRows2Internal = (c, autoSizeRowsMode) => c.AutoResizeRows(autoSizeRowsMode);
        public static void AutoResizeRows(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeRows2Internal, __control__, autoSizeRowsMode);
            else
                autoResizeRows2Internal.Invoke(__control__, autoSizeRowsMode);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeRowsMode> autoResizeRows2Callback = AutoResizeRows;
        public static IAsyncResult BeginAutoResizeRows2(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode, AsyncCallback callback, object state)
        {
            return autoResizeRows2Callback.BeginInvoke(__control__, autoSizeRowsMode, callback, state);
        }
        public static void EndAutoResizeRows2(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndAutoResizeRows2(result);
        }
        public static void EndAutoResizeRows2(IAsyncResult result)
        {
            autoResizeRows2Callback.EndInvoke(result);
        }
        public static Task AutoResizeRowsAsync(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewAutoSizeRowsMode autoSizeRowsMode)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeRowsMode>(
                (Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeRowsMode, AsyncCallback, object, IAsyncResult>)BeginAutoResizeRows2,
                (Action<IAsyncResult>)EndAutoResizeRows2,
                __control__, autoSizeRowsMode, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> cancelEdit1Internal = (c) => c.CancelEdit();
        public static System.Boolean CancelEdit(this System.Windows.Forms.DataGridView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(cancelEdit1Internal, __control__);
            else
                return cancelEdit1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> cancelEdit1Callback = CancelEdit;
        public static IAsyncResult BeginCancelEdit1(this System.Windows.Forms.DataGridView __control__, AsyncCallback callback, object state)
        {
            return cancelEdit1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndCancelEdit1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndCancelEdit1(result);
        }
        public static System.Boolean EndCancelEdit1(IAsyncResult result)
        {
            return cancelEdit1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> CancelEditAsync(this System.Windows.Forms.DataGridView __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                (Func<System.Windows.Forms.DataGridView, AsyncCallback, object, IAsyncResult>)BeginCancelEdit1,
                (Func<IAsyncResult, System.Boolean>)EndCancelEdit1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView> clearSelection1Internal = (c) => c.ClearSelection();
        public static void ClearSelection(this System.Windows.Forms.DataGridView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(clearSelection1Internal, __control__);
            else
                clearSelection1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGridView> clearSelection1Callback = ClearSelection;
        public static IAsyncResult BeginClearSelection1(this System.Windows.Forms.DataGridView __control__, AsyncCallback callback, object state)
        {
            return clearSelection1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndClearSelection1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndClearSelection1(result);
        }
        public static void EndClearSelection1(IAsyncResult result)
        {
            clearSelection1Callback.EndInvoke(result);
        }
        public static Task ClearSelectionAsync(this System.Windows.Forms.DataGridView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                (Func<System.Windows.Forms.DataGridView, AsyncCallback, object, IAsyncResult>)BeginClearSelection1,
                (Action<IAsyncResult>)EndClearSelection1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewDataErrorContexts, System.Boolean> commitEdit1Internal = (c, context) => c.CommitEdit(context);
        public static System.Boolean CommitEdit(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewDataErrorContexts context)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(commitEdit1Internal, __control__, context);
            else
                return commitEdit1Internal.Invoke(__control__, context);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewDataErrorContexts, System.Boolean> commitEdit1Callback = CommitEdit;
        public static IAsyncResult BeginCommitEdit1(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewDataErrorContexts context, AsyncCallback callback, object state)
        {
            return commitEdit1Callback.BeginInvoke(__control__, context, callback, state);
        }
        public static System.Boolean EndCommitEdit1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndCommitEdit1(result);
        }
        public static System.Boolean EndCommitEdit1(IAsyncResult result)
        {
            return commitEdit1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> CommitEditAsync(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewDataErrorContexts context)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewDataErrorContexts>(
                (Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewDataErrorContexts, AsyncCallback, object, IAsyncResult>)BeginCommitEdit1,
                (Func<IAsyncResult, System.Boolean>)EndCommitEdit1,
                __control__, context, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean, System.Int32> displayedColumnCount1Internal = (c, includePartialColumns) => c.DisplayedColumnCount(includePartialColumns);
        public static System.Int32 DisplayedColumnCount(this System.Windows.Forms.DataGridView __control__, System.Boolean includePartialColumns)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(displayedColumnCount1Internal, __control__, includePartialColumns);
            else
                return displayedColumnCount1Internal.Invoke(__control__, includePartialColumns);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean, System.Int32> displayedColumnCount1Callback = DisplayedColumnCount;
        public static IAsyncResult BeginDisplayedColumnCount1(this System.Windows.Forms.DataGridView __control__, System.Boolean includePartialColumns, AsyncCallback callback, object state)
        {
            return displayedColumnCount1Callback.BeginInvoke(__control__, includePartialColumns, callback, state);
        }
        public static System.Int32 EndDisplayedColumnCount1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndDisplayedColumnCount1(result);
        }
        public static System.Int32 EndDisplayedColumnCount1(IAsyncResult result)
        {
            return displayedColumnCount1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> DisplayedColumnCountAsync(this System.Windows.Forms.DataGridView __control__, System.Boolean includePartialColumns)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                (Func<System.Windows.Forms.DataGridView, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginDisplayedColumnCount1,
                (Func<IAsyncResult, System.Int32>)EndDisplayedColumnCount1,
                __control__, includePartialColumns, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean, System.Int32> displayedRowCount1Internal = (c, includePartialRow) => c.DisplayedRowCount(includePartialRow);
        public static System.Int32 DisplayedRowCount(this System.Windows.Forms.DataGridView __control__, System.Boolean includePartialRow)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(displayedRowCount1Internal, __control__, includePartialRow);
            else
                return displayedRowCount1Internal.Invoke(__control__, includePartialRow);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean, System.Int32> displayedRowCount1Callback = DisplayedRowCount;
        public static IAsyncResult BeginDisplayedRowCount1(this System.Windows.Forms.DataGridView __control__, System.Boolean includePartialRow, AsyncCallback callback, object state)
        {
            return displayedRowCount1Callback.BeginInvoke(__control__, includePartialRow, callback, state);
        }
        public static System.Int32 EndDisplayedRowCount1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndDisplayedRowCount1(result);
        }
        public static System.Int32 EndDisplayedRowCount1(IAsyncResult result)
        {
            return displayedRowCount1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> DisplayedRowCountAsync(this System.Windows.Forms.DataGridView __control__, System.Boolean includePartialRow)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                (Func<System.Windows.Forms.DataGridView, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginDisplayedRowCount1,
                (Func<IAsyncResult, System.Int32>)EndDisplayedRowCount1,
                __control__, includePartialRow, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewElementStates, System.Int32> getCellCount1Internal = (c, includeFilter) => c.GetCellCount(includeFilter);
        public static System.Int32 GetCellCount(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewElementStates includeFilter)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getCellCount1Internal, __control__, includeFilter);
            else
                return getCellCount1Internal.Invoke(__control__, includeFilter);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewElementStates, System.Int32> getCellCount1Callback = GetCellCount;
        public static IAsyncResult BeginGetCellCount1(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewElementStates includeFilter, AsyncCallback callback, object state)
        {
            return getCellCount1Callback.BeginInvoke(__control__, includeFilter, callback, state);
        }
        public static System.Int32 EndGetCellCount1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndGetCellCount1(result);
        }
        public static System.Int32 EndGetCellCount1(IAsyncResult result)
        {
            return getCellCount1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetCellCountAsync(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewElementStates includeFilter)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewElementStates>(
                (Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewElementStates, AsyncCallback, object, IAsyncResult>)BeginGetCellCount1,
                (Func<IAsyncResult, System.Int32>)EndGetCellCount1,
                __control__, includeFilter, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32, System.Int32, System.Boolean, System.Drawing.Rectangle> getCellDisplayRectangle1Internal = (c, columnIndex, rowIndex, cutOverflow) => c.GetCellDisplayRectangle(columnIndex, rowIndex, cutOverflow);
        public static System.Drawing.Rectangle GetCellDisplayRectangle(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex, System.Boolean cutOverflow)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getCellDisplayRectangle1Internal, __control__, columnIndex, rowIndex, cutOverflow);
            else
                return getCellDisplayRectangle1Internal.Invoke(__control__, columnIndex, rowIndex, cutOverflow);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32, System.Int32, System.Boolean, System.Drawing.Rectangle> getCellDisplayRectangle1Callback = GetCellDisplayRectangle;
        public static IAsyncResult BeginGetCellDisplayRectangle1(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex, System.Boolean cutOverflow, AsyncCallback callback, object state)
        {
            return getCellDisplayRectangle1Callback.BeginInvoke(__control__, columnIndex, rowIndex, cutOverflow, callback, state);
        }
        public static System.Drawing.Rectangle EndGetCellDisplayRectangle1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndGetCellDisplayRectangle1(result);
        }
        public static System.Drawing.Rectangle EndGetCellDisplayRectangle1(IAsyncResult result)
        {
            return getCellDisplayRectangle1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetCellDisplayRectangleAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex, System.Boolean cutOverflow)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync(
                BeginGetCellDisplayRectangle1(__control__, columnIndex, rowIndex, cutOverflow, null, null),
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetCellDisplayRectangle1);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataObject> getClipboardContent1Internal = (c) => c.GetClipboardContent();
        public static System.Windows.Forms.DataObject GetClipboardContent(this System.Windows.Forms.DataGridView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DataObject)__control__.Invoke(getClipboardContent1Internal, __control__);
            else
                return getClipboardContent1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataObject> getClipboardContent1Callback = GetClipboardContent;
        public static IAsyncResult BeginGetClipboardContent1(this System.Windows.Forms.DataGridView __control__, AsyncCallback callback, object state)
        {
            return getClipboardContent1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Windows.Forms.DataObject EndGetClipboardContent1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndGetClipboardContent1(result);
        }
        public static System.Windows.Forms.DataObject EndGetClipboardContent1(IAsyncResult result)
        {
            return getClipboardContent1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataObject> GetClipboardContentAsync(this System.Windows.Forms.DataGridView __control__)
        {
            return Task<System.Windows.Forms.DataObject>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                (Func<System.Windows.Forms.DataGridView, AsyncCallback, object, IAsyncResult>)BeginGetClipboardContent1,
                (Func<IAsyncResult, System.Windows.Forms.DataObject>)EndGetClipboardContent1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32, System.Boolean, System.Drawing.Rectangle> getColumnDisplayRectangle1Internal = (c, columnIndex, cutOverflow) => c.GetColumnDisplayRectangle(columnIndex, cutOverflow);
        public static System.Drawing.Rectangle GetColumnDisplayRectangle(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Boolean cutOverflow)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getColumnDisplayRectangle1Internal, __control__, columnIndex, cutOverflow);
            else
                return getColumnDisplayRectangle1Internal.Invoke(__control__, columnIndex, cutOverflow);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32, System.Boolean, System.Drawing.Rectangle> getColumnDisplayRectangle1Callback = GetColumnDisplayRectangle;
        public static IAsyncResult BeginGetColumnDisplayRectangle1(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Boolean cutOverflow, AsyncCallback callback, object state)
        {
            return getColumnDisplayRectangle1Callback.BeginInvoke(__control__, columnIndex, cutOverflow, callback, state);
        }
        public static System.Drawing.Rectangle EndGetColumnDisplayRectangle1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndGetColumnDisplayRectangle1(result);
        }
        public static System.Drawing.Rectangle EndGetColumnDisplayRectangle1(IAsyncResult result)
        {
            return getColumnDisplayRectangle1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetColumnDisplayRectangleAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Boolean cutOverflow)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Boolean>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginGetColumnDisplayRectangle1,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetColumnDisplayRectangle1,
                __control__, columnIndex, cutOverflow, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32, System.Boolean, System.Drawing.Rectangle> getRowDisplayRectangle1Internal = (c, rowIndex, cutOverflow) => c.GetRowDisplayRectangle(rowIndex, cutOverflow);
        public static System.Drawing.Rectangle GetRowDisplayRectangle(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Boolean cutOverflow)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getRowDisplayRectangle1Internal, __control__, rowIndex, cutOverflow);
            else
                return getRowDisplayRectangle1Internal.Invoke(__control__, rowIndex, cutOverflow);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32, System.Boolean, System.Drawing.Rectangle> getRowDisplayRectangle1Callback = GetRowDisplayRectangle;
        public static IAsyncResult BeginGetRowDisplayRectangle1(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Boolean cutOverflow, AsyncCallback callback, object state)
        {
            return getRowDisplayRectangle1Callback.BeginInvoke(__control__, rowIndex, cutOverflow, callback, state);
        }
        public static System.Drawing.Rectangle EndGetRowDisplayRectangle1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndGetRowDisplayRectangle1(result);
        }
        public static System.Drawing.Rectangle EndGetRowDisplayRectangle1(IAsyncResult result)
        {
            return getRowDisplayRectangle1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetRowDisplayRectangleAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Boolean cutOverflow)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Boolean>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginGetRowDisplayRectangle1,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetRowDisplayRectangle1,
                __control__, rowIndex, cutOverflow, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32, System.Int32, System.Windows.Forms.DataGridView.HitTestInfo> hitTest3Internal = (c, x, y) => c.HitTest(x, y);
        public static System.Windows.Forms.DataGridView.HitTestInfo HitTest(this System.Windows.Forms.DataGridView __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.DataGridView.HitTestInfo)__control__.Invoke(hitTest3Internal, __control__, x, y);
            else
                return hitTest3Internal.Invoke(__control__, x, y);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32, System.Int32, System.Windows.Forms.DataGridView.HitTestInfo> hitTest3Callback = HitTest;
        public static IAsyncResult BeginHitTest3(this System.Windows.Forms.DataGridView __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return hitTest3Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static System.Windows.Forms.DataGridView.HitTestInfo EndHitTest3(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndHitTest3(result);
        }
        public static System.Windows.Forms.DataGridView.HitTestInfo EndHitTest3(IAsyncResult result)
        {
            return hitTest3Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridView.HitTestInfo> HitTestAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 x, System.Int32 y)
        {
            return Task<System.Windows.Forms.DataGridView.HitTestInfo>.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginHitTest3,
                (Func<IAsyncResult, System.Windows.Forms.DataGridView.HitTestInfo>)EndHitTest3,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCell> invalidateCell1Internal = (c, dataGridViewCell) => c.InvalidateCell(dataGridViewCell);
        public static void InvalidateCell(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewCell dataGridViewCell)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidateCell1Internal, __control__, dataGridViewCell);
            else
                invalidateCell1Internal.Invoke(__control__, dataGridViewCell);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCell> invalidateCell1Callback = InvalidateCell;
        public static IAsyncResult BeginInvalidateCell1(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewCell dataGridViewCell, AsyncCallback callback, object state)
        {
            return invalidateCell1Callback.BeginInvoke(__control__, dataGridViewCell, callback, state);
        }
        public static void EndInvalidateCell1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndInvalidateCell1(result);
        }
        public static void EndInvalidateCell1(IAsyncResult result)
        {
            invalidateCell1Callback.EndInvoke(result);
        }
        public static Task InvalidateCellAsync(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewCell dataGridViewCell)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCell>(
                (Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCell, AsyncCallback, object, IAsyncResult>)BeginInvalidateCell1,
                (Action<IAsyncResult>)EndInvalidateCell1,
                __control__, dataGridViewCell, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Int32> invalidateCell2Internal = (c, columnIndex, rowIndex) => c.InvalidateCell(columnIndex, rowIndex);
        public static void InvalidateCell(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidateCell2Internal, __control__, columnIndex, rowIndex);
            else
                invalidateCell2Internal.Invoke(__control__, columnIndex, rowIndex);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Int32> invalidateCell2Callback = InvalidateCell;
        public static IAsyncResult BeginInvalidateCell2(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex, AsyncCallback callback, object state)
        {
            return invalidateCell2Callback.BeginInvoke(__control__, columnIndex, rowIndex, callback, state);
        }
        public static void EndInvalidateCell2(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndInvalidateCell2(result);
        }
        public static void EndInvalidateCell2(IAsyncResult result)
        {
            invalidateCell2Callback.EndInvoke(result);
        }
        public static Task InvalidateCellAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginInvalidateCell2,
                (Action<IAsyncResult>)EndInvalidateCell2,
                __control__, columnIndex, rowIndex, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> invalidateColumn1Internal = (c, columnIndex) => c.InvalidateColumn(columnIndex);
        public static void InvalidateColumn(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidateColumn1Internal, __control__, columnIndex);
            else
                invalidateColumn1Internal.Invoke(__control__, columnIndex);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> invalidateColumn1Callback = InvalidateColumn;
        public static IAsyncResult BeginInvalidateColumn1(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, AsyncCallback callback, object state)
        {
            return invalidateColumn1Callback.BeginInvoke(__control__, columnIndex, callback, state);
        }
        public static void EndInvalidateColumn1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndInvalidateColumn1(result);
        }
        public static void EndInvalidateColumn1(IAsyncResult result)
        {
            invalidateColumn1Callback.EndInvoke(result);
        }
        public static Task InvalidateColumnAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, AsyncCallback, object, IAsyncResult>)BeginInvalidateColumn1,
                (Action<IAsyncResult>)EndInvalidateColumn1,
                __control__, columnIndex, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> invalidateRow1Internal = (c, rowIndex) => c.InvalidateRow(rowIndex);
        public static void InvalidateRow(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidateRow1Internal, __control__, rowIndex);
            else
                invalidateRow1Internal.Invoke(__control__, rowIndex);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> invalidateRow1Callback = InvalidateRow;
        public static IAsyncResult BeginInvalidateRow1(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, AsyncCallback callback, object state)
        {
            return invalidateRow1Callback.BeginInvoke(__control__, rowIndex, callback, state);
        }
        public static void EndInvalidateRow1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndInvalidateRow1(result);
        }
        public static void EndInvalidateRow1(IAsyncResult result)
        {
            invalidateRow1Callback.EndInvoke(result);
        }
        public static Task InvalidateRowAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, AsyncCallback, object, IAsyncResult>)BeginInvalidateRow1,
                (Action<IAsyncResult>)EndInvalidateRow1,
                __control__, rowIndex, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> notifyCurrentCellDirty1Internal = (c, dirty) => c.NotifyCurrentCellDirty(dirty);
        public static void NotifyCurrentCellDirty(this System.Windows.Forms.DataGridView __control__, System.Boolean dirty)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(notifyCurrentCellDirty1Internal, __control__, dirty);
            else
                notifyCurrentCellDirty1Internal.Invoke(__control__, dirty);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> notifyCurrentCellDirty1Callback = NotifyCurrentCellDirty;
        public static IAsyncResult BeginNotifyCurrentCellDirty1(this System.Windows.Forms.DataGridView __control__, System.Boolean dirty, AsyncCallback callback, object state)
        {
            return notifyCurrentCellDirty1Callback.BeginInvoke(__control__, dirty, callback, state);
        }
        public static void EndNotifyCurrentCellDirty1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndNotifyCurrentCellDirty1(result);
        }
        public static void EndNotifyCurrentCellDirty1(IAsyncResult result)
        {
            notifyCurrentCellDirty1Callback.EndInvoke(result);
        }
        public static Task NotifyCurrentCellDirtyAsync(this System.Windows.Forms.DataGridView __control__, System.Boolean dirty)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                (Func<System.Windows.Forms.DataGridView, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginNotifyCurrentCellDirty1,
                (Action<IAsyncResult>)EndNotifyCurrentCellDirty1,
                __control__, dirty, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> refreshEdit1Internal = (c) => c.RefreshEdit();
        public static System.Boolean RefreshEdit(this System.Windows.Forms.DataGridView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(refreshEdit1Internal, __control__);
            else
                return refreshEdit1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> refreshEdit1Callback = RefreshEdit;
        public static IAsyncResult BeginRefreshEdit1(this System.Windows.Forms.DataGridView __control__, AsyncCallback callback, object state)
        {
            return refreshEdit1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndRefreshEdit1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            return EndRefreshEdit1(result);
        }
        public static System.Boolean EndRefreshEdit1(IAsyncResult result)
        {
            return refreshEdit1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> RefreshEditAsync(this System.Windows.Forms.DataGridView __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                (Func<System.Windows.Forms.DataGridView, AsyncCallback, object, IAsyncResult>)BeginRefreshEdit1,
                (Func<IAsyncResult, System.Boolean>)EndRefreshEdit1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView> resetText3Internal = (c) => c.ResetText();
        public static void ResetText(this System.Windows.Forms.DataGridView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetText3Internal, __control__);
            else
                resetText3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGridView> resetText3Callback = ResetText;
        public static IAsyncResult BeginResetText3(this System.Windows.Forms.DataGridView __control__, AsyncCallback callback, object state)
        {
            return resetText3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetText3(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndResetText3(result);
        }
        public static void EndResetText3(IAsyncResult result)
        {
            resetText3Callback.EndInvoke(result);
        }
        public static Task ResetTextAsync(this System.Windows.Forms.DataGridView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                (Func<System.Windows.Forms.DataGridView, AsyncCallback, object, IAsyncResult>)BeginResetText3,
                (Action<IAsyncResult>)EndResetText3,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView> selectAll3Internal = (c) => c.SelectAll();
        public static void SelectAll(this System.Windows.Forms.DataGridView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(selectAll3Internal, __control__);
            else
                selectAll3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.DataGridView> selectAll3Callback = SelectAll;
        public static IAsyncResult BeginSelectAll3(this System.Windows.Forms.DataGridView __control__, AsyncCallback callback, object state)
        {
            return selectAll3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndSelectAll3(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndSelectAll3(result);
        }
        public static void EndSelectAll3(IAsyncResult result)
        {
            selectAll3Callback.EndInvoke(result);
        }
        public static Task SelectAllAsync(this System.Windows.Forms.DataGridView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                (Func<System.Windows.Forms.DataGridView, AsyncCallback, object, IAsyncResult>)BeginSelectAll3,
                (Action<IAsyncResult>)EndSelectAll3,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumn, System.ComponentModel.ListSortDirection> sort1Internal = (c, dataGridViewColumn, direction) => c.Sort(dataGridViewColumn, direction);
        public static void Sort(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewColumn dataGridViewColumn, System.ComponentModel.ListSortDirection direction)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(sort1Internal, __control__, dataGridViewColumn, direction);
            else
                sort1Internal.Invoke(__control__, dataGridViewColumn, direction);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumn, System.ComponentModel.ListSortDirection> sort1Callback = Sort;
        public static IAsyncResult BeginSort1(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewColumn dataGridViewColumn, System.ComponentModel.ListSortDirection direction, AsyncCallback callback, object state)
        {
            return sort1Callback.BeginInvoke(__control__, dataGridViewColumn, direction, callback, state);
        }
        public static void EndSort1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndSort1(result);
        }
        public static void EndSort1(IAsyncResult result)
        {
            sort1Callback.EndInvoke(result);
        }
        public static Task SortAsync(this System.Windows.Forms.DataGridView __control__, System.Windows.Forms.DataGridViewColumn dataGridViewColumn, System.ComponentModel.ListSortDirection direction)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumn, System.ComponentModel.ListSortDirection>(
                (Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumn, System.ComponentModel.ListSortDirection, AsyncCallback, object, IAsyncResult>)BeginSort1,
                (Action<IAsyncResult>)EndSort1,
                __control__, dataGridViewColumn, direction, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Collections.IComparer> sort2Internal = (c, comparer) => c.Sort(comparer);
        public static void Sort(this System.Windows.Forms.DataGridView __control__, System.Collections.IComparer comparer)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(sort2Internal, __control__, comparer);
            else
                sort2Internal.Invoke(__control__, comparer);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Collections.IComparer> sort2Callback = Sort;
        public static IAsyncResult BeginSort2(this System.Windows.Forms.DataGridView __control__, System.Collections.IComparer comparer, AsyncCallback callback, object state)
        {
            return sort2Callback.BeginInvoke(__control__, comparer, callback, state);
        }
        public static void EndSort2(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndSort2(result);
        }
        public static void EndSort2(IAsyncResult result)
        {
            sort2Callback.EndInvoke(result);
        }
        public static Task SortAsync(this System.Windows.Forms.DataGridView __control__, System.Collections.IComparer comparer)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Collections.IComparer>(
                (Func<System.Windows.Forms.DataGridView, System.Collections.IComparer, AsyncCallback, object, IAsyncResult>)BeginSort2,
                (Action<IAsyncResult>)EndSort2,
                __control__, comparer, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Int32> updateCellErrorText1Internal = (c, columnIndex, rowIndex) => c.UpdateCellErrorText(columnIndex, rowIndex);
        public static void UpdateCellErrorText(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(updateCellErrorText1Internal, __control__, columnIndex, rowIndex);
            else
                updateCellErrorText1Internal.Invoke(__control__, columnIndex, rowIndex);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Int32> updateCellErrorText1Callback = UpdateCellErrorText;
        public static IAsyncResult BeginUpdateCellErrorText1(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex, AsyncCallback callback, object state)
        {
            return updateCellErrorText1Callback.BeginInvoke(__control__, columnIndex, rowIndex, callback, state);
        }
        public static void EndUpdateCellErrorText1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndUpdateCellErrorText1(result);
        }
        public static void EndUpdateCellErrorText1(IAsyncResult result)
        {
            updateCellErrorText1Callback.EndInvoke(result);
        }
        public static Task UpdateCellErrorTextAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginUpdateCellErrorText1,
                (Action<IAsyncResult>)EndUpdateCellErrorText1,
                __control__, columnIndex, rowIndex, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Int32> updateCellValue1Internal = (c, columnIndex, rowIndex) => c.UpdateCellValue(columnIndex, rowIndex);
        public static void UpdateCellValue(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(updateCellValue1Internal, __control__, columnIndex, rowIndex);
            else
                updateCellValue1Internal.Invoke(__control__, columnIndex, rowIndex);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Int32> updateCellValue1Callback = UpdateCellValue;
        public static IAsyncResult BeginUpdateCellValue1(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex, AsyncCallback callback, object state)
        {
            return updateCellValue1Callback.BeginInvoke(__control__, columnIndex, rowIndex, callback, state);
        }
        public static void EndUpdateCellValue1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndUpdateCellValue1(result);
        }
        public static void EndUpdateCellValue1(IAsyncResult result)
        {
            updateCellValue1Callback.EndInvoke(result);
        }
        public static Task UpdateCellValueAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 columnIndex, System.Int32 rowIndex)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginUpdateCellValue1,
                (Action<IAsyncResult>)EndUpdateCellValue1,
                __control__, columnIndex, rowIndex, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> updateRowErrorText1Internal = (c, rowIndex) => c.UpdateRowErrorText(rowIndex);
        public static void UpdateRowErrorText(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(updateRowErrorText1Internal, __control__, rowIndex);
            else
                updateRowErrorText1Internal.Invoke(__control__, rowIndex);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> updateRowErrorText1Callback = UpdateRowErrorText;
        public static IAsyncResult BeginUpdateRowErrorText1(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, AsyncCallback callback, object state)
        {
            return updateRowErrorText1Callback.BeginInvoke(__control__, rowIndex, callback, state);
        }
        public static void EndUpdateRowErrorText1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndUpdateRowErrorText1(result);
        }
        public static void EndUpdateRowErrorText1(IAsyncResult result)
        {
            updateRowErrorText1Callback.EndInvoke(result);
        }
        public static Task UpdateRowErrorTextAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, AsyncCallback, object, IAsyncResult>)BeginUpdateRowErrorText1,
                (Action<IAsyncResult>)EndUpdateRowErrorText1,
                __control__, rowIndex, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Int32> updateRowErrorText2Internal = (c, rowIndexStart, rowIndexEnd) => c.UpdateRowErrorText(rowIndexStart, rowIndexEnd);
        public static void UpdateRowErrorText(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndexStart, System.Int32 rowIndexEnd)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(updateRowErrorText2Internal, __control__, rowIndexStart, rowIndexEnd);
            else
                updateRowErrorText2Internal.Invoke(__control__, rowIndexStart, rowIndexEnd);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Int32> updateRowErrorText2Callback = UpdateRowErrorText;
        public static IAsyncResult BeginUpdateRowErrorText2(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndexStart, System.Int32 rowIndexEnd, AsyncCallback callback, object state)
        {
            return updateRowErrorText2Callback.BeginInvoke(__control__, rowIndexStart, rowIndexEnd, callback, state);
        }
        public static void EndUpdateRowErrorText2(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndUpdateRowErrorText2(result);
        }
        public static void EndUpdateRowErrorText2(IAsyncResult result)
        {
            updateRowErrorText2Callback.EndInvoke(result);
        }
        public static Task UpdateRowErrorTextAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndexStart, System.Int32 rowIndexEnd)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginUpdateRowErrorText2,
                (Action<IAsyncResult>)EndUpdateRowErrorText2,
                __control__, rowIndexStart, rowIndexEnd, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Boolean> updateRowHeightInfo1Internal = (c, rowIndex, updateToEnd) => c.UpdateRowHeightInfo(rowIndex, updateToEnd);
        public static void UpdateRowHeightInfo(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Boolean updateToEnd)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(updateRowHeightInfo1Internal, __control__, rowIndex, updateToEnd);
            else
                updateRowHeightInfo1Internal.Invoke(__control__, rowIndex, updateToEnd);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32, System.Boolean> updateRowHeightInfo1Callback = UpdateRowHeightInfo;
        public static IAsyncResult BeginUpdateRowHeightInfo1(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Boolean updateToEnd, AsyncCallback callback, object state)
        {
            return updateRowHeightInfo1Callback.BeginInvoke(__control__, rowIndex, updateToEnd, callback, state);
        }
        public static void EndUpdateRowHeightInfo1(this System.Windows.Forms.DataGridView __control__, IAsyncResult result)
        {
            EndUpdateRowHeightInfo1(result);
        }
        public static void EndUpdateRowHeightInfo1(IAsyncResult result)
        {
            updateRowHeightInfo1Callback.EndInvoke(result);
        }
        public static Task UpdateRowHeightInfoAsync(this System.Windows.Forms.DataGridView __control__, System.Int32 rowIndex, System.Boolean updateToEnd)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32, System.Boolean>(
                (Func<System.Windows.Forms.DataGridView, System.Int32, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginUpdateRowHeightInfo1,
                (Action<IAsyncResult>)EndUpdateRowHeightInfo1,
                __control__, rowIndex, updateToEnd, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle> getAdjustedTopLeftHeaderBorderStyleInternal = (x) => x.AdjustedTopLeftHeaderBorderStyle;
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle GetAdjustedTopLeftHeaderBorderStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewAdvancedBorderStyle)target.Invoke(getAdjustedTopLeftHeaderBorderStyleInternal, target);
            else
                return getAdjustedTopLeftHeaderBorderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle> getAdjustedTopLeftHeaderBorderStyleCallback = GetAdjustedTopLeftHeaderBorderStyle;
        public static IAsyncResult BeginGetAdjustedTopLeftHeaderBorderStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAdjustedTopLeftHeaderBorderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndGetAdjustedTopLeftHeaderBorderStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAdjustedTopLeftHeaderBorderStyle(result);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndGetAdjustedTopLeftHeaderBorderStyle(IAsyncResult result)
        {
            return getAdjustedTopLeftHeaderBorderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle> GetAdjustedTopLeftHeaderBorderStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAdjustedTopLeftHeaderBorderStyle,
                EndGetAdjustedTopLeftHeaderBorderStyle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle> getAdvancedCellBorderStyleInternal = (x) => x.AdvancedCellBorderStyle;
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle GetAdvancedCellBorderStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewAdvancedBorderStyle)target.Invoke(getAdvancedCellBorderStyleInternal, target);
            else
                return getAdvancedCellBorderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle> getAdvancedCellBorderStyleCallback = GetAdvancedCellBorderStyle;
        public static IAsyncResult BeginGetAdvancedCellBorderStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAdvancedCellBorderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndGetAdvancedCellBorderStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAdvancedCellBorderStyle(result);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndGetAdvancedCellBorderStyle(IAsyncResult result)
        {
            return getAdvancedCellBorderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle> GetAdvancedCellBorderStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAdvancedCellBorderStyle,
                EndGetAdvancedCellBorderStyle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle> getAdvancedColumnHeadersBorderStyleInternal = (x) => x.AdvancedColumnHeadersBorderStyle;
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle GetAdvancedColumnHeadersBorderStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewAdvancedBorderStyle)target.Invoke(getAdvancedColumnHeadersBorderStyleInternal, target);
            else
                return getAdvancedColumnHeadersBorderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle> getAdvancedColumnHeadersBorderStyleCallback = GetAdvancedColumnHeadersBorderStyle;
        public static IAsyncResult BeginGetAdvancedColumnHeadersBorderStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAdvancedColumnHeadersBorderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndGetAdvancedColumnHeadersBorderStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAdvancedColumnHeadersBorderStyle(result);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndGetAdvancedColumnHeadersBorderStyle(IAsyncResult result)
        {
            return getAdvancedColumnHeadersBorderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle> GetAdvancedColumnHeadersBorderStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAdvancedColumnHeadersBorderStyle,
                EndGetAdvancedColumnHeadersBorderStyle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle> getAdvancedRowHeadersBorderStyleInternal = (x) => x.AdvancedRowHeadersBorderStyle;
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle GetAdvancedRowHeadersBorderStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewAdvancedBorderStyle)target.Invoke(getAdvancedRowHeadersBorderStyleInternal, target);
            else
                return getAdvancedRowHeadersBorderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAdvancedBorderStyle> getAdvancedRowHeadersBorderStyleCallback = GetAdvancedRowHeadersBorderStyle;
        public static IAsyncResult BeginGetAdvancedRowHeadersBorderStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAdvancedRowHeadersBorderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndGetAdvancedRowHeadersBorderStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAdvancedRowHeadersBorderStyle(result);
        }
        public static System.Windows.Forms.DataGridViewAdvancedBorderStyle EndGetAdvancedRowHeadersBorderStyle(IAsyncResult result)
        {
            return getAdvancedRowHeadersBorderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle> GetAdvancedRowHeadersBorderStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewAdvancedBorderStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAdvancedRowHeadersBorderStyle,
                EndGetAdvancedRowHeadersBorderStyle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToAddRowsInternal = (x) => x.AllowUserToAddRows;
        public static System.Boolean GetAllowUserToAddRows(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowUserToAddRowsInternal, target);
            else
                return getAllowUserToAddRowsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToAddRowsCallback = GetAllowUserToAddRows;
        public static IAsyncResult BeginGetAllowUserToAddRows(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAllowUserToAddRowsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowUserToAddRows(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAllowUserToAddRows(result);
        }
        public static System.Boolean EndGetAllowUserToAddRows(IAsyncResult result)
        {
            return getAllowUserToAddRowsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowUserToAddRowsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAllowUserToAddRows,
                EndGetAllowUserToAddRows,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToAddRowsInternal = (x, v) => x.AllowUserToAddRows = v;
        public static void SetAllowUserToAddRows(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowUserToAddRowsInternal, target, value);
            else
                setAllowUserToAddRowsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToAddRowsCallback = SetAllowUserToAddRows;
        public static IAsyncResult BeginSetAllowUserToAddRows(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowUserToAddRowsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowUserToAddRows(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetAllowUserToAddRows(result);
        }
        public static void EndSetAllowUserToAddRows(IAsyncResult result)
        {
            setAllowUserToAddRowsCallback.EndInvoke(result);
        }
        public static Task SetAllowUserToAddRowsAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetAllowUserToAddRows,
                EndSetAllowUserToAddRows,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToDeleteRowsInternal = (x) => x.AllowUserToDeleteRows;
        public static System.Boolean GetAllowUserToDeleteRows(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowUserToDeleteRowsInternal, target);
            else
                return getAllowUserToDeleteRowsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToDeleteRowsCallback = GetAllowUserToDeleteRows;
        public static IAsyncResult BeginGetAllowUserToDeleteRows(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAllowUserToDeleteRowsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowUserToDeleteRows(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAllowUserToDeleteRows(result);
        }
        public static System.Boolean EndGetAllowUserToDeleteRows(IAsyncResult result)
        {
            return getAllowUserToDeleteRowsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowUserToDeleteRowsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAllowUserToDeleteRows,
                EndGetAllowUserToDeleteRows,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToDeleteRowsInternal = (x, v) => x.AllowUserToDeleteRows = v;
        public static void SetAllowUserToDeleteRows(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowUserToDeleteRowsInternal, target, value);
            else
                setAllowUserToDeleteRowsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToDeleteRowsCallback = SetAllowUserToDeleteRows;
        public static IAsyncResult BeginSetAllowUserToDeleteRows(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowUserToDeleteRowsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowUserToDeleteRows(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetAllowUserToDeleteRows(result);
        }
        public static void EndSetAllowUserToDeleteRows(IAsyncResult result)
        {
            setAllowUserToDeleteRowsCallback.EndInvoke(result);
        }
        public static Task SetAllowUserToDeleteRowsAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetAllowUserToDeleteRows,
                EndSetAllowUserToDeleteRows,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToOrderColumnsInternal = (x) => x.AllowUserToOrderColumns;
        public static System.Boolean GetAllowUserToOrderColumns(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowUserToOrderColumnsInternal, target);
            else
                return getAllowUserToOrderColumnsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToOrderColumnsCallback = GetAllowUserToOrderColumns;
        public static IAsyncResult BeginGetAllowUserToOrderColumns(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAllowUserToOrderColumnsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowUserToOrderColumns(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAllowUserToOrderColumns(result);
        }
        public static System.Boolean EndGetAllowUserToOrderColumns(IAsyncResult result)
        {
            return getAllowUserToOrderColumnsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowUserToOrderColumnsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAllowUserToOrderColumns,
                EndGetAllowUserToOrderColumns,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToOrderColumnsInternal = (x, v) => x.AllowUserToOrderColumns = v;
        public static void SetAllowUserToOrderColumns(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowUserToOrderColumnsInternal, target, value);
            else
                setAllowUserToOrderColumnsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToOrderColumnsCallback = SetAllowUserToOrderColumns;
        public static IAsyncResult BeginSetAllowUserToOrderColumns(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowUserToOrderColumnsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowUserToOrderColumns(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetAllowUserToOrderColumns(result);
        }
        public static void EndSetAllowUserToOrderColumns(IAsyncResult result)
        {
            setAllowUserToOrderColumnsCallback.EndInvoke(result);
        }
        public static Task SetAllowUserToOrderColumnsAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetAllowUserToOrderColumns,
                EndSetAllowUserToOrderColumns,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToResizeColumnsInternal = (x) => x.AllowUserToResizeColumns;
        public static System.Boolean GetAllowUserToResizeColumns(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowUserToResizeColumnsInternal, target);
            else
                return getAllowUserToResizeColumnsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToResizeColumnsCallback = GetAllowUserToResizeColumns;
        public static IAsyncResult BeginGetAllowUserToResizeColumns(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAllowUserToResizeColumnsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowUserToResizeColumns(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAllowUserToResizeColumns(result);
        }
        public static System.Boolean EndGetAllowUserToResizeColumns(IAsyncResult result)
        {
            return getAllowUserToResizeColumnsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowUserToResizeColumnsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAllowUserToResizeColumns,
                EndGetAllowUserToResizeColumns,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToResizeColumnsInternal = (x, v) => x.AllowUserToResizeColumns = v;
        public static void SetAllowUserToResizeColumns(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowUserToResizeColumnsInternal, target, value);
            else
                setAllowUserToResizeColumnsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToResizeColumnsCallback = SetAllowUserToResizeColumns;
        public static IAsyncResult BeginSetAllowUserToResizeColumns(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowUserToResizeColumnsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowUserToResizeColumns(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetAllowUserToResizeColumns(result);
        }
        public static void EndSetAllowUserToResizeColumns(IAsyncResult result)
        {
            setAllowUserToResizeColumnsCallback.EndInvoke(result);
        }
        public static Task SetAllowUserToResizeColumnsAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetAllowUserToResizeColumns,
                EndSetAllowUserToResizeColumns,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToResizeRowsInternal = (x) => x.AllowUserToResizeRows;
        public static System.Boolean GetAllowUserToResizeRows(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowUserToResizeRowsInternal, target);
            else
                return getAllowUserToResizeRowsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAllowUserToResizeRowsCallback = GetAllowUserToResizeRows;
        public static IAsyncResult BeginGetAllowUserToResizeRows(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAllowUserToResizeRowsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowUserToResizeRows(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAllowUserToResizeRows(result);
        }
        public static System.Boolean EndGetAllowUserToResizeRows(IAsyncResult result)
        {
            return getAllowUserToResizeRowsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowUserToResizeRowsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAllowUserToResizeRows,
                EndGetAllowUserToResizeRows,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToResizeRowsInternal = (x, v) => x.AllowUserToResizeRows = v;
        public static void SetAllowUserToResizeRows(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowUserToResizeRowsInternal, target, value);
            else
                setAllowUserToResizeRowsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAllowUserToResizeRowsCallback = SetAllowUserToResizeRows;
        public static IAsyncResult BeginSetAllowUserToResizeRows(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowUserToResizeRowsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowUserToResizeRows(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetAllowUserToResizeRows(result);
        }
        public static void EndSetAllowUserToResizeRows(IAsyncResult result)
        {
            setAllowUserToResizeRowsCallback.EndInvoke(result);
        }
        public static Task SetAllowUserToResizeRowsAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetAllowUserToResizeRows,
                EndSetAllowUserToResizeRows,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getAlternatingRowsDefaultCellStyleInternal = (x) => x.AlternatingRowsDefaultCellStyle;
        public static System.Windows.Forms.DataGridViewCellStyle GetAlternatingRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewCellStyle)target.Invoke(getAlternatingRowsDefaultCellStyleInternal, target);
            else
                return getAlternatingRowsDefaultCellStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getAlternatingRowsDefaultCellStyleCallback = GetAlternatingRowsDefaultCellStyle;
        public static IAsyncResult BeginGetAlternatingRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAlternatingRowsDefaultCellStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetAlternatingRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAlternatingRowsDefaultCellStyle(result);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetAlternatingRowsDefaultCellStyle(IAsyncResult result)
        {
            return getAlternatingRowsDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewCellStyle> GetAlternatingRowsDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewCellStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAlternatingRowsDefaultCellStyle,
                EndGetAlternatingRowsDefaultCellStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setAlternatingRowsDefaultCellStyleInternal = (x, v) => x.AlternatingRowsDefaultCellStyle = v;
        public static void SetAlternatingRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAlternatingRowsDefaultCellStyleInternal, target, value);
            else
                setAlternatingRowsDefaultCellStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setAlternatingRowsDefaultCellStyleCallback = SetAlternatingRowsDefaultCellStyle;
        public static IAsyncResult BeginSetAlternatingRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value, AsyncCallback callback, object state)
        {
            return setAlternatingRowsDefaultCellStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAlternatingRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetAlternatingRowsDefaultCellStyle(result);
        }
        public static void EndSetAlternatingRowsDefaultCellStyle(IAsyncResult result)
        {
            setAlternatingRowsDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task SetAlternatingRowsDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle>(
                BeginSetAlternatingRowsDefaultCellStyle,
                EndSetAlternatingRowsDefaultCellStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAutoGenerateColumnsInternal = (x) => x.AutoGenerateColumns;
        public static System.Boolean GetAutoGenerateColumns(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoGenerateColumnsInternal, target);
            else
                return getAutoGenerateColumnsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getAutoGenerateColumnsCallback = GetAutoGenerateColumns;
        public static IAsyncResult BeginGetAutoGenerateColumns(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAutoGenerateColumnsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoGenerateColumns(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAutoGenerateColumns(result);
        }
        public static System.Boolean EndGetAutoGenerateColumns(IAsyncResult result)
        {
            return getAutoGenerateColumnsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoGenerateColumnsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAutoGenerateColumns,
                EndGetAutoGenerateColumns,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAutoGenerateColumnsInternal = (x, v) => x.AutoGenerateColumns = v;
        public static void SetAutoGenerateColumns(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoGenerateColumnsInternal, target, value);
            else
                setAutoGenerateColumnsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setAutoGenerateColumnsCallback = SetAutoGenerateColumns;
        public static IAsyncResult BeginSetAutoGenerateColumns(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoGenerateColumnsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoGenerateColumns(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetAutoGenerateColumns(result);
        }
        public static void EndSetAutoGenerateColumns(IAsyncResult result)
        {
            setAutoGenerateColumnsCallback.EndInvoke(result);
        }
        public static Task SetAutoGenerateColumnsAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetAutoGenerateColumns,
                EndSetAutoGenerateColumns,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeColumnsMode> getAutoSizeColumnsModeInternal = (x) => x.AutoSizeColumnsMode;
        public static System.Windows.Forms.DataGridViewAutoSizeColumnsMode GetAutoSizeColumnsMode(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewAutoSizeColumnsMode)target.Invoke(getAutoSizeColumnsModeInternal, target);
            else
                return getAutoSizeColumnsModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeColumnsMode> getAutoSizeColumnsModeCallback = GetAutoSizeColumnsMode;
        public static IAsyncResult BeginGetAutoSizeColumnsMode(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAutoSizeColumnsModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewAutoSizeColumnsMode EndGetAutoSizeColumnsMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAutoSizeColumnsMode(result);
        }
        public static System.Windows.Forms.DataGridViewAutoSizeColumnsMode EndGetAutoSizeColumnsMode(IAsyncResult result)
        {
            return getAutoSizeColumnsModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewAutoSizeColumnsMode> GetAutoSizeColumnsModeAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewAutoSizeColumnsMode>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAutoSizeColumnsMode,
                EndGetAutoSizeColumnsMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeColumnsMode> setAutoSizeColumnsModeInternal = (x, v) => x.AutoSizeColumnsMode = v;
        public static void SetAutoSizeColumnsMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewAutoSizeColumnsMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoSizeColumnsModeInternal, target, value);
            else
                setAutoSizeColumnsModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeColumnsMode> setAutoSizeColumnsModeCallback = SetAutoSizeColumnsMode;
        public static IAsyncResult BeginSetAutoSizeColumnsMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewAutoSizeColumnsMode value, AsyncCallback callback, object state)
        {
            return setAutoSizeColumnsModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoSizeColumnsMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetAutoSizeColumnsMode(result);
        }
        public static void EndSetAutoSizeColumnsMode(IAsyncResult result)
        {
            setAutoSizeColumnsModeCallback.EndInvoke(result);
        }
        public static Task SetAutoSizeColumnsModeAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewAutoSizeColumnsMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeColumnsMode>(
                BeginSetAutoSizeColumnsMode,
                EndSetAutoSizeColumnsMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeRowsMode> getAutoSizeRowsModeInternal = (x) => x.AutoSizeRowsMode;
        public static System.Windows.Forms.DataGridViewAutoSizeRowsMode GetAutoSizeRowsMode(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewAutoSizeRowsMode)target.Invoke(getAutoSizeRowsModeInternal, target);
            else
                return getAutoSizeRowsModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeRowsMode> getAutoSizeRowsModeCallback = GetAutoSizeRowsMode;
        public static IAsyncResult BeginGetAutoSizeRowsMode(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getAutoSizeRowsModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewAutoSizeRowsMode EndGetAutoSizeRowsMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetAutoSizeRowsMode(result);
        }
        public static System.Windows.Forms.DataGridViewAutoSizeRowsMode EndGetAutoSizeRowsMode(IAsyncResult result)
        {
            return getAutoSizeRowsModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewAutoSizeRowsMode> GetAutoSizeRowsModeAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewAutoSizeRowsMode>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetAutoSizeRowsMode,
                EndGetAutoSizeRowsMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeRowsMode> setAutoSizeRowsModeInternal = (x, v) => x.AutoSizeRowsMode = v;
        public static void SetAutoSizeRowsMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewAutoSizeRowsMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoSizeRowsModeInternal, target, value);
            else
                setAutoSizeRowsModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeRowsMode> setAutoSizeRowsModeCallback = SetAutoSizeRowsMode;
        public static IAsyncResult BeginSetAutoSizeRowsMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewAutoSizeRowsMode value, AsyncCallback callback, object state)
        {
            return setAutoSizeRowsModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoSizeRowsMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetAutoSizeRowsMode(result);
        }
        public static void EndSetAutoSizeRowsMode(IAsyncResult result)
        {
            setAutoSizeRowsModeCallback.EndInvoke(result);
        }
        public static Task SetAutoSizeRowsModeAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewAutoSizeRowsMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewAutoSizeRowsMode>(
                BeginSetAutoSizeRowsMode,
                EndSetAutoSizeRowsMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewClipboardCopyMode> getClipboardCopyModeInternal = (x) => x.ClipboardCopyMode;
        public static System.Windows.Forms.DataGridViewClipboardCopyMode GetClipboardCopyMode(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewClipboardCopyMode)target.Invoke(getClipboardCopyModeInternal, target);
            else
                return getClipboardCopyModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewClipboardCopyMode> getClipboardCopyModeCallback = GetClipboardCopyMode;
        public static IAsyncResult BeginGetClipboardCopyMode(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getClipboardCopyModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewClipboardCopyMode EndGetClipboardCopyMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetClipboardCopyMode(result);
        }
        public static System.Windows.Forms.DataGridViewClipboardCopyMode EndGetClipboardCopyMode(IAsyncResult result)
        {
            return getClipboardCopyModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewClipboardCopyMode> GetClipboardCopyModeAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewClipboardCopyMode>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetClipboardCopyMode,
                EndGetClipboardCopyMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewClipboardCopyMode> setClipboardCopyModeInternal = (x, v) => x.ClipboardCopyMode = v;
        public static void SetClipboardCopyMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewClipboardCopyMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setClipboardCopyModeInternal, target, value);
            else
                setClipboardCopyModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewClipboardCopyMode> setClipboardCopyModeCallback = SetClipboardCopyMode;
        public static IAsyncResult BeginSetClipboardCopyMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewClipboardCopyMode value, AsyncCallback callback, object state)
        {
            return setClipboardCopyModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetClipboardCopyMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetClipboardCopyMode(result);
        }
        public static void EndSetClipboardCopyMode(IAsyncResult result)
        {
            setClipboardCopyModeCallback.EndInvoke(result);
        }
        public static Task SetClipboardCopyModeAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewClipboardCopyMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewClipboardCopyMode>(
                BeginSetClipboardCopyMode,
                EndSetClipboardCopyMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle> getColumnHeadersBorderStyleInternal = (x) => x.ColumnHeadersBorderStyle;
        public static System.Windows.Forms.DataGridViewHeaderBorderStyle GetColumnHeadersBorderStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewHeaderBorderStyle)target.Invoke(getColumnHeadersBorderStyleInternal, target);
            else
                return getColumnHeadersBorderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle> getColumnHeadersBorderStyleCallback = GetColumnHeadersBorderStyle;
        public static IAsyncResult BeginGetColumnHeadersBorderStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getColumnHeadersBorderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewHeaderBorderStyle EndGetColumnHeadersBorderStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetColumnHeadersBorderStyle(result);
        }
        public static System.Windows.Forms.DataGridViewHeaderBorderStyle EndGetColumnHeadersBorderStyle(IAsyncResult result)
        {
            return getColumnHeadersBorderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewHeaderBorderStyle> GetColumnHeadersBorderStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewHeaderBorderStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetColumnHeadersBorderStyle,
                EndGetColumnHeadersBorderStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle> setColumnHeadersBorderStyleInternal = (x, v) => x.ColumnHeadersBorderStyle = v;
        public static void SetColumnHeadersBorderStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewHeaderBorderStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setColumnHeadersBorderStyleInternal, target, value);
            else
                setColumnHeadersBorderStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle> setColumnHeadersBorderStyleCallback = SetColumnHeadersBorderStyle;
        public static IAsyncResult BeginSetColumnHeadersBorderStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewHeaderBorderStyle value, AsyncCallback callback, object state)
        {
            return setColumnHeadersBorderStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetColumnHeadersBorderStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetColumnHeadersBorderStyle(result);
        }
        public static void EndSetColumnHeadersBorderStyle(IAsyncResult result)
        {
            setColumnHeadersBorderStyleCallback.EndInvoke(result);
        }
        public static Task SetColumnHeadersBorderStyleAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewHeaderBorderStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle>(
                BeginSetColumnHeadersBorderStyle,
                EndSetColumnHeadersBorderStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getColumnHeadersDefaultCellStyleInternal = (x) => x.ColumnHeadersDefaultCellStyle;
        public static System.Windows.Forms.DataGridViewCellStyle GetColumnHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewCellStyle)target.Invoke(getColumnHeadersDefaultCellStyleInternal, target);
            else
                return getColumnHeadersDefaultCellStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getColumnHeadersDefaultCellStyleCallback = GetColumnHeadersDefaultCellStyle;
        public static IAsyncResult BeginGetColumnHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getColumnHeadersDefaultCellStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetColumnHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetColumnHeadersDefaultCellStyle(result);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetColumnHeadersDefaultCellStyle(IAsyncResult result)
        {
            return getColumnHeadersDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewCellStyle> GetColumnHeadersDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewCellStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetColumnHeadersDefaultCellStyle,
                EndGetColumnHeadersDefaultCellStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setColumnHeadersDefaultCellStyleInternal = (x, v) => x.ColumnHeadersDefaultCellStyle = v;
        public static void SetColumnHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setColumnHeadersDefaultCellStyleInternal, target, value);
            else
                setColumnHeadersDefaultCellStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setColumnHeadersDefaultCellStyleCallback = SetColumnHeadersDefaultCellStyle;
        public static IAsyncResult BeginSetColumnHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value, AsyncCallback callback, object state)
        {
            return setColumnHeadersDefaultCellStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetColumnHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetColumnHeadersDefaultCellStyle(result);
        }
        public static void EndSetColumnHeadersDefaultCellStyle(IAsyncResult result)
        {
            setColumnHeadersDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task SetColumnHeadersDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle>(
                BeginSetColumnHeadersDefaultCellStyle,
                EndSetColumnHeadersDefaultCellStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getColumnHeadersHeightInternal = (x) => x.ColumnHeadersHeight;
        public static System.Int32 GetColumnHeadersHeight(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getColumnHeadersHeightInternal, target);
            else
                return getColumnHeadersHeightInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getColumnHeadersHeightCallback = GetColumnHeadersHeight;
        public static IAsyncResult BeginGetColumnHeadersHeight(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getColumnHeadersHeightCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetColumnHeadersHeight(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetColumnHeadersHeight(result);
        }
        public static System.Int32 EndGetColumnHeadersHeight(IAsyncResult result)
        {
            return getColumnHeadersHeightCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetColumnHeadersHeightAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetColumnHeadersHeight,
                EndGetColumnHeadersHeight,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setColumnHeadersHeightInternal = (x, v) => x.ColumnHeadersHeight = v;
        public static void SetColumnHeadersHeight(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setColumnHeadersHeightInternal, target, value);
            else
                setColumnHeadersHeightInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setColumnHeadersHeightCallback = SetColumnHeadersHeight;
        public static IAsyncResult BeginSetColumnHeadersHeight(this System.Windows.Forms.DataGridView target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setColumnHeadersHeightCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetColumnHeadersHeight(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetColumnHeadersHeight(result);
        }
        public static void EndSetColumnHeadersHeight(IAsyncResult result)
        {
            setColumnHeadersHeightCallback.EndInvoke(result);
        }
        public static Task SetColumnHeadersHeightAsync(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                BeginSetColumnHeadersHeight,
                EndSetColumnHeadersHeight,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode> getColumnHeadersHeightSizeModeInternal = (x) => x.ColumnHeadersHeightSizeMode;
        public static System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode GetColumnHeadersHeightSizeMode(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode)target.Invoke(getColumnHeadersHeightSizeModeInternal, target);
            else
                return getColumnHeadersHeightSizeModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode> getColumnHeadersHeightSizeModeCallback = GetColumnHeadersHeightSizeMode;
        public static IAsyncResult BeginGetColumnHeadersHeightSizeMode(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getColumnHeadersHeightSizeModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode EndGetColumnHeadersHeightSizeMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetColumnHeadersHeightSizeMode(result);
        }
        public static System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode EndGetColumnHeadersHeightSizeMode(IAsyncResult result)
        {
            return getColumnHeadersHeightSizeModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode> GetColumnHeadersHeightSizeModeAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetColumnHeadersHeightSizeMode,
                EndGetColumnHeadersHeightSizeMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode> setColumnHeadersHeightSizeModeInternal = (x, v) => x.ColumnHeadersHeightSizeMode = v;
        public static void SetColumnHeadersHeightSizeMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setColumnHeadersHeightSizeModeInternal, target, value);
            else
                setColumnHeadersHeightSizeModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode> setColumnHeadersHeightSizeModeCallback = SetColumnHeadersHeightSizeMode;
        public static IAsyncResult BeginSetColumnHeadersHeightSizeMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode value, AsyncCallback callback, object state)
        {
            return setColumnHeadersHeightSizeModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetColumnHeadersHeightSizeMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetColumnHeadersHeightSizeMode(result);
        }
        public static void EndSetColumnHeadersHeightSizeMode(IAsyncResult result)
        {
            setColumnHeadersHeightSizeModeCallback.EndInvoke(result);
        }
        public static Task SetColumnHeadersHeightSizeModeAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode>(
                BeginSetColumnHeadersHeightSizeMode,
                EndSetColumnHeadersHeightSizeMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumnCollection> getColumnsInternal = (x) => x.Columns;
        public static System.Windows.Forms.DataGridViewColumnCollection GetColumns(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewColumnCollection)target.Invoke(getColumnsInternal, target);
            else
                return getColumnsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumnCollection> getColumnsCallback = GetColumns;
        public static IAsyncResult BeginGetColumns(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getColumnsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewColumnCollection EndGetColumns(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetColumns(result);
        }
        public static System.Windows.Forms.DataGridViewColumnCollection EndGetColumns(IAsyncResult result)
        {
            return getColumnsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewColumnCollection> GetColumnsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewColumnCollection>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetColumns,
                EndGetColumns,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Drawing.Point> getCurrentCellAddressInternal = (x) => x.CurrentCellAddress;
        public static System.Drawing.Point GetCurrentCellAddress(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Point)target.Invoke(getCurrentCellAddressInternal, target);
            else
                return getCurrentCellAddressInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Drawing.Point> getCurrentCellAddressCallback = GetCurrentCellAddress;
        public static IAsyncResult BeginGetCurrentCellAddress(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getCurrentCellAddressCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Point EndGetCurrentCellAddress(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetCurrentCellAddress(result);
        }
        public static System.Drawing.Point EndGetCurrentCellAddress(IAsyncResult result)
        {
            return getCurrentCellAddressCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Point> GetCurrentCellAddressAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Drawing.Point>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetCurrentCellAddress,
                EndGetCurrentCellAddress,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRow> getCurrentRowInternal = (x) => x.CurrentRow;
        public static System.Windows.Forms.DataGridViewRow GetCurrentRow(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewRow)target.Invoke(getCurrentRowInternal, target);
            else
                return getCurrentRowInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRow> getCurrentRowCallback = GetCurrentRow;
        public static IAsyncResult BeginGetCurrentRow(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getCurrentRowCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewRow EndGetCurrentRow(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetCurrentRow(result);
        }
        public static System.Windows.Forms.DataGridViewRow EndGetCurrentRow(IAsyncResult result)
        {
            return getCurrentRowCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewRow> GetCurrentRowAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewRow>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetCurrentRow,
                EndGetCurrentRow,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getDefaultCellStyleInternal = (x) => x.DefaultCellStyle;
        public static System.Windows.Forms.DataGridViewCellStyle GetDefaultCellStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewCellStyle)target.Invoke(getDefaultCellStyleInternal, target);
            else
                return getDefaultCellStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getDefaultCellStyleCallback = GetDefaultCellStyle;
        public static IAsyncResult BeginGetDefaultCellStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getDefaultCellStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetDefaultCellStyle(result);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetDefaultCellStyle(IAsyncResult result)
        {
            return getDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewCellStyle> GetDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewCellStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetDefaultCellStyle,
                EndGetDefaultCellStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setDefaultCellStyleInternal = (x, v) => x.DefaultCellStyle = v;
        public static void SetDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDefaultCellStyleInternal, target, value);
            else
                setDefaultCellStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setDefaultCellStyleCallback = SetDefaultCellStyle;
        public static IAsyncResult BeginSetDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value, AsyncCallback callback, object state)
        {
            return setDefaultCellStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetDefaultCellStyle(result);
        }
        public static void EndSetDefaultCellStyle(IAsyncResult result)
        {
            setDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task SetDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle>(
                BeginSetDefaultCellStyle,
                EndSetDefaultCellStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.Control> getEditingControlInternal = (x) => x.EditingControl;
        public static System.Windows.Forms.Control GetEditingControl(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Control)target.Invoke(getEditingControlInternal, target);
            else
                return getEditingControlInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.Control> getEditingControlCallback = GetEditingControl;
        public static IAsyncResult BeginGetEditingControl(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getEditingControlCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Control EndGetEditingControl(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetEditingControl(result);
        }
        public static System.Windows.Forms.Control EndGetEditingControl(IAsyncResult result)
        {
            return getEditingControlCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetEditingControlAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetEditingControl,
                EndGetEditingControl,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.Panel> getEditingPanelInternal = (x) => x.EditingPanel;
        public static System.Windows.Forms.Panel GetEditingPanel(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Panel)target.Invoke(getEditingPanelInternal, target);
            else
                return getEditingPanelInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.Panel> getEditingPanelCallback = GetEditingPanel;
        public static IAsyncResult BeginGetEditingPanel(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getEditingPanelCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Panel EndGetEditingPanel(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetEditingPanel(result);
        }
        public static System.Windows.Forms.Panel EndGetEditingPanel(IAsyncResult result)
        {
            return getEditingPanelCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Panel> GetEditingPanelAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.Panel>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetEditingPanel,
                EndGetEditingPanel,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getEnableHeadersVisualStylesInternal = (x) => x.EnableHeadersVisualStyles;
        public static System.Boolean GetEnableHeadersVisualStyles(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getEnableHeadersVisualStylesInternal, target);
            else
                return getEnableHeadersVisualStylesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getEnableHeadersVisualStylesCallback = GetEnableHeadersVisualStyles;
        public static IAsyncResult BeginGetEnableHeadersVisualStyles(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getEnableHeadersVisualStylesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetEnableHeadersVisualStyles(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetEnableHeadersVisualStyles(result);
        }
        public static System.Boolean EndGetEnableHeadersVisualStyles(IAsyncResult result)
        {
            return getEnableHeadersVisualStylesCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetEnableHeadersVisualStylesAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetEnableHeadersVisualStyles,
                EndGetEnableHeadersVisualStyles,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setEnableHeadersVisualStylesInternal = (x, v) => x.EnableHeadersVisualStyles = v;
        public static void SetEnableHeadersVisualStyles(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setEnableHeadersVisualStylesInternal, target, value);
            else
                setEnableHeadersVisualStylesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setEnableHeadersVisualStylesCallback = SetEnableHeadersVisualStyles;
        public static IAsyncResult BeginSetEnableHeadersVisualStyles(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setEnableHeadersVisualStylesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetEnableHeadersVisualStyles(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetEnableHeadersVisualStyles(result);
        }
        public static void EndSetEnableHeadersVisualStyles(IAsyncResult result)
        {
            setEnableHeadersVisualStylesCallback.EndInvoke(result);
        }
        public static Task SetEnableHeadersVisualStylesAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetEnableHeadersVisualStyles,
                EndSetEnableHeadersVisualStyles,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCell> getFirstDisplayedCellInternal = (x) => x.FirstDisplayedCell;
        public static System.Windows.Forms.DataGridViewCell GetFirstDisplayedCell(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewCell)target.Invoke(getFirstDisplayedCellInternal, target);
            else
                return getFirstDisplayedCellInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCell> getFirstDisplayedCellCallback = GetFirstDisplayedCell;
        public static IAsyncResult BeginGetFirstDisplayedCell(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getFirstDisplayedCellCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewCell EndGetFirstDisplayedCell(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetFirstDisplayedCell(result);
        }
        public static System.Windows.Forms.DataGridViewCell EndGetFirstDisplayedCell(IAsyncResult result)
        {
            return getFirstDisplayedCellCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewCell> GetFirstDisplayedCellAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewCell>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetFirstDisplayedCell,
                EndGetFirstDisplayedCell,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCell> setFirstDisplayedCellInternal = (x, v) => x.FirstDisplayedCell = v;
        public static void SetFirstDisplayedCell(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCell value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFirstDisplayedCellInternal, target, value);
            else
                setFirstDisplayedCellInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCell> setFirstDisplayedCellCallback = SetFirstDisplayedCell;
        public static IAsyncResult BeginSetFirstDisplayedCell(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCell value, AsyncCallback callback, object state)
        {
            return setFirstDisplayedCellCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFirstDisplayedCell(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetFirstDisplayedCell(result);
        }
        public static void EndSetFirstDisplayedCell(IAsyncResult result)
        {
            setFirstDisplayedCellCallback.EndInvoke(result);
        }
        public static Task SetFirstDisplayedCellAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCell value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCell>(
                BeginSetFirstDisplayedCell,
                EndSetFirstDisplayedCell,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getFirstDisplayedScrollingColumnHiddenWidthInternal = (x) => x.FirstDisplayedScrollingColumnHiddenWidth;
        public static System.Int32 GetFirstDisplayedScrollingColumnHiddenWidth(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getFirstDisplayedScrollingColumnHiddenWidthInternal, target);
            else
                return getFirstDisplayedScrollingColumnHiddenWidthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getFirstDisplayedScrollingColumnHiddenWidthCallback = GetFirstDisplayedScrollingColumnHiddenWidth;
        public static IAsyncResult BeginGetFirstDisplayedScrollingColumnHiddenWidth(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getFirstDisplayedScrollingColumnHiddenWidthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetFirstDisplayedScrollingColumnHiddenWidth(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetFirstDisplayedScrollingColumnHiddenWidth(result);
        }
        public static System.Int32 EndGetFirstDisplayedScrollingColumnHiddenWidth(IAsyncResult result)
        {
            return getFirstDisplayedScrollingColumnHiddenWidthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetFirstDisplayedScrollingColumnHiddenWidthAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetFirstDisplayedScrollingColumnHiddenWidth,
                EndGetFirstDisplayedScrollingColumnHiddenWidth,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getFirstDisplayedScrollingColumnIndexInternal = (x) => x.FirstDisplayedScrollingColumnIndex;
        public static System.Int32 GetFirstDisplayedScrollingColumnIndex(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getFirstDisplayedScrollingColumnIndexInternal, target);
            else
                return getFirstDisplayedScrollingColumnIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getFirstDisplayedScrollingColumnIndexCallback = GetFirstDisplayedScrollingColumnIndex;
        public static IAsyncResult BeginGetFirstDisplayedScrollingColumnIndex(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getFirstDisplayedScrollingColumnIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetFirstDisplayedScrollingColumnIndex(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetFirstDisplayedScrollingColumnIndex(result);
        }
        public static System.Int32 EndGetFirstDisplayedScrollingColumnIndex(IAsyncResult result)
        {
            return getFirstDisplayedScrollingColumnIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetFirstDisplayedScrollingColumnIndexAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetFirstDisplayedScrollingColumnIndex,
                EndGetFirstDisplayedScrollingColumnIndex,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setFirstDisplayedScrollingColumnIndexInternal = (x, v) => x.FirstDisplayedScrollingColumnIndex = v;
        public static void SetFirstDisplayedScrollingColumnIndex(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFirstDisplayedScrollingColumnIndexInternal, target, value);
            else
                setFirstDisplayedScrollingColumnIndexInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setFirstDisplayedScrollingColumnIndexCallback = SetFirstDisplayedScrollingColumnIndex;
        public static IAsyncResult BeginSetFirstDisplayedScrollingColumnIndex(this System.Windows.Forms.DataGridView target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setFirstDisplayedScrollingColumnIndexCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFirstDisplayedScrollingColumnIndex(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetFirstDisplayedScrollingColumnIndex(result);
        }
        public static void EndSetFirstDisplayedScrollingColumnIndex(IAsyncResult result)
        {
            setFirstDisplayedScrollingColumnIndexCallback.EndInvoke(result);
        }
        public static Task SetFirstDisplayedScrollingColumnIndexAsync(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                BeginSetFirstDisplayedScrollingColumnIndex,
                EndSetFirstDisplayedScrollingColumnIndex,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getFirstDisplayedScrollingRowIndexInternal = (x) => x.FirstDisplayedScrollingRowIndex;
        public static System.Int32 GetFirstDisplayedScrollingRowIndex(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getFirstDisplayedScrollingRowIndexInternal, target);
            else
                return getFirstDisplayedScrollingRowIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getFirstDisplayedScrollingRowIndexCallback = GetFirstDisplayedScrollingRowIndex;
        public static IAsyncResult BeginGetFirstDisplayedScrollingRowIndex(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getFirstDisplayedScrollingRowIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetFirstDisplayedScrollingRowIndex(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetFirstDisplayedScrollingRowIndex(result);
        }
        public static System.Int32 EndGetFirstDisplayedScrollingRowIndex(IAsyncResult result)
        {
            return getFirstDisplayedScrollingRowIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetFirstDisplayedScrollingRowIndexAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetFirstDisplayedScrollingRowIndex,
                EndGetFirstDisplayedScrollingRowIndex,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setFirstDisplayedScrollingRowIndexInternal = (x, v) => x.FirstDisplayedScrollingRowIndex = v;
        public static void SetFirstDisplayedScrollingRowIndex(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFirstDisplayedScrollingRowIndexInternal, target, value);
            else
                setFirstDisplayedScrollingRowIndexInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setFirstDisplayedScrollingRowIndexCallback = SetFirstDisplayedScrollingRowIndex;
        public static IAsyncResult BeginSetFirstDisplayedScrollingRowIndex(this System.Windows.Forms.DataGridView target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setFirstDisplayedScrollingRowIndexCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFirstDisplayedScrollingRowIndex(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetFirstDisplayedScrollingRowIndex(result);
        }
        public static void EndSetFirstDisplayedScrollingRowIndex(IAsyncResult result)
        {
            setFirstDisplayedScrollingRowIndexCallback.EndInvoke(result);
        }
        public static Task SetFirstDisplayedScrollingRowIndexAsync(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                BeginSetFirstDisplayedScrollingRowIndex,
                EndSetFirstDisplayedScrollingRowIndex,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Drawing.Color> getGridColorInternal = (x) => x.GridColor;
        public static System.Drawing.Color GetGridColor(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getGridColorInternal, target);
            else
                return getGridColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Drawing.Color> getGridColorCallback = GetGridColor;
        public static IAsyncResult BeginGetGridColor(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getGridColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetGridColor(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetGridColor(result);
        }
        public static System.Drawing.Color EndGetGridColor(IAsyncResult result)
        {
            return getGridColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetGridColorAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetGridColor,
                EndGetGridColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Drawing.Color> setGridColorInternal = (x, v) => x.GridColor = v;
        public static void SetGridColor(this System.Windows.Forms.DataGridView target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setGridColorInternal, target, value);
            else
                setGridColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Drawing.Color> setGridColorCallback = SetGridColor;
        public static IAsyncResult BeginSetGridColor(this System.Windows.Forms.DataGridView target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setGridColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetGridColor(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetGridColor(result);
        }
        public static void EndSetGridColor(IAsyncResult result)
        {
            setGridColorCallback.EndInvoke(result);
        }
        public static Task SetGridColorAsync(this System.Windows.Forms.DataGridView target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Drawing.Color>(
                BeginSetGridColor,
                EndSetGridColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getHorizontalScrollingOffsetInternal = (x) => x.HorizontalScrollingOffset;
        public static System.Int32 GetHorizontalScrollingOffset(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getHorizontalScrollingOffsetInternal, target);
            else
                return getHorizontalScrollingOffsetInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getHorizontalScrollingOffsetCallback = GetHorizontalScrollingOffset;
        public static IAsyncResult BeginGetHorizontalScrollingOffset(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getHorizontalScrollingOffsetCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetHorizontalScrollingOffset(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetHorizontalScrollingOffset(result);
        }
        public static System.Int32 EndGetHorizontalScrollingOffset(IAsyncResult result)
        {
            return getHorizontalScrollingOffsetCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetHorizontalScrollingOffsetAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetHorizontalScrollingOffset,
                EndGetHorizontalScrollingOffset,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setHorizontalScrollingOffsetInternal = (x, v) => x.HorizontalScrollingOffset = v;
        public static void SetHorizontalScrollingOffset(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHorizontalScrollingOffsetInternal, target, value);
            else
                setHorizontalScrollingOffsetInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setHorizontalScrollingOffsetCallback = SetHorizontalScrollingOffset;
        public static IAsyncResult BeginSetHorizontalScrollingOffset(this System.Windows.Forms.DataGridView target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setHorizontalScrollingOffsetCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHorizontalScrollingOffset(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetHorizontalScrollingOffset(result);
        }
        public static void EndSetHorizontalScrollingOffset(IAsyncResult result)
        {
            setHorizontalScrollingOffsetCallback.EndInvoke(result);
        }
        public static Task SetHorizontalScrollingOffsetAsync(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                BeginSetHorizontalScrollingOffset,
                EndSetHorizontalScrollingOffset,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getIsCurrentCellDirtyInternal = (x) => x.IsCurrentCellDirty;
        public static System.Boolean GetIsCurrentCellDirty(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsCurrentCellDirtyInternal, target);
            else
                return getIsCurrentCellDirtyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getIsCurrentCellDirtyCallback = GetIsCurrentCellDirty;
        public static IAsyncResult BeginGetIsCurrentCellDirty(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getIsCurrentCellDirtyCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsCurrentCellDirty(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetIsCurrentCellDirty(result);
        }
        public static System.Boolean EndGetIsCurrentCellDirty(IAsyncResult result)
        {
            return getIsCurrentCellDirtyCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsCurrentCellDirtyAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetIsCurrentCellDirty,
                EndGetIsCurrentCellDirty,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getIsCurrentCellInEditModeInternal = (x) => x.IsCurrentCellInEditMode;
        public static System.Boolean GetIsCurrentCellInEditMode(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsCurrentCellInEditModeInternal, target);
            else
                return getIsCurrentCellInEditModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getIsCurrentCellInEditModeCallback = GetIsCurrentCellInEditMode;
        public static IAsyncResult BeginGetIsCurrentCellInEditMode(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getIsCurrentCellInEditModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsCurrentCellInEditMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetIsCurrentCellInEditMode(result);
        }
        public static System.Boolean EndGetIsCurrentCellInEditMode(IAsyncResult result)
        {
            return getIsCurrentCellInEditModeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsCurrentCellInEditModeAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetIsCurrentCellInEditMode,
                EndGetIsCurrentCellInEditMode,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getIsCurrentRowDirtyInternal = (x) => x.IsCurrentRowDirty;
        public static System.Boolean GetIsCurrentRowDirty(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsCurrentRowDirtyInternal, target);
            else
                return getIsCurrentRowDirtyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getIsCurrentRowDirtyCallback = GetIsCurrentRowDirty;
        public static IAsyncResult BeginGetIsCurrentRowDirty(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getIsCurrentRowDirtyCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsCurrentRowDirty(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetIsCurrentRowDirty(result);
        }
        public static System.Boolean EndGetIsCurrentRowDirty(IAsyncResult result)
        {
            return getIsCurrentRowDirtyCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsCurrentRowDirtyAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetIsCurrentRowDirty,
                EndGetIsCurrentRowDirty,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getMultiSelectInternal = (x) => x.MultiSelect;
        public static System.Boolean GetMultiSelect(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getMultiSelectInternal, target);
            else
                return getMultiSelectInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getMultiSelectCallback = GetMultiSelect;
        public static IAsyncResult BeginGetMultiSelect(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getMultiSelectCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetMultiSelect(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetMultiSelect(result);
        }
        public static System.Boolean EndGetMultiSelect(IAsyncResult result)
        {
            return getMultiSelectCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetMultiSelectAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetMultiSelect,
                EndGetMultiSelect,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setMultiSelectInternal = (x, v) => x.MultiSelect = v;
        public static void SetMultiSelect(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMultiSelectInternal, target, value);
            else
                setMultiSelectInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setMultiSelectCallback = SetMultiSelect;
        public static IAsyncResult BeginSetMultiSelect(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setMultiSelectCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMultiSelect(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetMultiSelect(result);
        }
        public static void EndSetMultiSelect(IAsyncResult result)
        {
            setMultiSelectCallback.EndInvoke(result);
        }
        public static Task SetMultiSelectAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetMultiSelect,
                EndSetMultiSelect,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getNewRowIndexInternal = (x) => x.NewRowIndex;
        public static System.Int32 GetNewRowIndex(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getNewRowIndexInternal, target);
            else
                return getNewRowIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getNewRowIndexCallback = GetNewRowIndex;
        public static IAsyncResult BeginGetNewRowIndex(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getNewRowIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetNewRowIndex(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetNewRowIndex(result);
        }
        public static System.Int32 EndGetNewRowIndex(IAsyncResult result)
        {
            return getNewRowIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetNewRowIndexAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetNewRowIndex,
                EndGetNewRowIndex,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle> getRowHeadersBorderStyleInternal = (x) => x.RowHeadersBorderStyle;
        public static System.Windows.Forms.DataGridViewHeaderBorderStyle GetRowHeadersBorderStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewHeaderBorderStyle)target.Invoke(getRowHeadersBorderStyleInternal, target);
            else
                return getRowHeadersBorderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle> getRowHeadersBorderStyleCallback = GetRowHeadersBorderStyle;
        public static IAsyncResult BeginGetRowHeadersBorderStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getRowHeadersBorderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewHeaderBorderStyle EndGetRowHeadersBorderStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetRowHeadersBorderStyle(result);
        }
        public static System.Windows.Forms.DataGridViewHeaderBorderStyle EndGetRowHeadersBorderStyle(IAsyncResult result)
        {
            return getRowHeadersBorderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewHeaderBorderStyle> GetRowHeadersBorderStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewHeaderBorderStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetRowHeadersBorderStyle,
                EndGetRowHeadersBorderStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle> setRowHeadersBorderStyleInternal = (x, v) => x.RowHeadersBorderStyle = v;
        public static void SetRowHeadersBorderStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewHeaderBorderStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowHeadersBorderStyleInternal, target, value);
            else
                setRowHeadersBorderStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle> setRowHeadersBorderStyleCallback = SetRowHeadersBorderStyle;
        public static IAsyncResult BeginSetRowHeadersBorderStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewHeaderBorderStyle value, AsyncCallback callback, object state)
        {
            return setRowHeadersBorderStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowHeadersBorderStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetRowHeadersBorderStyle(result);
        }
        public static void EndSetRowHeadersBorderStyle(IAsyncResult result)
        {
            setRowHeadersBorderStyleCallback.EndInvoke(result);
        }
        public static Task SetRowHeadersBorderStyleAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewHeaderBorderStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderBorderStyle>(
                BeginSetRowHeadersBorderStyle,
                EndSetRowHeadersBorderStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getRowHeadersDefaultCellStyleInternal = (x) => x.RowHeadersDefaultCellStyle;
        public static System.Windows.Forms.DataGridViewCellStyle GetRowHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewCellStyle)target.Invoke(getRowHeadersDefaultCellStyleInternal, target);
            else
                return getRowHeadersDefaultCellStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getRowHeadersDefaultCellStyleCallback = GetRowHeadersDefaultCellStyle;
        public static IAsyncResult BeginGetRowHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getRowHeadersDefaultCellStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetRowHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetRowHeadersDefaultCellStyle(result);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetRowHeadersDefaultCellStyle(IAsyncResult result)
        {
            return getRowHeadersDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewCellStyle> GetRowHeadersDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewCellStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetRowHeadersDefaultCellStyle,
                EndGetRowHeadersDefaultCellStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setRowHeadersDefaultCellStyleInternal = (x, v) => x.RowHeadersDefaultCellStyle = v;
        public static void SetRowHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowHeadersDefaultCellStyleInternal, target, value);
            else
                setRowHeadersDefaultCellStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setRowHeadersDefaultCellStyleCallback = SetRowHeadersDefaultCellStyle;
        public static IAsyncResult BeginSetRowHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value, AsyncCallback callback, object state)
        {
            return setRowHeadersDefaultCellStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowHeadersDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetRowHeadersDefaultCellStyle(result);
        }
        public static void EndSetRowHeadersDefaultCellStyle(IAsyncResult result)
        {
            setRowHeadersDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task SetRowHeadersDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle>(
                BeginSetRowHeadersDefaultCellStyle,
                EndSetRowHeadersDefaultCellStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getRowHeadersWidthInternal = (x) => x.RowHeadersWidth;
        public static System.Int32 GetRowHeadersWidth(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getRowHeadersWidthInternal, target);
            else
                return getRowHeadersWidthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getRowHeadersWidthCallback = GetRowHeadersWidth;
        public static IAsyncResult BeginGetRowHeadersWidth(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getRowHeadersWidthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetRowHeadersWidth(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetRowHeadersWidth(result);
        }
        public static System.Int32 EndGetRowHeadersWidth(IAsyncResult result)
        {
            return getRowHeadersWidthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetRowHeadersWidthAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetRowHeadersWidth,
                EndGetRowHeadersWidth,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setRowHeadersWidthInternal = (x, v) => x.RowHeadersWidth = v;
        public static void SetRowHeadersWidth(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowHeadersWidthInternal, target, value);
            else
                setRowHeadersWidthInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Int32> setRowHeadersWidthCallback = SetRowHeadersWidth;
        public static IAsyncResult BeginSetRowHeadersWidth(this System.Windows.Forms.DataGridView target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setRowHeadersWidthCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowHeadersWidth(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetRowHeadersWidth(result);
        }
        public static void EndSetRowHeadersWidth(IAsyncResult result)
        {
            setRowHeadersWidthCallback.EndInvoke(result);
        }
        public static Task SetRowHeadersWidthAsync(this System.Windows.Forms.DataGridView target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Int32>(
                BeginSetRowHeadersWidth,
                EndSetRowHeadersWidth,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode> getRowHeadersWidthSizeModeInternal = (x) => x.RowHeadersWidthSizeMode;
        public static System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode GetRowHeadersWidthSizeMode(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode)target.Invoke(getRowHeadersWidthSizeModeInternal, target);
            else
                return getRowHeadersWidthSizeModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode> getRowHeadersWidthSizeModeCallback = GetRowHeadersWidthSizeMode;
        public static IAsyncResult BeginGetRowHeadersWidthSizeMode(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getRowHeadersWidthSizeModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode EndGetRowHeadersWidthSizeMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetRowHeadersWidthSizeMode(result);
        }
        public static System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode EndGetRowHeadersWidthSizeMode(IAsyncResult result)
        {
            return getRowHeadersWidthSizeModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode> GetRowHeadersWidthSizeModeAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetRowHeadersWidthSizeMode,
                EndGetRowHeadersWidthSizeMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode> setRowHeadersWidthSizeModeInternal = (x, v) => x.RowHeadersWidthSizeMode = v;
        public static void SetRowHeadersWidthSizeMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowHeadersWidthSizeModeInternal, target, value);
            else
                setRowHeadersWidthSizeModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode> setRowHeadersWidthSizeModeCallback = SetRowHeadersWidthSizeMode;
        public static IAsyncResult BeginSetRowHeadersWidthSizeMode(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode value, AsyncCallback callback, object state)
        {
            return setRowHeadersWidthSizeModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowHeadersWidthSizeMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetRowHeadersWidthSizeMode(result);
        }
        public static void EndSetRowHeadersWidthSizeMode(IAsyncResult result)
        {
            setRowHeadersWidthSizeModeCallback.EndInvoke(result);
        }
        public static Task SetRowHeadersWidthSizeModeAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode>(
                BeginSetRowHeadersWidthSizeMode,
                EndSetRowHeadersWidthSizeMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getRowsDefaultCellStyleInternal = (x) => x.RowsDefaultCellStyle;
        public static System.Windows.Forms.DataGridViewCellStyle GetRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewCellStyle)target.Invoke(getRowsDefaultCellStyleInternal, target);
            else
                return getRowsDefaultCellStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> getRowsDefaultCellStyleCallback = GetRowsDefaultCellStyle;
        public static IAsyncResult BeginGetRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getRowsDefaultCellStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetRowsDefaultCellStyle(result);
        }
        public static System.Windows.Forms.DataGridViewCellStyle EndGetRowsDefaultCellStyle(IAsyncResult result)
        {
            return getRowsDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewCellStyle> GetRowsDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewCellStyle>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetRowsDefaultCellStyle,
                EndGetRowsDefaultCellStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setRowsDefaultCellStyleInternal = (x, v) => x.RowsDefaultCellStyle = v;
        public static void SetRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowsDefaultCellStyleInternal, target, value);
            else
                setRowsDefaultCellStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle> setRowsDefaultCellStyleCallback = SetRowsDefaultCellStyle;
        public static IAsyncResult BeginSetRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value, AsyncCallback callback, object state)
        {
            return setRowsDefaultCellStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowsDefaultCellStyle(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetRowsDefaultCellStyle(result);
        }
        public static void EndSetRowsDefaultCellStyle(IAsyncResult result)
        {
            setRowsDefaultCellStyleCallback.EndInvoke(result);
        }
        public static Task SetRowsDefaultCellStyleAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewCellStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewCellStyle>(
                BeginSetRowsDefaultCellStyle,
                EndSetRowsDefaultCellStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRow> getRowTemplateInternal = (x) => x.RowTemplate;
        public static System.Windows.Forms.DataGridViewRow GetRowTemplate(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewRow)target.Invoke(getRowTemplateInternal, target);
            else
                return getRowTemplateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRow> getRowTemplateCallback = GetRowTemplate;
        public static IAsyncResult BeginGetRowTemplate(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getRowTemplateCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewRow EndGetRowTemplate(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetRowTemplate(result);
        }
        public static System.Windows.Forms.DataGridViewRow EndGetRowTemplate(IAsyncResult result)
        {
            return getRowTemplateCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewRow> GetRowTemplateAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewRow>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetRowTemplate,
                EndGetRowTemplate,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRow> setRowTemplateInternal = (x, v) => x.RowTemplate = v;
        public static void SetRowTemplate(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewRow value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setRowTemplateInternal, target, value);
            else
                setRowTemplateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRow> setRowTemplateCallback = SetRowTemplate;
        public static IAsyncResult BeginSetRowTemplate(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewRow value, AsyncCallback callback, object state)
        {
            return setRowTemplateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetRowTemplate(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetRowTemplate(result);
        }
        public static void EndSetRowTemplate(IAsyncResult result)
        {
            setRowTemplateCallback.EndInvoke(result);
        }
        public static Task SetRowTemplateAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewRow value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewRow>(
                BeginSetRowTemplate,
                EndSetRowTemplate,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewSelectedCellCollection> getSelectedCellsInternal = (x) => x.SelectedCells;
        public static System.Windows.Forms.DataGridViewSelectedCellCollection GetSelectedCells(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewSelectedCellCollection)target.Invoke(getSelectedCellsInternal, target);
            else
                return getSelectedCellsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewSelectedCellCollection> getSelectedCellsCallback = GetSelectedCells;
        public static IAsyncResult BeginGetSelectedCells(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getSelectedCellsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewSelectedCellCollection EndGetSelectedCells(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetSelectedCells(result);
        }
        public static System.Windows.Forms.DataGridViewSelectedCellCollection EndGetSelectedCells(IAsyncResult result)
        {
            return getSelectedCellsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewSelectedCellCollection> GetSelectedCellsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewSelectedCellCollection>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetSelectedCells,
                EndGetSelectedCells,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewSelectedColumnCollection> getSelectedColumnsInternal = (x) => x.SelectedColumns;
        public static System.Windows.Forms.DataGridViewSelectedColumnCollection GetSelectedColumns(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewSelectedColumnCollection)target.Invoke(getSelectedColumnsInternal, target);
            else
                return getSelectedColumnsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewSelectedColumnCollection> getSelectedColumnsCallback = GetSelectedColumns;
        public static IAsyncResult BeginGetSelectedColumns(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getSelectedColumnsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewSelectedColumnCollection EndGetSelectedColumns(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetSelectedColumns(result);
        }
        public static System.Windows.Forms.DataGridViewSelectedColumnCollection EndGetSelectedColumns(IAsyncResult result)
        {
            return getSelectedColumnsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewSelectedColumnCollection> GetSelectedColumnsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewSelectedColumnCollection>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetSelectedColumns,
                EndGetSelectedColumns,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewSelectedRowCollection> getSelectedRowsInternal = (x) => x.SelectedRows;
        public static System.Windows.Forms.DataGridViewSelectedRowCollection GetSelectedRows(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewSelectedRowCollection)target.Invoke(getSelectedRowsInternal, target);
            else
                return getSelectedRowsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewSelectedRowCollection> getSelectedRowsCallback = GetSelectedRows;
        public static IAsyncResult BeginGetSelectedRows(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getSelectedRowsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewSelectedRowCollection EndGetSelectedRows(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetSelectedRows(result);
        }
        public static System.Windows.Forms.DataGridViewSelectedRowCollection EndGetSelectedRows(IAsyncResult result)
        {
            return getSelectedRowsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewSelectedRowCollection> GetSelectedRowsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewSelectedRowCollection>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetSelectedRows,
                EndGetSelectedRows,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getShowCellErrorsInternal = (x) => x.ShowCellErrors;
        public static System.Boolean GetShowCellErrors(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowCellErrorsInternal, target);
            else
                return getShowCellErrorsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getShowCellErrorsCallback = GetShowCellErrors;
        public static IAsyncResult BeginGetShowCellErrors(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getShowCellErrorsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowCellErrors(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetShowCellErrors(result);
        }
        public static System.Boolean EndGetShowCellErrors(IAsyncResult result)
        {
            return getShowCellErrorsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowCellErrorsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetShowCellErrors,
                EndGetShowCellErrors,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setShowCellErrorsInternal = (x, v) => x.ShowCellErrors = v;
        public static void SetShowCellErrors(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowCellErrorsInternal, target, value);
            else
                setShowCellErrorsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setShowCellErrorsCallback = SetShowCellErrors;
        public static IAsyncResult BeginSetShowCellErrors(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowCellErrorsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowCellErrors(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetShowCellErrors(result);
        }
        public static void EndSetShowCellErrors(IAsyncResult result)
        {
            setShowCellErrorsCallback.EndInvoke(result);
        }
        public static Task SetShowCellErrorsAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetShowCellErrors,
                EndSetShowCellErrors,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getShowCellToolTipsInternal = (x) => x.ShowCellToolTips;
        public static System.Boolean GetShowCellToolTips(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowCellToolTipsInternal, target);
            else
                return getShowCellToolTipsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getShowCellToolTipsCallback = GetShowCellToolTips;
        public static IAsyncResult BeginGetShowCellToolTips(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getShowCellToolTipsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowCellToolTips(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetShowCellToolTips(result);
        }
        public static System.Boolean EndGetShowCellToolTips(IAsyncResult result)
        {
            return getShowCellToolTipsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowCellToolTipsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetShowCellToolTips,
                EndGetShowCellToolTips,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setShowCellToolTipsInternal = (x, v) => x.ShowCellToolTips = v;
        public static void SetShowCellToolTips(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowCellToolTipsInternal, target, value);
            else
                setShowCellToolTipsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setShowCellToolTipsCallback = SetShowCellToolTips;
        public static IAsyncResult BeginSetShowCellToolTips(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowCellToolTipsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowCellToolTips(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetShowCellToolTips(result);
        }
        public static void EndSetShowCellToolTips(IAsyncResult result)
        {
            setShowCellToolTipsCallback.EndInvoke(result);
        }
        public static Task SetShowCellToolTipsAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetShowCellToolTips,
                EndSetShowCellToolTips,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getShowEditingIconInternal = (x) => x.ShowEditingIcon;
        public static System.Boolean GetShowEditingIcon(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowEditingIconInternal, target);
            else
                return getShowEditingIconInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getShowEditingIconCallback = GetShowEditingIcon;
        public static IAsyncResult BeginGetShowEditingIcon(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getShowEditingIconCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowEditingIcon(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetShowEditingIcon(result);
        }
        public static System.Boolean EndGetShowEditingIcon(IAsyncResult result)
        {
            return getShowEditingIconCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowEditingIconAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetShowEditingIcon,
                EndGetShowEditingIcon,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setShowEditingIconInternal = (x, v) => x.ShowEditingIcon = v;
        public static void SetShowEditingIcon(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowEditingIconInternal, target, value);
            else
                setShowEditingIconInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setShowEditingIconCallback = SetShowEditingIcon;
        public static IAsyncResult BeginSetShowEditingIcon(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowEditingIconCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowEditingIcon(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetShowEditingIcon(result);
        }
        public static void EndSetShowEditingIcon(IAsyncResult result)
        {
            setShowEditingIconCallback.EndInvoke(result);
        }
        public static Task SetShowEditingIconAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetShowEditingIcon,
                EndSetShowEditingIcon,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getShowRowErrorsInternal = (x) => x.ShowRowErrors;
        public static System.Boolean GetShowRowErrors(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowRowErrorsInternal, target);
            else
                return getShowRowErrorsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getShowRowErrorsCallback = GetShowRowErrors;
        public static IAsyncResult BeginGetShowRowErrors(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getShowRowErrorsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowRowErrors(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetShowRowErrors(result);
        }
        public static System.Boolean EndGetShowRowErrors(IAsyncResult result)
        {
            return getShowRowErrorsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowRowErrorsAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetShowRowErrors,
                EndGetShowRowErrors,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setShowRowErrorsInternal = (x, v) => x.ShowRowErrors = v;
        public static void SetShowRowErrors(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowRowErrorsInternal, target, value);
            else
                setShowRowErrorsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setShowRowErrorsCallback = SetShowRowErrors;
        public static IAsyncResult BeginSetShowRowErrors(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowRowErrorsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowRowErrors(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetShowRowErrors(result);
        }
        public static void EndSetShowRowErrors(IAsyncResult result)
        {
            setShowRowErrorsCallback.EndInvoke(result);
        }
        public static Task SetShowRowErrorsAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetShowRowErrors,
                EndSetShowRowErrors,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumn> getSortedColumnInternal = (x) => x.SortedColumn;
        public static System.Windows.Forms.DataGridViewColumn GetSortedColumn(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewColumn)target.Invoke(getSortedColumnInternal, target);
            else
                return getSortedColumnInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewColumn> getSortedColumnCallback = GetSortedColumn;
        public static IAsyncResult BeginGetSortedColumn(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getSortedColumnCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewColumn EndGetSortedColumn(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetSortedColumn(result);
        }
        public static System.Windows.Forms.DataGridViewColumn EndGetSortedColumn(IAsyncResult result)
        {
            return getSortedColumnCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewColumn> GetSortedColumnAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewColumn>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetSortedColumn,
                EndGetSortedColumn,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.SortOrder> getSortOrderInternal = (x) => x.SortOrder;
        public static System.Windows.Forms.SortOrder GetSortOrder(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.SortOrder)target.Invoke(getSortOrderInternal, target);
            else
                return getSortOrderInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.SortOrder> getSortOrderCallback = GetSortOrder;
        public static IAsyncResult BeginGetSortOrder(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getSortOrderCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.SortOrder EndGetSortOrder(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetSortOrder(result);
        }
        public static System.Windows.Forms.SortOrder EndGetSortOrder(IAsyncResult result)
        {
            return getSortOrderCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.SortOrder> GetSortOrderAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.SortOrder>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetSortOrder,
                EndGetSortOrder,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getStandardTabInternal = (x) => x.StandardTab;
        public static System.Boolean GetStandardTab(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getStandardTabInternal, target);
            else
                return getStandardTabInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getStandardTabCallback = GetStandardTab;
        public static IAsyncResult BeginGetStandardTab(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getStandardTabCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetStandardTab(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetStandardTab(result);
        }
        public static System.Boolean EndGetStandardTab(IAsyncResult result)
        {
            return getStandardTabCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetStandardTabAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetStandardTab,
                EndGetStandardTab,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setStandardTabInternal = (x, v) => x.StandardTab = v;
        public static void SetStandardTab(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setStandardTabInternal, target, value);
            else
                setStandardTabInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setStandardTabCallback = SetStandardTab;
        public static IAsyncResult BeginSetStandardTab(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setStandardTabCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetStandardTab(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetStandardTab(result);
        }
        public static void EndSetStandardTab(IAsyncResult result)
        {
            setStandardTabCallback.EndInvoke(result);
        }
        public static Task SetStandardTabAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetStandardTab,
                EndSetStandardTab,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderCell> getTopLeftHeaderCellInternal = (x) => x.TopLeftHeaderCell;
        public static System.Windows.Forms.DataGridViewHeaderCell GetTopLeftHeaderCell(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DataGridViewHeaderCell)target.Invoke(getTopLeftHeaderCellInternal, target);
            else
                return getTopLeftHeaderCellInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderCell> getTopLeftHeaderCellCallback = GetTopLeftHeaderCell;
        public static IAsyncResult BeginGetTopLeftHeaderCell(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getTopLeftHeaderCellCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DataGridViewHeaderCell EndGetTopLeftHeaderCell(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetTopLeftHeaderCell(result);
        }
        public static System.Windows.Forms.DataGridViewHeaderCell EndGetTopLeftHeaderCell(IAsyncResult result)
        {
            return getTopLeftHeaderCellCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DataGridViewHeaderCell> GetTopLeftHeaderCellAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.DataGridViewHeaderCell>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetTopLeftHeaderCell,
                EndGetTopLeftHeaderCell,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderCell> setTopLeftHeaderCellInternal = (x, v) => x.TopLeftHeaderCell = v;
        public static void SetTopLeftHeaderCell(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewHeaderCell value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTopLeftHeaderCellInternal, target, value);
            else
                setTopLeftHeaderCellInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderCell> setTopLeftHeaderCellCallback = SetTopLeftHeaderCell;
        public static IAsyncResult BeginSetTopLeftHeaderCell(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewHeaderCell value, AsyncCallback callback, object state)
        {
            return setTopLeftHeaderCellCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTopLeftHeaderCell(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetTopLeftHeaderCell(result);
        }
        public static void EndSetTopLeftHeaderCell(IAsyncResult result)
        {
            setTopLeftHeaderCellCallback.EndInvoke(result);
        }
        public static Task SetTopLeftHeaderCellAsync(this System.Windows.Forms.DataGridView target, System.Windows.Forms.DataGridViewHeaderCell value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Windows.Forms.DataGridViewHeaderCell>(
                BeginSetTopLeftHeaderCell,
                EndSetTopLeftHeaderCell,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.Cursor> getUserSetCursorInternal = (x) => x.UserSetCursor;
        public static System.Windows.Forms.Cursor GetUserSetCursor(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Cursor)target.Invoke(getUserSetCursorInternal, target);
            else
                return getUserSetCursorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Windows.Forms.Cursor> getUserSetCursorCallback = GetUserSetCursor;
        public static IAsyncResult BeginGetUserSetCursor(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getUserSetCursorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Cursor EndGetUserSetCursor(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetUserSetCursor(result);
        }
        public static System.Windows.Forms.Cursor EndGetUserSetCursor(IAsyncResult result)
        {
            return getUserSetCursorCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Cursor> GetUserSetCursorAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Windows.Forms.Cursor>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetUserSetCursor,
                EndGetUserSetCursor,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getVerticalScrollingOffsetInternal = (x) => x.VerticalScrollingOffset;
        public static System.Int32 GetVerticalScrollingOffset(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getVerticalScrollingOffsetInternal, target);
            else
                return getVerticalScrollingOffsetInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Int32> getVerticalScrollingOffsetCallback = GetVerticalScrollingOffset;
        public static IAsyncResult BeginGetVerticalScrollingOffset(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getVerticalScrollingOffsetCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetVerticalScrollingOffset(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetVerticalScrollingOffset(result);
        }
        public static System.Int32 EndGetVerticalScrollingOffset(IAsyncResult result)
        {
            return getVerticalScrollingOffsetCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetVerticalScrollingOffsetAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetVerticalScrollingOffset,
                EndGetVerticalScrollingOffset,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getVirtualModeInternal = (x) => x.VirtualMode;
        public static System.Boolean GetVirtualMode(this System.Windows.Forms.DataGridView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getVirtualModeInternal, target);
            else
                return getVirtualModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DataGridView, System.Boolean> getVirtualModeCallback = GetVirtualMode;
        public static IAsyncResult BeginGetVirtualMode(this System.Windows.Forms.DataGridView target, AsyncCallback callback, object state)
        {
            return getVirtualModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetVirtualMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            return EndGetVirtualMode(result);
        }
        public static System.Boolean EndGetVirtualMode(IAsyncResult result)
        {
            return getVirtualModeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetVirtualModeAsync(this System.Windows.Forms.DataGridView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DataGridView>(
                BeginGetVirtualMode,
                EndGetVirtualMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setVirtualModeInternal = (x, v) => x.VirtualMode = v;
        public static void SetVirtualMode(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setVirtualModeInternal, target, value);
            else
                setVirtualModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DataGridView, System.Boolean> setVirtualModeCallback = SetVirtualMode;
        public static IAsyncResult BeginSetVirtualMode(this System.Windows.Forms.DataGridView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setVirtualModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetVirtualMode(this System.Windows.Forms.DataGridView target, IAsyncResult result)
        {
            EndSetVirtualMode(result);
        }
        public static void EndSetVirtualMode(IAsyncResult result)
        {
            setVirtualModeCallback.EndInvoke(result);
        }
        public static Task SetVirtualModeAsync(this System.Windows.Forms.DataGridView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DataGridView, System.Boolean>(
                BeginSetVirtualMode,
                EndSetVirtualMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarForeColorInternal = (x) => x.CalendarForeColor;
        public static System.Drawing.Color GetCalendarForeColor(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCalendarForeColorInternal, target);
            else
                return getCalendarForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarForeColorCallback = GetCalendarForeColor;
        public static IAsyncResult BeginGetCalendarForeColor(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getCalendarForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCalendarForeColor(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetCalendarForeColor(result);
        }
        public static System.Drawing.Color EndGetCalendarForeColor(IAsyncResult result)
        {
            return getCalendarForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCalendarForeColorAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetCalendarForeColor,
                EndGetCalendarForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarForeColorInternal = (x, v) => x.CalendarForeColor = v;
        public static void SetCalendarForeColor(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCalendarForeColorInternal, target, value);
            else
                setCalendarForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarForeColorCallback = SetCalendarForeColor;
        public static IAsyncResult BeginSetCalendarForeColor(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCalendarForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCalendarForeColor(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetCalendarForeColor(result);
        }
        public static void EndSetCalendarForeColor(IAsyncResult result)
        {
            setCalendarForeColorCallback.EndInvoke(result);
        }
        public static Task SetCalendarForeColorAsync(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Drawing.Color>(
                BeginSetCalendarForeColor,
                EndSetCalendarForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Font> getCalendarFontInternal = (x) => x.CalendarFont;
        public static System.Drawing.Font GetCalendarFont(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Font)target.Invoke(getCalendarFontInternal, target);
            else
                return getCalendarFontInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Font> getCalendarFontCallback = GetCalendarFont;
        public static IAsyncResult BeginGetCalendarFont(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getCalendarFontCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Font EndGetCalendarFont(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetCalendarFont(result);
        }
        public static System.Drawing.Font EndGetCalendarFont(IAsyncResult result)
        {
            return getCalendarFontCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Font> GetCalendarFontAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Drawing.Font>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetCalendarFont,
                EndGetCalendarFont,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Font> setCalendarFontInternal = (x, v) => x.CalendarFont = v;
        public static void SetCalendarFont(this System.Windows.Forms.DateTimePicker target, System.Drawing.Font value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCalendarFontInternal, target, value);
            else
                setCalendarFontInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Font> setCalendarFontCallback = SetCalendarFont;
        public static IAsyncResult BeginSetCalendarFont(this System.Windows.Forms.DateTimePicker target, System.Drawing.Font value, AsyncCallback callback, object state)
        {
            return setCalendarFontCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCalendarFont(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetCalendarFont(result);
        }
        public static void EndSetCalendarFont(IAsyncResult result)
        {
            setCalendarFontCallback.EndInvoke(result);
        }
        public static Task SetCalendarFontAsync(this System.Windows.Forms.DateTimePicker target, System.Drawing.Font value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Drawing.Font>(
                BeginSetCalendarFont,
                EndSetCalendarFont,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarTitleBackColorInternal = (x) => x.CalendarTitleBackColor;
        public static System.Drawing.Color GetCalendarTitleBackColor(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCalendarTitleBackColorInternal, target);
            else
                return getCalendarTitleBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarTitleBackColorCallback = GetCalendarTitleBackColor;
        public static IAsyncResult BeginGetCalendarTitleBackColor(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getCalendarTitleBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCalendarTitleBackColor(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetCalendarTitleBackColor(result);
        }
        public static System.Drawing.Color EndGetCalendarTitleBackColor(IAsyncResult result)
        {
            return getCalendarTitleBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCalendarTitleBackColorAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetCalendarTitleBackColor,
                EndGetCalendarTitleBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarTitleBackColorInternal = (x, v) => x.CalendarTitleBackColor = v;
        public static void SetCalendarTitleBackColor(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCalendarTitleBackColorInternal, target, value);
            else
                setCalendarTitleBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarTitleBackColorCallback = SetCalendarTitleBackColor;
        public static IAsyncResult BeginSetCalendarTitleBackColor(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCalendarTitleBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCalendarTitleBackColor(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetCalendarTitleBackColor(result);
        }
        public static void EndSetCalendarTitleBackColor(IAsyncResult result)
        {
            setCalendarTitleBackColorCallback.EndInvoke(result);
        }
        public static Task SetCalendarTitleBackColorAsync(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Drawing.Color>(
                BeginSetCalendarTitleBackColor,
                EndSetCalendarTitleBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarTitleForeColorInternal = (x) => x.CalendarTitleForeColor;
        public static System.Drawing.Color GetCalendarTitleForeColor(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCalendarTitleForeColorInternal, target);
            else
                return getCalendarTitleForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarTitleForeColorCallback = GetCalendarTitleForeColor;
        public static IAsyncResult BeginGetCalendarTitleForeColor(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getCalendarTitleForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCalendarTitleForeColor(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetCalendarTitleForeColor(result);
        }
        public static System.Drawing.Color EndGetCalendarTitleForeColor(IAsyncResult result)
        {
            return getCalendarTitleForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCalendarTitleForeColorAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetCalendarTitleForeColor,
                EndGetCalendarTitleForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarTitleForeColorInternal = (x, v) => x.CalendarTitleForeColor = v;
        public static void SetCalendarTitleForeColor(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCalendarTitleForeColorInternal, target, value);
            else
                setCalendarTitleForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarTitleForeColorCallback = SetCalendarTitleForeColor;
        public static IAsyncResult BeginSetCalendarTitleForeColor(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCalendarTitleForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCalendarTitleForeColor(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetCalendarTitleForeColor(result);
        }
        public static void EndSetCalendarTitleForeColor(IAsyncResult result)
        {
            setCalendarTitleForeColorCallback.EndInvoke(result);
        }
        public static Task SetCalendarTitleForeColorAsync(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Drawing.Color>(
                BeginSetCalendarTitleForeColor,
                EndSetCalendarTitleForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarTrailingForeColorInternal = (x) => x.CalendarTrailingForeColor;
        public static System.Drawing.Color GetCalendarTrailingForeColor(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCalendarTrailingForeColorInternal, target);
            else
                return getCalendarTrailingForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarTrailingForeColorCallback = GetCalendarTrailingForeColor;
        public static IAsyncResult BeginGetCalendarTrailingForeColor(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getCalendarTrailingForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCalendarTrailingForeColor(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetCalendarTrailingForeColor(result);
        }
        public static System.Drawing.Color EndGetCalendarTrailingForeColor(IAsyncResult result)
        {
            return getCalendarTrailingForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCalendarTrailingForeColorAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetCalendarTrailingForeColor,
                EndGetCalendarTrailingForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarTrailingForeColorInternal = (x, v) => x.CalendarTrailingForeColor = v;
        public static void SetCalendarTrailingForeColor(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCalendarTrailingForeColorInternal, target, value);
            else
                setCalendarTrailingForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarTrailingForeColorCallback = SetCalendarTrailingForeColor;
        public static IAsyncResult BeginSetCalendarTrailingForeColor(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCalendarTrailingForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCalendarTrailingForeColor(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetCalendarTrailingForeColor(result);
        }
        public static void EndSetCalendarTrailingForeColor(IAsyncResult result)
        {
            setCalendarTrailingForeColorCallback.EndInvoke(result);
        }
        public static Task SetCalendarTrailingForeColorAsync(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Drawing.Color>(
                BeginSetCalendarTrailingForeColor,
                EndSetCalendarTrailingForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarMonthBackgroundInternal = (x) => x.CalendarMonthBackground;
        public static System.Drawing.Color GetCalendarMonthBackground(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getCalendarMonthBackgroundInternal, target);
            else
                return getCalendarMonthBackgroundInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Drawing.Color> getCalendarMonthBackgroundCallback = GetCalendarMonthBackground;
        public static IAsyncResult BeginGetCalendarMonthBackground(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getCalendarMonthBackgroundCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetCalendarMonthBackground(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetCalendarMonthBackground(result);
        }
        public static System.Drawing.Color EndGetCalendarMonthBackground(IAsyncResult result)
        {
            return getCalendarMonthBackgroundCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetCalendarMonthBackgroundAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetCalendarMonthBackground,
                EndGetCalendarMonthBackground,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarMonthBackgroundInternal = (x, v) => x.CalendarMonthBackground = v;
        public static void SetCalendarMonthBackground(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCalendarMonthBackgroundInternal, target, value);
            else
                setCalendarMonthBackgroundInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Drawing.Color> setCalendarMonthBackgroundCallback = SetCalendarMonthBackground;
        public static IAsyncResult BeginSetCalendarMonthBackground(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setCalendarMonthBackgroundCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCalendarMonthBackground(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetCalendarMonthBackground(result);
        }
        public static void EndSetCalendarMonthBackground(IAsyncResult result)
        {
            setCalendarMonthBackgroundCallback.EndInvoke(result);
        }
        public static Task SetCalendarMonthBackgroundAsync(this System.Windows.Forms.DateTimePicker target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Drawing.Color>(
                BeginSetCalendarMonthBackground,
                EndSetCalendarMonthBackground,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.String> getCustomFormatInternal = (x) => x.CustomFormat;
        public static System.String GetCustomFormat(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getCustomFormatInternal, target);
            else
                return getCustomFormatInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.String> getCustomFormatCallback = GetCustomFormat;
        public static IAsyncResult BeginGetCustomFormat(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getCustomFormatCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetCustomFormat(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetCustomFormat(result);
        }
        public static System.String EndGetCustomFormat(IAsyncResult result)
        {
            return getCustomFormatCallback.EndInvoke(result);
        }
        public static Task<System.String> GetCustomFormatAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetCustomFormat,
                EndGetCustomFormat,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.String> setCustomFormatInternal = (x, v) => x.CustomFormat = v;
        public static void SetCustomFormat(this System.Windows.Forms.DateTimePicker target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCustomFormatInternal, target, value);
            else
                setCustomFormatInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.String> setCustomFormatCallback = SetCustomFormat;
        public static IAsyncResult BeginSetCustomFormat(this System.Windows.Forms.DateTimePicker target, System.String value, AsyncCallback callback, object state)
        {
            return setCustomFormatCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCustomFormat(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetCustomFormat(result);
        }
        public static void EndSetCustomFormat(IAsyncResult result)
        {
            setCustomFormatCallback.EndInvoke(result);
        }
        public static Task SetCustomFormatAsync(this System.Windows.Forms.DateTimePicker target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.String>(
                BeginSetCustomFormat,
                EndSetCustomFormat,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Windows.Forms.LeftRightAlignment> getDropDownAlignInternal = (x) => x.DropDownAlign;
        public static System.Windows.Forms.LeftRightAlignment GetDropDownAlign(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.LeftRightAlignment)target.Invoke(getDropDownAlignInternal, target);
            else
                return getDropDownAlignInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Windows.Forms.LeftRightAlignment> getDropDownAlignCallback = GetDropDownAlign;
        public static IAsyncResult BeginGetDropDownAlign(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getDropDownAlignCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.LeftRightAlignment EndGetDropDownAlign(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetDropDownAlign(result);
        }
        public static System.Windows.Forms.LeftRightAlignment EndGetDropDownAlign(IAsyncResult result)
        {
            return getDropDownAlignCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.LeftRightAlignment> GetDropDownAlignAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Windows.Forms.LeftRightAlignment>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetDropDownAlign,
                EndGetDropDownAlign,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Windows.Forms.LeftRightAlignment> setDropDownAlignInternal = (x, v) => x.DropDownAlign = v;
        public static void SetDropDownAlign(this System.Windows.Forms.DateTimePicker target, System.Windows.Forms.LeftRightAlignment value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDropDownAlignInternal, target, value);
            else
                setDropDownAlignInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Windows.Forms.LeftRightAlignment> setDropDownAlignCallback = SetDropDownAlign;
        public static IAsyncResult BeginSetDropDownAlign(this System.Windows.Forms.DateTimePicker target, System.Windows.Forms.LeftRightAlignment value, AsyncCallback callback, object state)
        {
            return setDropDownAlignCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDropDownAlign(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetDropDownAlign(result);
        }
        public static void EndSetDropDownAlign(IAsyncResult result)
        {
            setDropDownAlignCallback.EndInvoke(result);
        }
        public static Task SetDropDownAlignAsync(this System.Windows.Forms.DateTimePicker target, System.Windows.Forms.LeftRightAlignment value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Windows.Forms.LeftRightAlignment>(
                BeginSetDropDownAlign,
                EndSetDropDownAlign,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Windows.Forms.DateTimePickerFormat> getFormatInternal = (x) => x.Format;
        public static System.Windows.Forms.DateTimePickerFormat GetFormat(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.DateTimePickerFormat)target.Invoke(getFormatInternal, target);
            else
                return getFormatInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Windows.Forms.DateTimePickerFormat> getFormatCallback = GetFormat;
        public static IAsyncResult BeginGetFormat(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getFormatCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.DateTimePickerFormat EndGetFormat(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetFormat(result);
        }
        public static System.Windows.Forms.DateTimePickerFormat EndGetFormat(IAsyncResult result)
        {
            return getFormatCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.DateTimePickerFormat> GetFormatAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Windows.Forms.DateTimePickerFormat>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetFormat,
                EndGetFormat,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Windows.Forms.DateTimePickerFormat> setFormatInternal = (x, v) => x.Format = v;
        public static void SetFormat(this System.Windows.Forms.DateTimePicker target, System.Windows.Forms.DateTimePickerFormat value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFormatInternal, target, value);
            else
                setFormatInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Windows.Forms.DateTimePickerFormat> setFormatCallback = SetFormat;
        public static IAsyncResult BeginSetFormat(this System.Windows.Forms.DateTimePicker target, System.Windows.Forms.DateTimePickerFormat value, AsyncCallback callback, object state)
        {
            return setFormatCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFormat(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetFormat(result);
        }
        public static void EndSetFormat(IAsyncResult result)
        {
            setFormatCallback.EndInvoke(result);
        }
        public static Task SetFormatAsync(this System.Windows.Forms.DateTimePicker target, System.Windows.Forms.DateTimePickerFormat value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Windows.Forms.DateTimePickerFormat>(
                BeginSetFormat,
                EndSetFormat,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.DateTime> getMaxDateInternal = (x) => x.MaxDate;
        public static System.DateTime GetMaxDate(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.DateTime)target.Invoke(getMaxDateInternal, target);
            else
                return getMaxDateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.DateTime> getMaxDateCallback = GetMaxDate;
        public static IAsyncResult BeginGetMaxDate(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getMaxDateCallback.BeginInvoke(target, callback, state);
        }
        public static System.DateTime EndGetMaxDate(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetMaxDate(result);
        }
        public static System.DateTime EndGetMaxDate(IAsyncResult result)
        {
            return getMaxDateCallback.EndInvoke(result);
        }
        public static Task<System.DateTime> GetMaxDateAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.DateTime>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetMaxDate,
                EndGetMaxDate,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.DateTime> setMaxDateInternal = (x, v) => x.MaxDate = v;
        public static void SetMaxDate(this System.Windows.Forms.DateTimePicker target, System.DateTime value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMaxDateInternal, target, value);
            else
                setMaxDateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.DateTime> setMaxDateCallback = SetMaxDate;
        public static IAsyncResult BeginSetMaxDate(this System.Windows.Forms.DateTimePicker target, System.DateTime value, AsyncCallback callback, object state)
        {
            return setMaxDateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMaxDate(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetMaxDate(result);
        }
        public static void EndSetMaxDate(IAsyncResult result)
        {
            setMaxDateCallback.EndInvoke(result);
        }
        public static Task SetMaxDateAsync(this System.Windows.Forms.DateTimePicker target, System.DateTime value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.DateTime>(
                BeginSetMaxDate,
                EndSetMaxDate,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.DateTime> getMinDateInternal = (x) => x.MinDate;
        public static System.DateTime GetMinDate(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.DateTime)target.Invoke(getMinDateInternal, target);
            else
                return getMinDateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.DateTime> getMinDateCallback = GetMinDate;
        public static IAsyncResult BeginGetMinDate(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getMinDateCallback.BeginInvoke(target, callback, state);
        }
        public static System.DateTime EndGetMinDate(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetMinDate(result);
        }
        public static System.DateTime EndGetMinDate(IAsyncResult result)
        {
            return getMinDateCallback.EndInvoke(result);
        }
        public static Task<System.DateTime> GetMinDateAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.DateTime>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetMinDate,
                EndGetMinDate,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.DateTime> setMinDateInternal = (x, v) => x.MinDate = v;
        public static void SetMinDate(this System.Windows.Forms.DateTimePicker target, System.DateTime value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMinDateInternal, target, value);
            else
                setMinDateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.DateTime> setMinDateCallback = SetMinDate;
        public static IAsyncResult BeginSetMinDate(this System.Windows.Forms.DateTimePicker target, System.DateTime value, AsyncCallback callback, object state)
        {
            return setMinDateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMinDate(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetMinDate(result);
        }
        public static void EndSetMinDate(IAsyncResult result)
        {
            setMinDateCallback.EndInvoke(result);
        }
        public static Task SetMinDateAsync(this System.Windows.Forms.DateTimePicker target, System.DateTime value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.DateTime>(
                BeginSetMinDate,
                EndSetMinDate,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Boolean> getShowCheckBoxInternal = (x) => x.ShowCheckBox;
        public static System.Boolean GetShowCheckBox(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowCheckBoxInternal, target);
            else
                return getShowCheckBoxInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Boolean> getShowCheckBoxCallback = GetShowCheckBox;
        public static IAsyncResult BeginGetShowCheckBox(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getShowCheckBoxCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowCheckBox(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetShowCheckBox(result);
        }
        public static System.Boolean EndGetShowCheckBox(IAsyncResult result)
        {
            return getShowCheckBoxCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowCheckBoxAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetShowCheckBox,
                EndGetShowCheckBox,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Boolean> setShowCheckBoxInternal = (x, v) => x.ShowCheckBox = v;
        public static void SetShowCheckBox(this System.Windows.Forms.DateTimePicker target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowCheckBoxInternal, target, value);
            else
                setShowCheckBoxInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Boolean> setShowCheckBoxCallback = SetShowCheckBox;
        public static IAsyncResult BeginSetShowCheckBox(this System.Windows.Forms.DateTimePicker target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowCheckBoxCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowCheckBox(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetShowCheckBox(result);
        }
        public static void EndSetShowCheckBox(IAsyncResult result)
        {
            setShowCheckBoxCallback.EndInvoke(result);
        }
        public static Task SetShowCheckBoxAsync(this System.Windows.Forms.DateTimePicker target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Boolean>(
                BeginSetShowCheckBox,
                EndSetShowCheckBox,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Boolean> getShowUpDownInternal = (x) => x.ShowUpDown;
        public static System.Boolean GetShowUpDown(this System.Windows.Forms.DateTimePicker target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowUpDownInternal, target);
            else
                return getShowUpDownInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.DateTimePicker, System.Boolean> getShowUpDownCallback = GetShowUpDown;
        public static IAsyncResult BeginGetShowUpDown(this System.Windows.Forms.DateTimePicker target, AsyncCallback callback, object state)
        {
            return getShowUpDownCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowUpDown(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            return EndGetShowUpDown(result);
        }
        public static System.Boolean EndGetShowUpDown(IAsyncResult result)
        {
            return getShowUpDownCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowUpDownAsync(this System.Windows.Forms.DateTimePicker target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.DateTimePicker>(
                BeginGetShowUpDown,
                EndGetShowUpDown,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Boolean> setShowUpDownInternal = (x, v) => x.ShowUpDown = v;
        public static void SetShowUpDown(this System.Windows.Forms.DateTimePicker target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowUpDownInternal, target, value);
            else
                setShowUpDownInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.DateTimePicker, System.Boolean> setShowUpDownCallback = SetShowUpDown;
        public static IAsyncResult BeginSetShowUpDown(this System.Windows.Forms.DateTimePicker target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowUpDownCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowUpDown(this System.Windows.Forms.DateTimePicker target, IAsyncResult result)
        {
            EndSetShowUpDown(result);
        }
        public static void EndSetShowUpDown(IAsyncResult result)
        {
            setShowUpDownCallback.EndInvoke(result);
        }
        public static Task SetShowUpDownAsync(this System.Windows.Forms.DateTimePicker target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.DateTimePicker, System.Boolean>(
                BeginSetShowUpDown,
                EndSetShowUpDown,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ScrollBar, System.Int32> getLargeChangeInternal = (x) => x.LargeChange;
        public static System.Int32 GetLargeChange(this System.Windows.Forms.ScrollBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getLargeChangeInternal, target);
            else
                return getLargeChangeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ScrollBar, System.Int32> getLargeChangeCallback = GetLargeChange;
        public static IAsyncResult BeginGetLargeChange(this System.Windows.Forms.ScrollBar target, AsyncCallback callback, object state)
        {
            return getLargeChangeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetLargeChange(this System.Windows.Forms.ScrollBar target, IAsyncResult result)
        {
            return EndGetLargeChange(result);
        }
        public static System.Int32 EndGetLargeChange(IAsyncResult result)
        {
            return getLargeChangeCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetLargeChangeAsync(this System.Windows.Forms.ScrollBar target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ScrollBar>(
                BeginGetLargeChange,
                EndGetLargeChange,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ScrollBar, System.Int32> setLargeChangeInternal = (x, v) => x.LargeChange = v;
        public static void SetLargeChange(this System.Windows.Forms.ScrollBar target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLargeChangeInternal, target, value);
            else
                setLargeChangeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ScrollBar, System.Int32> setLargeChangeCallback = SetLargeChange;
        public static IAsyncResult BeginSetLargeChange(this System.Windows.Forms.ScrollBar target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setLargeChangeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLargeChange(this System.Windows.Forms.ScrollBar target, IAsyncResult result)
        {
            EndSetLargeChange(result);
        }
        public static void EndSetLargeChange(IAsyncResult result)
        {
            setLargeChangeCallback.EndInvoke(result);
        }
        public static Task SetLargeChangeAsync(this System.Windows.Forms.ScrollBar target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ScrollBar, System.Int32>(
                BeginSetLargeChange,
                EndSetLargeChange,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ScrollBar, System.Int32> getSmallChangeInternal = (x) => x.SmallChange;
        public static System.Int32 GetSmallChange(this System.Windows.Forms.ScrollBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSmallChangeInternal, target);
            else
                return getSmallChangeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ScrollBar, System.Int32> getSmallChangeCallback = GetSmallChange;
        public static IAsyncResult BeginGetSmallChange(this System.Windows.Forms.ScrollBar target, AsyncCallback callback, object state)
        {
            return getSmallChangeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSmallChange(this System.Windows.Forms.ScrollBar target, IAsyncResult result)
        {
            return EndGetSmallChange(result);
        }
        public static System.Int32 EndGetSmallChange(IAsyncResult result)
        {
            return getSmallChangeCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSmallChangeAsync(this System.Windows.Forms.ScrollBar target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ScrollBar>(
                BeginGetSmallChange,
                EndGetSmallChange,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ScrollBar, System.Int32> setSmallChangeInternal = (x, v) => x.SmallChange = v;
        public static void SetSmallChange(this System.Windows.Forms.ScrollBar target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSmallChangeInternal, target, value);
            else
                setSmallChangeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ScrollBar, System.Int32> setSmallChangeCallback = SetSmallChange;
        public static IAsyncResult BeginSetSmallChange(this System.Windows.Forms.ScrollBar target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSmallChangeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSmallChange(this System.Windows.Forms.ScrollBar target, IAsyncResult result)
        {
            EndSetSmallChange(result);
        }
        public static void EndSetSmallChange(IAsyncResult result)
        {
            setSmallChangeCallback.EndInvoke(result);
        }
        public static Task SetSmallChangeAsync(this System.Windows.Forms.ScrollBar target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ScrollBar, System.Int32>(
                BeginSetSmallChange,
                EndSetSmallChange,
                target, value, null);
        }


        private static readonly Func<System.Windows.Forms.Label, System.Drawing.Size, System.Drawing.Size> getPreferredSize4Internal = (c, proposedSize) => c.GetPreferredSize(proposedSize);
        public static System.Drawing.Size GetPreferredSize(this System.Windows.Forms.Label __control__, System.Drawing.Size proposedSize)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Size)__control__.Invoke(getPreferredSize4Internal, __control__, proposedSize);
            else
                return getPreferredSize4Internal.Invoke(__control__, proposedSize);
        }
        private static readonly Func<System.Windows.Forms.Label, System.Drawing.Size, System.Drawing.Size> getPreferredSize4Callback = GetPreferredSize;
        public static IAsyncResult BeginGetPreferredSize4(this System.Windows.Forms.Label __control__, System.Drawing.Size proposedSize, AsyncCallback callback, object state)
        {
            return getPreferredSize4Callback.BeginInvoke(__control__, proposedSize, callback, state);
        }
        public static System.Drawing.Size EndGetPreferredSize4(this System.Windows.Forms.Label __control__, IAsyncResult result)
        {
            return EndGetPreferredSize4(result);
        }
        public static System.Drawing.Size EndGetPreferredSize4(IAsyncResult result)
        {
            return getPreferredSize4Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetPreferredSizeAsync(this System.Windows.Forms.Label __control__, System.Drawing.Size proposedSize)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.Label, System.Drawing.Size>(
                (Func<System.Windows.Forms.Label, System.Drawing.Size, AsyncCallback, object, IAsyncResult>)BeginGetPreferredSize4,
                (Func<IAsyncResult, System.Drawing.Size>)EndGetPreferredSize4,
                __control__, proposedSize, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.Label, System.Int32> getPreferredWidthInternal = (x) => x.PreferredWidth;
        public static System.Int32 GetPreferredWidth(this System.Windows.Forms.Label target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getPreferredWidthInternal, target);
            else
                return getPreferredWidthInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Label, System.Int32> getPreferredWidthCallback = GetPreferredWidth;
        public static IAsyncResult BeginGetPreferredWidth(this System.Windows.Forms.Label target, AsyncCallback callback, object state)
        {
            return getPreferredWidthCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetPreferredWidth(this System.Windows.Forms.Label target, IAsyncResult result)
        {
            return EndGetPreferredWidth(result);
        }
        public static System.Int32 EndGetPreferredWidth(IAsyncResult result)
        {
            return getPreferredWidthCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetPreferredWidthAsync(this System.Windows.Forms.Label target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Label>(
                BeginGetPreferredWidth,
                EndGetPreferredWidth,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.LinkLabel, System.Drawing.Color> getActiveLinkColorInternal = (x) => x.ActiveLinkColor;
        public static System.Drawing.Color GetActiveLinkColor(this System.Windows.Forms.LinkLabel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getActiveLinkColorInternal, target);
            else
                return getActiveLinkColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.LinkLabel, System.Drawing.Color> getActiveLinkColorCallback = GetActiveLinkColor;
        public static IAsyncResult BeginGetActiveLinkColor(this System.Windows.Forms.LinkLabel target, AsyncCallback callback, object state)
        {
            return getActiveLinkColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetActiveLinkColor(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            return EndGetActiveLinkColor(result);
        }
        public static System.Drawing.Color EndGetActiveLinkColor(IAsyncResult result)
        {
            return getActiveLinkColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetActiveLinkColorAsync(this System.Windows.Forms.LinkLabel target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.LinkLabel>(
                BeginGetActiveLinkColor,
                EndGetActiveLinkColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.LinkLabel, System.Drawing.Color> setActiveLinkColorInternal = (x, v) => x.ActiveLinkColor = v;
        public static void SetActiveLinkColor(this System.Windows.Forms.LinkLabel target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setActiveLinkColorInternal, target, value);
            else
                setActiveLinkColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.LinkLabel, System.Drawing.Color> setActiveLinkColorCallback = SetActiveLinkColor;
        public static IAsyncResult BeginSetActiveLinkColor(this System.Windows.Forms.LinkLabel target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setActiveLinkColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetActiveLinkColor(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            EndSetActiveLinkColor(result);
        }
        public static void EndSetActiveLinkColor(IAsyncResult result)
        {
            setActiveLinkColorCallback.EndInvoke(result);
        }
        public static Task SetActiveLinkColorAsync(this System.Windows.Forms.LinkLabel target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.LinkLabel, System.Drawing.Color>(
                BeginSetActiveLinkColor,
                EndSetActiveLinkColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.LinkLabel, System.Drawing.Color> getDisabledLinkColorInternal = (x) => x.DisabledLinkColor;
        public static System.Drawing.Color GetDisabledLinkColor(this System.Windows.Forms.LinkLabel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getDisabledLinkColorInternal, target);
            else
                return getDisabledLinkColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.LinkLabel, System.Drawing.Color> getDisabledLinkColorCallback = GetDisabledLinkColor;
        public static IAsyncResult BeginGetDisabledLinkColor(this System.Windows.Forms.LinkLabel target, AsyncCallback callback, object state)
        {
            return getDisabledLinkColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetDisabledLinkColor(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            return EndGetDisabledLinkColor(result);
        }
        public static System.Drawing.Color EndGetDisabledLinkColor(IAsyncResult result)
        {
            return getDisabledLinkColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetDisabledLinkColorAsync(this System.Windows.Forms.LinkLabel target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.LinkLabel>(
                BeginGetDisabledLinkColor,
                EndGetDisabledLinkColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.LinkLabel, System.Drawing.Color> setDisabledLinkColorInternal = (x, v) => x.DisabledLinkColor = v;
        public static void SetDisabledLinkColor(this System.Windows.Forms.LinkLabel target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDisabledLinkColorInternal, target, value);
            else
                setDisabledLinkColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.LinkLabel, System.Drawing.Color> setDisabledLinkColorCallback = SetDisabledLinkColor;
        public static IAsyncResult BeginSetDisabledLinkColor(this System.Windows.Forms.LinkLabel target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setDisabledLinkColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDisabledLinkColor(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            EndSetDisabledLinkColor(result);
        }
        public static void EndSetDisabledLinkColor(IAsyncResult result)
        {
            setDisabledLinkColorCallback.EndInvoke(result);
        }
        public static Task SetDisabledLinkColorAsync(this System.Windows.Forms.LinkLabel target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.LinkLabel, System.Drawing.Color>(
                BeginSetDisabledLinkColor,
                EndSetDisabledLinkColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkArea> getLinkAreaInternal = (x) => x.LinkArea;
        public static System.Windows.Forms.LinkArea GetLinkArea(this System.Windows.Forms.LinkLabel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.LinkArea)target.Invoke(getLinkAreaInternal, target);
            else
                return getLinkAreaInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkArea> getLinkAreaCallback = GetLinkArea;
        public static IAsyncResult BeginGetLinkArea(this System.Windows.Forms.LinkLabel target, AsyncCallback callback, object state)
        {
            return getLinkAreaCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.LinkArea EndGetLinkArea(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            return EndGetLinkArea(result);
        }
        public static System.Windows.Forms.LinkArea EndGetLinkArea(IAsyncResult result)
        {
            return getLinkAreaCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.LinkArea> GetLinkAreaAsync(this System.Windows.Forms.LinkLabel target)
        {
            return Task<System.Windows.Forms.LinkArea>.Factory.FromAsync<System.Windows.Forms.LinkLabel>(
                BeginGetLinkArea,
                EndGetLinkArea,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkArea> setLinkAreaInternal = (x, v) => x.LinkArea = v;
        public static void SetLinkArea(this System.Windows.Forms.LinkLabel target, System.Windows.Forms.LinkArea value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLinkAreaInternal, target, value);
            else
                setLinkAreaInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkArea> setLinkAreaCallback = SetLinkArea;
        public static IAsyncResult BeginSetLinkArea(this System.Windows.Forms.LinkLabel target, System.Windows.Forms.LinkArea value, AsyncCallback callback, object state)
        {
            return setLinkAreaCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLinkArea(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            EndSetLinkArea(result);
        }
        public static void EndSetLinkArea(IAsyncResult result)
        {
            setLinkAreaCallback.EndInvoke(result);
        }
        public static Task SetLinkAreaAsync(this System.Windows.Forms.LinkLabel target, System.Windows.Forms.LinkArea value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkArea>(
                BeginSetLinkArea,
                EndSetLinkArea,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkBehavior> getLinkBehaviorInternal = (x) => x.LinkBehavior;
        public static System.Windows.Forms.LinkBehavior GetLinkBehavior(this System.Windows.Forms.LinkLabel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.LinkBehavior)target.Invoke(getLinkBehaviorInternal, target);
            else
                return getLinkBehaviorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkBehavior> getLinkBehaviorCallback = GetLinkBehavior;
        public static IAsyncResult BeginGetLinkBehavior(this System.Windows.Forms.LinkLabel target, AsyncCallback callback, object state)
        {
            return getLinkBehaviorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.LinkBehavior EndGetLinkBehavior(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            return EndGetLinkBehavior(result);
        }
        public static System.Windows.Forms.LinkBehavior EndGetLinkBehavior(IAsyncResult result)
        {
            return getLinkBehaviorCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.LinkBehavior> GetLinkBehaviorAsync(this System.Windows.Forms.LinkLabel target)
        {
            return Task<System.Windows.Forms.LinkBehavior>.Factory.FromAsync<System.Windows.Forms.LinkLabel>(
                BeginGetLinkBehavior,
                EndGetLinkBehavior,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkBehavior> setLinkBehaviorInternal = (x, v) => x.LinkBehavior = v;
        public static void SetLinkBehavior(this System.Windows.Forms.LinkLabel target, System.Windows.Forms.LinkBehavior value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLinkBehaviorInternal, target, value);
            else
                setLinkBehaviorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkBehavior> setLinkBehaviorCallback = SetLinkBehavior;
        public static IAsyncResult BeginSetLinkBehavior(this System.Windows.Forms.LinkLabel target, System.Windows.Forms.LinkBehavior value, AsyncCallback callback, object state)
        {
            return setLinkBehaviorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLinkBehavior(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            EndSetLinkBehavior(result);
        }
        public static void EndSetLinkBehavior(IAsyncResult result)
        {
            setLinkBehaviorCallback.EndInvoke(result);
        }
        public static Task SetLinkBehaviorAsync(this System.Windows.Forms.LinkLabel target, System.Windows.Forms.LinkBehavior value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkBehavior>(
                BeginSetLinkBehavior,
                EndSetLinkBehavior,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkLabel.LinkCollection> getLinksInternal = (x) => x.Links;
        public static System.Windows.Forms.LinkLabel.LinkCollection GetLinks(this System.Windows.Forms.LinkLabel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.LinkLabel.LinkCollection)target.Invoke(getLinksInternal, target);
            else
                return getLinksInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.LinkLabel, System.Windows.Forms.LinkLabel.LinkCollection> getLinksCallback = GetLinks;
        public static IAsyncResult BeginGetLinks(this System.Windows.Forms.LinkLabel target, AsyncCallback callback, object state)
        {
            return getLinksCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.LinkLabel.LinkCollection EndGetLinks(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            return EndGetLinks(result);
        }
        public static System.Windows.Forms.LinkLabel.LinkCollection EndGetLinks(IAsyncResult result)
        {
            return getLinksCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.LinkLabel.LinkCollection> GetLinksAsync(this System.Windows.Forms.LinkLabel target)
        {
            return Task<System.Windows.Forms.LinkLabel.LinkCollection>.Factory.FromAsync<System.Windows.Forms.LinkLabel>(
                BeginGetLinks,
                EndGetLinks,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.LinkLabel, System.Boolean> getLinkVisitedInternal = (x) => x.LinkVisited;
        public static System.Boolean GetLinkVisited(this System.Windows.Forms.LinkLabel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getLinkVisitedInternal, target);
            else
                return getLinkVisitedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.LinkLabel, System.Boolean> getLinkVisitedCallback = GetLinkVisited;
        public static IAsyncResult BeginGetLinkVisited(this System.Windows.Forms.LinkLabel target, AsyncCallback callback, object state)
        {
            return getLinkVisitedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetLinkVisited(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            return EndGetLinkVisited(result);
        }
        public static System.Boolean EndGetLinkVisited(IAsyncResult result)
        {
            return getLinkVisitedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetLinkVisitedAsync(this System.Windows.Forms.LinkLabel target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.LinkLabel>(
                BeginGetLinkVisited,
                EndGetLinkVisited,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.LinkLabel, System.Boolean> setLinkVisitedInternal = (x, v) => x.LinkVisited = v;
        public static void SetLinkVisited(this System.Windows.Forms.LinkLabel target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLinkVisitedInternal, target, value);
            else
                setLinkVisitedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.LinkLabel, System.Boolean> setLinkVisitedCallback = SetLinkVisited;
        public static IAsyncResult BeginSetLinkVisited(this System.Windows.Forms.LinkLabel target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setLinkVisitedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLinkVisited(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            EndSetLinkVisited(result);
        }
        public static void EndSetLinkVisited(IAsyncResult result)
        {
            setLinkVisitedCallback.EndInvoke(result);
        }
        public static Task SetLinkVisitedAsync(this System.Windows.Forms.LinkLabel target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.LinkLabel, System.Boolean>(
                BeginSetLinkVisited,
                EndSetLinkVisited,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.LinkLabel, System.Drawing.Color> getVisitedLinkColorInternal = (x) => x.VisitedLinkColor;
        public static System.Drawing.Color GetVisitedLinkColor(this System.Windows.Forms.LinkLabel target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getVisitedLinkColorInternal, target);
            else
                return getVisitedLinkColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.LinkLabel, System.Drawing.Color> getVisitedLinkColorCallback = GetVisitedLinkColor;
        public static IAsyncResult BeginGetVisitedLinkColor(this System.Windows.Forms.LinkLabel target, AsyncCallback callback, object state)
        {
            return getVisitedLinkColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetVisitedLinkColor(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            return EndGetVisitedLinkColor(result);
        }
        public static System.Drawing.Color EndGetVisitedLinkColor(IAsyncResult result)
        {
            return getVisitedLinkColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetVisitedLinkColorAsync(this System.Windows.Forms.LinkLabel target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.LinkLabel>(
                BeginGetVisitedLinkColor,
                EndGetVisitedLinkColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.LinkLabel, System.Drawing.Color> setVisitedLinkColorInternal = (x, v) => x.VisitedLinkColor = v;
        public static void SetVisitedLinkColor(this System.Windows.Forms.LinkLabel target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setVisitedLinkColorInternal, target, value);
            else
                setVisitedLinkColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.LinkLabel, System.Drawing.Color> setVisitedLinkColorCallback = SetVisitedLinkColor;
        public static IAsyncResult BeginSetVisitedLinkColor(this System.Windows.Forms.LinkLabel target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setVisitedLinkColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetVisitedLinkColor(this System.Windows.Forms.LinkLabel target, IAsyncResult result)
        {
            EndSetVisitedLinkColor(result);
        }
        public static void EndSetVisitedLinkColor(IAsyncResult result)
        {
            setVisitedLinkColorCallback.EndInvoke(result);
        }
        public static Task SetVisitedLinkColorAsync(this System.Windows.Forms.LinkLabel target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.LinkLabel, System.Drawing.Color>(
                BeginSetVisitedLinkColor,
                EndSetVisitedLinkColor,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ListViewAlignment> arrangeIcons1Internal = (c, value) => c.ArrangeIcons(value);
        public static void ArrangeIcons(this System.Windows.Forms.ListView __control__, System.Windows.Forms.ListViewAlignment value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(arrangeIcons1Internal, __control__, value);
            else
                arrangeIcons1Internal.Invoke(__control__, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ListViewAlignment> arrangeIcons1Callback = ArrangeIcons;
        public static IAsyncResult BeginArrangeIcons1(this System.Windows.Forms.ListView __control__, System.Windows.Forms.ListViewAlignment value, AsyncCallback callback, object state)
        {
            return arrangeIcons1Callback.BeginInvoke(__control__, value, callback, state);
        }
        public static void EndArrangeIcons1(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            EndArrangeIcons1(result);
        }
        public static void EndArrangeIcons1(IAsyncResult result)
        {
            arrangeIcons1Callback.EndInvoke(result);
        }
        public static Task ArrangeIconsAsync(this System.Windows.Forms.ListView __control__, System.Windows.Forms.ListViewAlignment value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ListViewAlignment>(
                (Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewAlignment, AsyncCallback, object, IAsyncResult>)BeginArrangeIcons1,
                (Action<IAsyncResult>)EndArrangeIcons1,
                __control__, value, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListView> arrangeIcons2Internal = (c) => c.ArrangeIcons();
        public static void ArrangeIcons(this System.Windows.Forms.ListView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(arrangeIcons2Internal, __control__);
            else
                arrangeIcons2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ListView> arrangeIcons2Callback = ArrangeIcons;
        public static IAsyncResult BeginArrangeIcons2(this System.Windows.Forms.ListView __control__, AsyncCallback callback, object state)
        {
            return arrangeIcons2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndArrangeIcons2(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            EndArrangeIcons2(result);
        }
        public static void EndArrangeIcons2(IAsyncResult result)
        {
            arrangeIcons2Callback.EndInvoke(result);
        }
        public static Task ArrangeIconsAsync(this System.Windows.Forms.ListView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView>(
                (Func<System.Windows.Forms.ListView, AsyncCallback, object, IAsyncResult>)BeginArrangeIcons2,
                (Action<IAsyncResult>)EndArrangeIcons2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ColumnHeaderAutoResizeStyle> autoResizeColumns3Internal = (c, headerAutoResize) => c.AutoResizeColumns(headerAutoResize);
        public static void AutoResizeColumns(this System.Windows.Forms.ListView __control__, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeColumns3Internal, __control__, headerAutoResize);
            else
                autoResizeColumns3Internal.Invoke(__control__, headerAutoResize);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ColumnHeaderAutoResizeStyle> autoResizeColumns3Callback = AutoResizeColumns;
        public static IAsyncResult BeginAutoResizeColumns3(this System.Windows.Forms.ListView __control__, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize, AsyncCallback callback, object state)
        {
            return autoResizeColumns3Callback.BeginInvoke(__control__, headerAutoResize, callback, state);
        }
        public static void EndAutoResizeColumns3(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            EndAutoResizeColumns3(result);
        }
        public static void EndAutoResizeColumns3(IAsyncResult result)
        {
            autoResizeColumns3Callback.EndInvoke(result);
        }
        public static Task AutoResizeColumnsAsync(this System.Windows.Forms.ListView __control__, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ColumnHeaderAutoResizeStyle>(
                (Func<System.Windows.Forms.ListView, System.Windows.Forms.ColumnHeaderAutoResizeStyle, AsyncCallback, object, IAsyncResult>)BeginAutoResizeColumns3,
                (Action<IAsyncResult>)EndAutoResizeColumns3,
                __control__, headerAutoResize, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Int32, System.Windows.Forms.ColumnHeaderAutoResizeStyle> autoResizeColumn3Internal = (c, columnIndex, headerAutoResize) => c.AutoResizeColumn(columnIndex, headerAutoResize);
        public static void AutoResizeColumn(this System.Windows.Forms.ListView __control__, System.Int32 columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(autoResizeColumn3Internal, __control__, columnIndex, headerAutoResize);
            else
                autoResizeColumn3Internal.Invoke(__control__, columnIndex, headerAutoResize);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Int32, System.Windows.Forms.ColumnHeaderAutoResizeStyle> autoResizeColumn3Callback = AutoResizeColumn;
        public static IAsyncResult BeginAutoResizeColumn3(this System.Windows.Forms.ListView __control__, System.Int32 columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize, AsyncCallback callback, object state)
        {
            return autoResizeColumn3Callback.BeginInvoke(__control__, columnIndex, headerAutoResize, callback, state);
        }
        public static void EndAutoResizeColumn3(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            EndAutoResizeColumn3(result);
        }
        public static void EndAutoResizeColumn3(IAsyncResult result)
        {
            autoResizeColumn3Callback.EndInvoke(result);
        }
        public static Task AutoResizeColumnAsync(this System.Windows.Forms.ListView __control__, System.Int32 columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Int32, System.Windows.Forms.ColumnHeaderAutoResizeStyle>(
                (Func<System.Windows.Forms.ListView, System.Int32, System.Windows.Forms.ColumnHeaderAutoResizeStyle, AsyncCallback, object, IAsyncResult>)BeginAutoResizeColumn3,
                (Action<IAsyncResult>)EndAutoResizeColumn3,
                __control__, columnIndex, headerAutoResize, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListView> clear2Internal = (c) => c.Clear();
        public static void Clear(this System.Windows.Forms.ListView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(clear2Internal, __control__);
            else
                clear2Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ListView> clear2Callback = Clear;
        public static IAsyncResult BeginClear2(this System.Windows.Forms.ListView __control__, AsyncCallback callback, object state)
        {
            return clear2Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndClear2(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            EndClear2(result);
        }
        public static void EndClear2(IAsyncResult result)
        {
            clear2Callback.EndInvoke(result);
        }
        public static Task ClearAsync(this System.Windows.Forms.ListView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView>(
                (Func<System.Windows.Forms.ListView, AsyncCallback, object, IAsyncResult>)BeginClear2,
                (Action<IAsyncResult>)EndClear2,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Int32> ensureVisible1Internal = (c, index) => c.EnsureVisible(index);
        public static void EnsureVisible(this System.Windows.Forms.ListView __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(ensureVisible1Internal, __control__, index);
            else
                ensureVisible1Internal.Invoke(__control__, index);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Int32> ensureVisible1Callback = EnsureVisible;
        public static IAsyncResult BeginEnsureVisible1(this System.Windows.Forms.ListView __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return ensureVisible1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static void EndEnsureVisible1(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            EndEnsureVisible1(result);
        }
        public static void EndEnsureVisible1(IAsyncResult result)
        {
            ensureVisible1Callback.EndInvoke(result);
        }
        public static Task EnsureVisibleAsync(this System.Windows.Forms.ListView __control__, System.Int32 index)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Int32>(
                (Func<System.Windows.Forms.ListView, System.Int32, AsyncCallback, object, IAsyncResult>)BeginEnsureVisible1,
                (Action<IAsyncResult>)EndEnsureVisible1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.String, System.Windows.Forms.ListViewItem> findItemWithText1Internal = (c, text) => c.FindItemWithText(text);
        public static System.Windows.Forms.ListViewItem FindItemWithText(this System.Windows.Forms.ListView __control__, System.String text)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ListViewItem)__control__.Invoke(findItemWithText1Internal, __control__, text);
            else
                return findItemWithText1Internal.Invoke(__control__, text);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.String, System.Windows.Forms.ListViewItem> findItemWithText1Callback = FindItemWithText;
        public static IAsyncResult BeginFindItemWithText1(this System.Windows.Forms.ListView __control__, System.String text, AsyncCallback callback, object state)
        {
            return findItemWithText1Callback.BeginInvoke(__control__, text, callback, state);
        }
        public static System.Windows.Forms.ListViewItem EndFindItemWithText1(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndFindItemWithText1(result);
        }
        public static System.Windows.Forms.ListViewItem EndFindItemWithText1(IAsyncResult result)
        {
            return findItemWithText1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewItem> FindItemWithTextAsync(this System.Windows.Forms.ListView __control__, System.String text)
        {
            return Task<System.Windows.Forms.ListViewItem>.Factory.FromAsync<System.Windows.Forms.ListView, System.String>(
                (Func<System.Windows.Forms.ListView, System.String, AsyncCallback, object, IAsyncResult>)BeginFindItemWithText1,
                (Func<IAsyncResult, System.Windows.Forms.ListViewItem>)EndFindItemWithText1,
                __control__, text, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.String, System.Boolean, System.Int32, System.Windows.Forms.ListViewItem> findItemWithText2Internal = (c, text, includeSubItemsInSearch, startIndex) => c.FindItemWithText(text, includeSubItemsInSearch, startIndex);
        public static System.Windows.Forms.ListViewItem FindItemWithText(this System.Windows.Forms.ListView __control__, System.String text, System.Boolean includeSubItemsInSearch, System.Int32 startIndex)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ListViewItem)__control__.Invoke(findItemWithText2Internal, __control__, text, includeSubItemsInSearch, startIndex);
            else
                return findItemWithText2Internal.Invoke(__control__, text, includeSubItemsInSearch, startIndex);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.String, System.Boolean, System.Int32, System.Windows.Forms.ListViewItem> findItemWithText2Callback = FindItemWithText;
        public static IAsyncResult BeginFindItemWithText2(this System.Windows.Forms.ListView __control__, System.String text, System.Boolean includeSubItemsInSearch, System.Int32 startIndex, AsyncCallback callback, object state)
        {
            return findItemWithText2Callback.BeginInvoke(__control__, text, includeSubItemsInSearch, startIndex, callback, state);
        }
        public static System.Windows.Forms.ListViewItem EndFindItemWithText2(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndFindItemWithText2(result);
        }
        public static System.Windows.Forms.ListViewItem EndFindItemWithText2(IAsyncResult result)
        {
            return findItemWithText2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewItem> FindItemWithTextAsync(this System.Windows.Forms.ListView __control__, System.String text, System.Boolean includeSubItemsInSearch, System.Int32 startIndex)
        {
            return Task<System.Windows.Forms.ListViewItem>.Factory.FromAsync(
                BeginFindItemWithText2(__control__, text, includeSubItemsInSearch, startIndex, null, null),
                (Func<IAsyncResult, System.Windows.Forms.ListViewItem>)EndFindItemWithText2);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.String, System.Boolean, System.Int32, System.Boolean, System.Windows.Forms.ListViewItem> findItemWithText3Internal = (c, text, includeSubItemsInSearch, startIndex, isPrefixSearch) => c.FindItemWithText(text, includeSubItemsInSearch, startIndex, isPrefixSearch);
        public static System.Windows.Forms.ListViewItem FindItemWithText(this System.Windows.Forms.ListView __control__, System.String text, System.Boolean includeSubItemsInSearch, System.Int32 startIndex, System.Boolean isPrefixSearch)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ListViewItem)__control__.Invoke(findItemWithText3Internal, __control__, text, includeSubItemsInSearch, startIndex, isPrefixSearch);
            else
                return findItemWithText3Internal.Invoke(__control__, text, includeSubItemsInSearch, startIndex, isPrefixSearch);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.String, System.Boolean, System.Int32, System.Boolean, System.Windows.Forms.ListViewItem> findItemWithText3Callback = FindItemWithText;
        public static IAsyncResult BeginFindItemWithText3(this System.Windows.Forms.ListView __control__, System.String text, System.Boolean includeSubItemsInSearch, System.Int32 startIndex, System.Boolean isPrefixSearch, AsyncCallback callback, object state)
        {
            return findItemWithText3Callback.BeginInvoke(__control__, text, includeSubItemsInSearch, startIndex, isPrefixSearch, callback, state);
        }
        public static System.Windows.Forms.ListViewItem EndFindItemWithText3(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndFindItemWithText3(result);
        }
        public static System.Windows.Forms.ListViewItem EndFindItemWithText3(IAsyncResult result)
        {
            return findItemWithText3Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewItem> FindItemWithTextAsync(this System.Windows.Forms.ListView __control__, System.String text, System.Boolean includeSubItemsInSearch, System.Int32 startIndex, System.Boolean isPrefixSearch)
        {
            return Task<System.Windows.Forms.ListViewItem>.Factory.FromAsync(
                BeginFindItemWithText3(__control__, text, includeSubItemsInSearch, startIndex, isPrefixSearch, null, null),
                (Func<IAsyncResult, System.Windows.Forms.ListViewItem>)EndFindItemWithText3);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.SearchDirectionHint, System.Drawing.Point, System.Windows.Forms.ListViewItem> findNearestItem1Internal = (c, dir, point) => c.FindNearestItem(dir, point);
        public static System.Windows.Forms.ListViewItem FindNearestItem(this System.Windows.Forms.ListView __control__, System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ListViewItem)__control__.Invoke(findNearestItem1Internal, __control__, dir, point);
            else
                return findNearestItem1Internal.Invoke(__control__, dir, point);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.SearchDirectionHint, System.Drawing.Point, System.Windows.Forms.ListViewItem> findNearestItem1Callback = FindNearestItem;
        public static IAsyncResult BeginFindNearestItem1(this System.Windows.Forms.ListView __control__, System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point, AsyncCallback callback, object state)
        {
            return findNearestItem1Callback.BeginInvoke(__control__, dir, point, callback, state);
        }
        public static System.Windows.Forms.ListViewItem EndFindNearestItem1(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndFindNearestItem1(result);
        }
        public static System.Windows.Forms.ListViewItem EndFindNearestItem1(IAsyncResult result)
        {
            return findNearestItem1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewItem> FindNearestItemAsync(this System.Windows.Forms.ListView __control__, System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point)
        {
            return Task<System.Windows.Forms.ListViewItem>.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.SearchDirectionHint, System.Drawing.Point>(
                (Func<System.Windows.Forms.ListView, System.Windows.Forms.SearchDirectionHint, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginFindNearestItem1,
                (Func<IAsyncResult, System.Windows.Forms.ListViewItem>)EndFindNearestItem1,
                __control__, dir, point, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.SearchDirectionHint, System.Int32, System.Int32, System.Windows.Forms.ListViewItem> findNearestItem2Internal = (c, searchDirection, x, y) => c.FindNearestItem(searchDirection, x, y);
        public static System.Windows.Forms.ListViewItem FindNearestItem(this System.Windows.Forms.ListView __control__, System.Windows.Forms.SearchDirectionHint searchDirection, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ListViewItem)__control__.Invoke(findNearestItem2Internal, __control__, searchDirection, x, y);
            else
                return findNearestItem2Internal.Invoke(__control__, searchDirection, x, y);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.SearchDirectionHint, System.Int32, System.Int32, System.Windows.Forms.ListViewItem> findNearestItem2Callback = FindNearestItem;
        public static IAsyncResult BeginFindNearestItem2(this System.Windows.Forms.ListView __control__, System.Windows.Forms.SearchDirectionHint searchDirection, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return findNearestItem2Callback.BeginInvoke(__control__, searchDirection, x, y, callback, state);
        }
        public static System.Windows.Forms.ListViewItem EndFindNearestItem2(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndFindNearestItem2(result);
        }
        public static System.Windows.Forms.ListViewItem EndFindNearestItem2(IAsyncResult result)
        {
            return findNearestItem2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewItem> FindNearestItemAsync(this System.Windows.Forms.ListView __control__, System.Windows.Forms.SearchDirectionHint searchDirection, System.Int32 x, System.Int32 y)
        {
            return Task<System.Windows.Forms.ListViewItem>.Factory.FromAsync(
                BeginFindNearestItem2(__control__, searchDirection, x, y, null, null),
                (Func<IAsyncResult, System.Windows.Forms.ListViewItem>)EndFindNearestItem2);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Int32, System.Int32, System.Windows.Forms.ListViewItem> getItemAt3Internal = (c, x, y) => c.GetItemAt(x, y);
        public static System.Windows.Forms.ListViewItem GetItemAt(this System.Windows.Forms.ListView __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ListViewItem)__control__.Invoke(getItemAt3Internal, __control__, x, y);
            else
                return getItemAt3Internal.Invoke(__control__, x, y);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Int32, System.Int32, System.Windows.Forms.ListViewItem> getItemAt3Callback = GetItemAt;
        public static IAsyncResult BeginGetItemAt3(this System.Windows.Forms.ListView __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return getItemAt3Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static System.Windows.Forms.ListViewItem EndGetItemAt3(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndGetItemAt3(result);
        }
        public static System.Windows.Forms.ListViewItem EndGetItemAt3(IAsyncResult result)
        {
            return getItemAt3Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewItem> GetItemAtAsync(this System.Windows.Forms.ListView __control__, System.Int32 x, System.Int32 y)
        {
            return Task<System.Windows.Forms.ListViewItem>.Factory.FromAsync<System.Windows.Forms.ListView, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.ListView, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetItemAt3,
                (Func<IAsyncResult, System.Windows.Forms.ListViewItem>)EndGetItemAt3,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Int32, System.Drawing.Rectangle> getItemRect1Internal = (c, index) => c.GetItemRect(index);
        public static System.Drawing.Rectangle GetItemRect(this System.Windows.Forms.ListView __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getItemRect1Internal, __control__, index);
            else
                return getItemRect1Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Int32, System.Drawing.Rectangle> getItemRect1Callback = GetItemRect;
        public static IAsyncResult BeginGetItemRect1(this System.Windows.Forms.ListView __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getItemRect1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Drawing.Rectangle EndGetItemRect1(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndGetItemRect1(result);
        }
        public static System.Drawing.Rectangle EndGetItemRect1(IAsyncResult result)
        {
            return getItemRect1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetItemRectAsync(this System.Windows.Forms.ListView __control__, System.Int32 index)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.ListView, System.Int32>(
                (Func<System.Windows.Forms.ListView, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetItemRect1,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetItemRect1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Int32, System.Windows.Forms.ItemBoundsPortion, System.Drawing.Rectangle> getItemRect2Internal = (c, index, portion) => c.GetItemRect(index, portion);
        public static System.Drawing.Rectangle GetItemRect(this System.Windows.Forms.ListView __control__, System.Int32 index, System.Windows.Forms.ItemBoundsPortion portion)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getItemRect2Internal, __control__, index, portion);
            else
                return getItemRect2Internal.Invoke(__control__, index, portion);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Int32, System.Windows.Forms.ItemBoundsPortion, System.Drawing.Rectangle> getItemRect2Callback = GetItemRect;
        public static IAsyncResult BeginGetItemRect2(this System.Windows.Forms.ListView __control__, System.Int32 index, System.Windows.Forms.ItemBoundsPortion portion, AsyncCallback callback, object state)
        {
            return getItemRect2Callback.BeginInvoke(__control__, index, portion, callback, state);
        }
        public static System.Drawing.Rectangle EndGetItemRect2(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndGetItemRect2(result);
        }
        public static System.Drawing.Rectangle EndGetItemRect2(IAsyncResult result)
        {
            return getItemRect2Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetItemRectAsync(this System.Windows.Forms.ListView __control__, System.Int32 index, System.Windows.Forms.ItemBoundsPortion portion)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.ListView, System.Int32, System.Windows.Forms.ItemBoundsPortion>(
                (Func<System.Windows.Forms.ListView, System.Int32, System.Windows.Forms.ItemBoundsPortion, AsyncCallback, object, IAsyncResult>)BeginGetItemRect2,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetItemRect2,
                __control__, index, portion, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Drawing.Point, System.Windows.Forms.ListViewHitTestInfo> hitTest4Internal = (c, point) => c.HitTest(point);
        public static System.Windows.Forms.ListViewHitTestInfo HitTest(this System.Windows.Forms.ListView __control__, System.Drawing.Point point)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ListViewHitTestInfo)__control__.Invoke(hitTest4Internal, __control__, point);
            else
                return hitTest4Internal.Invoke(__control__, point);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Drawing.Point, System.Windows.Forms.ListViewHitTestInfo> hitTest4Callback = HitTest;
        public static IAsyncResult BeginHitTest4(this System.Windows.Forms.ListView __control__, System.Drawing.Point point, AsyncCallback callback, object state)
        {
            return hitTest4Callback.BeginInvoke(__control__, point, callback, state);
        }
        public static System.Windows.Forms.ListViewHitTestInfo EndHitTest4(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndHitTest4(result);
        }
        public static System.Windows.Forms.ListViewHitTestInfo EndHitTest4(IAsyncResult result)
        {
            return hitTest4Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewHitTestInfo> HitTestAsync(this System.Windows.Forms.ListView __control__, System.Drawing.Point point)
        {
            return Task<System.Windows.Forms.ListViewHitTestInfo>.Factory.FromAsync<System.Windows.Forms.ListView, System.Drawing.Point>(
                (Func<System.Windows.Forms.ListView, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginHitTest4,
                (Func<IAsyncResult, System.Windows.Forms.ListViewHitTestInfo>)EndHitTest4,
                __control__, point, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Int32, System.Int32, System.Windows.Forms.ListViewHitTestInfo> hitTest5Internal = (c, x, y) => c.HitTest(x, y);
        public static System.Windows.Forms.ListViewHitTestInfo HitTest(this System.Windows.Forms.ListView __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.ListViewHitTestInfo)__control__.Invoke(hitTest5Internal, __control__, x, y);
            else
                return hitTest5Internal.Invoke(__control__, x, y);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Int32, System.Int32, System.Windows.Forms.ListViewHitTestInfo> hitTest5Callback = HitTest;
        public static IAsyncResult BeginHitTest5(this System.Windows.Forms.ListView __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return hitTest5Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static System.Windows.Forms.ListViewHitTestInfo EndHitTest5(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            return EndHitTest5(result);
        }
        public static System.Windows.Forms.ListViewHitTestInfo EndHitTest5(IAsyncResult result)
        {
            return hitTest5Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewHitTestInfo> HitTestAsync(this System.Windows.Forms.ListView __control__, System.Int32 x, System.Int32 y)
        {
            return Task<System.Windows.Forms.ListViewHitTestInfo>.Factory.FromAsync<System.Windows.Forms.ListView, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.ListView, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginHitTest5,
                (Func<IAsyncResult, System.Windows.Forms.ListViewHitTestInfo>)EndHitTest5,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Int32, System.Int32, System.Boolean> redrawItems1Internal = (c, startIndex, endIndex, invalidateOnly) => c.RedrawItems(startIndex, endIndex, invalidateOnly);
        public static void RedrawItems(this System.Windows.Forms.ListView __control__, System.Int32 startIndex, System.Int32 endIndex, System.Boolean invalidateOnly)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(redrawItems1Internal, __control__, startIndex, endIndex, invalidateOnly);
            else
                redrawItems1Internal.Invoke(__control__, startIndex, endIndex, invalidateOnly);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Int32, System.Int32, System.Boolean> redrawItems1Callback = RedrawItems;
        public static IAsyncResult BeginRedrawItems1(this System.Windows.Forms.ListView __control__, System.Int32 startIndex, System.Int32 endIndex, System.Boolean invalidateOnly, AsyncCallback callback, object state)
        {
            return redrawItems1Callback.BeginInvoke(__control__, startIndex, endIndex, invalidateOnly, callback, state);
        }
        public static void EndRedrawItems1(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            EndRedrawItems1(result);
        }
        public static void EndRedrawItems1(IAsyncResult result)
        {
            redrawItems1Callback.EndInvoke(result);
        }
        public static Task RedrawItemsAsync(this System.Windows.Forms.ListView __control__, System.Int32 startIndex, System.Int32 endIndex, System.Boolean invalidateOnly)
        {
            return Task.Factory.FromAsync(
                BeginRedrawItems1(__control__, startIndex, endIndex, invalidateOnly, null, null),
                (Action<IAsyncResult>)EndRedrawItems1);
        }

        private static readonly Action<System.Windows.Forms.ListView> sort3Internal = (c) => c.Sort();
        public static void Sort(this System.Windows.Forms.ListView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(sort3Internal, __control__);
            else
                sort3Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ListView> sort3Callback = Sort;
        public static IAsyncResult BeginSort3(this System.Windows.Forms.ListView __control__, AsyncCallback callback, object state)
        {
            return sort3Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndSort3(this System.Windows.Forms.ListView __control__, IAsyncResult result)
        {
            EndSort3(result);
        }
        public static void EndSort3(IAsyncResult result)
        {
            sort3Callback.EndInvoke(result);
        }
        public static Task SortAsync(this System.Windows.Forms.ListView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView>(
                (Func<System.Windows.Forms.ListView, AsyncCallback, object, IAsyncResult>)BeginSort3,
                (Action<IAsyncResult>)EndSort3,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ItemActivation> getActivationInternal = (x) => x.Activation;
        public static System.Windows.Forms.ItemActivation GetActivation(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ItemActivation)target.Invoke(getActivationInternal, target);
            else
                return getActivationInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ItemActivation> getActivationCallback = GetActivation;
        public static IAsyncResult BeginGetActivation(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getActivationCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ItemActivation EndGetActivation(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetActivation(result);
        }
        public static System.Windows.Forms.ItemActivation EndGetActivation(IAsyncResult result)
        {
            return getActivationCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ItemActivation> GetActivationAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ItemActivation>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetActivation,
                EndGetActivation,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ItemActivation> setActivationInternal = (x, v) => x.Activation = v;
        public static void SetActivation(this System.Windows.Forms.ListView target, System.Windows.Forms.ItemActivation value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setActivationInternal, target, value);
            else
                setActivationInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ItemActivation> setActivationCallback = SetActivation;
        public static IAsyncResult BeginSetActivation(this System.Windows.Forms.ListView target, System.Windows.Forms.ItemActivation value, AsyncCallback callback, object state)
        {
            return setActivationCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetActivation(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetActivation(result);
        }
        public static void EndSetActivation(IAsyncResult result)
        {
            setActivationCallback.EndInvoke(result);
        }
        public static Task SetActivationAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.ItemActivation value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ItemActivation>(
                BeginSetActivation,
                EndSetActivation,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewAlignment> getAlignmentInternal = (x) => x.Alignment;
        public static System.Windows.Forms.ListViewAlignment GetAlignment(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ListViewAlignment)target.Invoke(getAlignmentInternal, target);
            else
                return getAlignmentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewAlignment> getAlignmentCallback = GetAlignment;
        public static IAsyncResult BeginGetAlignment(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getAlignmentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ListViewAlignment EndGetAlignment(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetAlignment(result);
        }
        public static System.Windows.Forms.ListViewAlignment EndGetAlignment(IAsyncResult result)
        {
            return getAlignmentCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewAlignment> GetAlignmentAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ListViewAlignment>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetAlignment,
                EndGetAlignment,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ListViewAlignment> setAlignmentInternal = (x, v) => x.Alignment = v;
        public static void SetAlignment(this System.Windows.Forms.ListView target, System.Windows.Forms.ListViewAlignment value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAlignmentInternal, target, value);
            else
                setAlignmentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ListViewAlignment> setAlignmentCallback = SetAlignment;
        public static IAsyncResult BeginSetAlignment(this System.Windows.Forms.ListView target, System.Windows.Forms.ListViewAlignment value, AsyncCallback callback, object state)
        {
            return setAlignmentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAlignment(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetAlignment(result);
        }
        public static void EndSetAlignment(IAsyncResult result)
        {
            setAlignmentCallback.EndInvoke(result);
        }
        public static Task SetAlignmentAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.ListViewAlignment value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ListViewAlignment>(
                BeginSetAlignment,
                EndSetAlignment,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getAllowColumnReorderInternal = (x) => x.AllowColumnReorder;
        public static System.Boolean GetAllowColumnReorder(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowColumnReorderInternal, target);
            else
                return getAllowColumnReorderInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getAllowColumnReorderCallback = GetAllowColumnReorder;
        public static IAsyncResult BeginGetAllowColumnReorder(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getAllowColumnReorderCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowColumnReorder(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetAllowColumnReorder(result);
        }
        public static System.Boolean EndGetAllowColumnReorder(IAsyncResult result)
        {
            return getAllowColumnReorderCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowColumnReorderAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetAllowColumnReorder,
                EndGetAllowColumnReorder,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setAllowColumnReorderInternal = (x, v) => x.AllowColumnReorder = v;
        public static void SetAllowColumnReorder(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowColumnReorderInternal, target, value);
            else
                setAllowColumnReorderInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setAllowColumnReorderCallback = SetAllowColumnReorder;
        public static IAsyncResult BeginSetAllowColumnReorder(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowColumnReorderCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowColumnReorder(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetAllowColumnReorder(result);
        }
        public static void EndSetAllowColumnReorder(IAsyncResult result)
        {
            setAllowColumnReorderCallback.EndInvoke(result);
        }
        public static Task SetAllowColumnReorderAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetAllowColumnReorder,
                EndSetAllowColumnReorder,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getAutoArrangeInternal = (x) => x.AutoArrange;
        public static System.Boolean GetAutoArrange(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoArrangeInternal, target);
            else
                return getAutoArrangeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getAutoArrangeCallback = GetAutoArrange;
        public static IAsyncResult BeginGetAutoArrange(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getAutoArrangeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoArrange(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetAutoArrange(result);
        }
        public static System.Boolean EndGetAutoArrange(IAsyncResult result)
        {
            return getAutoArrangeCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoArrangeAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetAutoArrange,
                EndGetAutoArrange,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setAutoArrangeInternal = (x, v) => x.AutoArrange = v;
        public static void SetAutoArrange(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoArrangeInternal, target, value);
            else
                setAutoArrangeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setAutoArrangeCallback = SetAutoArrange;
        public static IAsyncResult BeginSetAutoArrange(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoArrangeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoArrange(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetAutoArrange(result);
        }
        public static void EndSetAutoArrange(IAsyncResult result)
        {
            setAutoArrangeCallback.EndInvoke(result);
        }
        public static Task SetAutoArrangeAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetAutoArrange,
                EndSetAutoArrange,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getBackgroundImageTiledInternal = (x) => x.BackgroundImageTiled;
        public static System.Boolean GetBackgroundImageTiled(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getBackgroundImageTiledInternal, target);
            else
                return getBackgroundImageTiledInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getBackgroundImageTiledCallback = GetBackgroundImageTiled;
        public static IAsyncResult BeginGetBackgroundImageTiled(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getBackgroundImageTiledCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetBackgroundImageTiled(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetBackgroundImageTiled(result);
        }
        public static System.Boolean EndGetBackgroundImageTiled(IAsyncResult result)
        {
            return getBackgroundImageTiledCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetBackgroundImageTiledAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetBackgroundImageTiled,
                EndGetBackgroundImageTiled,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setBackgroundImageTiledInternal = (x, v) => x.BackgroundImageTiled = v;
        public static void SetBackgroundImageTiled(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBackgroundImageTiledInternal, target, value);
            else
                setBackgroundImageTiledInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setBackgroundImageTiledCallback = SetBackgroundImageTiled;
        public static IAsyncResult BeginSetBackgroundImageTiled(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setBackgroundImageTiledCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBackgroundImageTiled(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetBackgroundImageTiled(result);
        }
        public static void EndSetBackgroundImageTiled(IAsyncResult result)
        {
            setBackgroundImageTiledCallback.EndInvoke(result);
        }
        public static Task SetBackgroundImageTiledAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetBackgroundImageTiled,
                EndSetBackgroundImageTiled,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getCheckBoxesInternal = (x) => x.CheckBoxes;
        public static System.Boolean GetCheckBoxes(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCheckBoxesInternal, target);
            else
                return getCheckBoxesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getCheckBoxesCallback = GetCheckBoxes;
        public static IAsyncResult BeginGetCheckBoxes(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getCheckBoxesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCheckBoxes(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetCheckBoxes(result);
        }
        public static System.Boolean EndGetCheckBoxes(IAsyncResult result)
        {
            return getCheckBoxesCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCheckBoxesAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetCheckBoxes,
                EndGetCheckBoxes,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setCheckBoxesInternal = (x, v) => x.CheckBoxes = v;
        public static void SetCheckBoxes(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCheckBoxesInternal, target, value);
            else
                setCheckBoxesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setCheckBoxesCallback = SetCheckBoxes;
        public static IAsyncResult BeginSetCheckBoxes(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setCheckBoxesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCheckBoxes(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetCheckBoxes(result);
        }
        public static void EndSetCheckBoxes(IAsyncResult result)
        {
            setCheckBoxesCallback.EndInvoke(result);
        }
        public static Task SetCheckBoxesAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetCheckBoxes,
                EndSetCheckBoxes,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem> getFocusedItemInternal = (x) => x.FocusedItem;
        public static System.Windows.Forms.ListViewItem GetFocusedItem(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ListViewItem)target.Invoke(getFocusedItemInternal, target);
            else
                return getFocusedItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem> getFocusedItemCallback = GetFocusedItem;
        public static IAsyncResult BeginGetFocusedItem(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getFocusedItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ListViewItem EndGetFocusedItem(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetFocusedItem(result);
        }
        public static System.Windows.Forms.ListViewItem EndGetFocusedItem(IAsyncResult result)
        {
            return getFocusedItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewItem> GetFocusedItemAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ListViewItem>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetFocusedItem,
                EndGetFocusedItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem> setFocusedItemInternal = (x, v) => x.FocusedItem = v;
        public static void SetFocusedItem(this System.Windows.Forms.ListView target, System.Windows.Forms.ListViewItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFocusedItemInternal, target, value);
            else
                setFocusedItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem> setFocusedItemCallback = SetFocusedItem;
        public static IAsyncResult BeginSetFocusedItem(this System.Windows.Forms.ListView target, System.Windows.Forms.ListViewItem value, AsyncCallback callback, object state)
        {
            return setFocusedItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFocusedItem(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetFocusedItem(result);
        }
        public static void EndSetFocusedItem(IAsyncResult result)
        {
            setFocusedItemCallback.EndInvoke(result);
        }
        public static Task SetFocusedItemAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.ListViewItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem>(
                BeginSetFocusedItem,
                EndSetFocusedItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getFullRowSelectInternal = (x) => x.FullRowSelect;
        public static System.Boolean GetFullRowSelect(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getFullRowSelectInternal, target);
            else
                return getFullRowSelectInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getFullRowSelectCallback = GetFullRowSelect;
        public static IAsyncResult BeginGetFullRowSelect(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getFullRowSelectCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetFullRowSelect(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetFullRowSelect(result);
        }
        public static System.Boolean EndGetFullRowSelect(IAsyncResult result)
        {
            return getFullRowSelectCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetFullRowSelectAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetFullRowSelect,
                EndGetFullRowSelect,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setFullRowSelectInternal = (x, v) => x.FullRowSelect = v;
        public static void SetFullRowSelect(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFullRowSelectInternal, target, value);
            else
                setFullRowSelectInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setFullRowSelectCallback = SetFullRowSelect;
        public static IAsyncResult BeginSetFullRowSelect(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setFullRowSelectCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFullRowSelect(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetFullRowSelect(result);
        }
        public static void EndSetFullRowSelect(IAsyncResult result)
        {
            setFullRowSelectCallback.EndInvoke(result);
        }
        public static Task SetFullRowSelectAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetFullRowSelect,
                EndSetFullRowSelect,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getGridLinesInternal = (x) => x.GridLines;
        public static System.Boolean GetGridLines(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getGridLinesInternal, target);
            else
                return getGridLinesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getGridLinesCallback = GetGridLines;
        public static IAsyncResult BeginGetGridLines(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getGridLinesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetGridLines(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetGridLines(result);
        }
        public static System.Boolean EndGetGridLines(IAsyncResult result)
        {
            return getGridLinesCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetGridLinesAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetGridLines,
                EndGetGridLines,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setGridLinesInternal = (x, v) => x.GridLines = v;
        public static void SetGridLines(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setGridLinesInternal, target, value);
            else
                setGridLinesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setGridLinesCallback = SetGridLines;
        public static IAsyncResult BeginSetGridLines(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setGridLinesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetGridLines(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetGridLines(result);
        }
        public static void EndSetGridLines(IAsyncResult result)
        {
            setGridLinesCallback.EndInvoke(result);
        }
        public static Task SetGridLinesAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetGridLines,
                EndSetGridLines,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewGroupCollection> getGroupsInternal = (x) => x.Groups;
        public static System.Windows.Forms.ListViewGroupCollection GetGroups(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ListViewGroupCollection)target.Invoke(getGroupsInternal, target);
            else
                return getGroupsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewGroupCollection> getGroupsCallback = GetGroups;
        public static IAsyncResult BeginGetGroups(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getGroupsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ListViewGroupCollection EndGetGroups(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetGroups(result);
        }
        public static System.Windows.Forms.ListViewGroupCollection EndGetGroups(IAsyncResult result)
        {
            return getGroupsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewGroupCollection> GetGroupsAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ListViewGroupCollection>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetGroups,
                EndGetGroups,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ColumnHeaderStyle> getHeaderStyleInternal = (x) => x.HeaderStyle;
        public static System.Windows.Forms.ColumnHeaderStyle GetHeaderStyle(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ColumnHeaderStyle)target.Invoke(getHeaderStyleInternal, target);
            else
                return getHeaderStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ColumnHeaderStyle> getHeaderStyleCallback = GetHeaderStyle;
        public static IAsyncResult BeginGetHeaderStyle(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getHeaderStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ColumnHeaderStyle EndGetHeaderStyle(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetHeaderStyle(result);
        }
        public static System.Windows.Forms.ColumnHeaderStyle EndGetHeaderStyle(IAsyncResult result)
        {
            return getHeaderStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ColumnHeaderStyle> GetHeaderStyleAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ColumnHeaderStyle>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetHeaderStyle,
                EndGetHeaderStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ColumnHeaderStyle> setHeaderStyleInternal = (x, v) => x.HeaderStyle = v;
        public static void SetHeaderStyle(this System.Windows.Forms.ListView target, System.Windows.Forms.ColumnHeaderStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHeaderStyleInternal, target, value);
            else
                setHeaderStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ColumnHeaderStyle> setHeaderStyleCallback = SetHeaderStyle;
        public static IAsyncResult BeginSetHeaderStyle(this System.Windows.Forms.ListView target, System.Windows.Forms.ColumnHeaderStyle value, AsyncCallback callback, object state)
        {
            return setHeaderStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHeaderStyle(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetHeaderStyle(result);
        }
        public static void EndSetHeaderStyle(IAsyncResult result)
        {
            setHeaderStyleCallback.EndInvoke(result);
        }
        public static Task SetHeaderStyleAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.ColumnHeaderStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ColumnHeaderStyle>(
                BeginSetHeaderStyle,
                EndSetHeaderStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getHotTrackingInternal = (x) => x.HotTracking;
        public static System.Boolean GetHotTracking(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHotTrackingInternal, target);
            else
                return getHotTrackingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getHotTrackingCallback = GetHotTracking;
        public static IAsyncResult BeginGetHotTracking(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getHotTrackingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHotTracking(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetHotTracking(result);
        }
        public static System.Boolean EndGetHotTracking(IAsyncResult result)
        {
            return getHotTrackingCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHotTrackingAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetHotTracking,
                EndGetHotTracking,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setHotTrackingInternal = (x, v) => x.HotTracking = v;
        public static void SetHotTracking(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHotTrackingInternal, target, value);
            else
                setHotTrackingInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setHotTrackingCallback = SetHotTracking;
        public static IAsyncResult BeginSetHotTracking(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setHotTrackingCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHotTracking(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetHotTracking(result);
        }
        public static void EndSetHotTracking(IAsyncResult result)
        {
            setHotTrackingCallback.EndInvoke(result);
        }
        public static Task SetHotTrackingAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetHotTracking,
                EndSetHotTracking,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getHoverSelectionInternal = (x) => x.HoverSelection;
        public static System.Boolean GetHoverSelection(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHoverSelectionInternal, target);
            else
                return getHoverSelectionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getHoverSelectionCallback = GetHoverSelection;
        public static IAsyncResult BeginGetHoverSelection(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getHoverSelectionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHoverSelection(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetHoverSelection(result);
        }
        public static System.Boolean EndGetHoverSelection(IAsyncResult result)
        {
            return getHoverSelectionCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHoverSelectionAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetHoverSelection,
                EndGetHoverSelection,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setHoverSelectionInternal = (x, v) => x.HoverSelection = v;
        public static void SetHoverSelection(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHoverSelectionInternal, target, value);
            else
                setHoverSelectionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setHoverSelectionCallback = SetHoverSelection;
        public static IAsyncResult BeginSetHoverSelection(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setHoverSelectionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHoverSelection(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetHoverSelection(result);
        }
        public static void EndSetHoverSelection(IAsyncResult result)
        {
            setHoverSelectionCallback.EndInvoke(result);
        }
        public static Task SetHoverSelectionAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetHoverSelection,
                EndSetHoverSelection,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewInsertionMark> getInsertionMarkInternal = (x) => x.InsertionMark;
        public static System.Windows.Forms.ListViewInsertionMark GetInsertionMark(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ListViewInsertionMark)target.Invoke(getInsertionMarkInternal, target);
            else
                return getInsertionMarkInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewInsertionMark> getInsertionMarkCallback = GetInsertionMark;
        public static IAsyncResult BeginGetInsertionMark(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getInsertionMarkCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ListViewInsertionMark EndGetInsertionMark(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetInsertionMark(result);
        }
        public static System.Windows.Forms.ListViewInsertionMark EndGetInsertionMark(IAsyncResult result)
        {
            return getInsertionMarkCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewInsertionMark> GetInsertionMarkAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ListViewInsertionMark>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetInsertionMark,
                EndGetInsertionMark,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getLabelEditInternal = (x) => x.LabelEdit;
        public static System.Boolean GetLabelEdit(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getLabelEditInternal, target);
            else
                return getLabelEditInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getLabelEditCallback = GetLabelEdit;
        public static IAsyncResult BeginGetLabelEdit(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getLabelEditCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetLabelEdit(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetLabelEdit(result);
        }
        public static System.Boolean EndGetLabelEdit(IAsyncResult result)
        {
            return getLabelEditCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetLabelEditAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetLabelEdit,
                EndGetLabelEdit,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setLabelEditInternal = (x, v) => x.LabelEdit = v;
        public static void SetLabelEdit(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLabelEditInternal, target, value);
            else
                setLabelEditInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setLabelEditCallback = SetLabelEdit;
        public static IAsyncResult BeginSetLabelEdit(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setLabelEditCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLabelEdit(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetLabelEdit(result);
        }
        public static void EndSetLabelEdit(IAsyncResult result)
        {
            setLabelEditCallback.EndInvoke(result);
        }
        public static Task SetLabelEditAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetLabelEdit,
                EndSetLabelEdit,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getLabelWrapInternal = (x) => x.LabelWrap;
        public static System.Boolean GetLabelWrap(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getLabelWrapInternal, target);
            else
                return getLabelWrapInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getLabelWrapCallback = GetLabelWrap;
        public static IAsyncResult BeginGetLabelWrap(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getLabelWrapCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetLabelWrap(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetLabelWrap(result);
        }
        public static System.Boolean EndGetLabelWrap(IAsyncResult result)
        {
            return getLabelWrapCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetLabelWrapAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetLabelWrap,
                EndGetLabelWrap,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setLabelWrapInternal = (x, v) => x.LabelWrap = v;
        public static void SetLabelWrap(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLabelWrapInternal, target, value);
            else
                setLabelWrapInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setLabelWrapCallback = SetLabelWrap;
        public static IAsyncResult BeginSetLabelWrap(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setLabelWrapCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLabelWrap(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetLabelWrap(result);
        }
        public static void EndSetLabelWrap(IAsyncResult result)
        {
            setLabelWrapCallback.EndInvoke(result);
        }
        public static Task SetLabelWrapAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetLabelWrap,
                EndSetLabelWrap,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> getLargeImageListInternal = (x) => x.LargeImageList;
        public static System.Windows.Forms.ImageList GetLargeImageList(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ImageList)target.Invoke(getLargeImageListInternal, target);
            else
                return getLargeImageListInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> getLargeImageListCallback = GetLargeImageList;
        public static IAsyncResult BeginGetLargeImageList(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getLargeImageListCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ImageList EndGetLargeImageList(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetLargeImageList(result);
        }
        public static System.Windows.Forms.ImageList EndGetLargeImageList(IAsyncResult result)
        {
            return getLargeImageListCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ImageList> GetLargeImageListAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ImageList>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetLargeImageList,
                EndGetLargeImageList,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> setLargeImageListInternal = (x, v) => x.LargeImageList = v;
        public static void SetLargeImageList(this System.Windows.Forms.ListView target, System.Windows.Forms.ImageList value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setLargeImageListInternal, target, value);
            else
                setLargeImageListInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> setLargeImageListCallback = SetLargeImageList;
        public static IAsyncResult BeginSetLargeImageList(this System.Windows.Forms.ListView target, System.Windows.Forms.ImageList value, AsyncCallback callback, object state)
        {
            return setLargeImageListCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetLargeImageList(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetLargeImageList(result);
        }
        public static void EndSetLargeImageList(IAsyncResult result)
        {
            setLargeImageListCallback.EndInvoke(result);
        }
        public static Task SetLargeImageListAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.ImageList value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ImageList>(
                BeginSetLargeImageList,
                EndSetLargeImageList,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Collections.IComparer> getListViewItemSorterInternal = (x) => x.ListViewItemSorter;
        public static System.Collections.IComparer GetListViewItemSorter(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Collections.IComparer)target.Invoke(getListViewItemSorterInternal, target);
            else
                return getListViewItemSorterInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Collections.IComparer> getListViewItemSorterCallback = GetListViewItemSorter;
        public static IAsyncResult BeginGetListViewItemSorter(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getListViewItemSorterCallback.BeginInvoke(target, callback, state);
        }
        public static System.Collections.IComparer EndGetListViewItemSorter(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetListViewItemSorter(result);
        }
        public static System.Collections.IComparer EndGetListViewItemSorter(IAsyncResult result)
        {
            return getListViewItemSorterCallback.EndInvoke(result);
        }
        public static Task<System.Collections.IComparer> GetListViewItemSorterAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Collections.IComparer>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetListViewItemSorter,
                EndGetListViewItemSorter,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Collections.IComparer> setListViewItemSorterInternal = (x, v) => x.ListViewItemSorter = v;
        public static void SetListViewItemSorter(this System.Windows.Forms.ListView target, System.Collections.IComparer value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setListViewItemSorterInternal, target, value);
            else
                setListViewItemSorterInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Collections.IComparer> setListViewItemSorterCallback = SetListViewItemSorter;
        public static IAsyncResult BeginSetListViewItemSorter(this System.Windows.Forms.ListView target, System.Collections.IComparer value, AsyncCallback callback, object state)
        {
            return setListViewItemSorterCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetListViewItemSorter(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetListViewItemSorter(result);
        }
        public static void EndSetListViewItemSorter(IAsyncResult result)
        {
            setListViewItemSorterCallback.EndInvoke(result);
        }
        public static Task SetListViewItemSorterAsync(this System.Windows.Forms.ListView target, System.Collections.IComparer value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Collections.IComparer>(
                BeginSetListViewItemSorter,
                EndSetListViewItemSorter,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getOwnerDrawInternal = (x) => x.OwnerDraw;
        public static System.Boolean GetOwnerDraw(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getOwnerDrawInternal, target);
            else
                return getOwnerDrawInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getOwnerDrawCallback = GetOwnerDraw;
        public static IAsyncResult BeginGetOwnerDraw(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getOwnerDrawCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetOwnerDraw(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetOwnerDraw(result);
        }
        public static System.Boolean EndGetOwnerDraw(IAsyncResult result)
        {
            return getOwnerDrawCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetOwnerDrawAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetOwnerDraw,
                EndGetOwnerDraw,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setOwnerDrawInternal = (x, v) => x.OwnerDraw = v;
        public static void SetOwnerDraw(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setOwnerDrawInternal, target, value);
            else
                setOwnerDrawInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setOwnerDrawCallback = SetOwnerDraw;
        public static IAsyncResult BeginSetOwnerDraw(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setOwnerDrawCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetOwnerDraw(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetOwnerDraw(result);
        }
        public static void EndSetOwnerDraw(IAsyncResult result)
        {
            setOwnerDrawCallback.EndInvoke(result);
        }
        public static Task SetOwnerDrawAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetOwnerDraw,
                EndSetOwnerDraw,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getScrollableInternal = (x) => x.Scrollable;
        public static System.Boolean GetScrollable(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getScrollableInternal, target);
            else
                return getScrollableInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getScrollableCallback = GetScrollable;
        public static IAsyncResult BeginGetScrollable(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getScrollableCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetScrollable(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetScrollable(result);
        }
        public static System.Boolean EndGetScrollable(IAsyncResult result)
        {
            return getScrollableCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetScrollableAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetScrollable,
                EndGetScrollable,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setScrollableInternal = (x, v) => x.Scrollable = v;
        public static void SetScrollable(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setScrollableInternal, target, value);
            else
                setScrollableInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setScrollableCallback = SetScrollable;
        public static IAsyncResult BeginSetScrollable(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setScrollableCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetScrollable(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetScrollable(result);
        }
        public static void EndSetScrollable(IAsyncResult result)
        {
            setScrollableCallback.EndInvoke(result);
        }
        public static Task SetScrollableAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetScrollable,
                EndSetScrollable,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getShowGroupsInternal = (x) => x.ShowGroups;
        public static System.Boolean GetShowGroups(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowGroupsInternal, target);
            else
                return getShowGroupsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getShowGroupsCallback = GetShowGroups;
        public static IAsyncResult BeginGetShowGroups(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getShowGroupsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowGroups(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetShowGroups(result);
        }
        public static System.Boolean EndGetShowGroups(IAsyncResult result)
        {
            return getShowGroupsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowGroupsAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetShowGroups,
                EndGetShowGroups,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setShowGroupsInternal = (x, v) => x.ShowGroups = v;
        public static void SetShowGroups(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowGroupsInternal, target, value);
            else
                setShowGroupsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setShowGroupsCallback = SetShowGroups;
        public static IAsyncResult BeginSetShowGroups(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowGroupsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowGroups(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetShowGroups(result);
        }
        public static void EndSetShowGroups(IAsyncResult result)
        {
            setShowGroupsCallback.EndInvoke(result);
        }
        public static Task SetShowGroupsAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetShowGroups,
                EndSetShowGroups,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> getSmallImageListInternal = (x) => x.SmallImageList;
        public static System.Windows.Forms.ImageList GetSmallImageList(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ImageList)target.Invoke(getSmallImageListInternal, target);
            else
                return getSmallImageListInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> getSmallImageListCallback = GetSmallImageList;
        public static IAsyncResult BeginGetSmallImageList(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getSmallImageListCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ImageList EndGetSmallImageList(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetSmallImageList(result);
        }
        public static System.Windows.Forms.ImageList EndGetSmallImageList(IAsyncResult result)
        {
            return getSmallImageListCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ImageList> GetSmallImageListAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ImageList>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetSmallImageList,
                EndGetSmallImageList,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> setSmallImageListInternal = (x, v) => x.SmallImageList = v;
        public static void SetSmallImageList(this System.Windows.Forms.ListView target, System.Windows.Forms.ImageList value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSmallImageListInternal, target, value);
            else
                setSmallImageListInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> setSmallImageListCallback = SetSmallImageList;
        public static IAsyncResult BeginSetSmallImageList(this System.Windows.Forms.ListView target, System.Windows.Forms.ImageList value, AsyncCallback callback, object state)
        {
            return setSmallImageListCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSmallImageList(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetSmallImageList(result);
        }
        public static void EndSetSmallImageList(IAsyncResult result)
        {
            setSmallImageListCallback.EndInvoke(result);
        }
        public static Task SetSmallImageListAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.ImageList value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ImageList>(
                BeginSetSmallImageList,
                EndSetSmallImageList,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.SortOrder> getSortingInternal = (x) => x.Sorting;
        public static System.Windows.Forms.SortOrder GetSorting(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.SortOrder)target.Invoke(getSortingInternal, target);
            else
                return getSortingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.SortOrder> getSortingCallback = GetSorting;
        public static IAsyncResult BeginGetSorting(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getSortingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.SortOrder EndGetSorting(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetSorting(result);
        }
        public static System.Windows.Forms.SortOrder EndGetSorting(IAsyncResult result)
        {
            return getSortingCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.SortOrder> GetSortingAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.SortOrder>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetSorting,
                EndGetSorting,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.SortOrder> setSortingInternal = (x, v) => x.Sorting = v;
        public static void SetSorting(this System.Windows.Forms.ListView target, System.Windows.Forms.SortOrder value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSortingInternal, target, value);
            else
                setSortingInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.SortOrder> setSortingCallback = SetSorting;
        public static IAsyncResult BeginSetSorting(this System.Windows.Forms.ListView target, System.Windows.Forms.SortOrder value, AsyncCallback callback, object state)
        {
            return setSortingCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSorting(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetSorting(result);
        }
        public static void EndSetSorting(IAsyncResult result)
        {
            setSortingCallback.EndInvoke(result);
        }
        public static Task SetSortingAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.SortOrder value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.SortOrder>(
                BeginSetSorting,
                EndSetSorting,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> getStateImageListInternal = (x) => x.StateImageList;
        public static System.Windows.Forms.ImageList GetStateImageList(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ImageList)target.Invoke(getStateImageListInternal, target);
            else
                return getStateImageListInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> getStateImageListCallback = GetStateImageList;
        public static IAsyncResult BeginGetStateImageList(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getStateImageListCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ImageList EndGetStateImageList(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetStateImageList(result);
        }
        public static System.Windows.Forms.ImageList EndGetStateImageList(IAsyncResult result)
        {
            return getStateImageListCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ImageList> GetStateImageListAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ImageList>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetStateImageList,
                EndGetStateImageList,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> setStateImageListInternal = (x, v) => x.StateImageList = v;
        public static void SetStateImageList(this System.Windows.Forms.ListView target, System.Windows.Forms.ImageList value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setStateImageListInternal, target, value);
            else
                setStateImageListInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ImageList> setStateImageListCallback = SetStateImageList;
        public static IAsyncResult BeginSetStateImageList(this System.Windows.Forms.ListView target, System.Windows.Forms.ImageList value, AsyncCallback callback, object state)
        {
            return setStateImageListCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetStateImageList(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetStateImageList(result);
        }
        public static void EndSetStateImageList(IAsyncResult result)
        {
            setStateImageListCallback.EndInvoke(result);
        }
        public static Task SetStateImageListAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.ImageList value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ImageList>(
                BeginSetStateImageList,
                EndSetStateImageList,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Drawing.Size> getTileSizeInternal = (x) => x.TileSize;
        public static System.Drawing.Size GetTileSize(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getTileSizeInternal, target);
            else
                return getTileSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Drawing.Size> getTileSizeCallback = GetTileSize;
        public static IAsyncResult BeginGetTileSize(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getTileSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetTileSize(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetTileSize(result);
        }
        public static System.Drawing.Size EndGetTileSize(IAsyncResult result)
        {
            return getTileSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetTileSizeAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetTileSize,
                EndGetTileSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Drawing.Size> setTileSizeInternal = (x, v) => x.TileSize = v;
        public static void SetTileSize(this System.Windows.Forms.ListView target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTileSizeInternal, target, value);
            else
                setTileSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Drawing.Size> setTileSizeCallback = SetTileSize;
        public static IAsyncResult BeginSetTileSize(this System.Windows.Forms.ListView target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setTileSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTileSize(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetTileSize(result);
        }
        public static void EndSetTileSize(IAsyncResult result)
        {
            setTileSizeCallback.EndInvoke(result);
        }
        public static Task SetTileSizeAsync(this System.Windows.Forms.ListView target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Drawing.Size>(
                BeginSetTileSize,
                EndSetTileSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem> getTopItemInternal = (x) => x.TopItem;
        public static System.Windows.Forms.ListViewItem GetTopItem(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ListViewItem)target.Invoke(getTopItemInternal, target);
            else
                return getTopItemInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem> getTopItemCallback = GetTopItem;
        public static IAsyncResult BeginGetTopItem(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getTopItemCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ListViewItem EndGetTopItem(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetTopItem(result);
        }
        public static System.Windows.Forms.ListViewItem EndGetTopItem(IAsyncResult result)
        {
            return getTopItemCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ListViewItem> GetTopItemAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.ListViewItem>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetTopItem,
                EndGetTopItem,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem> setTopItemInternal = (x, v) => x.TopItem = v;
        public static void SetTopItem(this System.Windows.Forms.ListView target, System.Windows.Forms.ListViewItem value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTopItemInternal, target, value);
            else
                setTopItemInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem> setTopItemCallback = SetTopItem;
        public static IAsyncResult BeginSetTopItem(this System.Windows.Forms.ListView target, System.Windows.Forms.ListViewItem value, AsyncCallback callback, object state)
        {
            return setTopItemCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTopItem(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetTopItem(result);
        }
        public static void EndSetTopItem(IAsyncResult result)
        {
            setTopItemCallback.EndInvoke(result);
        }
        public static Task SetTopItemAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.ListViewItem value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.ListViewItem>(
                BeginSetTopItem,
                EndSetTopItem,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getUseCompatibleStateImageBehaviorInternal = (x) => x.UseCompatibleStateImageBehavior;
        public static System.Boolean GetUseCompatibleStateImageBehavior(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getUseCompatibleStateImageBehaviorInternal, target);
            else
                return getUseCompatibleStateImageBehaviorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Boolean> getUseCompatibleStateImageBehaviorCallback = GetUseCompatibleStateImageBehavior;
        public static IAsyncResult BeginGetUseCompatibleStateImageBehavior(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getUseCompatibleStateImageBehaviorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetUseCompatibleStateImageBehavior(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetUseCompatibleStateImageBehavior(result);
        }
        public static System.Boolean EndGetUseCompatibleStateImageBehavior(IAsyncResult result)
        {
            return getUseCompatibleStateImageBehaviorCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetUseCompatibleStateImageBehaviorAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetUseCompatibleStateImageBehavior,
                EndGetUseCompatibleStateImageBehavior,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setUseCompatibleStateImageBehaviorInternal = (x, v) => x.UseCompatibleStateImageBehavior = v;
        public static void SetUseCompatibleStateImageBehavior(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUseCompatibleStateImageBehaviorInternal, target, value);
            else
                setUseCompatibleStateImageBehaviorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Boolean> setUseCompatibleStateImageBehaviorCallback = SetUseCompatibleStateImageBehavior;
        public static IAsyncResult BeginSetUseCompatibleStateImageBehavior(this System.Windows.Forms.ListView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setUseCompatibleStateImageBehaviorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUseCompatibleStateImageBehavior(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetUseCompatibleStateImageBehavior(result);
        }
        public static void EndSetUseCompatibleStateImageBehavior(IAsyncResult result)
        {
            setUseCompatibleStateImageBehaviorCallback.EndInvoke(result);
        }
        public static Task SetUseCompatibleStateImageBehaviorAsync(this System.Windows.Forms.ListView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Boolean>(
                BeginSetUseCompatibleStateImageBehavior,
                EndSetUseCompatibleStateImageBehavior,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.View> getViewInternal = (x) => x.View;
        public static System.Windows.Forms.View GetView(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.View)target.Invoke(getViewInternal, target);
            else
                return getViewInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Windows.Forms.View> getViewCallback = GetView;
        public static IAsyncResult BeginGetView(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getViewCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.View EndGetView(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetView(result);
        }
        public static System.Windows.Forms.View EndGetView(IAsyncResult result)
        {
            return getViewCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.View> GetViewAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Windows.Forms.View>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetView,
                EndGetView,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.View> setViewInternal = (x, v) => x.View = v;
        public static void SetView(this System.Windows.Forms.ListView target, System.Windows.Forms.View value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setViewInternal, target, value);
            else
                setViewInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Windows.Forms.View> setViewCallback = SetView;
        public static IAsyncResult BeginSetView(this System.Windows.Forms.ListView target, System.Windows.Forms.View value, AsyncCallback callback, object state)
        {
            return setViewCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetView(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetView(result);
        }
        public static void EndSetView(IAsyncResult result)
        {
            setViewCallback.EndInvoke(result);
        }
        public static Task SetViewAsync(this System.Windows.Forms.ListView target, System.Windows.Forms.View value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Windows.Forms.View>(
                BeginSetView,
                EndSetView,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ListView, System.Int32> getVirtualListSizeInternal = (x) => x.VirtualListSize;
        public static System.Int32 GetVirtualListSize(this System.Windows.Forms.ListView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getVirtualListSizeInternal, target);
            else
                return getVirtualListSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ListView, System.Int32> getVirtualListSizeCallback = GetVirtualListSize;
        public static IAsyncResult BeginGetVirtualListSize(this System.Windows.Forms.ListView target, AsyncCallback callback, object state)
        {
            return getVirtualListSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetVirtualListSize(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            return EndGetVirtualListSize(result);
        }
        public static System.Int32 EndGetVirtualListSize(IAsyncResult result)
        {
            return getVirtualListSizeCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetVirtualListSizeAsync(this System.Windows.Forms.ListView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ListView>(
                BeginGetVirtualListSize,
                EndGetVirtualListSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ListView, System.Int32> setVirtualListSizeInternal = (x, v) => x.VirtualListSize = v;
        public static void SetVirtualListSize(this System.Windows.Forms.ListView target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setVirtualListSizeInternal, target, value);
            else
                setVirtualListSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ListView, System.Int32> setVirtualListSizeCallback = SetVirtualListSize;
        public static IAsyncResult BeginSetVirtualListSize(this System.Windows.Forms.ListView target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setVirtualListSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetVirtualListSize(this System.Windows.Forms.ListView target, IAsyncResult result)
        {
            EndSetVirtualListSize(result);
        }
        public static void EndSetVirtualListSize(IAsyncResult result)
        {
            setVirtualListSizeCallback.EndInvoke(result);
        }
        public static Task SetVirtualListSizeAsync(this System.Windows.Forms.ListView target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ListView, System.Int32>(
                BeginSetVirtualListSize,
                EndSetVirtualListSize,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.MdiClient, System.Windows.Forms.MdiLayout> layoutMdi2Internal = (c, value) => c.LayoutMdi(value);
        public static void LayoutMdi(this System.Windows.Forms.MdiClient __control__, System.Windows.Forms.MdiLayout value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(layoutMdi2Internal, __control__, value);
            else
                layoutMdi2Internal.Invoke(__control__, value);
        }
        private static readonly Action<System.Windows.Forms.MdiClient, System.Windows.Forms.MdiLayout> layoutMdi2Callback = LayoutMdi;
        public static IAsyncResult BeginLayoutMdi2(this System.Windows.Forms.MdiClient __control__, System.Windows.Forms.MdiLayout value, AsyncCallback callback, object state)
        {
            return layoutMdi2Callback.BeginInvoke(__control__, value, callback, state);
        }
        public static void EndLayoutMdi2(this System.Windows.Forms.MdiClient __control__, IAsyncResult result)
        {
            EndLayoutMdi2(result);
        }
        public static void EndLayoutMdi2(IAsyncResult result)
        {
            layoutMdi2Callback.EndInvoke(result);
        }
        public static Task LayoutMdiAsync(this System.Windows.Forms.MdiClient __control__, System.Windows.Forms.MdiLayout value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MdiClient, System.Windows.Forms.MdiLayout>(
                (Func<System.Windows.Forms.MdiClient, System.Windows.Forms.MdiLayout, AsyncCallback, object, IAsyncResult>)BeginLayoutMdi2,
                (Action<IAsyncResult>)EndLayoutMdi2,
                __control__, value, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> addAnnuallyBoldedDate1Internal = (c, date) => c.AddAnnuallyBoldedDate(date);
        public static void AddAnnuallyBoldedDate(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(addAnnuallyBoldedDate1Internal, __control__, date);
            else
                addAnnuallyBoldedDate1Internal.Invoke(__control__, date);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> addAnnuallyBoldedDate1Callback = AddAnnuallyBoldedDate;
        public static IAsyncResult BeginAddAnnuallyBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date, AsyncCallback callback, object state)
        {
            return addAnnuallyBoldedDate1Callback.BeginInvoke(__control__, date, callback, state);
        }
        public static void EndAddAnnuallyBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndAddAnnuallyBoldedDate1(result);
        }
        public static void EndAddAnnuallyBoldedDate1(IAsyncResult result)
        {
            addAnnuallyBoldedDate1Callback.EndInvoke(result);
        }
        public static Task AddAnnuallyBoldedDateAsync(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime>(
                (Func<System.Windows.Forms.MonthCalendar, System.DateTime, AsyncCallback, object, IAsyncResult>)BeginAddAnnuallyBoldedDate1,
                (Action<IAsyncResult>)EndAddAnnuallyBoldedDate1,
                __control__, date, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> addBoldedDate1Internal = (c, date) => c.AddBoldedDate(date);
        public static void AddBoldedDate(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(addBoldedDate1Internal, __control__, date);
            else
                addBoldedDate1Internal.Invoke(__control__, date);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> addBoldedDate1Callback = AddBoldedDate;
        public static IAsyncResult BeginAddBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date, AsyncCallback callback, object state)
        {
            return addBoldedDate1Callback.BeginInvoke(__control__, date, callback, state);
        }
        public static void EndAddBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndAddBoldedDate1(result);
        }
        public static void EndAddBoldedDate1(IAsyncResult result)
        {
            addBoldedDate1Callback.EndInvoke(result);
        }
        public static Task AddBoldedDateAsync(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime>(
                (Func<System.Windows.Forms.MonthCalendar, System.DateTime, AsyncCallback, object, IAsyncResult>)BeginAddBoldedDate1,
                (Action<IAsyncResult>)EndAddBoldedDate1,
                __control__, date, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> addMonthlyBoldedDate1Internal = (c, date) => c.AddMonthlyBoldedDate(date);
        public static void AddMonthlyBoldedDate(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(addMonthlyBoldedDate1Internal, __control__, date);
            else
                addMonthlyBoldedDate1Internal.Invoke(__control__, date);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> addMonthlyBoldedDate1Callback = AddMonthlyBoldedDate;
        public static IAsyncResult BeginAddMonthlyBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date, AsyncCallback callback, object state)
        {
            return addMonthlyBoldedDate1Callback.BeginInvoke(__control__, date, callback, state);
        }
        public static void EndAddMonthlyBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndAddMonthlyBoldedDate1(result);
        }
        public static void EndAddMonthlyBoldedDate1(IAsyncResult result)
        {
            addMonthlyBoldedDate1Callback.EndInvoke(result);
        }
        public static Task AddMonthlyBoldedDateAsync(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime>(
                (Func<System.Windows.Forms.MonthCalendar, System.DateTime, AsyncCallback, object, IAsyncResult>)BeginAddMonthlyBoldedDate1,
                (Action<IAsyncResult>)EndAddMonthlyBoldedDate1,
                __control__, date, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean, System.Windows.Forms.SelectionRange> getDisplayRange1Internal = (c, visible) => c.GetDisplayRange(visible);
        public static System.Windows.Forms.SelectionRange GetDisplayRange(this System.Windows.Forms.MonthCalendar __control__, System.Boolean visible)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.SelectionRange)__control__.Invoke(getDisplayRange1Internal, __control__, visible);
            else
                return getDisplayRange1Internal.Invoke(__control__, visible);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean, System.Windows.Forms.SelectionRange> getDisplayRange1Callback = GetDisplayRange;
        public static IAsyncResult BeginGetDisplayRange1(this System.Windows.Forms.MonthCalendar __control__, System.Boolean visible, AsyncCallback callback, object state)
        {
            return getDisplayRange1Callback.BeginInvoke(__control__, visible, callback, state);
        }
        public static System.Windows.Forms.SelectionRange EndGetDisplayRange1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            return EndGetDisplayRange1(result);
        }
        public static System.Windows.Forms.SelectionRange EndGetDisplayRange1(IAsyncResult result)
        {
            return getDisplayRange1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.SelectionRange> GetDisplayRangeAsync(this System.Windows.Forms.MonthCalendar __control__, System.Boolean visible)
        {
            return Task<System.Windows.Forms.SelectionRange>.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Boolean>(
                (Func<System.Windows.Forms.MonthCalendar, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginGetDisplayRange1,
                (Func<IAsyncResult, System.Windows.Forms.SelectionRange>)EndGetDisplayRange1,
                __control__, visible, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Int32, System.Int32, System.Windows.Forms.MonthCalendar.HitTestInfo> hitTest6Internal = (c, x, y) => c.HitTest(x, y);
        public static System.Windows.Forms.MonthCalendar.HitTestInfo HitTest(this System.Windows.Forms.MonthCalendar __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.MonthCalendar.HitTestInfo)__control__.Invoke(hitTest6Internal, __control__, x, y);
            else
                return hitTest6Internal.Invoke(__control__, x, y);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Int32, System.Int32, System.Windows.Forms.MonthCalendar.HitTestInfo> hitTest6Callback = HitTest;
        public static IAsyncResult BeginHitTest6(this System.Windows.Forms.MonthCalendar __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return hitTest6Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static System.Windows.Forms.MonthCalendar.HitTestInfo EndHitTest6(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            return EndHitTest6(result);
        }
        public static System.Windows.Forms.MonthCalendar.HitTestInfo EndHitTest6(IAsyncResult result)
        {
            return hitTest6Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.MonthCalendar.HitTestInfo> HitTestAsync(this System.Windows.Forms.MonthCalendar __control__, System.Int32 x, System.Int32 y)
        {
            return Task<System.Windows.Forms.MonthCalendar.HitTestInfo>.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.MonthCalendar, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginHitTest6,
                (Func<IAsyncResult, System.Windows.Forms.MonthCalendar.HitTestInfo>)EndHitTest6,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Point, System.Windows.Forms.MonthCalendar.HitTestInfo> hitTest7Internal = (c, point) => c.HitTest(point);
        public static System.Windows.Forms.MonthCalendar.HitTestInfo HitTest(this System.Windows.Forms.MonthCalendar __control__, System.Drawing.Point point)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.MonthCalendar.HitTestInfo)__control__.Invoke(hitTest7Internal, __control__, point);
            else
                return hitTest7Internal.Invoke(__control__, point);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Point, System.Windows.Forms.MonthCalendar.HitTestInfo> hitTest7Callback = HitTest;
        public static IAsyncResult BeginHitTest7(this System.Windows.Forms.MonthCalendar __control__, System.Drawing.Point point, AsyncCallback callback, object state)
        {
            return hitTest7Callback.BeginInvoke(__control__, point, callback, state);
        }
        public static System.Windows.Forms.MonthCalendar.HitTestInfo EndHitTest7(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            return EndHitTest7(result);
        }
        public static System.Windows.Forms.MonthCalendar.HitTestInfo EndHitTest7(IAsyncResult result)
        {
            return hitTest7Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.MonthCalendar.HitTestInfo> HitTestAsync(this System.Windows.Forms.MonthCalendar __control__, System.Drawing.Point point)
        {
            return Task<System.Windows.Forms.MonthCalendar.HitTestInfo>.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Drawing.Point>(
                (Func<System.Windows.Forms.MonthCalendar, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginHitTest7,
                (Func<IAsyncResult, System.Windows.Forms.MonthCalendar.HitTestInfo>)EndHitTest7,
                __control__, point, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar> removeAllAnnuallyBoldedDates1Internal = (c) => c.RemoveAllAnnuallyBoldedDates();
        public static void RemoveAllAnnuallyBoldedDates(this System.Windows.Forms.MonthCalendar __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(removeAllAnnuallyBoldedDates1Internal, __control__);
            else
                removeAllAnnuallyBoldedDates1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar> removeAllAnnuallyBoldedDates1Callback = RemoveAllAnnuallyBoldedDates;
        public static IAsyncResult BeginRemoveAllAnnuallyBoldedDates1(this System.Windows.Forms.MonthCalendar __control__, AsyncCallback callback, object state)
        {
            return removeAllAnnuallyBoldedDates1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndRemoveAllAnnuallyBoldedDates1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndRemoveAllAnnuallyBoldedDates1(result);
        }
        public static void EndRemoveAllAnnuallyBoldedDates1(IAsyncResult result)
        {
            removeAllAnnuallyBoldedDates1Callback.EndInvoke(result);
        }
        public static Task RemoveAllAnnuallyBoldedDatesAsync(this System.Windows.Forms.MonthCalendar __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                (Func<System.Windows.Forms.MonthCalendar, AsyncCallback, object, IAsyncResult>)BeginRemoveAllAnnuallyBoldedDates1,
                (Action<IAsyncResult>)EndRemoveAllAnnuallyBoldedDates1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar> removeAllBoldedDates1Internal = (c) => c.RemoveAllBoldedDates();
        public static void RemoveAllBoldedDates(this System.Windows.Forms.MonthCalendar __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(removeAllBoldedDates1Internal, __control__);
            else
                removeAllBoldedDates1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar> removeAllBoldedDates1Callback = RemoveAllBoldedDates;
        public static IAsyncResult BeginRemoveAllBoldedDates1(this System.Windows.Forms.MonthCalendar __control__, AsyncCallback callback, object state)
        {
            return removeAllBoldedDates1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndRemoveAllBoldedDates1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndRemoveAllBoldedDates1(result);
        }
        public static void EndRemoveAllBoldedDates1(IAsyncResult result)
        {
            removeAllBoldedDates1Callback.EndInvoke(result);
        }
        public static Task RemoveAllBoldedDatesAsync(this System.Windows.Forms.MonthCalendar __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                (Func<System.Windows.Forms.MonthCalendar, AsyncCallback, object, IAsyncResult>)BeginRemoveAllBoldedDates1,
                (Action<IAsyncResult>)EndRemoveAllBoldedDates1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar> removeAllMonthlyBoldedDates1Internal = (c) => c.RemoveAllMonthlyBoldedDates();
        public static void RemoveAllMonthlyBoldedDates(this System.Windows.Forms.MonthCalendar __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(removeAllMonthlyBoldedDates1Internal, __control__);
            else
                removeAllMonthlyBoldedDates1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar> removeAllMonthlyBoldedDates1Callback = RemoveAllMonthlyBoldedDates;
        public static IAsyncResult BeginRemoveAllMonthlyBoldedDates1(this System.Windows.Forms.MonthCalendar __control__, AsyncCallback callback, object state)
        {
            return removeAllMonthlyBoldedDates1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndRemoveAllMonthlyBoldedDates1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndRemoveAllMonthlyBoldedDates1(result);
        }
        public static void EndRemoveAllMonthlyBoldedDates1(IAsyncResult result)
        {
            removeAllMonthlyBoldedDates1Callback.EndInvoke(result);
        }
        public static Task RemoveAllMonthlyBoldedDatesAsync(this System.Windows.Forms.MonthCalendar __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                (Func<System.Windows.Forms.MonthCalendar, AsyncCallback, object, IAsyncResult>)BeginRemoveAllMonthlyBoldedDates1,
                (Action<IAsyncResult>)EndRemoveAllMonthlyBoldedDates1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> removeAnnuallyBoldedDate1Internal = (c, date) => c.RemoveAnnuallyBoldedDate(date);
        public static void RemoveAnnuallyBoldedDate(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(removeAnnuallyBoldedDate1Internal, __control__, date);
            else
                removeAnnuallyBoldedDate1Internal.Invoke(__control__, date);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> removeAnnuallyBoldedDate1Callback = RemoveAnnuallyBoldedDate;
        public static IAsyncResult BeginRemoveAnnuallyBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date, AsyncCallback callback, object state)
        {
            return removeAnnuallyBoldedDate1Callback.BeginInvoke(__control__, date, callback, state);
        }
        public static void EndRemoveAnnuallyBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndRemoveAnnuallyBoldedDate1(result);
        }
        public static void EndRemoveAnnuallyBoldedDate1(IAsyncResult result)
        {
            removeAnnuallyBoldedDate1Callback.EndInvoke(result);
        }
        public static Task RemoveAnnuallyBoldedDateAsync(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime>(
                (Func<System.Windows.Forms.MonthCalendar, System.DateTime, AsyncCallback, object, IAsyncResult>)BeginRemoveAnnuallyBoldedDate1,
                (Action<IAsyncResult>)EndRemoveAnnuallyBoldedDate1,
                __control__, date, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> removeBoldedDate1Internal = (c, date) => c.RemoveBoldedDate(date);
        public static void RemoveBoldedDate(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(removeBoldedDate1Internal, __control__, date);
            else
                removeBoldedDate1Internal.Invoke(__control__, date);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> removeBoldedDate1Callback = RemoveBoldedDate;
        public static IAsyncResult BeginRemoveBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date, AsyncCallback callback, object state)
        {
            return removeBoldedDate1Callback.BeginInvoke(__control__, date, callback, state);
        }
        public static void EndRemoveBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndRemoveBoldedDate1(result);
        }
        public static void EndRemoveBoldedDate1(IAsyncResult result)
        {
            removeBoldedDate1Callback.EndInvoke(result);
        }
        public static Task RemoveBoldedDateAsync(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime>(
                (Func<System.Windows.Forms.MonthCalendar, System.DateTime, AsyncCallback, object, IAsyncResult>)BeginRemoveBoldedDate1,
                (Action<IAsyncResult>)EndRemoveBoldedDate1,
                __control__, date, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> removeMonthlyBoldedDate1Internal = (c, date) => c.RemoveMonthlyBoldedDate(date);
        public static void RemoveMonthlyBoldedDate(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(removeMonthlyBoldedDate1Internal, __control__, date);
            else
                removeMonthlyBoldedDate1Internal.Invoke(__control__, date);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> removeMonthlyBoldedDate1Callback = RemoveMonthlyBoldedDate;
        public static IAsyncResult BeginRemoveMonthlyBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date, AsyncCallback callback, object state)
        {
            return removeMonthlyBoldedDate1Callback.BeginInvoke(__control__, date, callback, state);
        }
        public static void EndRemoveMonthlyBoldedDate1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndRemoveMonthlyBoldedDate1(result);
        }
        public static void EndRemoveMonthlyBoldedDate1(IAsyncResult result)
        {
            removeMonthlyBoldedDate1Callback.EndInvoke(result);
        }
        public static Task RemoveMonthlyBoldedDateAsync(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime>(
                (Func<System.Windows.Forms.MonthCalendar, System.DateTime, AsyncCallback, object, IAsyncResult>)BeginRemoveMonthlyBoldedDate1,
                (Action<IAsyncResult>)EndRemoveMonthlyBoldedDate1,
                __control__, date, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Int32, System.Int32> setCalendarDimensions1Internal = (c, x, y) => c.SetCalendarDimensions(x, y);
        public static void SetCalendarDimensions(this System.Windows.Forms.MonthCalendar __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setCalendarDimensions1Internal, __control__, x, y);
            else
                setCalendarDimensions1Internal.Invoke(__control__, x, y);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Int32, System.Int32> setCalendarDimensions1Callback = SetCalendarDimensions;
        public static IAsyncResult BeginSetCalendarDimensions1(this System.Windows.Forms.MonthCalendar __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return setCalendarDimensions1Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static void EndSetCalendarDimensions1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndSetCalendarDimensions1(result);
        }
        public static void EndSetCalendarDimensions1(IAsyncResult result)
        {
            setCalendarDimensions1Callback.EndInvoke(result);
        }
        public static Task SetCalendarDimensionsAsync(this System.Windows.Forms.MonthCalendar __control__, System.Int32 x, System.Int32 y)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.MonthCalendar, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSetCalendarDimensions1,
                (Action<IAsyncResult>)EndSetCalendarDimensions1,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> setDate1Internal = (c, date) => c.SetDate(date);
        public static void SetDate(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setDate1Internal, __control__, date);
            else
                setDate1Internal.Invoke(__control__, date);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> setDate1Callback = SetDate;
        public static IAsyncResult BeginSetDate1(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date, AsyncCallback callback, object state)
        {
            return setDate1Callback.BeginInvoke(__control__, date, callback, state);
        }
        public static void EndSetDate1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndSetDate1(result);
        }
        public static void EndSetDate1(IAsyncResult result)
        {
            setDate1Callback.EndInvoke(result);
        }
        public static Task SetDateAsync(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime>(
                (Func<System.Windows.Forms.MonthCalendar, System.DateTime, AsyncCallback, object, IAsyncResult>)BeginSetDate1,
                (Action<IAsyncResult>)EndSetDate1,
                __control__, date, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime, System.DateTime> setSelectionRange1Internal = (c, date1, date2) => c.SetSelectionRange(date1, date2);
        public static void SetSelectionRange(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date1, System.DateTime date2)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setSelectionRange1Internal, __control__, date1, date2);
            else
                setSelectionRange1Internal.Invoke(__control__, date1, date2);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime, System.DateTime> setSelectionRange1Callback = SetSelectionRange;
        public static IAsyncResult BeginSetSelectionRange1(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date1, System.DateTime date2, AsyncCallback callback, object state)
        {
            return setSelectionRange1Callback.BeginInvoke(__control__, date1, date2, callback, state);
        }
        public static void EndSetSelectionRange1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndSetSelectionRange1(result);
        }
        public static void EndSetSelectionRange1(IAsyncResult result)
        {
            setSelectionRange1Callback.EndInvoke(result);
        }
        public static Task SetSelectionRangeAsync(this System.Windows.Forms.MonthCalendar __control__, System.DateTime date1, System.DateTime date2)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime, System.DateTime>(
                (Func<System.Windows.Forms.MonthCalendar, System.DateTime, System.DateTime, AsyncCallback, object, IAsyncResult>)BeginSetSelectionRange1,
                (Action<IAsyncResult>)EndSetSelectionRange1,
                __control__, date1, date2, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar> updateBoldedDates1Internal = (c) => c.UpdateBoldedDates();
        public static void UpdateBoldedDates(this System.Windows.Forms.MonthCalendar __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(updateBoldedDates1Internal, __control__);
            else
                updateBoldedDates1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar> updateBoldedDates1Callback = UpdateBoldedDates;
        public static IAsyncResult BeginUpdateBoldedDates1(this System.Windows.Forms.MonthCalendar __control__, AsyncCallback callback, object state)
        {
            return updateBoldedDates1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndUpdateBoldedDates1(this System.Windows.Forms.MonthCalendar __control__, IAsyncResult result)
        {
            EndUpdateBoldedDates1(result);
        }
        public static void EndUpdateBoldedDates1(IAsyncResult result)
        {
            updateBoldedDates1Callback.EndInvoke(result);
        }
        public static Task UpdateBoldedDatesAsync(this System.Windows.Forms.MonthCalendar __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                (Func<System.Windows.Forms.MonthCalendar, AsyncCallback, object, IAsyncResult>)BeginUpdateBoldedDates1,
                (Action<IAsyncResult>)EndUpdateBoldedDates1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime[]> getAnnuallyBoldedDatesInternal = (x) => x.AnnuallyBoldedDates;
        public static System.DateTime[] GetAnnuallyBoldedDates(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.DateTime[])target.Invoke(getAnnuallyBoldedDatesInternal, target);
            else
                return getAnnuallyBoldedDatesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime[]> getAnnuallyBoldedDatesCallback = GetAnnuallyBoldedDates;
        public static IAsyncResult BeginGetAnnuallyBoldedDates(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getAnnuallyBoldedDatesCallback.BeginInvoke(target, callback, state);
        }
        public static System.DateTime[] EndGetAnnuallyBoldedDates(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetAnnuallyBoldedDates(result);
        }
        public static System.DateTime[] EndGetAnnuallyBoldedDates(IAsyncResult result)
        {
            return getAnnuallyBoldedDatesCallback.EndInvoke(result);
        }
        public static Task<System.DateTime[]> GetAnnuallyBoldedDatesAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.DateTime[]>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetAnnuallyBoldedDates,
                EndGetAnnuallyBoldedDates,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime[]> setAnnuallyBoldedDatesInternal = (x, v) => x.AnnuallyBoldedDates = v;
        public static void SetAnnuallyBoldedDates(this System.Windows.Forms.MonthCalendar target, System.DateTime[] value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAnnuallyBoldedDatesInternal, target, value);
            else
                setAnnuallyBoldedDatesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime[]> setAnnuallyBoldedDatesCallback = SetAnnuallyBoldedDates;
        public static IAsyncResult BeginSetAnnuallyBoldedDates(this System.Windows.Forms.MonthCalendar target, System.DateTime[] value, AsyncCallback callback, object state)
        {
            return setAnnuallyBoldedDatesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAnnuallyBoldedDates(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetAnnuallyBoldedDates(result);
        }
        public static void EndSetAnnuallyBoldedDates(IAsyncResult result)
        {
            setAnnuallyBoldedDatesCallback.EndInvoke(result);
        }
        public static Task SetAnnuallyBoldedDatesAsync(this System.Windows.Forms.MonthCalendar target, System.DateTime[] value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime[]>(
                BeginSetAnnuallyBoldedDates,
                EndSetAnnuallyBoldedDates,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime[]> getBoldedDatesInternal = (x) => x.BoldedDates;
        public static System.DateTime[] GetBoldedDates(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.DateTime[])target.Invoke(getBoldedDatesInternal, target);
            else
                return getBoldedDatesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime[]> getBoldedDatesCallback = GetBoldedDates;
        public static IAsyncResult BeginGetBoldedDates(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getBoldedDatesCallback.BeginInvoke(target, callback, state);
        }
        public static System.DateTime[] EndGetBoldedDates(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetBoldedDates(result);
        }
        public static System.DateTime[] EndGetBoldedDates(IAsyncResult result)
        {
            return getBoldedDatesCallback.EndInvoke(result);
        }
        public static Task<System.DateTime[]> GetBoldedDatesAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.DateTime[]>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetBoldedDates,
                EndGetBoldedDates,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime[]> setBoldedDatesInternal = (x, v) => x.BoldedDates = v;
        public static void SetBoldedDates(this System.Windows.Forms.MonthCalendar target, System.DateTime[] value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setBoldedDatesInternal, target, value);
            else
                setBoldedDatesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime[]> setBoldedDatesCallback = SetBoldedDates;
        public static IAsyncResult BeginSetBoldedDates(this System.Windows.Forms.MonthCalendar target, System.DateTime[] value, AsyncCallback callback, object state)
        {
            return setBoldedDatesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetBoldedDates(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetBoldedDates(result);
        }
        public static void EndSetBoldedDates(IAsyncResult result)
        {
            setBoldedDatesCallback.EndInvoke(result);
        }
        public static Task SetBoldedDatesAsync(this System.Windows.Forms.MonthCalendar target, System.DateTime[] value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime[]>(
                BeginSetBoldedDates,
                EndSetBoldedDates,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Size> getCalendarDimensionsInternal = (x) => x.CalendarDimensions;
        public static System.Drawing.Size GetCalendarDimensions(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getCalendarDimensionsInternal, target);
            else
                return getCalendarDimensionsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Size> getCalendarDimensionsCallback = GetCalendarDimensions;
        public static IAsyncResult BeginGetCalendarDimensions(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getCalendarDimensionsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetCalendarDimensions(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetCalendarDimensions(result);
        }
        public static System.Drawing.Size EndGetCalendarDimensions(IAsyncResult result)
        {
            return getCalendarDimensionsCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetCalendarDimensionsAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetCalendarDimensions,
                EndGetCalendarDimensions,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Drawing.Size> setCalendarDimensionsInternal = (x, v) => x.CalendarDimensions = v;
        public static void SetCalendarDimensions(this System.Windows.Forms.MonthCalendar target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setCalendarDimensionsInternal, target, value);
            else
                setCalendarDimensionsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Drawing.Size> setCalendarDimensionsCallback = SetCalendarDimensions;
        public static IAsyncResult BeginSetCalendarDimensions(this System.Windows.Forms.MonthCalendar target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setCalendarDimensionsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetCalendarDimensions(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetCalendarDimensions(result);
        }
        public static void EndSetCalendarDimensions(IAsyncResult result)
        {
            setCalendarDimensionsCallback.EndInvoke(result);
        }
        public static Task SetCalendarDimensionsAsync(this System.Windows.Forms.MonthCalendar target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Drawing.Size>(
                BeginSetCalendarDimensions,
                EndSetCalendarDimensions,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Windows.Forms.Day> getFirstDayOfWeekInternal = (x) => x.FirstDayOfWeek;
        public static System.Windows.Forms.Day GetFirstDayOfWeek(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.Day)target.Invoke(getFirstDayOfWeekInternal, target);
            else
                return getFirstDayOfWeekInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Windows.Forms.Day> getFirstDayOfWeekCallback = GetFirstDayOfWeek;
        public static IAsyncResult BeginGetFirstDayOfWeek(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getFirstDayOfWeekCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.Day EndGetFirstDayOfWeek(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetFirstDayOfWeek(result);
        }
        public static System.Windows.Forms.Day EndGetFirstDayOfWeek(IAsyncResult result)
        {
            return getFirstDayOfWeekCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Day> GetFirstDayOfWeekAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Windows.Forms.Day>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetFirstDayOfWeek,
                EndGetFirstDayOfWeek,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Windows.Forms.Day> setFirstDayOfWeekInternal = (x, v) => x.FirstDayOfWeek = v;
        public static void SetFirstDayOfWeek(this System.Windows.Forms.MonthCalendar target, System.Windows.Forms.Day value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setFirstDayOfWeekInternal, target, value);
            else
                setFirstDayOfWeekInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Windows.Forms.Day> setFirstDayOfWeekCallback = SetFirstDayOfWeek;
        public static IAsyncResult BeginSetFirstDayOfWeek(this System.Windows.Forms.MonthCalendar target, System.Windows.Forms.Day value, AsyncCallback callback, object state)
        {
            return setFirstDayOfWeekCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetFirstDayOfWeek(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetFirstDayOfWeek(result);
        }
        public static void EndSetFirstDayOfWeek(IAsyncResult result)
        {
            setFirstDayOfWeekCallback.EndInvoke(result);
        }
        public static Task SetFirstDayOfWeekAsync(this System.Windows.Forms.MonthCalendar target, System.Windows.Forms.Day value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Windows.Forms.Day>(
                BeginSetFirstDayOfWeek,
                EndSetFirstDayOfWeek,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Int32> getMaxSelectionCountInternal = (x) => x.MaxSelectionCount;
        public static System.Int32 GetMaxSelectionCount(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getMaxSelectionCountInternal, target);
            else
                return getMaxSelectionCountInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Int32> getMaxSelectionCountCallback = GetMaxSelectionCount;
        public static IAsyncResult BeginGetMaxSelectionCount(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getMaxSelectionCountCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetMaxSelectionCount(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetMaxSelectionCount(result);
        }
        public static System.Int32 EndGetMaxSelectionCount(IAsyncResult result)
        {
            return getMaxSelectionCountCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetMaxSelectionCountAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetMaxSelectionCount,
                EndGetMaxSelectionCount,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Int32> setMaxSelectionCountInternal = (x, v) => x.MaxSelectionCount = v;
        public static void SetMaxSelectionCount(this System.Windows.Forms.MonthCalendar target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMaxSelectionCountInternal, target, value);
            else
                setMaxSelectionCountInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Int32> setMaxSelectionCountCallback = SetMaxSelectionCount;
        public static IAsyncResult BeginSetMaxSelectionCount(this System.Windows.Forms.MonthCalendar target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setMaxSelectionCountCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMaxSelectionCount(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetMaxSelectionCount(result);
        }
        public static void EndSetMaxSelectionCount(IAsyncResult result)
        {
            setMaxSelectionCountCallback.EndInvoke(result);
        }
        public static Task SetMaxSelectionCountAsync(this System.Windows.Forms.MonthCalendar target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Int32>(
                BeginSetMaxSelectionCount,
                EndSetMaxSelectionCount,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime[]> getMonthlyBoldedDatesInternal = (x) => x.MonthlyBoldedDates;
        public static System.DateTime[] GetMonthlyBoldedDates(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.DateTime[])target.Invoke(getMonthlyBoldedDatesInternal, target);
            else
                return getMonthlyBoldedDatesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime[]> getMonthlyBoldedDatesCallback = GetMonthlyBoldedDates;
        public static IAsyncResult BeginGetMonthlyBoldedDates(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getMonthlyBoldedDatesCallback.BeginInvoke(target, callback, state);
        }
        public static System.DateTime[] EndGetMonthlyBoldedDates(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetMonthlyBoldedDates(result);
        }
        public static System.DateTime[] EndGetMonthlyBoldedDates(IAsyncResult result)
        {
            return getMonthlyBoldedDatesCallback.EndInvoke(result);
        }
        public static Task<System.DateTime[]> GetMonthlyBoldedDatesAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.DateTime[]>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetMonthlyBoldedDates,
                EndGetMonthlyBoldedDates,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime[]> setMonthlyBoldedDatesInternal = (x, v) => x.MonthlyBoldedDates = v;
        public static void SetMonthlyBoldedDates(this System.Windows.Forms.MonthCalendar target, System.DateTime[] value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMonthlyBoldedDatesInternal, target, value);
            else
                setMonthlyBoldedDatesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime[]> setMonthlyBoldedDatesCallback = SetMonthlyBoldedDates;
        public static IAsyncResult BeginSetMonthlyBoldedDates(this System.Windows.Forms.MonthCalendar target, System.DateTime[] value, AsyncCallback callback, object state)
        {
            return setMonthlyBoldedDatesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMonthlyBoldedDates(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetMonthlyBoldedDates(result);
        }
        public static void EndSetMonthlyBoldedDates(IAsyncResult result)
        {
            setMonthlyBoldedDatesCallback.EndInvoke(result);
        }
        public static Task SetMonthlyBoldedDatesAsync(this System.Windows.Forms.MonthCalendar target, System.DateTime[] value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime[]>(
                BeginSetMonthlyBoldedDates,
                EndSetMonthlyBoldedDates,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Int32> getScrollChangeInternal = (x) => x.ScrollChange;
        public static System.Int32 GetScrollChange(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getScrollChangeInternal, target);
            else
                return getScrollChangeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Int32> getScrollChangeCallback = GetScrollChange;
        public static IAsyncResult BeginGetScrollChange(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getScrollChangeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetScrollChange(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetScrollChange(result);
        }
        public static System.Int32 EndGetScrollChange(IAsyncResult result)
        {
            return getScrollChangeCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetScrollChangeAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetScrollChange,
                EndGetScrollChange,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Int32> setScrollChangeInternal = (x, v) => x.ScrollChange = v;
        public static void SetScrollChange(this System.Windows.Forms.MonthCalendar target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setScrollChangeInternal, target, value);
            else
                setScrollChangeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Int32> setScrollChangeCallback = SetScrollChange;
        public static IAsyncResult BeginSetScrollChange(this System.Windows.Forms.MonthCalendar target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setScrollChangeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetScrollChange(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetScrollChange(result);
        }
        public static void EndSetScrollChange(IAsyncResult result)
        {
            setScrollChangeCallback.EndInvoke(result);
        }
        public static Task SetScrollChangeAsync(this System.Windows.Forms.MonthCalendar target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Int32>(
                BeginSetScrollChange,
                EndSetScrollChange,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime> getSelectionEndInternal = (x) => x.SelectionEnd;
        public static System.DateTime GetSelectionEnd(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.DateTime)target.Invoke(getSelectionEndInternal, target);
            else
                return getSelectionEndInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime> getSelectionEndCallback = GetSelectionEnd;
        public static IAsyncResult BeginGetSelectionEnd(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getSelectionEndCallback.BeginInvoke(target, callback, state);
        }
        public static System.DateTime EndGetSelectionEnd(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetSelectionEnd(result);
        }
        public static System.DateTime EndGetSelectionEnd(IAsyncResult result)
        {
            return getSelectionEndCallback.EndInvoke(result);
        }
        public static Task<System.DateTime> GetSelectionEndAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.DateTime>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetSelectionEnd,
                EndGetSelectionEnd,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> setSelectionEndInternal = (x, v) => x.SelectionEnd = v;
        public static void SetSelectionEnd(this System.Windows.Forms.MonthCalendar target, System.DateTime value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionEndInternal, target, value);
            else
                setSelectionEndInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> setSelectionEndCallback = SetSelectionEnd;
        public static IAsyncResult BeginSetSelectionEnd(this System.Windows.Forms.MonthCalendar target, System.DateTime value, AsyncCallback callback, object state)
        {
            return setSelectionEndCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionEnd(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetSelectionEnd(result);
        }
        public static void EndSetSelectionEnd(IAsyncResult result)
        {
            setSelectionEndCallback.EndInvoke(result);
        }
        public static Task SetSelectionEndAsync(this System.Windows.Forms.MonthCalendar target, System.DateTime value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime>(
                BeginSetSelectionEnd,
                EndSetSelectionEnd,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Windows.Forms.SelectionRange> getSelectionRangeInternal = (x) => x.SelectionRange;
        public static System.Windows.Forms.SelectionRange GetSelectionRange(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.SelectionRange)target.Invoke(getSelectionRangeInternal, target);
            else
                return getSelectionRangeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Windows.Forms.SelectionRange> getSelectionRangeCallback = GetSelectionRange;
        public static IAsyncResult BeginGetSelectionRange(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getSelectionRangeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.SelectionRange EndGetSelectionRange(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetSelectionRange(result);
        }
        public static System.Windows.Forms.SelectionRange EndGetSelectionRange(IAsyncResult result)
        {
            return getSelectionRangeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.SelectionRange> GetSelectionRangeAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Windows.Forms.SelectionRange>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetSelectionRange,
                EndGetSelectionRange,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Windows.Forms.SelectionRange> setSelectionRangeInternal = (x, v) => x.SelectionRange = v;
        public static void SetSelectionRange(this System.Windows.Forms.MonthCalendar target, System.Windows.Forms.SelectionRange value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectionRangeInternal, target, value);
            else
                setSelectionRangeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Windows.Forms.SelectionRange> setSelectionRangeCallback = SetSelectionRange;
        public static IAsyncResult BeginSetSelectionRange(this System.Windows.Forms.MonthCalendar target, System.Windows.Forms.SelectionRange value, AsyncCallback callback, object state)
        {
            return setSelectionRangeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectionRange(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetSelectionRange(result);
        }
        public static void EndSetSelectionRange(IAsyncResult result)
        {
            setSelectionRangeCallback.EndInvoke(result);
        }
        public static Task SetSelectionRangeAsync(this System.Windows.Forms.MonthCalendar target, System.Windows.Forms.SelectionRange value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Windows.Forms.SelectionRange>(
                BeginSetSelectionRange,
                EndSetSelectionRange,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean> getShowTodayInternal = (x) => x.ShowToday;
        public static System.Boolean GetShowToday(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowTodayInternal, target);
            else
                return getShowTodayInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean> getShowTodayCallback = GetShowToday;
        public static IAsyncResult BeginGetShowToday(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getShowTodayCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowToday(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetShowToday(result);
        }
        public static System.Boolean EndGetShowToday(IAsyncResult result)
        {
            return getShowTodayCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowTodayAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetShowToday,
                EndGetShowToday,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Boolean> setShowTodayInternal = (x, v) => x.ShowToday = v;
        public static void SetShowToday(this System.Windows.Forms.MonthCalendar target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowTodayInternal, target, value);
            else
                setShowTodayInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Boolean> setShowTodayCallback = SetShowToday;
        public static IAsyncResult BeginSetShowToday(this System.Windows.Forms.MonthCalendar target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowTodayCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowToday(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetShowToday(result);
        }
        public static void EndSetShowToday(IAsyncResult result)
        {
            setShowTodayCallback.EndInvoke(result);
        }
        public static Task SetShowTodayAsync(this System.Windows.Forms.MonthCalendar target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Boolean>(
                BeginSetShowToday,
                EndSetShowToday,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean> getShowTodayCircleInternal = (x) => x.ShowTodayCircle;
        public static System.Boolean GetShowTodayCircle(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowTodayCircleInternal, target);
            else
                return getShowTodayCircleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean> getShowTodayCircleCallback = GetShowTodayCircle;
        public static IAsyncResult BeginGetShowTodayCircle(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getShowTodayCircleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowTodayCircle(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetShowTodayCircle(result);
        }
        public static System.Boolean EndGetShowTodayCircle(IAsyncResult result)
        {
            return getShowTodayCircleCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowTodayCircleAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetShowTodayCircle,
                EndGetShowTodayCircle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Boolean> setShowTodayCircleInternal = (x, v) => x.ShowTodayCircle = v;
        public static void SetShowTodayCircle(this System.Windows.Forms.MonthCalendar target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowTodayCircleInternal, target, value);
            else
                setShowTodayCircleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Boolean> setShowTodayCircleCallback = SetShowTodayCircle;
        public static IAsyncResult BeginSetShowTodayCircle(this System.Windows.Forms.MonthCalendar target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowTodayCircleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowTodayCircle(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetShowTodayCircle(result);
        }
        public static void EndSetShowTodayCircle(IAsyncResult result)
        {
            setShowTodayCircleCallback.EndInvoke(result);
        }
        public static Task SetShowTodayCircleAsync(this System.Windows.Forms.MonthCalendar target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Boolean>(
                BeginSetShowTodayCircle,
                EndSetShowTodayCircle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean> getShowWeekNumbersInternal = (x) => x.ShowWeekNumbers;
        public static System.Boolean GetShowWeekNumbers(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowWeekNumbersInternal, target);
            else
                return getShowWeekNumbersInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean> getShowWeekNumbersCallback = GetShowWeekNumbers;
        public static IAsyncResult BeginGetShowWeekNumbers(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getShowWeekNumbersCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowWeekNumbers(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetShowWeekNumbers(result);
        }
        public static System.Boolean EndGetShowWeekNumbers(IAsyncResult result)
        {
            return getShowWeekNumbersCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowWeekNumbersAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetShowWeekNumbers,
                EndGetShowWeekNumbers,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Boolean> setShowWeekNumbersInternal = (x, v) => x.ShowWeekNumbers = v;
        public static void SetShowWeekNumbers(this System.Windows.Forms.MonthCalendar target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowWeekNumbersInternal, target, value);
            else
                setShowWeekNumbersInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Boolean> setShowWeekNumbersCallback = SetShowWeekNumbers;
        public static IAsyncResult BeginSetShowWeekNumbers(this System.Windows.Forms.MonthCalendar target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowWeekNumbersCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowWeekNumbers(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetShowWeekNumbers(result);
        }
        public static void EndSetShowWeekNumbers(IAsyncResult result)
        {
            setShowWeekNumbersCallback.EndInvoke(result);
        }
        public static Task SetShowWeekNumbersAsync(this System.Windows.Forms.MonthCalendar target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Boolean>(
                BeginSetShowWeekNumbers,
                EndSetShowWeekNumbers,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Size> getSingleMonthSizeInternal = (x) => x.SingleMonthSize;
        public static System.Drawing.Size GetSingleMonthSize(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getSingleMonthSizeInternal, target);
            else
                return getSingleMonthSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Size> getSingleMonthSizeCallback = GetSingleMonthSize;
        public static IAsyncResult BeginGetSingleMonthSize(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getSingleMonthSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetSingleMonthSize(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetSingleMonthSize(result);
        }
        public static System.Drawing.Size EndGetSingleMonthSize(IAsyncResult result)
        {
            return getSingleMonthSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetSingleMonthSizeAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetSingleMonthSize,
                EndGetSingleMonthSize,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime> getTodayDateInternal = (x) => x.TodayDate;
        public static System.DateTime GetTodayDate(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.DateTime)target.Invoke(getTodayDateInternal, target);
            else
                return getTodayDateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.DateTime> getTodayDateCallback = GetTodayDate;
        public static IAsyncResult BeginGetTodayDate(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getTodayDateCallback.BeginInvoke(target, callback, state);
        }
        public static System.DateTime EndGetTodayDate(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetTodayDate(result);
        }
        public static System.DateTime EndGetTodayDate(IAsyncResult result)
        {
            return getTodayDateCallback.EndInvoke(result);
        }
        public static Task<System.DateTime> GetTodayDateAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.DateTime>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetTodayDate,
                EndGetTodayDate,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> setTodayDateInternal = (x, v) => x.TodayDate = v;
        public static void SetTodayDate(this System.Windows.Forms.MonthCalendar target, System.DateTime value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTodayDateInternal, target, value);
            else
                setTodayDateInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.DateTime> setTodayDateCallback = SetTodayDate;
        public static IAsyncResult BeginSetTodayDate(this System.Windows.Forms.MonthCalendar target, System.DateTime value, AsyncCallback callback, object state)
        {
            return setTodayDateCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTodayDate(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetTodayDate(result);
        }
        public static void EndSetTodayDate(IAsyncResult result)
        {
            setTodayDateCallback.EndInvoke(result);
        }
        public static Task SetTodayDateAsync(this System.Windows.Forms.MonthCalendar target, System.DateTime value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.DateTime>(
                BeginSetTodayDate,
                EndSetTodayDate,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean> getTodayDateSetInternal = (x) => x.TodayDateSet;
        public static System.Boolean GetTodayDateSet(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getTodayDateSetInternal, target);
            else
                return getTodayDateSetInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Boolean> getTodayDateSetCallback = GetTodayDateSet;
        public static IAsyncResult BeginGetTodayDateSet(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getTodayDateSetCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetTodayDateSet(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetTodayDateSet(result);
        }
        public static System.Boolean EndGetTodayDateSet(IAsyncResult result)
        {
            return getTodayDateSetCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetTodayDateSetAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetTodayDateSet,
                EndGetTodayDateSet,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Color> getTitleBackColorInternal = (x) => x.TitleBackColor;
        public static System.Drawing.Color GetTitleBackColor(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getTitleBackColorInternal, target);
            else
                return getTitleBackColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Color> getTitleBackColorCallback = GetTitleBackColor;
        public static IAsyncResult BeginGetTitleBackColor(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getTitleBackColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetTitleBackColor(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetTitleBackColor(result);
        }
        public static System.Drawing.Color EndGetTitleBackColor(IAsyncResult result)
        {
            return getTitleBackColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetTitleBackColorAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetTitleBackColor,
                EndGetTitleBackColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Drawing.Color> setTitleBackColorInternal = (x, v) => x.TitleBackColor = v;
        public static void SetTitleBackColor(this System.Windows.Forms.MonthCalendar target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTitleBackColorInternal, target, value);
            else
                setTitleBackColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Drawing.Color> setTitleBackColorCallback = SetTitleBackColor;
        public static IAsyncResult BeginSetTitleBackColor(this System.Windows.Forms.MonthCalendar target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setTitleBackColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTitleBackColor(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetTitleBackColor(result);
        }
        public static void EndSetTitleBackColor(IAsyncResult result)
        {
            setTitleBackColorCallback.EndInvoke(result);
        }
        public static Task SetTitleBackColorAsync(this System.Windows.Forms.MonthCalendar target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Drawing.Color>(
                BeginSetTitleBackColor,
                EndSetTitleBackColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Color> getTitleForeColorInternal = (x) => x.TitleForeColor;
        public static System.Drawing.Color GetTitleForeColor(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getTitleForeColorInternal, target);
            else
                return getTitleForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Color> getTitleForeColorCallback = GetTitleForeColor;
        public static IAsyncResult BeginGetTitleForeColor(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getTitleForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetTitleForeColor(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetTitleForeColor(result);
        }
        public static System.Drawing.Color EndGetTitleForeColor(IAsyncResult result)
        {
            return getTitleForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetTitleForeColorAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetTitleForeColor,
                EndGetTitleForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Drawing.Color> setTitleForeColorInternal = (x, v) => x.TitleForeColor = v;
        public static void SetTitleForeColor(this System.Windows.Forms.MonthCalendar target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTitleForeColorInternal, target, value);
            else
                setTitleForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Drawing.Color> setTitleForeColorCallback = SetTitleForeColor;
        public static IAsyncResult BeginSetTitleForeColor(this System.Windows.Forms.MonthCalendar target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setTitleForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTitleForeColor(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetTitleForeColor(result);
        }
        public static void EndSetTitleForeColor(IAsyncResult result)
        {
            setTitleForeColorCallback.EndInvoke(result);
        }
        public static Task SetTitleForeColorAsync(this System.Windows.Forms.MonthCalendar target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Drawing.Color>(
                BeginSetTitleForeColor,
                EndSetTitleForeColor,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Color> getTrailingForeColorInternal = (x) => x.TrailingForeColor;
        public static System.Drawing.Color GetTrailingForeColor(this System.Windows.Forms.MonthCalendar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Color)target.Invoke(getTrailingForeColorInternal, target);
            else
                return getTrailingForeColorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.MonthCalendar, System.Drawing.Color> getTrailingForeColorCallback = GetTrailingForeColor;
        public static IAsyncResult BeginGetTrailingForeColor(this System.Windows.Forms.MonthCalendar target, AsyncCallback callback, object state)
        {
            return getTrailingForeColorCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Color EndGetTrailingForeColor(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            return EndGetTrailingForeColor(result);
        }
        public static System.Drawing.Color EndGetTrailingForeColor(IAsyncResult result)
        {
            return getTrailingForeColorCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Color> GetTrailingForeColorAsync(this System.Windows.Forms.MonthCalendar target)
        {
            return Task<System.Drawing.Color>.Factory.FromAsync<System.Windows.Forms.MonthCalendar>(
                BeginGetTrailingForeColor,
                EndGetTrailingForeColor,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Drawing.Color> setTrailingForeColorInternal = (x, v) => x.TrailingForeColor = v;
        public static void SetTrailingForeColor(this System.Windows.Forms.MonthCalendar target, System.Drawing.Color value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTrailingForeColorInternal, target, value);
            else
                setTrailingForeColorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.MonthCalendar, System.Drawing.Color> setTrailingForeColorCallback = SetTrailingForeColor;
        public static IAsyncResult BeginSetTrailingForeColor(this System.Windows.Forms.MonthCalendar target, System.Drawing.Color value, AsyncCallback callback, object state)
        {
            return setTrailingForeColorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTrailingForeColor(this System.Windows.Forms.MonthCalendar target, IAsyncResult result)
        {
            EndSetTrailingForeColor(result);
        }
        public static void EndSetTrailingForeColor(IAsyncResult result)
        {
            setTrailingForeColorCallback.EndInvoke(result);
        }
        public static Task SetTrailingForeColorAsync(this System.Windows.Forms.MonthCalendar target, System.Drawing.Color value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.MonthCalendar, System.Drawing.Color>(
                BeginSetTrailingForeColor,
                EndSetTrailingForeColor,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.PictureBox> cancelAsync1Internal = (c) => c.CancelAsyncEx();
        public static void CancelAsyncEx(this System.Windows.Forms.PictureBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(cancelAsync1Internal, __control__);
            else
                cancelAsync1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PictureBox> cancelAsync1Callback = CancelAsyncEx;
        public static IAsyncResult BeginCancelAsyncEx1(this System.Windows.Forms.PictureBox __control__, AsyncCallback callback, object state)
        {
            return cancelAsync1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndCancelAsyncEx1(this System.Windows.Forms.PictureBox __control__, IAsyncResult result)
        {
            EndCancelAsyncEx1(result);
        }
        public static void EndCancelAsyncEx1(IAsyncResult result)
        {
            cancelAsync1Callback.EndInvoke(result);
        }
        public static Task CancelAsyncExAsync(this System.Windows.Forms.PictureBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox>(
                (Func<System.Windows.Forms.PictureBox, AsyncCallback, object, IAsyncResult>)BeginCancelAsyncEx1,
                (Action<IAsyncResult>)EndCancelAsyncEx1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PictureBox> load1Internal = (c) => c.Load();
        public static void Load(this System.Windows.Forms.PictureBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(load1Internal, __control__);
            else
                load1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PictureBox> load1Callback = Load;
        public static IAsyncResult BeginLoad1(this System.Windows.Forms.PictureBox __control__, AsyncCallback callback, object state)
        {
            return load1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndLoad1(this System.Windows.Forms.PictureBox __control__, IAsyncResult result)
        {
            EndLoad1(result);
        }
        public static void EndLoad1(IAsyncResult result)
        {
            load1Callback.EndInvoke(result);
        }
        public static Task LoadAsync(this System.Windows.Forms.PictureBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox>(
                (Func<System.Windows.Forms.PictureBox, AsyncCallback, object, IAsyncResult>)BeginLoad1,
                (Action<IAsyncResult>)EndLoad1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PictureBox, System.String> load2Internal = (c, url) => c.Load(url);
        public static void Load(this System.Windows.Forms.PictureBox __control__, System.String url)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(load2Internal, __control__, url);
            else
                load2Internal.Invoke(__control__, url);
        }
        private static readonly Action<System.Windows.Forms.PictureBox, System.String> load2Callback = Load;
        public static IAsyncResult BeginLoad2(this System.Windows.Forms.PictureBox __control__, System.String url, AsyncCallback callback, object state)
        {
            return load2Callback.BeginInvoke(__control__, url, callback, state);
        }
        public static void EndLoad2(this System.Windows.Forms.PictureBox __control__, IAsyncResult result)
        {
            EndLoad2(result);
        }
        public static void EndLoad2(IAsyncResult result)
        {
            load2Callback.EndInvoke(result);
        }
        public static Task LoadAsync(this System.Windows.Forms.PictureBox __control__, System.String url)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox, System.String>(
                (Func<System.Windows.Forms.PictureBox, System.String, AsyncCallback, object, IAsyncResult>)BeginLoad2,
                (Action<IAsyncResult>)EndLoad2,
                __control__, url, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PictureBox> loadAsync1Internal = (c) => c.LoadAsyncEx();
        public static void LoadAsyncEx(this System.Windows.Forms.PictureBox __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(loadAsync1Internal, __control__);
            else
                loadAsync1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PictureBox> loadAsync1Callback = LoadAsyncEx;
        public static IAsyncResult BeginLoadAsyncEx1(this System.Windows.Forms.PictureBox __control__, AsyncCallback callback, object state)
        {
            return loadAsync1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndLoadAsyncEx1(this System.Windows.Forms.PictureBox __control__, IAsyncResult result)
        {
            EndLoadAsyncEx1(result);
        }
        public static void EndLoadAsyncEx1(IAsyncResult result)
        {
            loadAsync1Callback.EndInvoke(result);
        }
        public static Task LoadAsyncExAsync(this System.Windows.Forms.PictureBox __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox>(
                (Func<System.Windows.Forms.PictureBox, AsyncCallback, object, IAsyncResult>)BeginLoadAsyncEx1,
                (Action<IAsyncResult>)EndLoadAsyncEx1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PictureBox, System.String> loadAsync2Internal = (c, url) => c.LoadAsyncEx(url);
        public static void LoadAsyncEx(this System.Windows.Forms.PictureBox __control__, System.String url)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(loadAsync2Internal, __control__, url);
            else
                loadAsync2Internal.Invoke(__control__, url);
        }
        private static readonly Action<System.Windows.Forms.PictureBox, System.String> loadAsync2Callback = LoadAsyncEx;
        public static IAsyncResult BeginLoadAsyncEx2(this System.Windows.Forms.PictureBox __control__, System.String url, AsyncCallback callback, object state)
        {
            return loadAsync2Callback.BeginInvoke(__control__, url, callback, state);
        }
        public static void EndLoadAsyncEx2(this System.Windows.Forms.PictureBox __control__, IAsyncResult result)
        {
            EndLoadAsyncEx2(result);
        }
        public static void EndLoadAsyncEx2(IAsyncResult result)
        {
            loadAsync2Callback.EndInvoke(result);
        }
        public static Task LoadAsyncExAsync(this System.Windows.Forms.PictureBox __control__, System.String url)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox, System.String>(
                (Func<System.Windows.Forms.PictureBox, System.String, AsyncCallback, object, IAsyncResult>)BeginLoadAsyncEx2,
                (Action<IAsyncResult>)EndLoadAsyncEx2,
                __control__, url, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.PictureBox, System.Drawing.Image> getErrorImageInternal = (x) => x.ErrorImage;
        public static System.Drawing.Image GetErrorImage(this System.Windows.Forms.PictureBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Image)target.Invoke(getErrorImageInternal, target);
            else
                return getErrorImageInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PictureBox, System.Drawing.Image> getErrorImageCallback = GetErrorImage;
        public static IAsyncResult BeginGetErrorImage(this System.Windows.Forms.PictureBox target, AsyncCallback callback, object state)
        {
            return getErrorImageCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Image EndGetErrorImage(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            return EndGetErrorImage(result);
        }
        public static System.Drawing.Image EndGetErrorImage(IAsyncResult result)
        {
            return getErrorImageCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Image> GetErrorImageAsync(this System.Windows.Forms.PictureBox target)
        {
            return Task<System.Drawing.Image>.Factory.FromAsync<System.Windows.Forms.PictureBox>(
                BeginGetErrorImage,
                EndGetErrorImage,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PictureBox, System.Drawing.Image> setErrorImageInternal = (x, v) => x.ErrorImage = v;
        public static void SetErrorImage(this System.Windows.Forms.PictureBox target, System.Drawing.Image value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setErrorImageInternal, target, value);
            else
                setErrorImageInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PictureBox, System.Drawing.Image> setErrorImageCallback = SetErrorImage;
        public static IAsyncResult BeginSetErrorImage(this System.Windows.Forms.PictureBox target, System.Drawing.Image value, AsyncCallback callback, object state)
        {
            return setErrorImageCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetErrorImage(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            EndSetErrorImage(result);
        }
        public static void EndSetErrorImage(IAsyncResult result)
        {
            setErrorImageCallback.EndInvoke(result);
        }
        public static Task SetErrorImageAsync(this System.Windows.Forms.PictureBox target, System.Drawing.Image value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox, System.Drawing.Image>(
                BeginSetErrorImage,
                EndSetErrorImage,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PictureBox, System.String> getImageLocationInternal = (x) => x.ImageLocation;
        public static System.String GetImageLocation(this System.Windows.Forms.PictureBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getImageLocationInternal, target);
            else
                return getImageLocationInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PictureBox, System.String> getImageLocationCallback = GetImageLocation;
        public static IAsyncResult BeginGetImageLocation(this System.Windows.Forms.PictureBox target, AsyncCallback callback, object state)
        {
            return getImageLocationCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetImageLocation(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            return EndGetImageLocation(result);
        }
        public static System.String EndGetImageLocation(IAsyncResult result)
        {
            return getImageLocationCallback.EndInvoke(result);
        }
        public static Task<System.String> GetImageLocationAsync(this System.Windows.Forms.PictureBox target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.PictureBox>(
                BeginGetImageLocation,
                EndGetImageLocation,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PictureBox, System.String> setImageLocationInternal = (x, v) => x.ImageLocation = v;
        public static void SetImageLocation(this System.Windows.Forms.PictureBox target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setImageLocationInternal, target, value);
            else
                setImageLocationInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PictureBox, System.String> setImageLocationCallback = SetImageLocation;
        public static IAsyncResult BeginSetImageLocation(this System.Windows.Forms.PictureBox target, System.String value, AsyncCallback callback, object state)
        {
            return setImageLocationCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetImageLocation(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            EndSetImageLocation(result);
        }
        public static void EndSetImageLocation(IAsyncResult result)
        {
            setImageLocationCallback.EndInvoke(result);
        }
        public static Task SetImageLocationAsync(this System.Windows.Forms.PictureBox target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox, System.String>(
                BeginSetImageLocation,
                EndSetImageLocation,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PictureBox, System.Drawing.Image> getInitialImageInternal = (x) => x.InitialImage;
        public static System.Drawing.Image GetInitialImage(this System.Windows.Forms.PictureBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Image)target.Invoke(getInitialImageInternal, target);
            else
                return getInitialImageInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PictureBox, System.Drawing.Image> getInitialImageCallback = GetInitialImage;
        public static IAsyncResult BeginGetInitialImage(this System.Windows.Forms.PictureBox target, AsyncCallback callback, object state)
        {
            return getInitialImageCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Image EndGetInitialImage(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            return EndGetInitialImage(result);
        }
        public static System.Drawing.Image EndGetInitialImage(IAsyncResult result)
        {
            return getInitialImageCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Image> GetInitialImageAsync(this System.Windows.Forms.PictureBox target)
        {
            return Task<System.Drawing.Image>.Factory.FromAsync<System.Windows.Forms.PictureBox>(
                BeginGetInitialImage,
                EndGetInitialImage,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PictureBox, System.Drawing.Image> setInitialImageInternal = (x, v) => x.InitialImage = v;
        public static void SetInitialImage(this System.Windows.Forms.PictureBox target, System.Drawing.Image value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setInitialImageInternal, target, value);
            else
                setInitialImageInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PictureBox, System.Drawing.Image> setInitialImageCallback = SetInitialImage;
        public static IAsyncResult BeginSetInitialImage(this System.Windows.Forms.PictureBox target, System.Drawing.Image value, AsyncCallback callback, object state)
        {
            return setInitialImageCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetInitialImage(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            EndSetInitialImage(result);
        }
        public static void EndSetInitialImage(IAsyncResult result)
        {
            setInitialImageCallback.EndInvoke(result);
        }
        public static Task SetInitialImageAsync(this System.Windows.Forms.PictureBox target, System.Drawing.Image value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox, System.Drawing.Image>(
                BeginSetInitialImage,
                EndSetInitialImage,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PictureBox, System.Windows.Forms.PictureBoxSizeMode> getSizeModeInternal = (x) => x.SizeMode;
        public static System.Windows.Forms.PictureBoxSizeMode GetSizeMode(this System.Windows.Forms.PictureBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.PictureBoxSizeMode)target.Invoke(getSizeModeInternal, target);
            else
                return getSizeModeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PictureBox, System.Windows.Forms.PictureBoxSizeMode> getSizeModeCallback = GetSizeMode;
        public static IAsyncResult BeginGetSizeMode(this System.Windows.Forms.PictureBox target, AsyncCallback callback, object state)
        {
            return getSizeModeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.PictureBoxSizeMode EndGetSizeMode(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            return EndGetSizeMode(result);
        }
        public static System.Windows.Forms.PictureBoxSizeMode EndGetSizeMode(IAsyncResult result)
        {
            return getSizeModeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.PictureBoxSizeMode> GetSizeModeAsync(this System.Windows.Forms.PictureBox target)
        {
            return Task<System.Windows.Forms.PictureBoxSizeMode>.Factory.FromAsync<System.Windows.Forms.PictureBox>(
                BeginGetSizeMode,
                EndGetSizeMode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PictureBox, System.Windows.Forms.PictureBoxSizeMode> setSizeModeInternal = (x, v) => x.SizeMode = v;
        public static void SetSizeMode(this System.Windows.Forms.PictureBox target, System.Windows.Forms.PictureBoxSizeMode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSizeModeInternal, target, value);
            else
                setSizeModeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PictureBox, System.Windows.Forms.PictureBoxSizeMode> setSizeModeCallback = SetSizeMode;
        public static IAsyncResult BeginSetSizeMode(this System.Windows.Forms.PictureBox target, System.Windows.Forms.PictureBoxSizeMode value, AsyncCallback callback, object state)
        {
            return setSizeModeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSizeMode(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            EndSetSizeMode(result);
        }
        public static void EndSetSizeMode(IAsyncResult result)
        {
            setSizeModeCallback.EndInvoke(result);
        }
        public static Task SetSizeModeAsync(this System.Windows.Forms.PictureBox target, System.Windows.Forms.PictureBoxSizeMode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox, System.Windows.Forms.PictureBoxSizeMode>(
                BeginSetSizeMode,
                EndSetSizeMode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PictureBox, System.Boolean> getWaitOnLoadInternal = (x) => x.WaitOnLoad;
        public static System.Boolean GetWaitOnLoad(this System.Windows.Forms.PictureBox target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getWaitOnLoadInternal, target);
            else
                return getWaitOnLoadInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PictureBox, System.Boolean> getWaitOnLoadCallback = GetWaitOnLoad;
        public static IAsyncResult BeginGetWaitOnLoad(this System.Windows.Forms.PictureBox target, AsyncCallback callback, object state)
        {
            return getWaitOnLoadCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetWaitOnLoad(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            return EndGetWaitOnLoad(result);
        }
        public static System.Boolean EndGetWaitOnLoad(IAsyncResult result)
        {
            return getWaitOnLoadCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetWaitOnLoadAsync(this System.Windows.Forms.PictureBox target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PictureBox>(
                BeginGetWaitOnLoad,
                EndGetWaitOnLoad,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PictureBox, System.Boolean> setWaitOnLoadInternal = (x, v) => x.WaitOnLoad = v;
        public static void SetWaitOnLoad(this System.Windows.Forms.PictureBox target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setWaitOnLoadInternal, target, value);
            else
                setWaitOnLoadInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PictureBox, System.Boolean> setWaitOnLoadCallback = SetWaitOnLoad;
        public static IAsyncResult BeginSetWaitOnLoad(this System.Windows.Forms.PictureBox target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setWaitOnLoadCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetWaitOnLoad(this System.Windows.Forms.PictureBox target, IAsyncResult result)
        {
            EndSetWaitOnLoad(result);
        }
        public static void EndSetWaitOnLoad(IAsyncResult result)
        {
            setWaitOnLoadCallback.EndInvoke(result);
        }
        public static Task SetWaitOnLoadAsync(this System.Windows.Forms.PictureBox target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PictureBox, System.Boolean>(
                BeginSetWaitOnLoad,
                EndSetWaitOnLoad,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.ProgressBar, System.Int32> increment1Internal = (c, value) => c.Increment(value);
        public static void Increment(this System.Windows.Forms.ProgressBar __control__, System.Int32 value)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(increment1Internal, __control__, value);
            else
                increment1Internal.Invoke(__control__, value);
        }
        private static readonly Action<System.Windows.Forms.ProgressBar, System.Int32> increment1Callback = Increment;
        public static IAsyncResult BeginIncrement1(this System.Windows.Forms.ProgressBar __control__, System.Int32 value, AsyncCallback callback, object state)
        {
            return increment1Callback.BeginInvoke(__control__, value, callback, state);
        }
        public static void EndIncrement1(this System.Windows.Forms.ProgressBar __control__, IAsyncResult result)
        {
            EndIncrement1(result);
        }
        public static void EndIncrement1(IAsyncResult result)
        {
            increment1Callback.EndInvoke(result);
        }
        public static Task IncrementAsync(this System.Windows.Forms.ProgressBar __control__, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ProgressBar, System.Int32>(
                (Func<System.Windows.Forms.ProgressBar, System.Int32, AsyncCallback, object, IAsyncResult>)BeginIncrement1,
                (Action<IAsyncResult>)EndIncrement1,
                __control__, value, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ProgressBar> performStep1Internal = (c) => c.PerformStep();
        public static void PerformStep(this System.Windows.Forms.ProgressBar __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(performStep1Internal, __control__);
            else
                performStep1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ProgressBar> performStep1Callback = PerformStep;
        public static IAsyncResult BeginPerformStep1(this System.Windows.Forms.ProgressBar __control__, AsyncCallback callback, object state)
        {
            return performStep1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndPerformStep1(this System.Windows.Forms.ProgressBar __control__, IAsyncResult result)
        {
            EndPerformStep1(result);
        }
        public static void EndPerformStep1(IAsyncResult result)
        {
            performStep1Callback.EndInvoke(result);
        }
        public static Task PerformStepAsync(this System.Windows.Forms.ProgressBar __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ProgressBar>(
                (Func<System.Windows.Forms.ProgressBar, AsyncCallback, object, IAsyncResult>)BeginPerformStep1,
                (Action<IAsyncResult>)EndPerformStep1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.ProgressBar> resetForeColor4Internal = (c) => c.ResetForeColor();
        public static void ResetForeColor(this System.Windows.Forms.ProgressBar __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetForeColor4Internal, __control__);
            else
                resetForeColor4Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.ProgressBar> resetForeColor4Callback = ResetForeColor;
        public static IAsyncResult BeginResetForeColor4(this System.Windows.Forms.ProgressBar __control__, AsyncCallback callback, object state)
        {
            return resetForeColor4Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetForeColor4(this System.Windows.Forms.ProgressBar __control__, IAsyncResult result)
        {
            EndResetForeColor4(result);
        }
        public static void EndResetForeColor4(IAsyncResult result)
        {
            resetForeColor4Callback.EndInvoke(result);
        }
        public static Task ResetForeColorAsync(this System.Windows.Forms.ProgressBar __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ProgressBar>(
                (Func<System.Windows.Forms.ProgressBar, AsyncCallback, object, IAsyncResult>)BeginResetForeColor4,
                (Action<IAsyncResult>)EndResetForeColor4,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.ProgressBar, System.Windows.Forms.ProgressBarStyle> getStyleInternal = (x) => x.Style;
        public static System.Windows.Forms.ProgressBarStyle GetStyle(this System.Windows.Forms.ProgressBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ProgressBarStyle)target.Invoke(getStyleInternal, target);
            else
                return getStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ProgressBar, System.Windows.Forms.ProgressBarStyle> getStyleCallback = GetStyle;
        public static IAsyncResult BeginGetStyle(this System.Windows.Forms.ProgressBar target, AsyncCallback callback, object state)
        {
            return getStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ProgressBarStyle EndGetStyle(this System.Windows.Forms.ProgressBar target, IAsyncResult result)
        {
            return EndGetStyle(result);
        }
        public static System.Windows.Forms.ProgressBarStyle EndGetStyle(IAsyncResult result)
        {
            return getStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ProgressBarStyle> GetStyleAsync(this System.Windows.Forms.ProgressBar target)
        {
            return Task<System.Windows.Forms.ProgressBarStyle>.Factory.FromAsync<System.Windows.Forms.ProgressBar>(
                BeginGetStyle,
                EndGetStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ProgressBar, System.Windows.Forms.ProgressBarStyle> setStyleInternal = (x, v) => x.Style = v;
        public static void SetStyle(this System.Windows.Forms.ProgressBar target, System.Windows.Forms.ProgressBarStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setStyleInternal, target, value);
            else
                setStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ProgressBar, System.Windows.Forms.ProgressBarStyle> setStyleCallback = SetStyle;
        public static IAsyncResult BeginSetStyle(this System.Windows.Forms.ProgressBar target, System.Windows.Forms.ProgressBarStyle value, AsyncCallback callback, object state)
        {
            return setStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetStyle(this System.Windows.Forms.ProgressBar target, IAsyncResult result)
        {
            EndSetStyle(result);
        }
        public static void EndSetStyle(IAsyncResult result)
        {
            setStyleCallback.EndInvoke(result);
        }
        public static Task SetStyleAsync(this System.Windows.Forms.ProgressBar target, System.Windows.Forms.ProgressBarStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ProgressBar, System.Windows.Forms.ProgressBarStyle>(
                BeginSetStyle,
                EndSetStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ProgressBar, System.Int32> getMarqueeAnimationSpeedInternal = (x) => x.MarqueeAnimationSpeed;
        public static System.Int32 GetMarqueeAnimationSpeed(this System.Windows.Forms.ProgressBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getMarqueeAnimationSpeedInternal, target);
            else
                return getMarqueeAnimationSpeedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ProgressBar, System.Int32> getMarqueeAnimationSpeedCallback = GetMarqueeAnimationSpeed;
        public static IAsyncResult BeginGetMarqueeAnimationSpeed(this System.Windows.Forms.ProgressBar target, AsyncCallback callback, object state)
        {
            return getMarqueeAnimationSpeedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetMarqueeAnimationSpeed(this System.Windows.Forms.ProgressBar target, IAsyncResult result)
        {
            return EndGetMarqueeAnimationSpeed(result);
        }
        public static System.Int32 EndGetMarqueeAnimationSpeed(IAsyncResult result)
        {
            return getMarqueeAnimationSpeedCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetMarqueeAnimationSpeedAsync(this System.Windows.Forms.ProgressBar target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ProgressBar>(
                BeginGetMarqueeAnimationSpeed,
                EndGetMarqueeAnimationSpeed,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ProgressBar, System.Int32> setMarqueeAnimationSpeedInternal = (x, v) => x.MarqueeAnimationSpeed = v;
        public static void SetMarqueeAnimationSpeed(this System.Windows.Forms.ProgressBar target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMarqueeAnimationSpeedInternal, target, value);
            else
                setMarqueeAnimationSpeedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ProgressBar, System.Int32> setMarqueeAnimationSpeedCallback = SetMarqueeAnimationSpeed;
        public static IAsyncResult BeginSetMarqueeAnimationSpeed(this System.Windows.Forms.ProgressBar target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setMarqueeAnimationSpeedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMarqueeAnimationSpeed(this System.Windows.Forms.ProgressBar target, IAsyncResult result)
        {
            EndSetMarqueeAnimationSpeed(result);
        }
        public static void EndSetMarqueeAnimationSpeed(IAsyncResult result)
        {
            setMarqueeAnimationSpeedCallback.EndInvoke(result);
        }
        public static Task SetMarqueeAnimationSpeedAsync(this System.Windows.Forms.ProgressBar target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ProgressBar, System.Int32>(
                BeginSetMarqueeAnimationSpeed,
                EndSetMarqueeAnimationSpeed,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ProgressBar, System.Int32> getStepInternal = (x) => x.Step;
        public static System.Int32 GetStep(this System.Windows.Forms.ProgressBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getStepInternal, target);
            else
                return getStepInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ProgressBar, System.Int32> getStepCallback = GetStep;
        public static IAsyncResult BeginGetStep(this System.Windows.Forms.ProgressBar target, AsyncCallback callback, object state)
        {
            return getStepCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetStep(this System.Windows.Forms.ProgressBar target, IAsyncResult result)
        {
            return EndGetStep(result);
        }
        public static System.Int32 EndGetStep(IAsyncResult result)
        {
            return getStepCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetStepAsync(this System.Windows.Forms.ProgressBar target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.ProgressBar>(
                BeginGetStep,
                EndGetStep,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ProgressBar, System.Int32> setStepInternal = (x, v) => x.Step = v;
        public static void SetStep(this System.Windows.Forms.ProgressBar target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setStepInternal, target, value);
            else
                setStepInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ProgressBar, System.Int32> setStepCallback = SetStep;
        public static IAsyncResult BeginSetStep(this System.Windows.Forms.ProgressBar target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setStepCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetStep(this System.Windows.Forms.ProgressBar target, IAsyncResult result)
        {
            EndSetStep(result);
        }
        public static void EndSetStep(IAsyncResult result)
        {
            setStepCallback.EndInvoke(result);
        }
        public static Task SetStepAsync(this System.Windows.Forms.ProgressBar target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ProgressBar, System.Int32>(
                BeginSetStep,
                EndSetStep,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Splitter, System.Int32> getMinExtraInternal = (x) => x.MinExtra;
        public static System.Int32 GetMinExtra(this System.Windows.Forms.Splitter target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getMinExtraInternal, target);
            else
                return getMinExtraInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Splitter, System.Int32> getMinExtraCallback = GetMinExtra;
        public static IAsyncResult BeginGetMinExtra(this System.Windows.Forms.Splitter target, AsyncCallback callback, object state)
        {
            return getMinExtraCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetMinExtra(this System.Windows.Forms.Splitter target, IAsyncResult result)
        {
            return EndGetMinExtra(result);
        }
        public static System.Int32 EndGetMinExtra(IAsyncResult result)
        {
            return getMinExtraCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetMinExtraAsync(this System.Windows.Forms.Splitter target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Splitter>(
                BeginGetMinExtra,
                EndGetMinExtra,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Splitter, System.Int32> setMinExtraInternal = (x, v) => x.MinExtra = v;
        public static void SetMinExtra(this System.Windows.Forms.Splitter target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMinExtraInternal, target, value);
            else
                setMinExtraInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Splitter, System.Int32> setMinExtraCallback = SetMinExtra;
        public static IAsyncResult BeginSetMinExtra(this System.Windows.Forms.Splitter target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setMinExtraCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMinExtra(this System.Windows.Forms.Splitter target, IAsyncResult result)
        {
            EndSetMinExtra(result);
        }
        public static void EndSetMinExtra(IAsyncResult result)
        {
            setMinExtraCallback.EndInvoke(result);
        }
        public static Task SetMinExtraAsync(this System.Windows.Forms.Splitter target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Splitter, System.Int32>(
                BeginSetMinExtra,
                EndSetMinExtra,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Splitter, System.Int32> getMinSizeInternal = (x) => x.MinSize;
        public static System.Int32 GetMinSize(this System.Windows.Forms.Splitter target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getMinSizeInternal, target);
            else
                return getMinSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Splitter, System.Int32> getMinSizeCallback = GetMinSize;
        public static IAsyncResult BeginGetMinSize(this System.Windows.Forms.Splitter target, AsyncCallback callback, object state)
        {
            return getMinSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetMinSize(this System.Windows.Forms.Splitter target, IAsyncResult result)
        {
            return EndGetMinSize(result);
        }
        public static System.Int32 EndGetMinSize(IAsyncResult result)
        {
            return getMinSizeCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetMinSizeAsync(this System.Windows.Forms.Splitter target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Splitter>(
                BeginGetMinSize,
                EndGetMinSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Splitter, System.Int32> setMinSizeInternal = (x, v) => x.MinSize = v;
        public static void SetMinSize(this System.Windows.Forms.Splitter target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setMinSizeInternal, target, value);
            else
                setMinSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Splitter, System.Int32> setMinSizeCallback = SetMinSize;
        public static IAsyncResult BeginSetMinSize(this System.Windows.Forms.Splitter target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setMinSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetMinSize(this System.Windows.Forms.Splitter target, IAsyncResult result)
        {
            EndSetMinSize(result);
        }
        public static void EndSetMinSize(IAsyncResult result)
        {
            setMinSizeCallback.EndInvoke(result);
        }
        public static Task SetMinSizeAsync(this System.Windows.Forms.Splitter target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Splitter, System.Int32>(
                BeginSetMinSize,
                EndSetMinSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.Splitter, System.Int32> getSplitPositionInternal = (x) => x.SplitPosition;
        public static System.Int32 GetSplitPosition(this System.Windows.Forms.Splitter target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSplitPositionInternal, target);
            else
                return getSplitPositionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.Splitter, System.Int32> getSplitPositionCallback = GetSplitPosition;
        public static IAsyncResult BeginGetSplitPosition(this System.Windows.Forms.Splitter target, AsyncCallback callback, object state)
        {
            return getSplitPositionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSplitPosition(this System.Windows.Forms.Splitter target, IAsyncResult result)
        {
            return EndGetSplitPosition(result);
        }
        public static System.Int32 EndGetSplitPosition(IAsyncResult result)
        {
            return getSplitPositionCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSplitPositionAsync(this System.Windows.Forms.Splitter target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.Splitter>(
                BeginGetSplitPosition,
                EndGetSplitPosition,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.Splitter, System.Int32> setSplitPositionInternal = (x, v) => x.SplitPosition = v;
        public static void SetSplitPosition(this System.Windows.Forms.Splitter target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSplitPositionInternal, target, value);
            else
                setSplitPositionInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.Splitter, System.Int32> setSplitPositionCallback = SetSplitPosition;
        public static IAsyncResult BeginSetSplitPosition(this System.Windows.Forms.Splitter target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSplitPositionCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSplitPosition(this System.Windows.Forms.Splitter target, IAsyncResult result)
        {
            EndSetSplitPosition(result);
        }
        public static void EndSetSplitPosition(IAsyncResult result)
        {
            setSplitPositionCallback.EndInvoke(result);
        }
        public static Task SetSplitPositionAsync(this System.Windows.Forms.Splitter target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.Splitter, System.Int32>(
                BeginSetSplitPosition,
                EndSetSplitPosition,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.StatusBar, System.Windows.Forms.StatusBar.StatusBarPanelCollection> getPanelsInternal = (x) => x.Panels;
        public static System.Windows.Forms.StatusBar.StatusBarPanelCollection GetPanels(this System.Windows.Forms.StatusBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.StatusBar.StatusBarPanelCollection)target.Invoke(getPanelsInternal, target);
            else
                return getPanelsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.StatusBar, System.Windows.Forms.StatusBar.StatusBarPanelCollection> getPanelsCallback = GetPanels;
        public static IAsyncResult BeginGetPanels(this System.Windows.Forms.StatusBar target, AsyncCallback callback, object state)
        {
            return getPanelsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.StatusBar.StatusBarPanelCollection EndGetPanels(this System.Windows.Forms.StatusBar target, IAsyncResult result)
        {
            return EndGetPanels(result);
        }
        public static System.Windows.Forms.StatusBar.StatusBarPanelCollection EndGetPanels(IAsyncResult result)
        {
            return getPanelsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.StatusBar.StatusBarPanelCollection> GetPanelsAsync(this System.Windows.Forms.StatusBar target)
        {
            return Task<System.Windows.Forms.StatusBar.StatusBarPanelCollection>.Factory.FromAsync<System.Windows.Forms.StatusBar>(
                BeginGetPanels,
                EndGetPanels,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.StatusBar, System.Boolean> getShowPanelsInternal = (x) => x.ShowPanels;
        public static System.Boolean GetShowPanels(this System.Windows.Forms.StatusBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowPanelsInternal, target);
            else
                return getShowPanelsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.StatusBar, System.Boolean> getShowPanelsCallback = GetShowPanels;
        public static IAsyncResult BeginGetShowPanels(this System.Windows.Forms.StatusBar target, AsyncCallback callback, object state)
        {
            return getShowPanelsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowPanels(this System.Windows.Forms.StatusBar target, IAsyncResult result)
        {
            return EndGetShowPanels(result);
        }
        public static System.Boolean EndGetShowPanels(IAsyncResult result)
        {
            return getShowPanelsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowPanelsAsync(this System.Windows.Forms.StatusBar target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.StatusBar>(
                BeginGetShowPanels,
                EndGetShowPanels,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.StatusBar, System.Boolean> setShowPanelsInternal = (x, v) => x.ShowPanels = v;
        public static void SetShowPanels(this System.Windows.Forms.StatusBar target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowPanelsInternal, target, value);
            else
                setShowPanelsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.StatusBar, System.Boolean> setShowPanelsCallback = SetShowPanels;
        public static IAsyncResult BeginSetShowPanels(this System.Windows.Forms.StatusBar target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowPanelsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowPanels(this System.Windows.Forms.StatusBar target, IAsyncResult result)
        {
            EndSetShowPanels(result);
        }
        public static void EndSetShowPanels(IAsyncResult result)
        {
            setShowPanelsCallback.EndInvoke(result);
        }
        public static Task SetShowPanelsAsync(this System.Windows.Forms.StatusBar target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.StatusBar, System.Boolean>(
                BeginSetShowPanels,
                EndSetShowPanels,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.TabControl, System.Int32> deselectTab1Internal = (c, index) => c.DeselectTab(index);
        public static void DeselectTab(this System.Windows.Forms.TabControl __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(deselectTab1Internal, __control__, index);
            else
                deselectTab1Internal.Invoke(__control__, index);
        }
        private static readonly Action<System.Windows.Forms.TabControl, System.Int32> deselectTab1Callback = DeselectTab;
        public static IAsyncResult BeginDeselectTab1(this System.Windows.Forms.TabControl __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return deselectTab1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static void EndDeselectTab1(this System.Windows.Forms.TabControl __control__, IAsyncResult result)
        {
            EndDeselectTab1(result);
        }
        public static void EndDeselectTab1(IAsyncResult result)
        {
            deselectTab1Callback.EndInvoke(result);
        }
        public static Task DeselectTabAsync(this System.Windows.Forms.TabControl __control__, System.Int32 index)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabControl, System.Int32>(
                (Func<System.Windows.Forms.TabControl, System.Int32, AsyncCallback, object, IAsyncResult>)BeginDeselectTab1,
                (Action<IAsyncResult>)EndDeselectTab1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TabControl, System.Windows.Forms.TabPage> deselectTab2Internal = (c, tabPage) => c.DeselectTab(tabPage);
        public static void DeselectTab(this System.Windows.Forms.TabControl __control__, System.Windows.Forms.TabPage tabPage)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(deselectTab2Internal, __control__, tabPage);
            else
                deselectTab2Internal.Invoke(__control__, tabPage);
        }
        private static readonly Action<System.Windows.Forms.TabControl, System.Windows.Forms.TabPage> deselectTab2Callback = DeselectTab;
        public static IAsyncResult BeginDeselectTab2(this System.Windows.Forms.TabControl __control__, System.Windows.Forms.TabPage tabPage, AsyncCallback callback, object state)
        {
            return deselectTab2Callback.BeginInvoke(__control__, tabPage, callback, state);
        }
        public static void EndDeselectTab2(this System.Windows.Forms.TabControl __control__, IAsyncResult result)
        {
            EndDeselectTab2(result);
        }
        public static void EndDeselectTab2(IAsyncResult result)
        {
            deselectTab2Callback.EndInvoke(result);
        }
        public static Task DeselectTabAsync(this System.Windows.Forms.TabControl __control__, System.Windows.Forms.TabPage tabPage)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabControl, System.Windows.Forms.TabPage>(
                (Func<System.Windows.Forms.TabControl, System.Windows.Forms.TabPage, AsyncCallback, object, IAsyncResult>)BeginDeselectTab2,
                (Action<IAsyncResult>)EndDeselectTab2,
                __control__, tabPage, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TabControl, System.String> deselectTab3Internal = (c, tabPageName) => c.DeselectTab(tabPageName);
        public static void DeselectTab(this System.Windows.Forms.TabControl __control__, System.String tabPageName)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(deselectTab3Internal, __control__, tabPageName);
            else
                deselectTab3Internal.Invoke(__control__, tabPageName);
        }
        private static readonly Action<System.Windows.Forms.TabControl, System.String> deselectTab3Callback = DeselectTab;
        public static IAsyncResult BeginDeselectTab3(this System.Windows.Forms.TabControl __control__, System.String tabPageName, AsyncCallback callback, object state)
        {
            return deselectTab3Callback.BeginInvoke(__control__, tabPageName, callback, state);
        }
        public static void EndDeselectTab3(this System.Windows.Forms.TabControl __control__, IAsyncResult result)
        {
            EndDeselectTab3(result);
        }
        public static void EndDeselectTab3(IAsyncResult result)
        {
            deselectTab3Callback.EndInvoke(result);
        }
        public static Task DeselectTabAsync(this System.Windows.Forms.TabControl __control__, System.String tabPageName)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabControl, System.String>(
                (Func<System.Windows.Forms.TabControl, System.String, AsyncCallback, object, IAsyncResult>)BeginDeselectTab3,
                (Action<IAsyncResult>)EndDeselectTab3,
                __control__, tabPageName, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TabControl, System.Int32, System.Windows.Forms.Control> getControl2Internal = (c, index) => c.GetControl(index);
        public static System.Windows.Forms.Control GetControl(this System.Windows.Forms.TabControl __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.Control)__control__.Invoke(getControl2Internal, __control__, index);
            else
                return getControl2Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.TabControl, System.Int32, System.Windows.Forms.Control> getControl2Callback = GetControl;
        public static IAsyncResult BeginGetControl2(this System.Windows.Forms.TabControl __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getControl2Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Windows.Forms.Control EndGetControl2(this System.Windows.Forms.TabControl __control__, IAsyncResult result)
        {
            return EndGetControl2(result);
        }
        public static System.Windows.Forms.Control EndGetControl2(IAsyncResult result)
        {
            return getControl2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.Control> GetControlAsync(this System.Windows.Forms.TabControl __control__, System.Int32 index)
        {
            return Task<System.Windows.Forms.Control>.Factory.FromAsync<System.Windows.Forms.TabControl, System.Int32>(
                (Func<System.Windows.Forms.TabControl, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetControl2,
                (Func<IAsyncResult, System.Windows.Forms.Control>)EndGetControl2,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TabControl, System.Int32, System.Drawing.Rectangle> getTabRect1Internal = (c, index) => c.GetTabRect(index);
        public static System.Drawing.Rectangle GetTabRect(this System.Windows.Forms.TabControl __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Drawing.Rectangle)__control__.Invoke(getTabRect1Internal, __control__, index);
            else
                return getTabRect1Internal.Invoke(__control__, index);
        }
        private static readonly Func<System.Windows.Forms.TabControl, System.Int32, System.Drawing.Rectangle> getTabRect1Callback = GetTabRect;
        public static IAsyncResult BeginGetTabRect1(this System.Windows.Forms.TabControl __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return getTabRect1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static System.Drawing.Rectangle EndGetTabRect1(this System.Windows.Forms.TabControl __control__, IAsyncResult result)
        {
            return EndGetTabRect1(result);
        }
        public static System.Drawing.Rectangle EndGetTabRect1(IAsyncResult result)
        {
            return getTabRect1Callback.EndInvoke(result);
        }
        public static Task<System.Drawing.Rectangle> GetTabRectAsync(this System.Windows.Forms.TabControl __control__, System.Int32 index)
        {
            return Task<System.Drawing.Rectangle>.Factory.FromAsync<System.Windows.Forms.TabControl, System.Int32>(
                (Func<System.Windows.Forms.TabControl, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetTabRect1,
                (Func<IAsyncResult, System.Drawing.Rectangle>)EndGetTabRect1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TabControl, System.Int32> selectTab1Internal = (c, index) => c.SelectTab(index);
        public static void SelectTab(this System.Windows.Forms.TabControl __control__, System.Int32 index)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(selectTab1Internal, __control__, index);
            else
                selectTab1Internal.Invoke(__control__, index);
        }
        private static readonly Action<System.Windows.Forms.TabControl, System.Int32> selectTab1Callback = SelectTab;
        public static IAsyncResult BeginSelectTab1(this System.Windows.Forms.TabControl __control__, System.Int32 index, AsyncCallback callback, object state)
        {
            return selectTab1Callback.BeginInvoke(__control__, index, callback, state);
        }
        public static void EndSelectTab1(this System.Windows.Forms.TabControl __control__, IAsyncResult result)
        {
            EndSelectTab1(result);
        }
        public static void EndSelectTab1(IAsyncResult result)
        {
            selectTab1Callback.EndInvoke(result);
        }
        public static Task SelectTabAsync(this System.Windows.Forms.TabControl __control__, System.Int32 index)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabControl, System.Int32>(
                (Func<System.Windows.Forms.TabControl, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSelectTab1,
                (Action<IAsyncResult>)EndSelectTab1,
                __control__, index, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TabControl, System.Windows.Forms.TabPage> selectTab2Internal = (c, tabPage) => c.SelectTab(tabPage);
        public static void SelectTab(this System.Windows.Forms.TabControl __control__, System.Windows.Forms.TabPage tabPage)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(selectTab2Internal, __control__, tabPage);
            else
                selectTab2Internal.Invoke(__control__, tabPage);
        }
        private static readonly Action<System.Windows.Forms.TabControl, System.Windows.Forms.TabPage> selectTab2Callback = SelectTab;
        public static IAsyncResult BeginSelectTab2(this System.Windows.Forms.TabControl __control__, System.Windows.Forms.TabPage tabPage, AsyncCallback callback, object state)
        {
            return selectTab2Callback.BeginInvoke(__control__, tabPage, callback, state);
        }
        public static void EndSelectTab2(this System.Windows.Forms.TabControl __control__, IAsyncResult result)
        {
            EndSelectTab2(result);
        }
        public static void EndSelectTab2(IAsyncResult result)
        {
            selectTab2Callback.EndInvoke(result);
        }
        public static Task SelectTabAsync(this System.Windows.Forms.TabControl __control__, System.Windows.Forms.TabPage tabPage)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabControl, System.Windows.Forms.TabPage>(
                (Func<System.Windows.Forms.TabControl, System.Windows.Forms.TabPage, AsyncCallback, object, IAsyncResult>)BeginSelectTab2,
                (Action<IAsyncResult>)EndSelectTab2,
                __control__, tabPage, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TabControl, System.String> selectTab3Internal = (c, tabPageName) => c.SelectTab(tabPageName);
        public static void SelectTab(this System.Windows.Forms.TabControl __control__, System.String tabPageName)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(selectTab3Internal, __control__, tabPageName);
            else
                selectTab3Internal.Invoke(__control__, tabPageName);
        }
        private static readonly Action<System.Windows.Forms.TabControl, System.String> selectTab3Callback = SelectTab;
        public static IAsyncResult BeginSelectTab3(this System.Windows.Forms.TabControl __control__, System.String tabPageName, AsyncCallback callback, object state)
        {
            return selectTab3Callback.BeginInvoke(__control__, tabPageName, callback, state);
        }
        public static void EndSelectTab3(this System.Windows.Forms.TabControl __control__, IAsyncResult result)
        {
            EndSelectTab3(result);
        }
        public static void EndSelectTab3(IAsyncResult result)
        {
            selectTab3Callback.EndInvoke(result);
        }
        public static Task SelectTabAsync(this System.Windows.Forms.TabControl __control__, System.String tabPageName)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabControl, System.String>(
                (Func<System.Windows.Forms.TabControl, System.String, AsyncCallback, object, IAsyncResult>)BeginSelectTab3,
                (Action<IAsyncResult>)EndSelectTab3,
                __control__, tabPageName, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.TabControl, System.Boolean> getHotTrackInternal = (x) => x.HotTrack;
        public static System.Boolean GetHotTrack(this System.Windows.Forms.TabControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getHotTrackInternal, target);
            else
                return getHotTrackInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TabControl, System.Boolean> getHotTrackCallback = GetHotTrack;
        public static IAsyncResult BeginGetHotTrack(this System.Windows.Forms.TabControl target, AsyncCallback callback, object state)
        {
            return getHotTrackCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetHotTrack(this System.Windows.Forms.TabControl target, IAsyncResult result)
        {
            return EndGetHotTrack(result);
        }
        public static System.Boolean EndGetHotTrack(IAsyncResult result)
        {
            return getHotTrackCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetHotTrackAsync(this System.Windows.Forms.TabControl target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TabControl>(
                BeginGetHotTrack,
                EndGetHotTrack,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TabControl, System.Boolean> setHotTrackInternal = (x, v) => x.HotTrack = v;
        public static void SetHotTrack(this System.Windows.Forms.TabControl target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setHotTrackInternal, target, value);
            else
                setHotTrackInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TabControl, System.Boolean> setHotTrackCallback = SetHotTrack;
        public static IAsyncResult BeginSetHotTrack(this System.Windows.Forms.TabControl target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setHotTrackCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetHotTrack(this System.Windows.Forms.TabControl target, IAsyncResult result)
        {
            EndSetHotTrack(result);
        }
        public static void EndSetHotTrack(IAsyncResult result)
        {
            setHotTrackCallback.EndInvoke(result);
        }
        public static Task SetHotTrackAsync(this System.Windows.Forms.TabControl target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabControl, System.Boolean>(
                BeginSetHotTrack,
                EndSetHotTrack,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TabControl, System.Drawing.Size> getItemSizeInternal = (x) => x.ItemSize;
        public static System.Drawing.Size GetItemSize(this System.Windows.Forms.TabControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getItemSizeInternal, target);
            else
                return getItemSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TabControl, System.Drawing.Size> getItemSizeCallback = GetItemSize;
        public static IAsyncResult BeginGetItemSize(this System.Windows.Forms.TabControl target, AsyncCallback callback, object state)
        {
            return getItemSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetItemSize(this System.Windows.Forms.TabControl target, IAsyncResult result)
        {
            return EndGetItemSize(result);
        }
        public static System.Drawing.Size EndGetItemSize(IAsyncResult result)
        {
            return getItemSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetItemSizeAsync(this System.Windows.Forms.TabControl target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.TabControl>(
                BeginGetItemSize,
                EndGetItemSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TabControl, System.Drawing.Size> setItemSizeInternal = (x, v) => x.ItemSize = v;
        public static void SetItemSize(this System.Windows.Forms.TabControl target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setItemSizeInternal, target, value);
            else
                setItemSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TabControl, System.Drawing.Size> setItemSizeCallback = SetItemSize;
        public static IAsyncResult BeginSetItemSize(this System.Windows.Forms.TabControl target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setItemSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetItemSize(this System.Windows.Forms.TabControl target, IAsyncResult result)
        {
            EndSetItemSize(result);
        }
        public static void EndSetItemSize(IAsyncResult result)
        {
            setItemSizeCallback.EndInvoke(result);
        }
        public static Task SetItemSizeAsync(this System.Windows.Forms.TabControl target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabControl, System.Drawing.Size>(
                BeginSetItemSize,
                EndSetItemSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TabControl, System.Boolean> getShowToolTipsInternal = (x) => x.ShowToolTips;
        public static System.Boolean GetShowToolTips(this System.Windows.Forms.TabControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowToolTipsInternal, target);
            else
                return getShowToolTipsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TabControl, System.Boolean> getShowToolTipsCallback = GetShowToolTips;
        public static IAsyncResult BeginGetShowToolTips(this System.Windows.Forms.TabControl target, AsyncCallback callback, object state)
        {
            return getShowToolTipsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowToolTips(this System.Windows.Forms.TabControl target, IAsyncResult result)
        {
            return EndGetShowToolTips(result);
        }
        public static System.Boolean EndGetShowToolTips(IAsyncResult result)
        {
            return getShowToolTipsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowToolTipsAsync(this System.Windows.Forms.TabControl target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TabControl>(
                BeginGetShowToolTips,
                EndGetShowToolTips,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TabControl, System.Boolean> setShowToolTipsInternal = (x, v) => x.ShowToolTips = v;
        public static void SetShowToolTips(this System.Windows.Forms.TabControl target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowToolTipsInternal, target, value);
            else
                setShowToolTipsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TabControl, System.Boolean> setShowToolTipsCallback = SetShowToolTips;
        public static IAsyncResult BeginSetShowToolTips(this System.Windows.Forms.TabControl target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowToolTipsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowToolTips(this System.Windows.Forms.TabControl target, IAsyncResult result)
        {
            EndSetShowToolTips(result);
        }
        public static void EndSetShowToolTips(IAsyncResult result)
        {
            setShowToolTipsCallback.EndInvoke(result);
        }
        public static Task SetShowToolTipsAsync(this System.Windows.Forms.TabControl target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TabControl, System.Boolean>(
                BeginSetShowToolTips,
                EndSetShowToolTips,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TabControl, System.Int32> getTabCountInternal = (x) => x.TabCount;
        public static System.Int32 GetTabCount(this System.Windows.Forms.TabControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getTabCountInternal, target);
            else
                return getTabCountInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TabControl, System.Int32> getTabCountCallback = GetTabCount;
        public static IAsyncResult BeginGetTabCount(this System.Windows.Forms.TabControl target, AsyncCallback callback, object state)
        {
            return getTabCountCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetTabCount(this System.Windows.Forms.TabControl target, IAsyncResult result)
        {
            return EndGetTabCount(result);
        }
        public static System.Int32 EndGetTabCount(IAsyncResult result)
        {
            return getTabCountCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetTabCountAsync(this System.Windows.Forms.TabControl target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TabControl>(
                BeginGetTabCount,
                EndGetTabCount,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.TabControl, System.Windows.Forms.TabControl.TabPageCollection> getTabPagesInternal = (x) => x.TabPages;
        public static System.Windows.Forms.TabControl.TabPageCollection GetTabPages(this System.Windows.Forms.TabControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TabControl.TabPageCollection)target.Invoke(getTabPagesInternal, target);
            else
                return getTabPagesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TabControl, System.Windows.Forms.TabControl.TabPageCollection> getTabPagesCallback = GetTabPages;
        public static IAsyncResult BeginGetTabPages(this System.Windows.Forms.TabControl target, AsyncCallback callback, object state)
        {
            return getTabPagesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TabControl.TabPageCollection EndGetTabPages(this System.Windows.Forms.TabControl target, IAsyncResult result)
        {
            return EndGetTabPages(result);
        }
        public static System.Windows.Forms.TabControl.TabPageCollection EndGetTabPages(IAsyncResult result)
        {
            return getTabPagesCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TabControl.TabPageCollection> GetTabPagesAsync(this System.Windows.Forms.TabControl target)
        {
            return Task<System.Windows.Forms.TabControl.TabPageCollection>.Factory.FromAsync<System.Windows.Forms.TabControl>(
                BeginGetTabPages,
                EndGetTabPages,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolBar, System.Windows.Forms.ToolBar.ToolBarButtonCollection> getButtonsInternal = (x) => x.Buttons;
        public static System.Windows.Forms.ToolBar.ToolBarButtonCollection GetButtons(this System.Windows.Forms.ToolBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.ToolBar.ToolBarButtonCollection)target.Invoke(getButtonsInternal, target);
            else
                return getButtonsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolBar, System.Windows.Forms.ToolBar.ToolBarButtonCollection> getButtonsCallback = GetButtons;
        public static IAsyncResult BeginGetButtons(this System.Windows.Forms.ToolBar target, AsyncCallback callback, object state)
        {
            return getButtonsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.ToolBar.ToolBarButtonCollection EndGetButtons(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            return EndGetButtons(result);
        }
        public static System.Windows.Forms.ToolBar.ToolBarButtonCollection EndGetButtons(IAsyncResult result)
        {
            return getButtonsCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.ToolBar.ToolBarButtonCollection> GetButtonsAsync(this System.Windows.Forms.ToolBar target)
        {
            return Task<System.Windows.Forms.ToolBar.ToolBarButtonCollection>.Factory.FromAsync<System.Windows.Forms.ToolBar>(
                BeginGetButtons,
                EndGetButtons,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolBar, System.Drawing.Size> getButtonSizeInternal = (x) => x.ButtonSize;
        public static System.Drawing.Size GetButtonSize(this System.Windows.Forms.ToolBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getButtonSizeInternal, target);
            else
                return getButtonSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolBar, System.Drawing.Size> getButtonSizeCallback = GetButtonSize;
        public static IAsyncResult BeginGetButtonSize(this System.Windows.Forms.ToolBar target, AsyncCallback callback, object state)
        {
            return getButtonSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetButtonSize(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            return EndGetButtonSize(result);
        }
        public static System.Drawing.Size EndGetButtonSize(IAsyncResult result)
        {
            return getButtonSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetButtonSizeAsync(this System.Windows.Forms.ToolBar target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.ToolBar>(
                BeginGetButtonSize,
                EndGetButtonSize,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolBar, System.Drawing.Size> setButtonSizeInternal = (x, v) => x.ButtonSize = v;
        public static void SetButtonSize(this System.Windows.Forms.ToolBar target, System.Drawing.Size value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setButtonSizeInternal, target, value);
            else
                setButtonSizeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolBar, System.Drawing.Size> setButtonSizeCallback = SetButtonSize;
        public static IAsyncResult BeginSetButtonSize(this System.Windows.Forms.ToolBar target, System.Drawing.Size value, AsyncCallback callback, object state)
        {
            return setButtonSizeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetButtonSize(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            EndSetButtonSize(result);
        }
        public static void EndSetButtonSize(IAsyncResult result)
        {
            setButtonSizeCallback.EndInvoke(result);
        }
        public static Task SetButtonSizeAsync(this System.Windows.Forms.ToolBar target, System.Drawing.Size value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolBar, System.Drawing.Size>(
                BeginSetButtonSize,
                EndSetButtonSize,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolBar, System.Boolean> getDividerInternal = (x) => x.Divider;
        public static System.Boolean GetDivider(this System.Windows.Forms.ToolBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getDividerInternal, target);
            else
                return getDividerInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolBar, System.Boolean> getDividerCallback = GetDivider;
        public static IAsyncResult BeginGetDivider(this System.Windows.Forms.ToolBar target, AsyncCallback callback, object state)
        {
            return getDividerCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetDivider(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            return EndGetDivider(result);
        }
        public static System.Boolean EndGetDivider(IAsyncResult result)
        {
            return getDividerCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetDividerAsync(this System.Windows.Forms.ToolBar target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolBar>(
                BeginGetDivider,
                EndGetDivider,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolBar, System.Boolean> setDividerInternal = (x, v) => x.Divider = v;
        public static void SetDivider(this System.Windows.Forms.ToolBar target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDividerInternal, target, value);
            else
                setDividerInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolBar, System.Boolean> setDividerCallback = SetDivider;
        public static IAsyncResult BeginSetDivider(this System.Windows.Forms.ToolBar target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setDividerCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDivider(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            EndSetDivider(result);
        }
        public static void EndSetDivider(IAsyncResult result)
        {
            setDividerCallback.EndInvoke(result);
        }
        public static Task SetDividerAsync(this System.Windows.Forms.ToolBar target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolBar, System.Boolean>(
                BeginSetDivider,
                EndSetDivider,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolBar, System.Boolean> getDropDownArrowsInternal = (x) => x.DropDownArrows;
        public static System.Boolean GetDropDownArrows(this System.Windows.Forms.ToolBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getDropDownArrowsInternal, target);
            else
                return getDropDownArrowsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolBar, System.Boolean> getDropDownArrowsCallback = GetDropDownArrows;
        public static IAsyncResult BeginGetDropDownArrows(this System.Windows.Forms.ToolBar target, AsyncCallback callback, object state)
        {
            return getDropDownArrowsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetDropDownArrows(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            return EndGetDropDownArrows(result);
        }
        public static System.Boolean EndGetDropDownArrows(IAsyncResult result)
        {
            return getDropDownArrowsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetDropDownArrowsAsync(this System.Windows.Forms.ToolBar target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolBar>(
                BeginGetDropDownArrows,
                EndGetDropDownArrows,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolBar, System.Boolean> setDropDownArrowsInternal = (x, v) => x.DropDownArrows = v;
        public static void SetDropDownArrows(this System.Windows.Forms.ToolBar target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDropDownArrowsInternal, target, value);
            else
                setDropDownArrowsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolBar, System.Boolean> setDropDownArrowsCallback = SetDropDownArrows;
        public static IAsyncResult BeginSetDropDownArrows(this System.Windows.Forms.ToolBar target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setDropDownArrowsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDropDownArrows(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            EndSetDropDownArrows(result);
        }
        public static void EndSetDropDownArrows(IAsyncResult result)
        {
            setDropDownArrowsCallback.EndInvoke(result);
        }
        public static Task SetDropDownArrowsAsync(this System.Windows.Forms.ToolBar target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolBar, System.Boolean>(
                BeginSetDropDownArrows,
                EndSetDropDownArrows,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.ToolBar, System.Drawing.Size> getImageSizeInternal = (x) => x.ImageSize;
        public static System.Drawing.Size GetImageSize(this System.Windows.Forms.ToolBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Drawing.Size)target.Invoke(getImageSizeInternal, target);
            else
                return getImageSizeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolBar, System.Drawing.Size> getImageSizeCallback = GetImageSize;
        public static IAsyncResult BeginGetImageSize(this System.Windows.Forms.ToolBar target, AsyncCallback callback, object state)
        {
            return getImageSizeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Drawing.Size EndGetImageSize(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            return EndGetImageSize(result);
        }
        public static System.Drawing.Size EndGetImageSize(IAsyncResult result)
        {
            return getImageSizeCallback.EndInvoke(result);
        }
        public static Task<System.Drawing.Size> GetImageSizeAsync(this System.Windows.Forms.ToolBar target)
        {
            return Task<System.Drawing.Size>.Factory.FromAsync<System.Windows.Forms.ToolBar>(
                BeginGetImageSize,
                EndGetImageSize,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.ToolBar, System.Boolean> getWrappableInternal = (x) => x.Wrappable;
        public static System.Boolean GetWrappable(this System.Windows.Forms.ToolBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getWrappableInternal, target);
            else
                return getWrappableInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.ToolBar, System.Boolean> getWrappableCallback = GetWrappable;
        public static IAsyncResult BeginGetWrappable(this System.Windows.Forms.ToolBar target, AsyncCallback callback, object state)
        {
            return getWrappableCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetWrappable(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            return EndGetWrappable(result);
        }
        public static System.Boolean EndGetWrappable(IAsyncResult result)
        {
            return getWrappableCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetWrappableAsync(this System.Windows.Forms.ToolBar target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.ToolBar>(
                BeginGetWrappable,
                EndGetWrappable,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.ToolBar, System.Boolean> setWrappableInternal = (x, v) => x.Wrappable = v;
        public static void SetWrappable(this System.Windows.Forms.ToolBar target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setWrappableInternal, target, value);
            else
                setWrappableInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.ToolBar, System.Boolean> setWrappableCallback = SetWrappable;
        public static IAsyncResult BeginSetWrappable(this System.Windows.Forms.ToolBar target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setWrappableCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetWrappable(this System.Windows.Forms.ToolBar target, IAsyncResult result)
        {
            EndSetWrappable(result);
        }
        public static void EndSetWrappable(IAsyncResult result)
        {
            setWrappableCallback.EndInvoke(result);
        }
        public static Task SetWrappableAsync(this System.Windows.Forms.ToolBar target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.ToolBar, System.Boolean>(
                BeginSetWrappable,
                EndSetWrappable,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.TrackBar, System.Int32, System.Int32> setRange1Internal = (c, minValue, maxValue) => c.SetRange(minValue, maxValue);
        public static void SetRange(this System.Windows.Forms.TrackBar __control__, System.Int32 minValue, System.Int32 maxValue)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(setRange1Internal, __control__, minValue, maxValue);
            else
                setRange1Internal.Invoke(__control__, minValue, maxValue);
        }
        private static readonly Action<System.Windows.Forms.TrackBar, System.Int32, System.Int32> setRange1Callback = SetRange;
        public static IAsyncResult BeginSetRange1(this System.Windows.Forms.TrackBar __control__, System.Int32 minValue, System.Int32 maxValue, AsyncCallback callback, object state)
        {
            return setRange1Callback.BeginInvoke(__control__, minValue, maxValue, callback, state);
        }
        public static void EndSetRange1(this System.Windows.Forms.TrackBar __control__, IAsyncResult result)
        {
            EndSetRange1(result);
        }
        public static void EndSetRange1(IAsyncResult result)
        {
            setRange1Callback.EndInvoke(result);
        }
        public static Task SetRangeAsync(this System.Windows.Forms.TrackBar __control__, System.Int32 minValue, System.Int32 maxValue)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TrackBar, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.TrackBar, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginSetRange1,
                (Action<IAsyncResult>)EndSetRange1,
                __control__, minValue, maxValue, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.TrackBar, System.Windows.Forms.TickStyle> getTickStyleInternal = (x) => x.TickStyle;
        public static System.Windows.Forms.TickStyle GetTickStyle(this System.Windows.Forms.TrackBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TickStyle)target.Invoke(getTickStyleInternal, target);
            else
                return getTickStyleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TrackBar, System.Windows.Forms.TickStyle> getTickStyleCallback = GetTickStyle;
        public static IAsyncResult BeginGetTickStyle(this System.Windows.Forms.TrackBar target, AsyncCallback callback, object state)
        {
            return getTickStyleCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TickStyle EndGetTickStyle(this System.Windows.Forms.TrackBar target, IAsyncResult result)
        {
            return EndGetTickStyle(result);
        }
        public static System.Windows.Forms.TickStyle EndGetTickStyle(IAsyncResult result)
        {
            return getTickStyleCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TickStyle> GetTickStyleAsync(this System.Windows.Forms.TrackBar target)
        {
            return Task<System.Windows.Forms.TickStyle>.Factory.FromAsync<System.Windows.Forms.TrackBar>(
                BeginGetTickStyle,
                EndGetTickStyle,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TrackBar, System.Windows.Forms.TickStyle> setTickStyleInternal = (x, v) => x.TickStyle = v;
        public static void SetTickStyle(this System.Windows.Forms.TrackBar target, System.Windows.Forms.TickStyle value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTickStyleInternal, target, value);
            else
                setTickStyleInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TrackBar, System.Windows.Forms.TickStyle> setTickStyleCallback = SetTickStyle;
        public static IAsyncResult BeginSetTickStyle(this System.Windows.Forms.TrackBar target, System.Windows.Forms.TickStyle value, AsyncCallback callback, object state)
        {
            return setTickStyleCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTickStyle(this System.Windows.Forms.TrackBar target, IAsyncResult result)
        {
            EndSetTickStyle(result);
        }
        public static void EndSetTickStyle(IAsyncResult result)
        {
            setTickStyleCallback.EndInvoke(result);
        }
        public static Task SetTickStyleAsync(this System.Windows.Forms.TrackBar target, System.Windows.Forms.TickStyle value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TrackBar, System.Windows.Forms.TickStyle>(
                BeginSetTickStyle,
                EndSetTickStyle,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TrackBar, System.Int32> getTickFrequencyInternal = (x) => x.TickFrequency;
        public static System.Int32 GetTickFrequency(this System.Windows.Forms.TrackBar target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getTickFrequencyInternal, target);
            else
                return getTickFrequencyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TrackBar, System.Int32> getTickFrequencyCallback = GetTickFrequency;
        public static IAsyncResult BeginGetTickFrequency(this System.Windows.Forms.TrackBar target, AsyncCallback callback, object state)
        {
            return getTickFrequencyCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetTickFrequency(this System.Windows.Forms.TrackBar target, IAsyncResult result)
        {
            return EndGetTickFrequency(result);
        }
        public static System.Int32 EndGetTickFrequency(IAsyncResult result)
        {
            return getTickFrequencyCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetTickFrequencyAsync(this System.Windows.Forms.TrackBar target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TrackBar>(
                BeginGetTickFrequency,
                EndGetTickFrequency,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TrackBar, System.Int32> setTickFrequencyInternal = (x, v) => x.TickFrequency = v;
        public static void SetTickFrequency(this System.Windows.Forms.TrackBar target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTickFrequencyInternal, target, value);
            else
                setTickFrequencyInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TrackBar, System.Int32> setTickFrequencyCallback = SetTickFrequency;
        public static IAsyncResult BeginSetTickFrequency(this System.Windows.Forms.TrackBar target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setTickFrequencyCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTickFrequency(this System.Windows.Forms.TrackBar target, IAsyncResult result)
        {
            EndSetTickFrequency(result);
        }
        public static void EndSetTickFrequency(IAsyncResult result)
        {
            setTickFrequencyCallback.EndInvoke(result);
        }
        public static Task SetTickFrequencyAsync(this System.Windows.Forms.TrackBar target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TrackBar, System.Int32>(
                BeginSetTickFrequency,
                EndSetTickFrequency,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.TreeView> collapseAll1Internal = (c) => c.CollapseAll();
        public static void CollapseAll(this System.Windows.Forms.TreeView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(collapseAll1Internal, __control__);
            else
                collapseAll1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TreeView> collapseAll1Callback = CollapseAll;
        public static IAsyncResult BeginCollapseAll1(this System.Windows.Forms.TreeView __control__, AsyncCallback callback, object state)
        {
            return collapseAll1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndCollapseAll1(this System.Windows.Forms.TreeView __control__, IAsyncResult result)
        {
            EndCollapseAll1(result);
        }
        public static void EndCollapseAll1(IAsyncResult result)
        {
            collapseAll1Callback.EndInvoke(result);
        }
        public static Task CollapseAllAsync(this System.Windows.Forms.TreeView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView>(
                (Func<System.Windows.Forms.TreeView, AsyncCallback, object, IAsyncResult>)BeginCollapseAll1,
                (Action<IAsyncResult>)EndCollapseAll1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TreeView> expandAll1Internal = (c) => c.ExpandAll();
        public static void ExpandAll(this System.Windows.Forms.TreeView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(expandAll1Internal, __control__);
            else
                expandAll1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TreeView> expandAll1Callback = ExpandAll;
        public static IAsyncResult BeginExpandAll1(this System.Windows.Forms.TreeView __control__, AsyncCallback callback, object state)
        {
            return expandAll1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndExpandAll1(this System.Windows.Forms.TreeView __control__, IAsyncResult result)
        {
            EndExpandAll1(result);
        }
        public static void EndExpandAll1(IAsyncResult result)
        {
            expandAll1Callback.EndInvoke(result);
        }
        public static Task ExpandAllAsync(this System.Windows.Forms.TreeView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView>(
                (Func<System.Windows.Forms.TreeView, AsyncCallback, object, IAsyncResult>)BeginExpandAll1,
                (Action<IAsyncResult>)EndExpandAll1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Drawing.Point, System.Windows.Forms.TreeViewHitTestInfo> hitTest8Internal = (c, pt) => c.HitTest(pt);
        public static System.Windows.Forms.TreeViewHitTestInfo HitTest(this System.Windows.Forms.TreeView __control__, System.Drawing.Point pt)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.TreeViewHitTestInfo)__control__.Invoke(hitTest8Internal, __control__, pt);
            else
                return hitTest8Internal.Invoke(__control__, pt);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Drawing.Point, System.Windows.Forms.TreeViewHitTestInfo> hitTest8Callback = HitTest;
        public static IAsyncResult BeginHitTest8(this System.Windows.Forms.TreeView __control__, System.Drawing.Point pt, AsyncCallback callback, object state)
        {
            return hitTest8Callback.BeginInvoke(__control__, pt, callback, state);
        }
        public static System.Windows.Forms.TreeViewHitTestInfo EndHitTest8(this System.Windows.Forms.TreeView __control__, IAsyncResult result)
        {
            return EndHitTest8(result);
        }
        public static System.Windows.Forms.TreeViewHitTestInfo EndHitTest8(IAsyncResult result)
        {
            return hitTest8Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TreeViewHitTestInfo> HitTestAsync(this System.Windows.Forms.TreeView __control__, System.Drawing.Point pt)
        {
            return Task<System.Windows.Forms.TreeViewHitTestInfo>.Factory.FromAsync<System.Windows.Forms.TreeView, System.Drawing.Point>(
                (Func<System.Windows.Forms.TreeView, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginHitTest8,
                (Func<IAsyncResult, System.Windows.Forms.TreeViewHitTestInfo>)EndHitTest8,
                __control__, pt, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Int32, System.Int32, System.Windows.Forms.TreeViewHitTestInfo> hitTest9Internal = (c, x, y) => c.HitTest(x, y);
        public static System.Windows.Forms.TreeViewHitTestInfo HitTest(this System.Windows.Forms.TreeView __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.TreeViewHitTestInfo)__control__.Invoke(hitTest9Internal, __control__, x, y);
            else
                return hitTest9Internal.Invoke(__control__, x, y);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Int32, System.Int32, System.Windows.Forms.TreeViewHitTestInfo> hitTest9Callback = HitTest;
        public static IAsyncResult BeginHitTest9(this System.Windows.Forms.TreeView __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return hitTest9Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static System.Windows.Forms.TreeViewHitTestInfo EndHitTest9(this System.Windows.Forms.TreeView __control__, IAsyncResult result)
        {
            return EndHitTest9(result);
        }
        public static System.Windows.Forms.TreeViewHitTestInfo EndHitTest9(IAsyncResult result)
        {
            return hitTest9Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TreeViewHitTestInfo> HitTestAsync(this System.Windows.Forms.TreeView __control__, System.Int32 x, System.Int32 y)
        {
            return Task<System.Windows.Forms.TreeViewHitTestInfo>.Factory.FromAsync<System.Windows.Forms.TreeView, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.TreeView, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginHitTest9,
                (Func<IAsyncResult, System.Windows.Forms.TreeViewHitTestInfo>)EndHitTest9,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean, System.Int32> getNodeCount1Internal = (c, includeSubTrees) => c.GetNodeCount(includeSubTrees);
        public static System.Int32 GetNodeCount(this System.Windows.Forms.TreeView __control__, System.Boolean includeSubTrees)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Int32)__control__.Invoke(getNodeCount1Internal, __control__, includeSubTrees);
            else
                return getNodeCount1Internal.Invoke(__control__, includeSubTrees);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean, System.Int32> getNodeCount1Callback = GetNodeCount;
        public static IAsyncResult BeginGetNodeCount1(this System.Windows.Forms.TreeView __control__, System.Boolean includeSubTrees, AsyncCallback callback, object state)
        {
            return getNodeCount1Callback.BeginInvoke(__control__, includeSubTrees, callback, state);
        }
        public static System.Int32 EndGetNodeCount1(this System.Windows.Forms.TreeView __control__, IAsyncResult result)
        {
            return EndGetNodeCount1(result);
        }
        public static System.Int32 EndGetNodeCount1(IAsyncResult result)
        {
            return getNodeCount1Callback.EndInvoke(result);
        }
        public static Task<System.Int32> GetNodeCountAsync(this System.Windows.Forms.TreeView __control__, System.Boolean includeSubTrees)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TreeView, System.Boolean>(
                (Func<System.Windows.Forms.TreeView, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginGetNodeCount1,
                (Func<IAsyncResult, System.Int32>)EndGetNodeCount1,
                __control__, includeSubTrees, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Drawing.Point, System.Windows.Forms.TreeNode> getNodeAt1Internal = (c, pt) => c.GetNodeAt(pt);
        public static System.Windows.Forms.TreeNode GetNodeAt(this System.Windows.Forms.TreeView __control__, System.Drawing.Point pt)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.TreeNode)__control__.Invoke(getNodeAt1Internal, __control__, pt);
            else
                return getNodeAt1Internal.Invoke(__control__, pt);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Drawing.Point, System.Windows.Forms.TreeNode> getNodeAt1Callback = GetNodeAt;
        public static IAsyncResult BeginGetNodeAt1(this System.Windows.Forms.TreeView __control__, System.Drawing.Point pt, AsyncCallback callback, object state)
        {
            return getNodeAt1Callback.BeginInvoke(__control__, pt, callback, state);
        }
        public static System.Windows.Forms.TreeNode EndGetNodeAt1(this System.Windows.Forms.TreeView __control__, IAsyncResult result)
        {
            return EndGetNodeAt1(result);
        }
        public static System.Windows.Forms.TreeNode EndGetNodeAt1(IAsyncResult result)
        {
            return getNodeAt1Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TreeNode> GetNodeAtAsync(this System.Windows.Forms.TreeView __control__, System.Drawing.Point pt)
        {
            return Task<System.Windows.Forms.TreeNode>.Factory.FromAsync<System.Windows.Forms.TreeView, System.Drawing.Point>(
                (Func<System.Windows.Forms.TreeView, System.Drawing.Point, AsyncCallback, object, IAsyncResult>)BeginGetNodeAt1,
                (Func<IAsyncResult, System.Windows.Forms.TreeNode>)EndGetNodeAt1,
                __control__, pt, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Int32, System.Int32, System.Windows.Forms.TreeNode> getNodeAt2Internal = (c, x, y) => c.GetNodeAt(x, y);
        public static System.Windows.Forms.TreeNode GetNodeAt(this System.Windows.Forms.TreeView __control__, System.Int32 x, System.Int32 y)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Windows.Forms.TreeNode)__control__.Invoke(getNodeAt2Internal, __control__, x, y);
            else
                return getNodeAt2Internal.Invoke(__control__, x, y);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Int32, System.Int32, System.Windows.Forms.TreeNode> getNodeAt2Callback = GetNodeAt;
        public static IAsyncResult BeginGetNodeAt2(this System.Windows.Forms.TreeView __control__, System.Int32 x, System.Int32 y, AsyncCallback callback, object state)
        {
            return getNodeAt2Callback.BeginInvoke(__control__, x, y, callback, state);
        }
        public static System.Windows.Forms.TreeNode EndGetNodeAt2(this System.Windows.Forms.TreeView __control__, IAsyncResult result)
        {
            return EndGetNodeAt2(result);
        }
        public static System.Windows.Forms.TreeNode EndGetNodeAt2(IAsyncResult result)
        {
            return getNodeAt2Callback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TreeNode> GetNodeAtAsync(this System.Windows.Forms.TreeView __control__, System.Int32 x, System.Int32 y)
        {
            return Task<System.Windows.Forms.TreeNode>.Factory.FromAsync<System.Windows.Forms.TreeView, System.Int32, System.Int32>(
                (Func<System.Windows.Forms.TreeView, System.Int32, System.Int32, AsyncCallback, object, IAsyncResult>)BeginGetNodeAt2,
                (Func<IAsyncResult, System.Windows.Forms.TreeNode>)EndGetNodeAt2,
                __control__, x, y, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.TreeView> sort4Internal = (c) => c.Sort();
        public static void Sort(this System.Windows.Forms.TreeView __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(sort4Internal, __control__);
            else
                sort4Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.TreeView> sort4Callback = Sort;
        public static IAsyncResult BeginSort4(this System.Windows.Forms.TreeView __control__, AsyncCallback callback, object state)
        {
            return sort4Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndSort4(this System.Windows.Forms.TreeView __control__, IAsyncResult result)
        {
            EndSort4(result);
        }
        public static void EndSort4(IAsyncResult result)
        {
            sort4Callback.EndInvoke(result);
        }
        public static Task SortAsync(this System.Windows.Forms.TreeView __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView>(
                (Func<System.Windows.Forms.TreeView, AsyncCallback, object, IAsyncResult>)BeginSort4,
                (Action<IAsyncResult>)EndSort4,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Int32> getIndentInternal = (x) => x.Indent;
        public static System.Int32 GetIndent(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getIndentInternal, target);
            else
                return getIndentInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Int32> getIndentCallback = GetIndent;
        public static IAsyncResult BeginGetIndent(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getIndentCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetIndent(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetIndent(result);
        }
        public static System.Int32 EndGetIndent(IAsyncResult result)
        {
            return getIndentCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetIndentAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetIndent,
                EndGetIndent,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.Int32> setIndentInternal = (x, v) => x.Indent = v;
        public static void SetIndent(this System.Windows.Forms.TreeView target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setIndentInternal, target, value);
            else
                setIndentInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.Int32> setIndentCallback = SetIndent;
        public static IAsyncResult BeginSetIndent(this System.Windows.Forms.TreeView target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setIndentCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetIndent(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetIndent(result);
        }
        public static void EndSetIndent(IAsyncResult result)
        {
            setIndentCallback.EndInvoke(result);
        }
        public static Task SetIndentAsync(this System.Windows.Forms.TreeView target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.Int32>(
                BeginSetIndent,
                EndSetIndent,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNodeCollection> getNodesInternal = (x) => x.Nodes;
        public static System.Windows.Forms.TreeNodeCollection GetNodes(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TreeNodeCollection)target.Invoke(getNodesInternal, target);
            else
                return getNodesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNodeCollection> getNodesCallback = GetNodes;
        public static IAsyncResult BeginGetNodes(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getNodesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TreeNodeCollection EndGetNodes(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetNodes(result);
        }
        public static System.Windows.Forms.TreeNodeCollection EndGetNodes(IAsyncResult result)
        {
            return getNodesCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TreeNodeCollection> GetNodesAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Windows.Forms.TreeNodeCollection>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetNodes,
                EndGetNodes,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.String> getPathSeparatorInternal = (x) => x.PathSeparator;
        public static System.String GetPathSeparator(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getPathSeparatorInternal, target);
            else
                return getPathSeparatorInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.String> getPathSeparatorCallback = GetPathSeparator;
        public static IAsyncResult BeginGetPathSeparator(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getPathSeparatorCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetPathSeparator(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetPathSeparator(result);
        }
        public static System.String EndGetPathSeparator(IAsyncResult result)
        {
            return getPathSeparatorCallback.EndInvoke(result);
        }
        public static Task<System.String> GetPathSeparatorAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetPathSeparator,
                EndGetPathSeparator,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.String> setPathSeparatorInternal = (x, v) => x.PathSeparator = v;
        public static void SetPathSeparator(this System.Windows.Forms.TreeView target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setPathSeparatorInternal, target, value);
            else
                setPathSeparatorInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.String> setPathSeparatorCallback = SetPathSeparator;
        public static IAsyncResult BeginSetPathSeparator(this System.Windows.Forms.TreeView target, System.String value, AsyncCallback callback, object state)
        {
            return setPathSeparatorCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetPathSeparator(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetPathSeparator(result);
        }
        public static void EndSetPathSeparator(IAsyncResult result)
        {
            setPathSeparatorCallback.EndInvoke(result);
        }
        public static Task SetPathSeparatorAsync(this System.Windows.Forms.TreeView target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.String>(
                BeginSetPathSeparator,
                EndSetPathSeparator,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Int32> getSelectedImageIndexInternal = (x) => x.SelectedImageIndex;
        public static System.Int32 GetSelectedImageIndex(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getSelectedImageIndexInternal, target);
            else
                return getSelectedImageIndexInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Int32> getSelectedImageIndexCallback = GetSelectedImageIndex;
        public static IAsyncResult BeginGetSelectedImageIndex(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getSelectedImageIndexCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetSelectedImageIndex(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetSelectedImageIndex(result);
        }
        public static System.Int32 EndGetSelectedImageIndex(IAsyncResult result)
        {
            return getSelectedImageIndexCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetSelectedImageIndexAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetSelectedImageIndex,
                EndGetSelectedImageIndex,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.Int32> setSelectedImageIndexInternal = (x, v) => x.SelectedImageIndex = v;
        public static void SetSelectedImageIndex(this System.Windows.Forms.TreeView target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedImageIndexInternal, target, value);
            else
                setSelectedImageIndexInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.Int32> setSelectedImageIndexCallback = SetSelectedImageIndex;
        public static IAsyncResult BeginSetSelectedImageIndex(this System.Windows.Forms.TreeView target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setSelectedImageIndexCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedImageIndex(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetSelectedImageIndex(result);
        }
        public static void EndSetSelectedImageIndex(IAsyncResult result)
        {
            setSelectedImageIndexCallback.EndInvoke(result);
        }
        public static Task SetSelectedImageIndexAsync(this System.Windows.Forms.TreeView target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.Int32>(
                BeginSetSelectedImageIndex,
                EndSetSelectedImageIndex,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.String> getSelectedImageKeyInternal = (x) => x.SelectedImageKey;
        public static System.String GetSelectedImageKey(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getSelectedImageKeyInternal, target);
            else
                return getSelectedImageKeyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.String> getSelectedImageKeyCallback = GetSelectedImageKey;
        public static IAsyncResult BeginGetSelectedImageKey(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getSelectedImageKeyCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetSelectedImageKey(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetSelectedImageKey(result);
        }
        public static System.String EndGetSelectedImageKey(IAsyncResult result)
        {
            return getSelectedImageKeyCallback.EndInvoke(result);
        }
        public static Task<System.String> GetSelectedImageKeyAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetSelectedImageKey,
                EndGetSelectedImageKey,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.String> setSelectedImageKeyInternal = (x, v) => x.SelectedImageKey = v;
        public static void SetSelectedImageKey(this System.Windows.Forms.TreeView target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedImageKeyInternal, target, value);
            else
                setSelectedImageKeyInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.String> setSelectedImageKeyCallback = SetSelectedImageKey;
        public static IAsyncResult BeginSetSelectedImageKey(this System.Windows.Forms.TreeView target, System.String value, AsyncCallback callback, object state)
        {
            return setSelectedImageKeyCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedImageKey(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetSelectedImageKey(result);
        }
        public static void EndSetSelectedImageKey(IAsyncResult result)
        {
            setSelectedImageKeyCallback.EndInvoke(result);
        }
        public static Task SetSelectedImageKeyAsync(this System.Windows.Forms.TreeView target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.String>(
                BeginSetSelectedImageKey,
                EndSetSelectedImageKey,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode> getSelectedNodeInternal = (x) => x.SelectedNode;
        public static System.Windows.Forms.TreeNode GetSelectedNode(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TreeNode)target.Invoke(getSelectedNodeInternal, target);
            else
                return getSelectedNodeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode> getSelectedNodeCallback = GetSelectedNode;
        public static IAsyncResult BeginGetSelectedNode(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getSelectedNodeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TreeNode EndGetSelectedNode(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetSelectedNode(result);
        }
        public static System.Windows.Forms.TreeNode EndGetSelectedNode(IAsyncResult result)
        {
            return getSelectedNodeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TreeNode> GetSelectedNodeAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Windows.Forms.TreeNode>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetSelectedNode,
                EndGetSelectedNode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode> setSelectedNodeInternal = (x, v) => x.SelectedNode = v;
        public static void SetSelectedNode(this System.Windows.Forms.TreeView target, System.Windows.Forms.TreeNode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setSelectedNodeInternal, target, value);
            else
                setSelectedNodeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode> setSelectedNodeCallback = SetSelectedNode;
        public static IAsyncResult BeginSetSelectedNode(this System.Windows.Forms.TreeView target, System.Windows.Forms.TreeNode value, AsyncCallback callback, object state)
        {
            return setSelectedNodeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetSelectedNode(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetSelectedNode(result);
        }
        public static void EndSetSelectedNode(IAsyncResult result)
        {
            setSelectedNodeCallback.EndInvoke(result);
        }
        public static Task SetSelectedNodeAsync(this System.Windows.Forms.TreeView target, System.Windows.Forms.TreeNode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode>(
                BeginSetSelectedNode,
                EndSetSelectedNode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean> getShowLinesInternal = (x) => x.ShowLines;
        public static System.Boolean GetShowLines(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowLinesInternal, target);
            else
                return getShowLinesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean> getShowLinesCallback = GetShowLines;
        public static IAsyncResult BeginGetShowLines(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getShowLinesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowLines(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetShowLines(result);
        }
        public static System.Boolean EndGetShowLines(IAsyncResult result)
        {
            return getShowLinesCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowLinesAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetShowLines,
                EndGetShowLines,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.Boolean> setShowLinesInternal = (x, v) => x.ShowLines = v;
        public static void SetShowLines(this System.Windows.Forms.TreeView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowLinesInternal, target, value);
            else
                setShowLinesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.Boolean> setShowLinesCallback = SetShowLines;
        public static IAsyncResult BeginSetShowLines(this System.Windows.Forms.TreeView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowLinesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowLines(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetShowLines(result);
        }
        public static void EndSetShowLines(IAsyncResult result)
        {
            setShowLinesCallback.EndInvoke(result);
        }
        public static Task SetShowLinesAsync(this System.Windows.Forms.TreeView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.Boolean>(
                BeginSetShowLines,
                EndSetShowLines,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean> getShowNodeToolTipsInternal = (x) => x.ShowNodeToolTips;
        public static System.Boolean GetShowNodeToolTips(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowNodeToolTipsInternal, target);
            else
                return getShowNodeToolTipsInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean> getShowNodeToolTipsCallback = GetShowNodeToolTips;
        public static IAsyncResult BeginGetShowNodeToolTips(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getShowNodeToolTipsCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowNodeToolTips(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetShowNodeToolTips(result);
        }
        public static System.Boolean EndGetShowNodeToolTips(IAsyncResult result)
        {
            return getShowNodeToolTipsCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowNodeToolTipsAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetShowNodeToolTips,
                EndGetShowNodeToolTips,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.Boolean> setShowNodeToolTipsInternal = (x, v) => x.ShowNodeToolTips = v;
        public static void SetShowNodeToolTips(this System.Windows.Forms.TreeView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowNodeToolTipsInternal, target, value);
            else
                setShowNodeToolTipsInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.Boolean> setShowNodeToolTipsCallback = SetShowNodeToolTips;
        public static IAsyncResult BeginSetShowNodeToolTips(this System.Windows.Forms.TreeView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowNodeToolTipsCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowNodeToolTips(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetShowNodeToolTips(result);
        }
        public static void EndSetShowNodeToolTips(IAsyncResult result)
        {
            setShowNodeToolTipsCallback.EndInvoke(result);
        }
        public static Task SetShowNodeToolTipsAsync(this System.Windows.Forms.TreeView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.Boolean>(
                BeginSetShowNodeToolTips,
                EndSetShowNodeToolTips,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean> getShowPlusMinusInternal = (x) => x.ShowPlusMinus;
        public static System.Boolean GetShowPlusMinus(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowPlusMinusInternal, target);
            else
                return getShowPlusMinusInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean> getShowPlusMinusCallback = GetShowPlusMinus;
        public static IAsyncResult BeginGetShowPlusMinus(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getShowPlusMinusCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowPlusMinus(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetShowPlusMinus(result);
        }
        public static System.Boolean EndGetShowPlusMinus(IAsyncResult result)
        {
            return getShowPlusMinusCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowPlusMinusAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetShowPlusMinus,
                EndGetShowPlusMinus,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.Boolean> setShowPlusMinusInternal = (x, v) => x.ShowPlusMinus = v;
        public static void SetShowPlusMinus(this System.Windows.Forms.TreeView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowPlusMinusInternal, target, value);
            else
                setShowPlusMinusInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.Boolean> setShowPlusMinusCallback = SetShowPlusMinus;
        public static IAsyncResult BeginSetShowPlusMinus(this System.Windows.Forms.TreeView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowPlusMinusCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowPlusMinus(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetShowPlusMinus(result);
        }
        public static void EndSetShowPlusMinus(IAsyncResult result)
        {
            setShowPlusMinusCallback.EndInvoke(result);
        }
        public static Task SetShowPlusMinusAsync(this System.Windows.Forms.TreeView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.Boolean>(
                BeginSetShowPlusMinus,
                EndSetShowPlusMinus,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean> getShowRootLinesInternal = (x) => x.ShowRootLines;
        public static System.Boolean GetShowRootLines(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getShowRootLinesInternal, target);
            else
                return getShowRootLinesInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Boolean> getShowRootLinesCallback = GetShowRootLines;
        public static IAsyncResult BeginGetShowRootLines(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getShowRootLinesCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetShowRootLines(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetShowRootLines(result);
        }
        public static System.Boolean EndGetShowRootLines(IAsyncResult result)
        {
            return getShowRootLinesCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetShowRootLinesAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetShowRootLines,
                EndGetShowRootLines,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.Boolean> setShowRootLinesInternal = (x, v) => x.ShowRootLines = v;
        public static void SetShowRootLines(this System.Windows.Forms.TreeView target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setShowRootLinesInternal, target, value);
            else
                setShowRootLinesInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.Boolean> setShowRootLinesCallback = SetShowRootLines;
        public static IAsyncResult BeginSetShowRootLines(this System.Windows.Forms.TreeView target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setShowRootLinesCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetShowRootLines(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetShowRootLines(result);
        }
        public static void EndSetShowRootLines(IAsyncResult result)
        {
            setShowRootLinesCallback.EndInvoke(result);
        }
        public static Task SetShowRootLinesAsync(this System.Windows.Forms.TreeView target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.Boolean>(
                BeginSetShowRootLines,
                EndSetShowRootLines,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Collections.IComparer> getTreeViewNodeSorterInternal = (x) => x.TreeViewNodeSorter;
        public static System.Collections.IComparer GetTreeViewNodeSorter(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Collections.IComparer)target.Invoke(getTreeViewNodeSorterInternal, target);
            else
                return getTreeViewNodeSorterInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Collections.IComparer> getTreeViewNodeSorterCallback = GetTreeViewNodeSorter;
        public static IAsyncResult BeginGetTreeViewNodeSorter(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getTreeViewNodeSorterCallback.BeginInvoke(target, callback, state);
        }
        public static System.Collections.IComparer EndGetTreeViewNodeSorter(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetTreeViewNodeSorter(result);
        }
        public static System.Collections.IComparer EndGetTreeViewNodeSorter(IAsyncResult result)
        {
            return getTreeViewNodeSorterCallback.EndInvoke(result);
        }
        public static Task<System.Collections.IComparer> GetTreeViewNodeSorterAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Collections.IComparer>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetTreeViewNodeSorter,
                EndGetTreeViewNodeSorter,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.Collections.IComparer> setTreeViewNodeSorterInternal = (x, v) => x.TreeViewNodeSorter = v;
        public static void SetTreeViewNodeSorter(this System.Windows.Forms.TreeView target, System.Collections.IComparer value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTreeViewNodeSorterInternal, target, value);
            else
                setTreeViewNodeSorterInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.Collections.IComparer> setTreeViewNodeSorterCallback = SetTreeViewNodeSorter;
        public static IAsyncResult BeginSetTreeViewNodeSorter(this System.Windows.Forms.TreeView target, System.Collections.IComparer value, AsyncCallback callback, object state)
        {
            return setTreeViewNodeSorterCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTreeViewNodeSorter(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetTreeViewNodeSorter(result);
        }
        public static void EndSetTreeViewNodeSorter(IAsyncResult result)
        {
            setTreeViewNodeSorterCallback.EndInvoke(result);
        }
        public static Task SetTreeViewNodeSorterAsync(this System.Windows.Forms.TreeView target, System.Collections.IComparer value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.Collections.IComparer>(
                BeginSetTreeViewNodeSorter,
                EndSetTreeViewNodeSorter,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode> getTopNodeInternal = (x) => x.TopNode;
        public static System.Windows.Forms.TreeNode GetTopNode(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.TreeNode)target.Invoke(getTopNodeInternal, target);
            else
                return getTopNodeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode> getTopNodeCallback = GetTopNode;
        public static IAsyncResult BeginGetTopNode(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getTopNodeCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.TreeNode EndGetTopNode(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetTopNode(result);
        }
        public static System.Windows.Forms.TreeNode EndGetTopNode(IAsyncResult result)
        {
            return getTopNodeCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.TreeNode> GetTopNodeAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Windows.Forms.TreeNode>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetTopNode,
                EndGetTopNode,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode> setTopNodeInternal = (x, v) => x.TopNode = v;
        public static void SetTopNode(this System.Windows.Forms.TreeView target, System.Windows.Forms.TreeNode value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setTopNodeInternal, target, value);
            else
                setTopNodeInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode> setTopNodeCallback = SetTopNode;
        public static IAsyncResult BeginSetTopNode(this System.Windows.Forms.TreeView target, System.Windows.Forms.TreeNode value, AsyncCallback callback, object state)
        {
            return setTopNodeCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetTopNode(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            EndSetTopNode(result);
        }
        public static void EndSetTopNode(IAsyncResult result)
        {
            setTopNodeCallback.EndInvoke(result);
        }
        public static Task SetTopNodeAsync(this System.Windows.Forms.TreeView target, System.Windows.Forms.TreeNode value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.TreeView, System.Windows.Forms.TreeNode>(
                BeginSetTopNode,
                EndSetTopNode,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.TreeView, System.Int32> getVisibleCountInternal = (x) => x.VisibleCount;
        public static System.Int32 GetVisibleCount(this System.Windows.Forms.TreeView target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getVisibleCountInternal, target);
            else
                return getVisibleCountInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.TreeView, System.Int32> getVisibleCountCallback = GetVisibleCount;
        public static IAsyncResult BeginGetVisibleCount(this System.Windows.Forms.TreeView target, AsyncCallback callback, object state)
        {
            return getVisibleCountCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetVisibleCount(this System.Windows.Forms.TreeView target, IAsyncResult result)
        {
            return EndGetVisibleCount(result);
        }
        public static System.Int32 EndGetVisibleCount(IAsyncResult result)
        {
            return getVisibleCountCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetVisibleCountAsync(this System.Windows.Forms.TreeView target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.TreeView>(
                BeginGetVisibleCount,
                EndGetVisibleCount,
                target, null);
        }


        private static readonly Action<System.Windows.Forms.WebBrowserBase, System.Drawing.Bitmap, System.Drawing.Rectangle> drawToBitmap4Internal = (c, bitmap, targetBounds) => c.DrawToBitmap(bitmap, targetBounds);
        public static void DrawToBitmap(this System.Windows.Forms.WebBrowserBase __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(drawToBitmap4Internal, __control__, bitmap, targetBounds);
            else
                drawToBitmap4Internal.Invoke(__control__, bitmap, targetBounds);
        }
        private static readonly Action<System.Windows.Forms.WebBrowserBase, System.Drawing.Bitmap, System.Drawing.Rectangle> drawToBitmap4Callback = DrawToBitmap;
        public static IAsyncResult BeginDrawToBitmap4(this System.Windows.Forms.WebBrowserBase __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds, AsyncCallback callback, object state)
        {
            return drawToBitmap4Callback.BeginInvoke(__control__, bitmap, targetBounds, callback, state);
        }
        public static void EndDrawToBitmap4(this System.Windows.Forms.WebBrowserBase __control__, IAsyncResult result)
        {
            EndDrawToBitmap4(result);
        }
        public static void EndDrawToBitmap4(IAsyncResult result)
        {
            drawToBitmap4Callback.EndInvoke(result);
        }
        public static Task DrawToBitmapAsync(this System.Windows.Forms.WebBrowserBase __control__, System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowserBase, System.Drawing.Bitmap, System.Drawing.Rectangle>(
                (Func<System.Windows.Forms.WebBrowserBase, System.Drawing.Bitmap, System.Drawing.Rectangle, AsyncCallback, object, IAsyncResult>)BeginDrawToBitmap4,
                (Action<IAsyncResult>)EndDrawToBitmap4,
                __control__, bitmap, targetBounds, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.WebBrowserBase, System.Object> getActiveXInstanceInternal = (x) => x.ActiveXInstance;
        public static System.Object GetActiveXInstance(this System.Windows.Forms.WebBrowserBase target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Object)target.Invoke(getActiveXInstanceInternal, target);
            else
                return getActiveXInstanceInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowserBase, System.Object> getActiveXInstanceCallback = GetActiveXInstance;
        public static IAsyncResult BeginGetActiveXInstance(this System.Windows.Forms.WebBrowserBase target, AsyncCallback callback, object state)
        {
            return getActiveXInstanceCallback.BeginInvoke(target, callback, state);
        }
        public static System.Object EndGetActiveXInstance(this System.Windows.Forms.WebBrowserBase target, IAsyncResult result)
        {
            return EndGetActiveXInstance(result);
        }
        public static System.Object EndGetActiveXInstance(IAsyncResult result)
        {
            return getActiveXInstanceCallback.EndInvoke(result);
        }
        public static Task<System.Object> GetActiveXInstanceAsync(this System.Windows.Forms.WebBrowserBase target)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.WebBrowserBase>(
                BeginGetActiveXInstance,
                EndGetActiveXInstance,
                target, null);
        }


        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> goBack1Internal = (c) => c.GoBack();
        public static System.Boolean GoBack(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(goBack1Internal, __control__);
            else
                return goBack1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> goBack1Callback = GoBack;
        public static IAsyncResult BeginGoBack1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return goBack1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndGoBack1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            return EndGoBack1(result);
        }
        public static System.Boolean EndGoBack1(IAsyncResult result)
        {
            return goBack1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> GoBackAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginGoBack1,
                (Func<IAsyncResult, System.Boolean>)EndGoBack1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> goForward1Internal = (c) => c.GoForward();
        public static System.Boolean GoForward(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                return (System.Boolean)__control__.Invoke(goForward1Internal, __control__);
            else
                return goForward1Internal.Invoke(__control__);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> goForward1Callback = GoForward;
        public static IAsyncResult BeginGoForward1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return goForward1Callback.BeginInvoke(__control__, callback, state);
        }
        public static System.Boolean EndGoForward1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            return EndGoForward1(result);
        }
        public static System.Boolean EndGoForward1(IAsyncResult result)
        {
            return goForward1Callback.EndInvoke(result);
        }
        public static Task<System.Boolean> GoForwardAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginGoForward1,
                (Func<IAsyncResult, System.Boolean>)EndGoForward1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> goHome1Internal = (c) => c.GoHome();
        public static void GoHome(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(goHome1Internal, __control__);
            else
                goHome1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> goHome1Callback = GoHome;
        public static IAsyncResult BeginGoHome1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return goHome1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndGoHome1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndGoHome1(result);
        }
        public static void EndGoHome1(IAsyncResult result)
        {
            goHome1Callback.EndInvoke(result);
        }
        public static Task GoHomeAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginGoHome1,
                (Action<IAsyncResult>)EndGoHome1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> goSearch1Internal = (c) => c.GoSearch();
        public static void GoSearch(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(goSearch1Internal, __control__);
            else
                goSearch1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> goSearch1Callback = GoSearch;
        public static IAsyncResult BeginGoSearch1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return goSearch1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndGoSearch1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndGoSearch1(result);
        }
        public static void EndGoSearch1(IAsyncResult result)
        {
            goSearch1Callback.EndInvoke(result);
        }
        public static Task GoSearchAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginGoSearch1,
                (Action<IAsyncResult>)EndGoSearch1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri> navigate1Internal = (c, url) => c.Navigate(url);
        public static void Navigate(this System.Windows.Forms.WebBrowser __control__, System.Uri url)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigate1Internal, __control__, url);
            else
                navigate1Internal.Invoke(__control__, url);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri> navigate1Callback = Navigate;
        public static IAsyncResult BeginNavigate1(this System.Windows.Forms.WebBrowser __control__, System.Uri url, AsyncCallback callback, object state)
        {
            return navigate1Callback.BeginInvoke(__control__, url, callback, state);
        }
        public static void EndNavigate1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndNavigate1(result);
        }
        public static void EndNavigate1(IAsyncResult result)
        {
            navigate1Callback.EndInvoke(result);
        }
        public static Task NavigateAsync(this System.Windows.Forms.WebBrowser __control__, System.Uri url)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Uri>(
                (Func<System.Windows.Forms.WebBrowser, System.Uri, AsyncCallback, object, IAsyncResult>)BeginNavigate1,
                (Action<IAsyncResult>)EndNavigate1,
                __control__, url, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.String> navigate2Internal = (c, urlString) => c.Navigate(urlString);
        public static void Navigate(this System.Windows.Forms.WebBrowser __control__, System.String urlString)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigate2Internal, __control__, urlString);
            else
                navigate2Internal.Invoke(__control__, urlString);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.String> navigate2Callback = Navigate;
        public static IAsyncResult BeginNavigate2(this System.Windows.Forms.WebBrowser __control__, System.String urlString, AsyncCallback callback, object state)
        {
            return navigate2Callback.BeginInvoke(__control__, urlString, callback, state);
        }
        public static void EndNavigate2(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndNavigate2(result);
        }
        public static void EndNavigate2(IAsyncResult result)
        {
            navigate2Callback.EndInvoke(result);
        }
        public static Task NavigateAsync(this System.Windows.Forms.WebBrowser __control__, System.String urlString)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.String>(
                (Func<System.Windows.Forms.WebBrowser, System.String, AsyncCallback, object, IAsyncResult>)BeginNavigate2,
                (Action<IAsyncResult>)EndNavigate2,
                __control__, urlString, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri, System.String> navigate3Internal = (c, url, targetFrameName) => c.Navigate(url, targetFrameName);
        public static void Navigate(this System.Windows.Forms.WebBrowser __control__, System.Uri url, System.String targetFrameName)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigate3Internal, __control__, url, targetFrameName);
            else
                navigate3Internal.Invoke(__control__, url, targetFrameName);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri, System.String> navigate3Callback = Navigate;
        public static IAsyncResult BeginNavigate3(this System.Windows.Forms.WebBrowser __control__, System.Uri url, System.String targetFrameName, AsyncCallback callback, object state)
        {
            return navigate3Callback.BeginInvoke(__control__, url, targetFrameName, callback, state);
        }
        public static void EndNavigate3(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndNavigate3(result);
        }
        public static void EndNavigate3(IAsyncResult result)
        {
            navigate3Callback.EndInvoke(result);
        }
        public static Task NavigateAsync(this System.Windows.Forms.WebBrowser __control__, System.Uri url, System.String targetFrameName)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Uri, System.String>(
                (Func<System.Windows.Forms.WebBrowser, System.Uri, System.String, AsyncCallback, object, IAsyncResult>)BeginNavigate3,
                (Action<IAsyncResult>)EndNavigate3,
                __control__, url, targetFrameName, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.String, System.String> navigate4Internal = (c, urlString, targetFrameName) => c.Navigate(urlString, targetFrameName);
        public static void Navigate(this System.Windows.Forms.WebBrowser __control__, System.String urlString, System.String targetFrameName)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigate4Internal, __control__, urlString, targetFrameName);
            else
                navigate4Internal.Invoke(__control__, urlString, targetFrameName);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.String, System.String> navigate4Callback = Navigate;
        public static IAsyncResult BeginNavigate4(this System.Windows.Forms.WebBrowser __control__, System.String urlString, System.String targetFrameName, AsyncCallback callback, object state)
        {
            return navigate4Callback.BeginInvoke(__control__, urlString, targetFrameName, callback, state);
        }
        public static void EndNavigate4(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndNavigate4(result);
        }
        public static void EndNavigate4(IAsyncResult result)
        {
            navigate4Callback.EndInvoke(result);
        }
        public static Task NavigateAsync(this System.Windows.Forms.WebBrowser __control__, System.String urlString, System.String targetFrameName)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.String, System.String>(
                (Func<System.Windows.Forms.WebBrowser, System.String, System.String, AsyncCallback, object, IAsyncResult>)BeginNavigate4,
                (Action<IAsyncResult>)EndNavigate4,
                __control__, urlString, targetFrameName, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri, System.Boolean> navigate5Internal = (c, url, newWindow) => c.Navigate(url, newWindow);
        public static void Navigate(this System.Windows.Forms.WebBrowser __control__, System.Uri url, System.Boolean newWindow)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigate5Internal, __control__, url, newWindow);
            else
                navigate5Internal.Invoke(__control__, url, newWindow);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri, System.Boolean> navigate5Callback = Navigate;
        public static IAsyncResult BeginNavigate5(this System.Windows.Forms.WebBrowser __control__, System.Uri url, System.Boolean newWindow, AsyncCallback callback, object state)
        {
            return navigate5Callback.BeginInvoke(__control__, url, newWindow, callback, state);
        }
        public static void EndNavigate5(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndNavigate5(result);
        }
        public static void EndNavigate5(IAsyncResult result)
        {
            navigate5Callback.EndInvoke(result);
        }
        public static Task NavigateAsync(this System.Windows.Forms.WebBrowser __control__, System.Uri url, System.Boolean newWindow)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Uri, System.Boolean>(
                (Func<System.Windows.Forms.WebBrowser, System.Uri, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginNavigate5,
                (Action<IAsyncResult>)EndNavigate5,
                __control__, url, newWindow, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.String, System.Boolean> navigate6Internal = (c, urlString, newWindow) => c.Navigate(urlString, newWindow);
        public static void Navigate(this System.Windows.Forms.WebBrowser __control__, System.String urlString, System.Boolean newWindow)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigate6Internal, __control__, urlString, newWindow);
            else
                navigate6Internal.Invoke(__control__, urlString, newWindow);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.String, System.Boolean> navigate6Callback = Navigate;
        public static IAsyncResult BeginNavigate6(this System.Windows.Forms.WebBrowser __control__, System.String urlString, System.Boolean newWindow, AsyncCallback callback, object state)
        {
            return navigate6Callback.BeginInvoke(__control__, urlString, newWindow, callback, state);
        }
        public static void EndNavigate6(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndNavigate6(result);
        }
        public static void EndNavigate6(IAsyncResult result)
        {
            navigate6Callback.EndInvoke(result);
        }
        public static Task NavigateAsync(this System.Windows.Forms.WebBrowser __control__, System.String urlString, System.Boolean newWindow)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.String, System.Boolean>(
                (Func<System.Windows.Forms.WebBrowser, System.String, System.Boolean, AsyncCallback, object, IAsyncResult>)BeginNavigate6,
                (Action<IAsyncResult>)EndNavigate6,
                __control__, urlString, newWindow, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri, System.String, System.Byte[], System.String> navigate7Internal = (c, url, targetFrameName, postData, additionalHeaders) => c.Navigate(url, targetFrameName, postData, additionalHeaders);
        public static void Navigate(this System.Windows.Forms.WebBrowser __control__, System.Uri url, System.String targetFrameName, System.Byte[] postData, System.String additionalHeaders)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigate7Internal, __control__, url, targetFrameName, postData, additionalHeaders);
            else
                navigate7Internal.Invoke(__control__, url, targetFrameName, postData, additionalHeaders);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri, System.String, System.Byte[], System.String> navigate7Callback = Navigate;
        public static IAsyncResult BeginNavigate7(this System.Windows.Forms.WebBrowser __control__, System.Uri url, System.String targetFrameName, System.Byte[] postData, System.String additionalHeaders, AsyncCallback callback, object state)
        {
            return navigate7Callback.BeginInvoke(__control__, url, targetFrameName, postData, additionalHeaders, callback, state);
        }
        public static void EndNavigate7(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndNavigate7(result);
        }
        public static void EndNavigate7(IAsyncResult result)
        {
            navigate7Callback.EndInvoke(result);
        }
        public static Task NavigateAsync(this System.Windows.Forms.WebBrowser __control__, System.Uri url, System.String targetFrameName, System.Byte[] postData, System.String additionalHeaders)
        {
            return Task.Factory.FromAsync(
                BeginNavigate7(__control__, url, targetFrameName, postData, additionalHeaders, null, null),
                (Action<IAsyncResult>)EndNavigate7);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.String, System.String, System.Byte[], System.String> navigate8Internal = (c, urlString, targetFrameName, postData, additionalHeaders) => c.Navigate(urlString, targetFrameName, postData, additionalHeaders);
        public static void Navigate(this System.Windows.Forms.WebBrowser __control__, System.String urlString, System.String targetFrameName, System.Byte[] postData, System.String additionalHeaders)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(navigate8Internal, __control__, urlString, targetFrameName, postData, additionalHeaders);
            else
                navigate8Internal.Invoke(__control__, urlString, targetFrameName, postData, additionalHeaders);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.String, System.String, System.Byte[], System.String> navigate8Callback = Navigate;
        public static IAsyncResult BeginNavigate8(this System.Windows.Forms.WebBrowser __control__, System.String urlString, System.String targetFrameName, System.Byte[] postData, System.String additionalHeaders, AsyncCallback callback, object state)
        {
            return navigate8Callback.BeginInvoke(__control__, urlString, targetFrameName, postData, additionalHeaders, callback, state);
        }
        public static void EndNavigate8(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndNavigate8(result);
        }
        public static void EndNavigate8(IAsyncResult result)
        {
            navigate8Callback.EndInvoke(result);
        }
        public static Task NavigateAsync(this System.Windows.Forms.WebBrowser __control__, System.String urlString, System.String targetFrameName, System.Byte[] postData, System.String additionalHeaders)
        {
            return Task.Factory.FromAsync(
                BeginNavigate8(__control__, urlString, targetFrameName, postData, additionalHeaders, null, null),
                (Action<IAsyncResult>)EndNavigate8);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> print1Internal = (c) => c.Print();
        public static void Print(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(print1Internal, __control__);
            else
                print1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> print1Callback = Print;
        public static IAsyncResult BeginPrint1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return print1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndPrint1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndPrint1(result);
        }
        public static void EndPrint1(IAsyncResult result)
        {
            print1Callback.EndInvoke(result);
        }
        public static Task PrintAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginPrint1,
                (Action<IAsyncResult>)EndPrint1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> refresh4Internal = (c) => c.Refresh();
        public static void Refresh(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(refresh4Internal, __control__);
            else
                refresh4Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> refresh4Callback = Refresh;
        public static IAsyncResult BeginRefresh4(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return refresh4Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndRefresh4(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndRefresh4(result);
        }
        public static void EndRefresh4(IAsyncResult result)
        {
            refresh4Callback.EndInvoke(result);
        }
        public static Task RefreshAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginRefresh4,
                (Action<IAsyncResult>)EndRefresh4,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Windows.Forms.WebBrowserRefreshOption> refresh5Internal = (c, opt) => c.Refresh(opt);
        public static void Refresh(this System.Windows.Forms.WebBrowser __control__, System.Windows.Forms.WebBrowserRefreshOption opt)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(refresh5Internal, __control__, opt);
            else
                refresh5Internal.Invoke(__control__, opt);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Windows.Forms.WebBrowserRefreshOption> refresh5Callback = Refresh;
        public static IAsyncResult BeginRefresh5(this System.Windows.Forms.WebBrowser __control__, System.Windows.Forms.WebBrowserRefreshOption opt, AsyncCallback callback, object state)
        {
            return refresh5Callback.BeginInvoke(__control__, opt, callback, state);
        }
        public static void EndRefresh5(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndRefresh5(result);
        }
        public static void EndRefresh5(IAsyncResult result)
        {
            refresh5Callback.EndInvoke(result);
        }
        public static Task RefreshAsync(this System.Windows.Forms.WebBrowser __control__, System.Windows.Forms.WebBrowserRefreshOption opt)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Windows.Forms.WebBrowserRefreshOption>(
                (Func<System.Windows.Forms.WebBrowser, System.Windows.Forms.WebBrowserRefreshOption, AsyncCallback, object, IAsyncResult>)BeginRefresh5,
                (Action<IAsyncResult>)EndRefresh5,
                __control__, opt, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> showPageSetupDialog1Internal = (c) => c.ShowPageSetupDialog();
        public static void ShowPageSetupDialog(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(showPageSetupDialog1Internal, __control__);
            else
                showPageSetupDialog1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> showPageSetupDialog1Callback = ShowPageSetupDialog;
        public static IAsyncResult BeginShowPageSetupDialog1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return showPageSetupDialog1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShowPageSetupDialog1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndShowPageSetupDialog1(result);
        }
        public static void EndShowPageSetupDialog1(IAsyncResult result)
        {
            showPageSetupDialog1Callback.EndInvoke(result);
        }
        public static Task ShowPageSetupDialogAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginShowPageSetupDialog1,
                (Action<IAsyncResult>)EndShowPageSetupDialog1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> showPrintDialog1Internal = (c) => c.ShowPrintDialog();
        public static void ShowPrintDialog(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(showPrintDialog1Internal, __control__);
            else
                showPrintDialog1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> showPrintDialog1Callback = ShowPrintDialog;
        public static IAsyncResult BeginShowPrintDialog1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return showPrintDialog1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShowPrintDialog1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndShowPrintDialog1(result);
        }
        public static void EndShowPrintDialog1(IAsyncResult result)
        {
            showPrintDialog1Callback.EndInvoke(result);
        }
        public static Task ShowPrintDialogAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginShowPrintDialog1,
                (Action<IAsyncResult>)EndShowPrintDialog1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> showPrintPreviewDialog1Internal = (c) => c.ShowPrintPreviewDialog();
        public static void ShowPrintPreviewDialog(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(showPrintPreviewDialog1Internal, __control__);
            else
                showPrintPreviewDialog1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> showPrintPreviewDialog1Callback = ShowPrintPreviewDialog;
        public static IAsyncResult BeginShowPrintPreviewDialog1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return showPrintPreviewDialog1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShowPrintPreviewDialog1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndShowPrintPreviewDialog1(result);
        }
        public static void EndShowPrintPreviewDialog1(IAsyncResult result)
        {
            showPrintPreviewDialog1Callback.EndInvoke(result);
        }
        public static Task ShowPrintPreviewDialogAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginShowPrintPreviewDialog1,
                (Action<IAsyncResult>)EndShowPrintPreviewDialog1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> showPropertiesDialog1Internal = (c) => c.ShowPropertiesDialog();
        public static void ShowPropertiesDialog(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(showPropertiesDialog1Internal, __control__);
            else
                showPropertiesDialog1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> showPropertiesDialog1Callback = ShowPropertiesDialog;
        public static IAsyncResult BeginShowPropertiesDialog1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return showPropertiesDialog1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShowPropertiesDialog1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndShowPropertiesDialog1(result);
        }
        public static void EndShowPropertiesDialog1(IAsyncResult result)
        {
            showPropertiesDialog1Callback.EndInvoke(result);
        }
        public static Task ShowPropertiesDialogAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginShowPropertiesDialog1,
                (Action<IAsyncResult>)EndShowPropertiesDialog1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> showSaveAsDialog1Internal = (c) => c.ShowSaveAsDialog();
        public static void ShowSaveAsDialog(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(showSaveAsDialog1Internal, __control__);
            else
                showSaveAsDialog1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> showSaveAsDialog1Callback = ShowSaveAsDialog;
        public static IAsyncResult BeginShowSaveAsDialog1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return showSaveAsDialog1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndShowSaveAsDialog1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndShowSaveAsDialog1(result);
        }
        public static void EndShowSaveAsDialog1(IAsyncResult result)
        {
            showSaveAsDialog1Callback.EndInvoke(result);
        }
        public static Task ShowSaveAsDialogAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginShowSaveAsDialog1,
                (Action<IAsyncResult>)EndShowSaveAsDialog1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser> stop1Internal = (c) => c.Stop();
        public static void Stop(this System.Windows.Forms.WebBrowser __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(stop1Internal, __control__);
            else
                stop1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser> stop1Callback = Stop;
        public static IAsyncResult BeginStop1(this System.Windows.Forms.WebBrowser __control__, AsyncCallback callback, object state)
        {
            return stop1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndStop1(this System.Windows.Forms.WebBrowser __control__, IAsyncResult result)
        {
            EndStop1(result);
        }
        public static void EndStop1(IAsyncResult result)
        {
            stop1Callback.EndInvoke(result);
        }
        public static Task StopAsync(this System.Windows.Forms.WebBrowser __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                (Func<System.Windows.Forms.WebBrowser, AsyncCallback, object, IAsyncResult>)BeginStop1,
                (Action<IAsyncResult>)EndStop1,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getAllowWebBrowserDropInternal = (x) => x.AllowWebBrowserDrop;
        public static System.Boolean GetAllowWebBrowserDrop(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAllowWebBrowserDropInternal, target);
            else
                return getAllowWebBrowserDropInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getAllowWebBrowserDropCallback = GetAllowWebBrowserDrop;
        public static IAsyncResult BeginGetAllowWebBrowserDrop(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getAllowWebBrowserDropCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAllowWebBrowserDrop(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetAllowWebBrowserDrop(result);
        }
        public static System.Boolean EndGetAllowWebBrowserDrop(IAsyncResult result)
        {
            return getAllowWebBrowserDropCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAllowWebBrowserDropAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetAllowWebBrowserDrop,
                EndGetAllowWebBrowserDrop,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setAllowWebBrowserDropInternal = (x, v) => x.AllowWebBrowserDrop = v;
        public static void SetAllowWebBrowserDrop(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAllowWebBrowserDropInternal, target, value);
            else
                setAllowWebBrowserDropInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setAllowWebBrowserDropCallback = SetAllowWebBrowserDrop;
        public static IAsyncResult BeginSetAllowWebBrowserDrop(this System.Windows.Forms.WebBrowser target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAllowWebBrowserDropCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAllowWebBrowserDrop(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            EndSetAllowWebBrowserDrop(result);
        }
        public static void EndSetAllowWebBrowserDrop(IAsyncResult result)
        {
            setAllowWebBrowserDropCallback.EndInvoke(result);
        }
        public static Task SetAllowWebBrowserDropAsync(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Boolean>(
                BeginSetAllowWebBrowserDrop,
                EndSetAllowWebBrowserDrop,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getScriptErrorsSuppressedInternal = (x) => x.ScriptErrorsSuppressed;
        public static System.Boolean GetScriptErrorsSuppressed(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getScriptErrorsSuppressedInternal, target);
            else
                return getScriptErrorsSuppressedInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getScriptErrorsSuppressedCallback = GetScriptErrorsSuppressed;
        public static IAsyncResult BeginGetScriptErrorsSuppressed(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getScriptErrorsSuppressedCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetScriptErrorsSuppressed(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetScriptErrorsSuppressed(result);
        }
        public static System.Boolean EndGetScriptErrorsSuppressed(IAsyncResult result)
        {
            return getScriptErrorsSuppressedCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetScriptErrorsSuppressedAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetScriptErrorsSuppressed,
                EndGetScriptErrorsSuppressed,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setScriptErrorsSuppressedInternal = (x, v) => x.ScriptErrorsSuppressed = v;
        public static void SetScriptErrorsSuppressed(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setScriptErrorsSuppressedInternal, target, value);
            else
                setScriptErrorsSuppressedInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setScriptErrorsSuppressedCallback = SetScriptErrorsSuppressed;
        public static IAsyncResult BeginSetScriptErrorsSuppressed(this System.Windows.Forms.WebBrowser target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setScriptErrorsSuppressedCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetScriptErrorsSuppressed(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            EndSetScriptErrorsSuppressed(result);
        }
        public static void EndSetScriptErrorsSuppressed(IAsyncResult result)
        {
            setScriptErrorsSuppressedCallback.EndInvoke(result);
        }
        public static Task SetScriptErrorsSuppressedAsync(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Boolean>(
                BeginSetScriptErrorsSuppressed,
                EndSetScriptErrorsSuppressed,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getWebBrowserShortcutsEnabledInternal = (x) => x.WebBrowserShortcutsEnabled;
        public static System.Boolean GetWebBrowserShortcutsEnabled(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getWebBrowserShortcutsEnabledInternal, target);
            else
                return getWebBrowserShortcutsEnabledInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getWebBrowserShortcutsEnabledCallback = GetWebBrowserShortcutsEnabled;
        public static IAsyncResult BeginGetWebBrowserShortcutsEnabled(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getWebBrowserShortcutsEnabledCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetWebBrowserShortcutsEnabled(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetWebBrowserShortcutsEnabled(result);
        }
        public static System.Boolean EndGetWebBrowserShortcutsEnabled(IAsyncResult result)
        {
            return getWebBrowserShortcutsEnabledCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetWebBrowserShortcutsEnabledAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetWebBrowserShortcutsEnabled,
                EndGetWebBrowserShortcutsEnabled,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setWebBrowserShortcutsEnabledInternal = (x, v) => x.WebBrowserShortcutsEnabled = v;
        public static void SetWebBrowserShortcutsEnabled(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setWebBrowserShortcutsEnabledInternal, target, value);
            else
                setWebBrowserShortcutsEnabledInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setWebBrowserShortcutsEnabledCallback = SetWebBrowserShortcutsEnabled;
        public static IAsyncResult BeginSetWebBrowserShortcutsEnabled(this System.Windows.Forms.WebBrowser target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setWebBrowserShortcutsEnabledCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetWebBrowserShortcutsEnabled(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            EndSetWebBrowserShortcutsEnabled(result);
        }
        public static void EndSetWebBrowserShortcutsEnabled(IAsyncResult result)
        {
            setWebBrowserShortcutsEnabledCallback.EndInvoke(result);
        }
        public static Task SetWebBrowserShortcutsEnabledAsync(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Boolean>(
                BeginSetWebBrowserShortcutsEnabled,
                EndSetWebBrowserShortcutsEnabled,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getCanGoBackInternal = (x) => x.CanGoBack;
        public static System.Boolean GetCanGoBack(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCanGoBackInternal, target);
            else
                return getCanGoBackInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getCanGoBackCallback = GetCanGoBack;
        public static IAsyncResult BeginGetCanGoBack(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getCanGoBackCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCanGoBack(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetCanGoBack(result);
        }
        public static System.Boolean EndGetCanGoBack(IAsyncResult result)
        {
            return getCanGoBackCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCanGoBackAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetCanGoBack,
                EndGetCanGoBack,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getCanGoForwardInternal = (x) => x.CanGoForward;
        public static System.Boolean GetCanGoForward(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getCanGoForwardInternal, target);
            else
                return getCanGoForwardInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getCanGoForwardCallback = GetCanGoForward;
        public static IAsyncResult BeginGetCanGoForward(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getCanGoForwardCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetCanGoForward(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetCanGoForward(result);
        }
        public static System.Boolean EndGetCanGoForward(IAsyncResult result)
        {
            return getCanGoForwardCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetCanGoForwardAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetCanGoForward,
                EndGetCanGoForward,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.IO.Stream> getDocumentStreamInternal = (x) => x.DocumentStream;
        public static System.IO.Stream GetDocumentStream(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.IO.Stream)target.Invoke(getDocumentStreamInternal, target);
            else
                return getDocumentStreamInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.IO.Stream> getDocumentStreamCallback = GetDocumentStream;
        public static IAsyncResult BeginGetDocumentStream(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getDocumentStreamCallback.BeginInvoke(target, callback, state);
        }
        public static System.IO.Stream EndGetDocumentStream(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetDocumentStream(result);
        }
        public static System.IO.Stream EndGetDocumentStream(IAsyncResult result)
        {
            return getDocumentStreamCallback.EndInvoke(result);
        }
        public static Task<System.IO.Stream> GetDocumentStreamAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.IO.Stream>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetDocumentStream,
                EndGetDocumentStream,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.IO.Stream> setDocumentStreamInternal = (x, v) => x.DocumentStream = v;
        public static void SetDocumentStream(this System.Windows.Forms.WebBrowser target, System.IO.Stream value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDocumentStreamInternal, target, value);
            else
                setDocumentStreamInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.IO.Stream> setDocumentStreamCallback = SetDocumentStream;
        public static IAsyncResult BeginSetDocumentStream(this System.Windows.Forms.WebBrowser target, System.IO.Stream value, AsyncCallback callback, object state)
        {
            return setDocumentStreamCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDocumentStream(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            EndSetDocumentStream(result);
        }
        public static void EndSetDocumentStream(IAsyncResult result)
        {
            setDocumentStreamCallback.EndInvoke(result);
        }
        public static Task SetDocumentStreamAsync(this System.Windows.Forms.WebBrowser target, System.IO.Stream value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.IO.Stream>(
                BeginSetDocumentStream,
                EndSetDocumentStream,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.String> getDocumentTextInternal = (x) => x.DocumentText;
        public static System.String GetDocumentText(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getDocumentTextInternal, target);
            else
                return getDocumentTextInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.String> getDocumentTextCallback = GetDocumentText;
        public static IAsyncResult BeginGetDocumentText(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getDocumentTextCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetDocumentText(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetDocumentText(result);
        }
        public static System.String EndGetDocumentText(IAsyncResult result)
        {
            return getDocumentTextCallback.EndInvoke(result);
        }
        public static Task<System.String> GetDocumentTextAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetDocumentText,
                EndGetDocumentText,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.String> setDocumentTextInternal = (x, v) => x.DocumentText = v;
        public static void SetDocumentText(this System.Windows.Forms.WebBrowser target, System.String value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setDocumentTextInternal, target, value);
            else
                setDocumentTextInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.String> setDocumentTextCallback = SetDocumentText;
        public static IAsyncResult BeginSetDocumentText(this System.Windows.Forms.WebBrowser target, System.String value, AsyncCallback callback, object state)
        {
            return setDocumentTextCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetDocumentText(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            EndSetDocumentText(result);
        }
        public static void EndSetDocumentText(IAsyncResult result)
        {
            setDocumentTextCallback.EndInvoke(result);
        }
        public static Task SetDocumentTextAsync(this System.Windows.Forms.WebBrowser target, System.String value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.String>(
                BeginSetDocumentText,
                EndSetDocumentText,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.String> getDocumentTitleInternal = (x) => x.DocumentTitle;
        public static System.String GetDocumentTitle(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getDocumentTitleInternal, target);
            else
                return getDocumentTitleInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.String> getDocumentTitleCallback = GetDocumentTitle;
        public static IAsyncResult BeginGetDocumentTitle(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getDocumentTitleCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetDocumentTitle(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetDocumentTitle(result);
        }
        public static System.String EndGetDocumentTitle(IAsyncResult result)
        {
            return getDocumentTitleCallback.EndInvoke(result);
        }
        public static Task<System.String> GetDocumentTitleAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetDocumentTitle,
                EndGetDocumentTitle,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.String> getDocumentTypeInternal = (x) => x.DocumentType;
        public static System.String GetDocumentType(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getDocumentTypeInternal, target);
            else
                return getDocumentTypeInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.String> getDocumentTypeCallback = GetDocumentType;
        public static IAsyncResult BeginGetDocumentType(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getDocumentTypeCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetDocumentType(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetDocumentType(result);
        }
        public static System.String EndGetDocumentType(IAsyncResult result)
        {
            return getDocumentTypeCallback.EndInvoke(result);
        }
        public static Task<System.String> GetDocumentTypeAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetDocumentType,
                EndGetDocumentType,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Windows.Forms.WebBrowserEncryptionLevel> getEncryptionLevelInternal = (x) => x.EncryptionLevel;
        public static System.Windows.Forms.WebBrowserEncryptionLevel GetEncryptionLevel(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.WebBrowserEncryptionLevel)target.Invoke(getEncryptionLevelInternal, target);
            else
                return getEncryptionLevelInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Windows.Forms.WebBrowserEncryptionLevel> getEncryptionLevelCallback = GetEncryptionLevel;
        public static IAsyncResult BeginGetEncryptionLevel(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getEncryptionLevelCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.WebBrowserEncryptionLevel EndGetEncryptionLevel(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetEncryptionLevel(result);
        }
        public static System.Windows.Forms.WebBrowserEncryptionLevel EndGetEncryptionLevel(IAsyncResult result)
        {
            return getEncryptionLevelCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.WebBrowserEncryptionLevel> GetEncryptionLevelAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Windows.Forms.WebBrowserEncryptionLevel>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetEncryptionLevel,
                EndGetEncryptionLevel,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getIsBusyInternal = (x) => x.IsBusy;
        public static System.Boolean GetIsBusy(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsBusyInternal, target);
            else
                return getIsBusyInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getIsBusyCallback = GetIsBusy;
        public static IAsyncResult BeginGetIsBusy(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getIsBusyCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsBusy(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetIsBusy(result);
        }
        public static System.Boolean EndGetIsBusy(IAsyncResult result)
        {
            return getIsBusyCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsBusyAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetIsBusy,
                EndGetIsBusy,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getIsOfflineInternal = (x) => x.IsOffline;
        public static System.Boolean GetIsOffline(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsOfflineInternal, target);
            else
                return getIsOfflineInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getIsOfflineCallback = GetIsOffline;
        public static IAsyncResult BeginGetIsOffline(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getIsOfflineCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsOffline(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetIsOffline(result);
        }
        public static System.Boolean EndGetIsOffline(IAsyncResult result)
        {
            return getIsOfflineCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsOfflineAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetIsOffline,
                EndGetIsOffline,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getIsWebBrowserContextMenuEnabledInternal = (x) => x.IsWebBrowserContextMenuEnabled;
        public static System.Boolean GetIsWebBrowserContextMenuEnabled(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getIsWebBrowserContextMenuEnabledInternal, target);
            else
                return getIsWebBrowserContextMenuEnabledInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getIsWebBrowserContextMenuEnabledCallback = GetIsWebBrowserContextMenuEnabled;
        public static IAsyncResult BeginGetIsWebBrowserContextMenuEnabled(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getIsWebBrowserContextMenuEnabledCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetIsWebBrowserContextMenuEnabled(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetIsWebBrowserContextMenuEnabled(result);
        }
        public static System.Boolean EndGetIsWebBrowserContextMenuEnabled(IAsyncResult result)
        {
            return getIsWebBrowserContextMenuEnabledCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetIsWebBrowserContextMenuEnabledAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetIsWebBrowserContextMenuEnabled,
                EndGetIsWebBrowserContextMenuEnabled,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setIsWebBrowserContextMenuEnabledInternal = (x, v) => x.IsWebBrowserContextMenuEnabled = v;
        public static void SetIsWebBrowserContextMenuEnabled(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setIsWebBrowserContextMenuEnabledInternal, target, value);
            else
                setIsWebBrowserContextMenuEnabledInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setIsWebBrowserContextMenuEnabledCallback = SetIsWebBrowserContextMenuEnabled;
        public static IAsyncResult BeginSetIsWebBrowserContextMenuEnabled(this System.Windows.Forms.WebBrowser target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setIsWebBrowserContextMenuEnabledCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetIsWebBrowserContextMenuEnabled(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            EndSetIsWebBrowserContextMenuEnabled(result);
        }
        public static void EndSetIsWebBrowserContextMenuEnabled(IAsyncResult result)
        {
            setIsWebBrowserContextMenuEnabledCallback.EndInvoke(result);
        }
        public static Task SetIsWebBrowserContextMenuEnabledAsync(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Boolean>(
                BeginSetIsWebBrowserContextMenuEnabled,
                EndSetIsWebBrowserContextMenuEnabled,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Object> getObjectForScriptingInternal = (x) => x.ObjectForScripting;
        public static System.Object GetObjectForScripting(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Object)target.Invoke(getObjectForScriptingInternal, target);
            else
                return getObjectForScriptingInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Object> getObjectForScriptingCallback = GetObjectForScripting;
        public static IAsyncResult BeginGetObjectForScripting(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getObjectForScriptingCallback.BeginInvoke(target, callback, state);
        }
        public static System.Object EndGetObjectForScripting(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetObjectForScripting(result);
        }
        public static System.Object EndGetObjectForScripting(IAsyncResult result)
        {
            return getObjectForScriptingCallback.EndInvoke(result);
        }
        public static Task<System.Object> GetObjectForScriptingAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Object>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetObjectForScripting,
                EndGetObjectForScripting,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Object> setObjectForScriptingInternal = (x, v) => x.ObjectForScripting = v;
        public static void SetObjectForScripting(this System.Windows.Forms.WebBrowser target, System.Object value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setObjectForScriptingInternal, target, value);
            else
                setObjectForScriptingInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Object> setObjectForScriptingCallback = SetObjectForScripting;
        public static IAsyncResult BeginSetObjectForScripting(this System.Windows.Forms.WebBrowser target, System.Object value, AsyncCallback callback, object state)
        {
            return setObjectForScriptingCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetObjectForScripting(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            EndSetObjectForScripting(result);
        }
        public static void EndSetObjectForScripting(IAsyncResult result)
        {
            setObjectForScriptingCallback.EndInvoke(result);
        }
        public static Task SetObjectForScriptingAsync(this System.Windows.Forms.WebBrowser target, System.Object value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Object>(
                BeginSetObjectForScripting,
                EndSetObjectForScripting,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Windows.Forms.WebBrowserReadyState> getReadyStateInternal = (x) => x.ReadyState;
        public static System.Windows.Forms.WebBrowserReadyState GetReadyState(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Windows.Forms.WebBrowserReadyState)target.Invoke(getReadyStateInternal, target);
            else
                return getReadyStateInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Windows.Forms.WebBrowserReadyState> getReadyStateCallback = GetReadyState;
        public static IAsyncResult BeginGetReadyState(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getReadyStateCallback.BeginInvoke(target, callback, state);
        }
        public static System.Windows.Forms.WebBrowserReadyState EndGetReadyState(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetReadyState(result);
        }
        public static System.Windows.Forms.WebBrowserReadyState EndGetReadyState(IAsyncResult result)
        {
            return getReadyStateCallback.EndInvoke(result);
        }
        public static Task<System.Windows.Forms.WebBrowserReadyState> GetReadyStateAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Windows.Forms.WebBrowserReadyState>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetReadyState,
                EndGetReadyState,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.String> getStatusTextInternal = (x) => x.StatusText;
        public static System.String GetStatusText(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.String)target.Invoke(getStatusTextInternal, target);
            else
                return getStatusTextInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.String> getStatusTextCallback = GetStatusText;
        public static IAsyncResult BeginGetStatusText(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getStatusTextCallback.BeginInvoke(target, callback, state);
        }
        public static System.String EndGetStatusText(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetStatusText(result);
        }
        public static System.String EndGetStatusText(IAsyncResult result)
        {
            return getStatusTextCallback.EndInvoke(result);
        }
        public static Task<System.String> GetStatusTextAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.String>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetStatusText,
                EndGetStatusText,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Uri> getUrlInternal = (x) => x.Url;
        public static System.Uri GetUrl(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Uri)target.Invoke(getUrlInternal, target);
            else
                return getUrlInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Uri> getUrlCallback = GetUrl;
        public static IAsyncResult BeginGetUrl(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getUrlCallback.BeginInvoke(target, callback, state);
        }
        public static System.Uri EndGetUrl(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetUrl(result);
        }
        public static System.Uri EndGetUrl(IAsyncResult result)
        {
            return getUrlCallback.EndInvoke(result);
        }
        public static Task<System.Uri> GetUrlAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Uri>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetUrl,
                EndGetUrl,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri> setUrlInternal = (x, v) => x.Url = v;
        public static void SetUrl(this System.Windows.Forms.WebBrowser target, System.Uri value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setUrlInternal, target, value);
            else
                setUrlInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Uri> setUrlCallback = SetUrl;
        public static IAsyncResult BeginSetUrl(this System.Windows.Forms.WebBrowser target, System.Uri value, AsyncCallback callback, object state)
        {
            return setUrlCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetUrl(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            EndSetUrl(result);
        }
        public static void EndSetUrl(IAsyncResult result)
        {
            setUrlCallback.EndInvoke(result);
        }
        public static Task SetUrlAsync(this System.Windows.Forms.WebBrowser target, System.Uri value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Uri>(
                BeginSetUrl,
                EndSetUrl,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Version> getVersionInternal = (x) => x.Version;
        public static System.Version GetVersion(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Version)target.Invoke(getVersionInternal, target);
            else
                return getVersionInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Version> getVersionCallback = GetVersion;
        public static IAsyncResult BeginGetVersion(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getVersionCallback.BeginInvoke(target, callback, state);
        }
        public static System.Version EndGetVersion(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetVersion(result);
        }
        public static System.Version EndGetVersion(IAsyncResult result)
        {
            return getVersionCallback.EndInvoke(result);
        }
        public static Task<System.Version> GetVersionAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Version>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetVersion,
                EndGetVersion,
                target, null);
        }

        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getScrollBarsEnabledInternal = (x) => x.ScrollBarsEnabled;
        public static System.Boolean GetScrollBarsEnabled(this System.Windows.Forms.WebBrowser target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getScrollBarsEnabledInternal, target);
            else
                return getScrollBarsEnabledInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.WebBrowser, System.Boolean> getScrollBarsEnabledCallback = GetScrollBarsEnabled;
        public static IAsyncResult BeginGetScrollBarsEnabled(this System.Windows.Forms.WebBrowser target, AsyncCallback callback, object state)
        {
            return getScrollBarsEnabledCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetScrollBarsEnabled(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            return EndGetScrollBarsEnabled(result);
        }
        public static System.Boolean EndGetScrollBarsEnabled(IAsyncResult result)
        {
            return getScrollBarsEnabledCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetScrollBarsEnabledAsync(this System.Windows.Forms.WebBrowser target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.WebBrowser>(
                BeginGetScrollBarsEnabled,
                EndGetScrollBarsEnabled,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setScrollBarsEnabledInternal = (x, v) => x.ScrollBarsEnabled = v;
        public static void SetScrollBarsEnabled(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setScrollBarsEnabledInternal, target, value);
            else
                setScrollBarsEnabledInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.WebBrowser, System.Boolean> setScrollBarsEnabledCallback = SetScrollBarsEnabled;
        public static IAsyncResult BeginSetScrollBarsEnabled(this System.Windows.Forms.WebBrowser target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setScrollBarsEnabledCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetScrollBarsEnabled(this System.Windows.Forms.WebBrowser target, IAsyncResult result)
        {
            EndSetScrollBarsEnabled(result);
        }
        public static void EndSetScrollBarsEnabled(IAsyncResult result)
        {
            setScrollBarsEnabledCallback.EndInvoke(result);
        }
        public static Task SetScrollBarsEnabledAsync(this System.Windows.Forms.WebBrowser target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.WebBrowser, System.Boolean>(
                BeginSetScrollBarsEnabled,
                EndSetScrollBarsEnabled,
                target, value, null);
        }


        private static readonly Action<System.Windows.Forms.PrintPreviewControl> invalidatePreview1Internal = (c) => c.InvalidatePreview();
        public static void InvalidatePreview(this System.Windows.Forms.PrintPreviewControl __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(invalidatePreview1Internal, __control__);
            else
                invalidatePreview1Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PrintPreviewControl> invalidatePreview1Callback = InvalidatePreview;
        public static IAsyncResult BeginInvalidatePreview1(this System.Windows.Forms.PrintPreviewControl __control__, AsyncCallback callback, object state)
        {
            return invalidatePreview1Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndInvalidatePreview1(this System.Windows.Forms.PrintPreviewControl __control__, IAsyncResult result)
        {
            EndInvalidatePreview1(result);
        }
        public static void EndInvalidatePreview1(IAsyncResult result)
        {
            invalidatePreview1Callback.EndInvoke(result);
        }
        public static Task InvalidatePreviewAsync(this System.Windows.Forms.PrintPreviewControl __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PrintPreviewControl>(
                (Func<System.Windows.Forms.PrintPreviewControl, AsyncCallback, object, IAsyncResult>)BeginInvalidatePreview1,
                (Action<IAsyncResult>)EndInvalidatePreview1,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PrintPreviewControl> resetBackColor4Internal = (c) => c.ResetBackColor();
        public static void ResetBackColor(this System.Windows.Forms.PrintPreviewControl __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetBackColor4Internal, __control__);
            else
                resetBackColor4Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PrintPreviewControl> resetBackColor4Callback = ResetBackColor;
        public static IAsyncResult BeginResetBackColor4(this System.Windows.Forms.PrintPreviewControl __control__, AsyncCallback callback, object state)
        {
            return resetBackColor4Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetBackColor4(this System.Windows.Forms.PrintPreviewControl __control__, IAsyncResult result)
        {
            EndResetBackColor4(result);
        }
        public static void EndResetBackColor4(IAsyncResult result)
        {
            resetBackColor4Callback.EndInvoke(result);
        }
        public static Task ResetBackColorAsync(this System.Windows.Forms.PrintPreviewControl __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PrintPreviewControl>(
                (Func<System.Windows.Forms.PrintPreviewControl, AsyncCallback, object, IAsyncResult>)BeginResetBackColor4,
                (Action<IAsyncResult>)EndResetBackColor4,
                __control__, null, TaskCreationOptions.None);
        }

        private static readonly Action<System.Windows.Forms.PrintPreviewControl> resetForeColor5Internal = (c) => c.ResetForeColor();
        public static void ResetForeColor(this System.Windows.Forms.PrintPreviewControl __control__)
        {
            if (__control__ == null)
                throw new ArgumentNullException("__control__");
            if (__control__.InvokeRequired)
                __control__.Invoke(resetForeColor5Internal, __control__);
            else
                resetForeColor5Internal.Invoke(__control__);
        }
        private static readonly Action<System.Windows.Forms.PrintPreviewControl> resetForeColor5Callback = ResetForeColor;
        public static IAsyncResult BeginResetForeColor5(this System.Windows.Forms.PrintPreviewControl __control__, AsyncCallback callback, object state)
        {
            return resetForeColor5Callback.BeginInvoke(__control__, callback, state);
        }
        public static void EndResetForeColor5(this System.Windows.Forms.PrintPreviewControl __control__, IAsyncResult result)
        {
            EndResetForeColor5(result);
        }
        public static void EndResetForeColor5(IAsyncResult result)
        {
            resetForeColor5Callback.EndInvoke(result);
        }
        public static Task ResetForeColorAsync(this System.Windows.Forms.PrintPreviewControl __control__)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PrintPreviewControl>(
                (Func<System.Windows.Forms.PrintPreviewControl, AsyncCallback, object, IAsyncResult>)BeginResetForeColor5,
                (Action<IAsyncResult>)EndResetForeColor5,
                __control__, null, TaskCreationOptions.None);
        }
        private static readonly Func<System.Windows.Forms.PrintPreviewControl, System.Boolean> getAutoZoomInternal = (x) => x.AutoZoom;
        public static System.Boolean GetAutoZoom(this System.Windows.Forms.PrintPreviewControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Boolean)target.Invoke(getAutoZoomInternal, target);
            else
                return getAutoZoomInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PrintPreviewControl, System.Boolean> getAutoZoomCallback = GetAutoZoom;
        public static IAsyncResult BeginGetAutoZoom(this System.Windows.Forms.PrintPreviewControl target, AsyncCallback callback, object state)
        {
            return getAutoZoomCallback.BeginInvoke(target, callback, state);
        }
        public static System.Boolean EndGetAutoZoom(this System.Windows.Forms.PrintPreviewControl target, IAsyncResult result)
        {
            return EndGetAutoZoom(result);
        }
        public static System.Boolean EndGetAutoZoom(IAsyncResult result)
        {
            return getAutoZoomCallback.EndInvoke(result);
        }
        public static Task<System.Boolean> GetAutoZoomAsync(this System.Windows.Forms.PrintPreviewControl target)
        {
            return Task<System.Boolean>.Factory.FromAsync<System.Windows.Forms.PrintPreviewControl>(
                BeginGetAutoZoom,
                EndGetAutoZoom,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PrintPreviewControl, System.Boolean> setAutoZoomInternal = (x, v) => x.AutoZoom = v;
        public static void SetAutoZoom(this System.Windows.Forms.PrintPreviewControl target, System.Boolean value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setAutoZoomInternal, target, value);
            else
                setAutoZoomInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PrintPreviewControl, System.Boolean> setAutoZoomCallback = SetAutoZoom;
        public static IAsyncResult BeginSetAutoZoom(this System.Windows.Forms.PrintPreviewControl target, System.Boolean value, AsyncCallback callback, object state)
        {
            return setAutoZoomCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetAutoZoom(this System.Windows.Forms.PrintPreviewControl target, IAsyncResult result)
        {
            EndSetAutoZoom(result);
        }
        public static void EndSetAutoZoom(IAsyncResult result)
        {
            setAutoZoomCallback.EndInvoke(result);
        }
        public static Task SetAutoZoomAsync(this System.Windows.Forms.PrintPreviewControl target, System.Boolean value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PrintPreviewControl, System.Boolean>(
                BeginSetAutoZoom,
                EndSetAutoZoom,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PrintPreviewControl, System.Int32> getStartPageInternal = (x) => x.StartPage;
        public static System.Int32 GetStartPage(this System.Windows.Forms.PrintPreviewControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Int32)target.Invoke(getStartPageInternal, target);
            else
                return getStartPageInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PrintPreviewControl, System.Int32> getStartPageCallback = GetStartPage;
        public static IAsyncResult BeginGetStartPage(this System.Windows.Forms.PrintPreviewControl target, AsyncCallback callback, object state)
        {
            return getStartPageCallback.BeginInvoke(target, callback, state);
        }
        public static System.Int32 EndGetStartPage(this System.Windows.Forms.PrintPreviewControl target, IAsyncResult result)
        {
            return EndGetStartPage(result);
        }
        public static System.Int32 EndGetStartPage(IAsyncResult result)
        {
            return getStartPageCallback.EndInvoke(result);
        }
        public static Task<System.Int32> GetStartPageAsync(this System.Windows.Forms.PrintPreviewControl target)
        {
            return Task<System.Int32>.Factory.FromAsync<System.Windows.Forms.PrintPreviewControl>(
                BeginGetStartPage,
                EndGetStartPage,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PrintPreviewControl, System.Int32> setStartPageInternal = (x, v) => x.StartPage = v;
        public static void SetStartPage(this System.Windows.Forms.PrintPreviewControl target, System.Int32 value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setStartPageInternal, target, value);
            else
                setStartPageInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PrintPreviewControl, System.Int32> setStartPageCallback = SetStartPage;
        public static IAsyncResult BeginSetStartPage(this System.Windows.Forms.PrintPreviewControl target, System.Int32 value, AsyncCallback callback, object state)
        {
            return setStartPageCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetStartPage(this System.Windows.Forms.PrintPreviewControl target, IAsyncResult result)
        {
            EndSetStartPage(result);
        }
        public static void EndSetStartPage(IAsyncResult result)
        {
            setStartPageCallback.EndInvoke(result);
        }
        public static Task SetStartPageAsync(this System.Windows.Forms.PrintPreviewControl target, System.Int32 value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PrintPreviewControl, System.Int32>(
                BeginSetStartPage,
                EndSetStartPage,
                target, value, null);
        }

        private static readonly Func<System.Windows.Forms.PrintPreviewControl, System.Double> getZoomInternal = (x) => x.Zoom;
        public static System.Double GetZoom(this System.Windows.Forms.PrintPreviewControl target)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                return (System.Double)target.Invoke(getZoomInternal, target);
            else
                return getZoomInternal.Invoke(target);
        }
        private static readonly Func<System.Windows.Forms.PrintPreviewControl, System.Double> getZoomCallback = GetZoom;
        public static IAsyncResult BeginGetZoom(this System.Windows.Forms.PrintPreviewControl target, AsyncCallback callback, object state)
        {
            return getZoomCallback.BeginInvoke(target, callback, state);
        }
        public static System.Double EndGetZoom(this System.Windows.Forms.PrintPreviewControl target, IAsyncResult result)
        {
            return EndGetZoom(result);
        }
        public static System.Double EndGetZoom(IAsyncResult result)
        {
            return getZoomCallback.EndInvoke(result);
        }
        public static Task<System.Double> GetZoomAsync(this System.Windows.Forms.PrintPreviewControl target)
        {
            return Task<System.Double>.Factory.FromAsync<System.Windows.Forms.PrintPreviewControl>(
                BeginGetZoom,
                EndGetZoom,
                target, null);
        }

        private static readonly Action<System.Windows.Forms.PrintPreviewControl, System.Double> setZoomInternal = (x, v) => x.Zoom = v;
        public static void SetZoom(this System.Windows.Forms.PrintPreviewControl target, System.Double value)
        {
            if (target == null)
                throw new ArgumentNullException("target");
            if (target.InvokeRequired)
                target.Invoke(setZoomInternal, target, value);
            else
                setZoomInternal.Invoke(target, value);
        }
        private static readonly Action<System.Windows.Forms.PrintPreviewControl, System.Double> setZoomCallback = SetZoom;
        public static IAsyncResult BeginSetZoom(this System.Windows.Forms.PrintPreviewControl target, System.Double value, AsyncCallback callback, object state)
        {
            return setZoomCallback.BeginInvoke(target, value, callback, state);
        }
        public static void EndSetZoom(this System.Windows.Forms.PrintPreviewControl target, IAsyncResult result)
        {
            EndSetZoom(result);
        }
        public static void EndSetZoom(IAsyncResult result)
        {
            setZoomCallback.EndInvoke(result);
        }
        public static Task SetZoomAsync(this System.Windows.Forms.PrintPreviewControl target, System.Double value)
        {
            return Task.Factory.FromAsync<System.Windows.Forms.PrintPreviewControl, System.Double>(
                BeginSetZoom,
                EndSetZoom,
                target, value, null);
        }

    }

    partial class WFAsyncExtensions
    {
        public static TResult GetPropertyValue<TResult>(this Control c, string propertyName)
        {
            if (c == null)
                throw new ArgumentNullException("c");
            if (String.IsNullOrWhiteSpace(propertyName))
                throw new ArgumentNullException("propertyName");
            Func<Control, string, TResult> callback =
                (x, propName) =>
                {
                    Type targetType = x.GetType();
                    System.Reflection.PropertyInfo targetProperty = targetType.GetProperty(propName);
                    if (targetProperty == null)
                        throw new InvalidOperationException("Selected property does not exists.");
                    if (!targetProperty.CanRead)
                        throw new InvalidOperationException("Selected property does not support read function.");
                    return (TResult)targetProperty.GetValue(x, (object[])null);
                };
            if (c.InvokeRequired)
                return (TResult)c.Invoke(callback, c, propertyName);
            else
                return callback.Invoke(c, propertyName);
        }

        public static TResult TryGetPropertyValue<TResult>(this Control c, string propertyName)
        {
            if (c == null)
                return default(TResult);
            if (String.IsNullOrWhiteSpace(propertyName))
                return default(TResult);
            Func<Control, string, TResult> callback =
                (x, propName) =>
                {
                    try
                    {
                        Type targetType = x.GetType();
                        System.Reflection.PropertyInfo targetProperty = targetType.GetProperty(propName);
                        if (targetProperty == null)
                            return default(TResult);
                        if (!targetProperty.CanRead)
                            return default(TResult);
                        return (TResult)targetProperty.GetValue(x, (object[])null);
                    }
                    catch
                    {
                        return default(TResult);
                    }
                };
            if (c.InvokeRequired)
                return (TResult)c.Invoke(callback, c, propertyName);
            else
                return callback.Invoke(c, propertyName);
        }

        public static void SetPropertyValue<TValue>(this Control c, string propertyName, TValue value)
        {
            if (c == null)
                throw new ArgumentNullException("c");
            if (String.IsNullOrWhiteSpace(propertyName))
                throw new ArgumentNullException("propertyName");
            Action<Control, string, TValue> callback =
                (x, propName, v) =>
                {
                    Type targetType = x.GetType();
                    System.Reflection.PropertyInfo targetProperty = targetType.GetProperty(propName);
                    if (targetProperty == null)
                        throw new InvalidOperationException("Selected property does not exists.");
                    if (!targetProperty.CanWrite)
                        throw new InvalidOperationException("Selected property does not support write function.");
                    targetProperty.SetValue(x, v, (object[])null);
                };
            if (c.InvokeRequired)
                c.Invoke(callback, c, propertyName, value);
            else
                callback.Invoke(c, propertyName, value);
        }

        public static void TrySetPropertyValue<TValue>(this Control c, string propertyName, TValue value)
        {
            if (c == null)
                return;
            if (String.IsNullOrWhiteSpace(propertyName))
                return;
            Action<Control, string, TValue> callback =
                (x, propName, v) =>
                {
                    try
                    {
                        Type targetType = x.GetType();
                        System.Reflection.PropertyInfo targetProperty = targetType.GetProperty(propName);
                        if (targetProperty == null)
                            return;
                        if (!targetProperty.CanWrite)
                            return;
                        targetProperty.SetValue(x, v, (object[])null);
                    }
                    catch { return; }
                };
            if (c.InvokeRequired)
                c.Invoke(callback, c, propertyName, value);
            else
                callback.Invoke(c, propertyName, value);
        }
    }
}
